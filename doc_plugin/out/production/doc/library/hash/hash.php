<?php

// Start of hash v.1.0

/**
*<div id="function.hash" class="refentry">  <div class="refnamediv">   <h1 class="refname">hash</h1>   <p class="verinfo">(PHP 5 &gt;= 5.1.2, PHP 7, PECL hash &gt;= 1.1)</p><p class="refpurpose"><span class="refname">hash</span> &mdash; <span class="dc-title">生成哈希值 （消息摘要）</span></p>   </div>  <div class="refsect1 description" id="refsect1-function.hash-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">string</span> <span class="methodname"><strong>hash</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$algo</code></span>    , <span class="methodparam"><span class="type">string</span> <code class="parameter">$data</code></span>    [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$raw_output</code><span class="initializer"> = <strong><code>FALSE</code></strong></span></span>   ] )</div>    </div>   <div class="refsect1 parameters" id="refsect1-function.hash-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">algo</code></dt>       <dd>        <p class="para">        要使用的哈希算法，例如：&quot;md5&quot;，&quot;sha256&quot;，&quot;haval160,4&quot; 等。       </p>      </dd>                 <dt> <code class="parameter">data</code></dt>       <dd>        <p class="para">        要进行哈希运算的消息。       </p>      </dd>                 <dt> <code class="parameter">raw_output</code></dt>       <dd>        <p class="para">        设置为 <strong><code>TRUE</code></strong> 输出原始二进制数据，        设置为 <strong><code>FALSE</code></strong> 输出小写 16 进制字符串。       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.hash-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    如果 <code class="parameter">raw_output</code> 设置为 <strong><code>TRUE</code></strong>， 则返回原始二进制数据表示的信息摘要，    否则返回 16 进制小写字符串格式表示的信息摘要。   </p>  </div>      <div class="refsect1 changelog" id="refsect1-function.hash-changelog">   <h3 class="title">更新日志</h3>   <p class="para">    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>5.4.0</td>        <td>tiger 算法使用大端（big-endian）字节序。参见下面的示例。</td>       </tr>       </tbody>         </table>    </p>  </div>    <div class="refsect1 examples" id="refsect1-function.hash-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="random-int.example.basic">     <p><strong>Example #1 一个 <span class="function"><strong>hash()</strong></span> 例程</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #9876AA">hash</span><span style="color: #007700">(</span><span style="color: #DD0000">'ripemd160'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'The&nbsp;quick&nbsp;brown&nbsp;fox&nbsp;jumped&nbsp;over&nbsp;the&nbsp;lazy&nbsp;dog.'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen"> <div class="cdata"><pre> ec457d0a974c48d5685a7efa03d137dc8bbde7e3 </pre></div>     </div>    </div>   </p>   <p class="para">    <div class="example" id="example-899">     <p><strong>Example #2 使用 PHP 5.4 或者更高版本计算 tiger 哈希值</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function&nbsp;</span><span style="color: #9876AA">old_tiger</span><span style="color: #007700">(</span><span style="color: #9876AA">$data&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">""</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$width</span><span style="color: #007700">=</span><span style="color: #9876AA">192</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$rounds&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">3</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;</span><span style="color: #9876AA">substr</span><span style="color: #007700">(<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">implode</span><span style="color: #007700">(<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">array_map</span><span style="color: #007700">(<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;(</span><span style="color: #9876AA">$h</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;</span><span style="color: #9876AA">str_pad</span><span style="color: #007700">(</span><span style="color: #9876AA">bin2hex</span><span style="color: #007700">(</span><span style="color: #9876AA">strrev</span><span style="color: #007700">(</span><span style="color: #9876AA">$h</span><span style="color: #007700">)),&nbsp;</span><span style="color: #9876AA">16</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"0"</span><span style="color: #007700">);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">str_split</span><span style="color: #007700">(</span><span style="color: #9876AA">hash</span><span style="color: #007700">(</span><span style="color: #DD0000">"tiger192,</span><span style="color: #9876AA">$rounds</span><span style="color: #DD0000">"</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$data</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">true</span><span style="color: #007700">),&nbsp;</span><span style="color: #9876AA">8</span><span style="color: #007700">)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;),<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">0</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">48</span><span style="color: #007700">-(</span><span style="color: #9876AA">192</span><span style="color: #007700">-</span><span style="color: #9876AA">$width</span><span style="color: #007700">)/</span><span style="color: #9876AA">4<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #007700">);<br />}<br />echo&nbsp;</span><span style="color: #9876AA">hash</span><span style="color: #007700">(</span><span style="color: #DD0000">'tiger192,3'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'a-string'</span><span style="color: #007700">),&nbsp;</span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />echo&nbsp;</span><span style="color: #9876AA">old_tiger</span><span style="color: #007700">(</span><span style="color: #DD0000">'a-string'</span><span style="color: #007700">),&nbsp;</span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>      <div class="example-contents"><p>以上例程在PHP 5.3中的输出：</p></div>     <div class="example-contents screen"> <div class="cdata"><pre> 146a7492719b3564094efe7abbd40a7416fd900179d02773 64359b7192746a14740ad4bb7afe4e097327d0790190fd16 </pre></div>     </div>     <div class="example-contents"><p>以上例程在PHP 5.4中的输出：</p></div>     <div class="example-contents screen"> <div class="cdata"><pre> 64359b7192746a14740ad4bb7afe4e097327d0790190fd16 146a7492719b3564094efe7abbd40a7416fd900179d02773 </pre></div>     </div>    </div>   </p>  </div>    <div class="refsect1 seealso" id="refsect1-function.hash-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link hash_file()} - 使用给定文件的内容生成哈希值</span></li>     <li class="member"><span class="function">{@link hash_hmac()} - 使用 HMAC 方法生成带有密钥的哈希值</span></li>     <li class="member"><span class="function">{@link hash_init()} - 初始化增量哈希运算上下文</span></li>     <li class="member"><span class="function">{@link md5()} - 计算字符串的 MD5 散列值</span></li>     <li class="member"><span class="function">{@link sha1()} - 计算字符串的 sha1 散列值</span></li>    </ul>   </p>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.hash.php">Hash 函数</a></div></div>
 * @return string a string containing the calculated message digest as lowercase hexits*/
function hash ($algo, $data, $raw_output = false) {}

/**
*<div id="function.hash-equals" class="refentry">  <div class="refnamediv">   <h1 class="refname">hash_equals</h1>   <p class="verinfo">(PHP 5 &gt;= 5.6.0, PHP 7)</p><p class="refpurpose"><span class="refname">hash_equals</span> &mdash; <span class="dc-title">可防止时序攻击的字符串比较</span></p>   </div>   <div class="refsect1 description" id="refsect1-function.hash-equals-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">bool</span> <span class="methodname"><strong>hash_equals</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$known_string</code></span>    , <span class="methodparam"><span class="type">string</span> <code class="parameter">$user_string</code></span>    )</div>    <p class="para rdfs-comment">    比较两个字符串，无论它们是否相等，本函数的时间消耗是恒定的。   </p>   <p class="para">    本函数可以用在需要防止时序攻击的字符串比较场景中，    例如，可以用在比较 <span class="function">{@link crypt()}</span> 密码哈希值的场景。   </p>  </div>    <div class="refsect1 parameters" id="refsect1-function.hash-equals-parameters">   <h3 class="title">参数</h3>   <dl>          <dt> <code class="parameter">known_string</code></dt>      <dd>       <p class="para">        已知长度的、要参与比较的 <span class="type"><a href="http://php.net/manual/zh/language.types.string.php" class="type string">string</a></span>       </p>     </dd>              <dt> <code class="parameter">user_string</code></dt>      <dd>       <p class="para">       用户提供的字符串      </p>     </dd>        </dl>   </div>    <div class="refsect1 returnvalues" id="refsect1-function.hash-equals-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    当两个字符串相等时返回 <strong><code>TRUE</code></strong>，否则返回 <strong><code>FALSE</code></strong>。   </p>  </div>    <div class="refsect1 errors" id="refsect1-function.hash-equals-errors">   <h3 class="title">错误／异常</h3>   <p class="para">    如果所提供的 2 个参数中任何一个不是字符串，    会导致 <strong><code>E_WARNING</code></strong> 消息。   </p>  </div>    <div class="refsect1 examples" id="refsect1-function.hash-equals-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-888">     <p><strong>Example #1 <span class="function"><strong>hash_equals()</strong></span> 例程</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$expected&nbsp;&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">crypt</span><span style="color: #007700">(</span><span style="color: #DD0000">'12345'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'$2a$07$usesomesillystringforsalt$'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$correct&nbsp;&nbsp;&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">crypt</span><span style="color: #007700">(</span><span style="color: #DD0000">'12345'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'$2a$07$usesomesillystringforsalt$'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$incorrect&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">crypt</span><span style="color: #007700">(</span><span style="color: #DD0000">'apple'</span><span style="color: #007700">,&nbsp;&nbsp;</span><span style="color: #DD0000">'$2a$07$usesomesillystringforsalt$'</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">hash_equals</span><span style="color: #007700">(</span><span style="color: #9876AA">$expected</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$correct</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">hash_equals</span><span style="color: #007700">(</span><span style="color: #9876AA">$expected</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$incorrect</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen"> <div class="cdata"><pre> bool(true) bool(false) </pre></div>     </div>    </div>   </p>  </div>    <div class="refsect1 notes" id="refsect1-function.hash-equals-notes">   <h3 class="title">注释</h3>   <blockquote class="note"><p><strong class="note">Note</strong>:     <p class="para">     要想成功进行比较，那么所提供的 2 个参数必须是相同长度的字符串。     如果所提供的字符串长度不同，那么本函数会立即返回 <strong><code>FALSE</code></strong>，     在时序攻击的场景下，已知字符串的长度可能会被泄露。    </p>   </p></blockquote>   <blockquote class="note"><p><strong class="note">Note</strong>:     <p class="para">     非常重要的一点是，用户提供的字符串必须是第二个参数。    </p>   </p></blockquote>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.hash.php">Hash 函数</a></div></div>
 * @return boolean <p>Returns <b>TRUE</b> when the two strings are equal, <b>FALSE</b> otherwise.</p>*/
function hash_equals($known_string, $user_string) {}

/**
*<div id="function.hash-file" class="refentry">  <div class="refnamediv">   <h1 class="refname">hash_file</h1>   <p class="verinfo">(PHP 5 &gt;= 5.1.2, PHP 7, PECL hash &gt;= 1.1)</p><p class="refpurpose"><span class="refname">hash_file</span> &mdash; <span class="dc-title">使用给定文件的内容生成哈希值</span></p>   </div>  <div class="refsect1 description" id="refsect1-function.hash-file-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">string</span> <span class="methodname"><strong>hash_file</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$algo</code></span>    , <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>    [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$raw_output</code><span class="initializer"> = <strong><code>FALSE</code></strong></span></span>   ] )</div>    </div>   <div class="refsect1 parameters" id="refsect1-function.hash-file-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">algo</code></dt>       <dd>        <p class="para">        要使用的哈希算法的名称，例如：&quot;md5&quot;，&quot;sha256&quot;，&quot;haval160,4&quot; 等。       </p>      </dd>                 <dt> <code class="parameter">filename</code></dt>       <dd>        <p class="para">        要进行哈希运算的文件路径。支持 fopen 封装器。       </p>      </dd>                 <dt> <code class="parameter">raw_output</code></dt>       <dd>        <p class="para">        设置为 <strong><code>TRUE</code></strong>，输出格式为原始的二进制数据。        设置为 <strong><code>FALSE</code></strong>，输出小写的 16 进制字符串。       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.hash-file-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    如果 <code class="parameter">raw_output</code> 设置为 <strong><code>TRUE</code></strong>， 则返回原始二进制数据表示的信息摘要，    否则返回 16 进制小写字符串格式表示的信息摘要。   </p>  </div>    <div class="refsect1 examples" id="refsect1-function.hash-file-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-889">     <p><strong>Example #1 使用 <span class="function"><strong>hash_file()</strong></span></strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">//&nbsp;创建一个要计算哈希值的文件&nbsp;<br /></span><span style="color: #9876AA">file_put_contents</span><span style="color: #007700">(</span><span style="color: #DD0000">'example.txt'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'The&nbsp;quick&nbsp;brown&nbsp;fox&nbsp;jumped&nbsp;over&nbsp;the&nbsp;lazy&nbsp;dog.'</span><span style="color: #007700">);<br /><br />echo&nbsp;</span><span style="color: #9876AA">hash_file</span><span style="color: #007700">(</span><span style="color: #DD0000">'md5'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'example.txt'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen"> <div class="cdata"><pre> 5c6ffbdd40d9556b73a21e63c3e0e904 </pre></div>     </div>    </div>   </p>  </div>    <div class="refsect1 seealso" id="refsect1-function.hash-file-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link hash()} - 生成哈希值 （消息摘要）</span></li>     <li class="member"><span class="function">{@link hash_hmac_file()} - 使用 HMAC 方法和给定文件的内容生成带密钥的哈希值</span></li>     <li class="member"><span class="function">{@link hash_update_file()} - 从文件向活跃的哈希运算上下文中填充数据</span></li>     <li class="member"><span class="function">{@link md5_file()} - 计算指定文件的 MD5 散列值</span></li>     <li class="member"><span class="function">{@link sha1_file()} - 计算文件的 sha1 散列值</span></li>    </ul>   </p>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.hash.php">Hash 函数</a></div></div>
 * @return string a string containing the calculated message digest as lowercase hexits*/
function hash_file ($algo, $filename, $raw_output = false) {}

/**
*<div id="function.hash-hmac" class="refentry">  <div class="refnamediv">   <h1 class="refname">hash_hmac</h1>   <p class="verinfo">(PHP 5 &gt;= 5.1.2, PHP 7, PECL hash &gt;= 1.1)</p><p class="refpurpose"><span class="refname">hash_hmac</span> &mdash; <span class="dc-title">使用 HMAC 方法生成带有密钥的哈希值</span></p>   </div>  <div class="refsect1 description" id="refsect1-function.hash-hmac-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">string</span> <span class="methodname"><strong>hash_hmac</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$algo</code></span>    , <span class="methodparam"><span class="type">string</span> <code class="parameter">$data</code></span>    , <span class="methodparam"><span class="type">string</span> <code class="parameter">$key</code></span>    [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$raw_output</code><span class="initializer"> = <strong><code>FALSE</code></strong></span></span>   ] )</div>    </div>   <div class="refsect1 parameters" id="refsect1-function.hash-hmac-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">algo</code></dt>       <dd>        <p class="para">        要使用的哈希算法名称，例如：&quot;md5&quot;，&quot;sha256&quot;，&quot;haval160,4&quot; 等。        如何获取受支持的算法清单，请参见 <span class="function">{@link hash_hmac_algos()}</span> 函数。       </p>      </dd>                 <dt> <code class="parameter">data</code></dt>       <dd>        <p class="para">        要进行哈希运算的消息。       </p>      </dd>                 <dt> <code class="parameter">key</code></dt>       <dd>        <p class="para">        使用 HMAC 生成信息摘要时所使用的密钥。       </p>      </dd>                 <dt> <code class="parameter">raw_output</code></dt>       <dd>        <p class="para">        设置为 <strong><code>TRUE</code></strong> 输出原始二进制数据，        设置为 <strong><code>FALSE</code></strong> 输出小写 16 进制字符串。       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.hash-hmac-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    如果 <code class="parameter">raw_output</code> 设置为 <strong><code>TRUE</code></strong>， 则返回原始二进制数据表示的信息摘要，    否则返回 16 进制小写字符串格式表示的信息摘要。    如果 <code class="parameter">algo</code> 参数指定的不是受支持的算法，返回 <strong><code>FALSE</code></strong>。   </p>  </div>    <div class="refsect1 changelog" id="refsect1-function.hash-hmac-changelog">   <h3 class="title">更新日志</h3>   <p class="para">    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>7.2.0</td>        <td>不再支持非加密的哈希函数（adler32，crc32，crc32b，fnv132，fnv1a32，fnv164，fnv1a64，joaat）。</td>       </tr>       </tbody>         </table>    </p>  </div>     <div class="refsect1 examples" id="refsect1-function.hash-hmac-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-894">     <p><strong>Example #1 <span class="function"><strong>hash_hmac()</strong></span> 例程</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #9876AA">hash_hmac</span><span style="color: #007700">(</span><span style="color: #DD0000">'ripemd160'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'The&nbsp;quick&nbsp;brown&nbsp;fox&nbsp;jumped&nbsp;over&nbsp;the&nbsp;lazy&nbsp;dog.'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'secret'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen"> <div class="cdata"><pre> b8e7ae12510bdfb1812e463a7f086122cf37e4f7 </pre></div>     </div>    </div>   </p>  </div>    <div class="refsect1 seealso" id="refsect1-function.hash-hmac-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link hash()} - 生成哈希值 （消息摘要）</span></li>     <li class="member"><span class="function">{@link hash_hmac_algos()} - Return a list of registered hashing algorithms suitable for hash_hmac</span></li>     <li class="member"><span class="function">{@link hash_init()} - 初始化增量哈希运算上下文</span></li>     <li class="member"><span class="function">{@link hash_hmac_file()} - 使用 HMAC 方法和给定文件的内容生成带密钥的哈希值</span></li>    </ul>   </p>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.hash.php">Hash 函数</a></div></div>
 * @return string a string containing the calculated message digest as lowercase hexits*/
function hash_hmac ($algo, $data, $key, $raw_output = false) {}

/**
*<div id="function.hash-hmac-file" class="refentry">  <div class="refnamediv">   <h1 class="refname">hash_hmac_file</h1>   <p class="verinfo">(PHP 5 &gt;= 5.1.2, PHP 7, PECL hash &gt;= 1.1)</p><p class="refpurpose"><span class="refname">hash_hmac_file</span> &mdash; <span class="dc-title">使用 HMAC 方法和给定文件的内容生成带密钥的哈希值</span></p>   </div>  <div class="refsect1 description" id="refsect1-function.hash-hmac-file-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">string</span> <span class="methodname"><strong>hash_hmac_file</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$algo</code></span>    , <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>    , <span class="methodparam"><span class="type">string</span> <code class="parameter">$key</code></span>    [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$raw_output</code><span class="initializer"> = <strong><code>FALSE</code></strong></span></span>   ] )</div>    </div>   <div class="refsect1 parameters" id="refsect1-function.hash-hmac-file-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">algo</code></dt>       <dd>        <p class="para">        要使用的哈希算法名称，例如：&quot;md5&quot;，&quot;sha256&quot;，&quot;haval160,4&quot; 等。        如何获取受支持的算法清单，请参见 <span class="function">{@link hash_hmac_algos()}</span> 函数。       </p>      </dd>                 <dt> <code class="parameter">filename</code></dt>       <dd>        <p class="para">        要进行哈希运算的文件路径，支持 fopen 封装器。       </p>      </dd>                 <dt> <code class="parameter">key</code></dt>       <dd>        <p class="para">        使用 HMAC 生成信息摘要时所使用的密钥。       </p>      </dd>                 <dt> <code class="parameter">raw_output</code></dt>       <dd>        <p class="para">        设置为 <strong><code>TRUE</code></strong> 输出原始二进制数据，        设置为 <strong><code>FALSE</code></strong> 输出小写 16 进制字符串。       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.hash-hmac-file-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    如果 <code class="parameter">raw_output</code> 设置为 <strong><code>TRUE</code></strong>， 则返回原始二进制数据表示的信息摘要，    否则返回 16 进制小写字符串格式表示的信息摘要。    如果 <code class="parameter">algo</code> 参数指定的不是受支持的算法，或者无法读取 <code class="parameter">filename</code> 给定的文件，则返回 <strong><code>FALSE</code></strong>。   </p>  </div>    <div class="refsect1 changelog" id="refsect1-function.hash-hmac-file-changelog">   <h3 class="title">更新日志</h3>   <p class="para">    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>7.2.0</td>        <td>不再支持非加密的哈希函数（adler32，crc32，crc32b，fnv132，fnv1a32，fnv164，fnv1a64，joaat）。</td>       </tr>       </tbody>         </table>    </p>  </div>     <div class="refsect1 examples" id="refsect1-function.hash-hmac-file-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-893">     <p><strong>Example #1 <span class="function"><strong>hash_hmac_file()</strong></span> 例程</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">//&nbsp;创建一个要计算哈希值的文件&nbsp;<br /></span><span style="color: #9876AA">file_put_contents</span><span style="color: #007700">(</span><span style="color: #DD0000">'example.txt'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'The&nbsp;quick&nbsp;brown&nbsp;fox&nbsp;jumped&nbsp;over&nbsp;the&nbsp;lazy&nbsp;dog.'</span><span style="color: #007700">);<br /><br />echo&nbsp;</span><span style="color: #9876AA">hash_hmac_file</span><span style="color: #007700">(</span><span style="color: #DD0000">'md5'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'example.txt'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'secret'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen"> <div class="cdata"><pre> 7eb2b5c37443418fc77c136dd20e859c </pre></div>     </div>    </div>   </p>  </div>    <div class="refsect1 seealso" id="refsect1-function.hash-hmac-file-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link hash_hmac_algos()} - Return a list of registered hashing algorithms suitable for hash_hmac</span></li>     <li class="member"><span class="function">{@link hash_hmac()} - 使用 HMAC 方法生成带有密钥的哈希值</span></li>     <li class="member"><span class="function">{@link hash_file()} - 使用给定文件的内容生成哈希值</span></li>    </ul>   </p>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.hash.php">Hash 函数</a></div></div>
 * @return string a string containing the calculated message digest as lowercase hexits*/
function hash_hmac_file ($algo, $filename, $key, $raw_output = false) {}

/**
*<div id="function.hash-init" class="refentry">  <div class="refnamediv">   <h1 class="refname">hash_init</h1>   <p class="verinfo">(PHP 5 &gt;= 5.1.2, PHP 7, PECL hash &gt;= 1.1)</p><p class="refpurpose"><span class="refname">hash_init</span> &mdash; <span class="dc-title">初始化增量哈希运算上下文</span></p>   </div>  <div class="refsect1 description" id="refsect1-function.hash-init-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type"><span class="type HashContext">HashContext</span></span> <span class="methodname"><strong>hash_init</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$algo</code></span>    [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$options</code><span class="initializer"> = 0</span></span>    [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$key</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>   ]] )</div>    </div>   <div class="refsect1 parameters" id="refsect1-function.hash-init-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">algo</code></dt>       <dd>        <p class="para">        要使用的哈希算法名称，例如：&quot;md5&quot;，&quot;sha256&quot;，&quot;haval160,4&quot; 等。        如何获取受支持的算法清单，请参见 <span class="function">{@link hash_algos()}</span>。       </p>      </dd>                 <dt> <code class="parameter">options</code></dt>       <dd>        <p class="para">        进行哈希运算的可选设置，目前仅支持一个选项：<strong><code>HASH_HMAC</code></strong>。        当指定此选项的时候，<em class="emphasis">必须</em> 指定 <code class="parameter">key</code> 参数。       </p>      </dd>                 <dt> <code class="parameter">key</code></dt>       <dd>        <p class="para">        当 <code class="parameter">options</code> 参数为 <strong><code>HASH_HMAC</code></strong> 时，        使用此参数传入进行 HMAC 哈希运算时的共享密钥。       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.hash-init-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回哈希运算上下文对象，以供    <span class="function">{@link hash_update()}</span>，    <span class="function">{@link hash_update_stream()}</span>，<span class="function">{@link hash_update_file()}</span>,    和 <span class="function">{@link hash_final()}</span> 函数使用。   </p>  </div>    <div class="refsect1 changelog" id="refsect1-function.hash-init-changelog">   <h3 class="title">更新日志</h3>   <p class="para">    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>7.2.0</td>        <td>当使用 <strong><code>HASH_HMAC</code></strong> 选项的时候，不再支持非加密的哈希函数（adler32，crc32，crc32b，fnv132，fnv1a32，fnv164，fnv1a64，joaat）。</td>       </tr>        <tr>        <td>7.2.0</td>        <td>         返回 <strong class="classname">HashContext</strong> 对象，不再返回资源类型。        </td>       </tr>       </tbody>         </table>    </p>  </div>     <div class="refsect1 examples" id="refsect1-function.hash-init-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="zlib-encode.example.basic">     <p><strong>Example #1 增量哈希运算例程</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$ctx&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">hash_init</span><span style="color: #007700">(</span><span style="color: #DD0000">'md5'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">hash_update</span><span style="color: #007700">(</span><span style="color: #9876AA">$ctx</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'The&nbsp;quick&nbsp;brown&nbsp;fox&nbsp;'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">hash_update</span><span style="color: #007700">(</span><span style="color: #9876AA">$ctx</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'jumped&nbsp;over&nbsp;the&nbsp;lazy&nbsp;dog.'</span><span style="color: #007700">);<br />echo&nbsp;</span><span style="color: #9876AA">hash_final</span><span style="color: #007700">(</span><span style="color: #9876AA">$ctx</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen"> <div class="cdata"><pre> 5c6ffbdd40d9556b73a21e63c3e0e904 </pre></div>     </div>    </div>   </p>  </div>    <div class="refsect1 seealso" id="refsect1-function.hash-init-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link hash()} - 生成哈希值 （消息摘要）</span></li>     <li class="member"><span class="function">{@link hash_algos()} - 返回已注册的哈希算法列表</span></li>     <li class="member"><span class="function">{@link hash_file()} - 使用给定文件的内容生成哈希值</span></li>     <li class="member"><span class="function">{@link hash_hmac()} - 使用 HMAC 方法生成带有密钥的哈希值</span></li>     <li class="member"><span class="function">{@link hash_hmac_file()} - 使用 HMAC 方法和给定文件的内容生成带密钥的哈希值</span></li>    </ul>   </p>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.hash.php">Hash 函数</a></div></div>
 * @return resource a Hashing Context resource for use with <b>hash_update</b>,*/
function hash_init ($algo, $options = 0, $key = null) {}

/**
*<div id="function.hash-update" class="refentry">  <div class="refnamediv">   <h1 class="refname">hash_update</h1>   <p class="verinfo">(PHP 5 &gt;= 5.1.2, PHP 7, PECL hash &gt;= 1.1)</p><p class="refpurpose"><span class="refname">hash_update</span> &mdash; <span class="dc-title">向活跃的哈希运算上下文中填充数据</span></p>   </div>  <div class="refsect1 description" id="refsect1-function.hash-update-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">bool</span> <span class="methodname"><strong>hash_update</strong></span>     ( <span class="methodparam"><span class="type"><span class="type HashContext">HashContext</span></span> <code class="parameter">$context</code></span>    , <span class="methodparam"><span class="type">string</span> <code class="parameter">$data</code></span>    )</div>    </div>   <div class="refsect1 parameters" id="refsect1-function.hash-update-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">context</code></dt>       <dd>        <p class="para">        由 <span class="function">{@link hash_init()}</span> 函数返回的哈希运算上下文。       </p>      </dd>                 <dt> <code class="parameter">data</code></dt>       <dd>        <p class="para">        要向哈希摘要中追加的数据。       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.hash-update-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回 <strong><code>TRUE</code></strong>。   </p>  </div>    <div class="refsect1 changelog" id="refsect1-function.hash-update-changelog">   <h3 class="title">更新日志</h3>   <p class="para">    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>7.2.0</td>        <td>         接收参数从资源类型修改为 <strong class="classname">HashContext</strong> 对象类型。        </td>       </tr>       </tbody>         </table>    </p>  </div>     <div class="refsect1 seealso" id="refsect1-function.hash-update-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link hash_init()} - 初始化增量哈希运算上下文</span></li>     <li class="member"><span class="function">{@link hash_update_file()} - 从文件向活跃的哈希运算上下文中填充数据</span></li>     <li class="member"><span class="function">{@link hash_update_stream()} - 从打开的流向活跃的哈希运算上下文中填充数据</span></li>     <li class="member"><span class="function">{@link hash_final()} - 结束增量哈希，并且返回摘要结果</span></li>    </ul>   </p>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.hash.php">Hash 函数</a></div></div>
 * @return bool <b>TRUE</b>.*/
function hash_update ($context, $data) {}

/**
*<div id="function.hash-update-stream" class="refentry">  <div class="refnamediv">   <h1 class="refname">hash_update_stream</h1>   <p class="verinfo">(PHP 5 &gt;= 5.1.2, PHP 7, PECL hash &gt;= 1.1)</p><p class="refpurpose"><span class="refname">hash_update_stream</span> &mdash; <span class="dc-title">从打开的流向活跃的哈希运算上下文中填充数据</span></p>   </div>  <div class="refsect1 description" id="refsect1-function.hash-update-stream-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">int</span> <span class="methodname"><strong>hash_update_stream</strong></span>     ( <span class="methodparam"><span class="type"><span class="type HashContext">HashContext</span></span> <code class="parameter">$context</code></span>    , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$handle</code></span>    [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$length</code><span class="initializer"> = -1</span></span>   ] )</div>    </div>   <div class="refsect1 parameters" id="refsect1-function.hash-update-stream-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">context</code></dt>       <dd>        <p class="para">        由 <span class="function">{@link hash_init()}</span> 函数返回的哈希运算上下文。       </p>      </dd>                 <dt> <code class="parameter">handle</code></dt>       <dd>        <p class="para">        创建流的函数返回的打开的文件句柄。       </p>      </dd>                 <dt> <code class="parameter">length</code></dt>       <dd>        <p class="para">        要从 <code class="parameter">handle</code> 向活跃的哈希运算上下文中拷贝        的最大字符数。       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.hash-update-stream-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    从 <code class="parameter">handle</code> 向哈希运算上下文中实际填充的字节数量。   </p>  </div>    <div class="refsect1 changelog" id="refsect1-function.hash-update-stream-changelog">   <h3 class="title">更新日志</h3>   <p class="para">    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>7.2.0</td>        <td>         接收参数从资源类型修改为 <strong class="classname">HashContext</strong> 对象类型。        </td>       </tr>       </tbody>         </table>    </p>  </div>     <div class="refsect1 examples" id="refsect1-function.hash-update-stream-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="random-bytes.example.basic">     <p><strong>Example #1 <span class="function"><strong>hash_update_stream()</strong></span> 例程</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$fp&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">tmpfile</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">fwrite</span><span style="color: #007700">(</span><span style="color: #9876AA">$fp</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'The&nbsp;quick&nbsp;brown&nbsp;fox&nbsp;jumped&nbsp;over&nbsp;the&nbsp;lazy&nbsp;dog.'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">rewind</span><span style="color: #007700">(</span><span style="color: #9876AA">$fp</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$ctx&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">hash_init</span><span style="color: #007700">(</span><span style="color: #DD0000">'md5'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">hash_update_stream</span><span style="color: #007700">(</span><span style="color: #9876AA">$ctx</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$fp</span><span style="color: #007700">);<br />echo&nbsp;</span><span style="color: #9876AA">hash_final</span><span style="color: #007700">(</span><span style="color: #9876AA">$ctx</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen"> <div class="cdata"><pre> 5c6ffbdd40d9556b73a21e63c3e0e904 </pre></div>     </div>    </div>   </p>  </div>    <div class="refsect1 seealso" id="refsect1-function.hash-update-stream-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link hash_init()} - 初始化增量哈希运算上下文</span></li>     <li class="member"><span class="function">{@link hash_update()} - 向活跃的哈希运算上下文中填充数据</span></li>     <li class="member"><span class="function">{@link hash_final()} - 结束增量哈希，并且返回摘要结果</span></li>     <li class="member"><span class="function">{@link hash()} - 生成哈希值 （消息摘要）</span></li>     <li class="member"><span class="function">{@link hash_file()} - 使用给定文件的内容生成哈希值</span></li>    </ul>   </p>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.hash.php">Hash 函数</a></div></div>
 * @return int Actual number of bytes added to the hashing context from <i>handle</i>.*/
function hash_update_stream ($context, $handle, $length = -1) {}

/**
*<div id="function.hash-update-file" class="refentry">  <div class="refnamediv">   <h1 class="refname">hash_update_file</h1>   <p class="verinfo">(PHP 5 &gt;= 5.1.2, PHP 7, PECL hash &gt;= 1.1)</p><p class="refpurpose"><span class="refname">hash_update_file</span> &mdash; <span class="dc-title">从文件向活跃的哈希运算上下文中填充数据</span></p>   </div>  <div class="refsect1 description" id="refsect1-function.hash-update-file-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">bool</span> <span class="methodname"><strong>hash_update_file</strong></span>     ( <span class="methodparam"><span class="type"><span class="type HashContext">HashContext</span></span> <code class="parameter">$hcontext</code></span>    , <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>    [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$scontext</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>   ] )</div>    </div>   <div class="refsect1 parameters" id="refsect1-function.hash-update-file-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">hcontext</code></dt>       <dd>        <p class="para">        由 <span class="function">{@link hash_init()}</span> 函数返回的哈希运算上下文。       </p>      </dd>                 <dt> <code class="parameter">filename</code></dt>       <dd>        <p class="para">        要进行哈希运算的文件路径，支持 fopen 封装器。       </p>      </dd>                 <dt> <code class="parameter">scontext</code></dt>       <dd>        <p class="para">        由 <span class="function">{@link stream_context_create()}</span> 函数返回的流上下文。       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.hash-update-file-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    成功时返回 <strong><code>TRUE</code></strong>， 或者在失败时返回 <strong><code>FALSE</code></strong>。   </p>  </div>     <div class="refsect1 changelog" id="refsect1-function.hash-update-file-changelog">   <h3 class="title">更新日志</h3>   <p class="para">    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>7.2.0</td>        <td>         接收参数从资源类型修改为 <strong class="classname">HashContext</strong> 对象类型。        </td>       </tr>       </tbody>         </table>    </p>  </div>    <div class="refsect1 seealso" id="refsect1-function.hash-update-file-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link hash_init()} - 初始化增量哈希运算上下文</span></li>     <li class="member"><span class="function">{@link hash_update()} - 向活跃的哈希运算上下文中填充数据</span></li>     <li class="member"><span class="function">{@link hash_update_stream()} - 从打开的流向活跃的哈希运算上下文中填充数据</span></li>     <li class="member"><span class="function">{@link hash_final()} - 结束增量哈希，并且返回摘要结果</span></li>     <li class="member"><span class="function">{@link hash()} - 生成哈希值 （消息摘要）</span></li>     <li class="member"><span class="function">{@link hash_file()} - 使用给定文件的内容生成哈希值</span></li>    </ul>   </p>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.hash.php">Hash 函数</a></div></div>
 * @return bool <b>TRUE</b> on success or <b>FALSE</b> on failure.*/
function hash_update_file ($hcontext, $filename, $scontext = null) {}

/**
*<div id="function.hash-final" class="refentry">  <div class="refnamediv">   <h1 class="refname">hash_final</h1>   <p class="verinfo">(PHP 5 &gt;= 5.1.2, PHP 7, PECL hash &gt;= 1.1)</p><p class="refpurpose"><span class="refname">hash_final</span> &mdash; <span class="dc-title">结束增量哈希，并且返回摘要结果</span></p>   </div>  <div class="refsect1 description" id="refsect1-function.hash-final-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">string</span> <span class="methodname"><strong>hash_final</strong></span>     ( <span class="methodparam"><span class="type"><span class="type HashContext">HashContext</span></span> <code class="parameter">$context</code></span>    [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$raw_output</code><span class="initializer"> = <strong><code>FALSE</code></strong></span></span>   ] )</div>   </div>   <div class="refsect1 parameters" id="refsect1-function.hash-final-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">context</code></dt>       <dd>        <p class="para">        <span class="function">{@link hash_init()}</span> 函数返回的哈希运算上下文资源。       </p>      </dd>                 <dt> <code class="parameter">raw_output</code></dt>       <dd>        <p class="para">        设置为 <strong><code>TRUE</code></strong>，输出格式为原始的二进制数据。        设置为 <strong><code>FALSE</code></strong>，输出小写的 16 进制字符串。       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.hash-final-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    如果 <code class="parameter">raw_output</code> 设置为 <strong><code>TRUE</code></strong>， 则返回原始二进制数据表示的信息摘要，    否则返回 16 进制小写字符串格式表示的信息摘要。   </p>  </div>     <div class="refsect1 changelog" id="refsect1-function.hash-final-changelog">   <h3 class="title">更新日志</h3>   <p class="para">    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>7.2.0</td>        <td>         接收参数从资源类型修改为 <strong class="classname">HashContext</strong> 对象类型。        </td>       </tr>       </tbody>         </table>    </p>  </div>    <div class="refsect1 examples" id="refsect1-function.hash-final-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-890">     <p><strong>Example #1 <span class="function"><strong>hash_final()</strong></span> 例程</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$ctx&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">hash_init</span><span style="color: #007700">(</span><span style="color: #DD0000">'sha1'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">hash_update</span><span style="color: #007700">(</span><span style="color: #9876AA">$ctx</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'The&nbsp;quick&nbsp;brown&nbsp;fox&nbsp;jumped&nbsp;over&nbsp;the&nbsp;lazy&nbsp;dog.'</span><span style="color: #007700">);<br />echo&nbsp;</span><span style="color: #9876AA">hash_final</span><span style="color: #007700">(</span><span style="color: #9876AA">$ctx</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen"> <div class="cdata"><pre> c0854fb9fb03c41cce3802cb0d220529e6eef94e </pre></div>     </div>    </div>   </p>  </div>    <div class="refsect1 seealso" id="refsect1-function.hash-final-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link hash_init()} - 初始化增量哈希运算上下文</span></li>     <li class="member"><span class="function">{@link hash_update()} - 向活跃的哈希运算上下文中填充数据</span></li>     <li class="member"><span class="function">{@link hash_update_stream()} - 从打开的流向活跃的哈希运算上下文中填充数据</span></li>     <li class="member"><span class="function">{@link hash_update_file()} - 从文件向活跃的哈希运算上下文中填充数据</span></li>    </ul>   </p>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.hash.php">Hash 函数</a></div></div>
 * @return string a string containing the calculated message digest as lowercase hexits*/
function hash_final ($context, $raw_output = false) {}

/**
*<div id="function.hash-copy" class="refentry">  <div class="refnamediv">   <h1 class="refname">hash_copy</h1>   <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7)</p><p class="refpurpose"><span class="refname">hash_copy</span> &mdash; <span class="dc-title">拷贝哈希运算上下文</span></p>   </div>  <div class="refsect1 description" id="refsect1-function.hash-copy-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type"><span class="type HashContext">HashContext</span></span> <span class="methodname"><strong>hash_copy</strong></span>     ( <span class="methodparam"><span class="type"><span class="type HashContext">HashContext</span></span> <code class="parameter">$context</code></span>    )</div>   </div>    <div class="refsect1 parameters" id="refsect1-function.hash-copy-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">context</code></dt>       <dd>        <p class="para">        由 <span class="function">{@link hash_init()}</span> 函数返回的哈希运算上下文。       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.hash-copy-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回哈希运算上下文的一个复本。   </p>  </div>     <div class="refsect1 changelog" id="refsect1-function.hash-copy-changelog">   <h3 class="title">更新日志</h3>   <p class="para">    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>7.2.0</td>        <td>         接受的参数以及返回值从资源类型修改为 <strong class="classname">HashContext</strong> 对象类型。        </td>       </tr>       </tbody>         </table>    </p>  </div>     <div class="refsect1 examples" id="refsect1-function.hash-copy-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-887">     <p><strong>Example #1 <span class="function"><strong>hash_copy()</strong></span> 例程</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$context&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">hash_init</span><span style="color: #007700">(</span><span style="color: #DD0000">"md5"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">hash_update</span><span style="color: #007700">(</span><span style="color: #9876AA">$context</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"data"</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">//&nbsp;拷贝上下文资源以便继续使用&nbsp;<br /></span><span style="color: #9876AA">$copy_context&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">hash_copy</span><span style="color: #007700">(</span><span style="color: #9876AA">$context</span><span style="color: #007700">);<br /><br />echo&nbsp;</span><span style="color: #9876AA">hash_final</span><span style="color: #007700">(</span><span style="color: #9876AA">$context</span><span style="color: #007700">),&nbsp;</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">hash_update</span><span style="color: #007700">(</span><span style="color: #9876AA">$copy_context</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"data"</span><span style="color: #007700">);<br />echo&nbsp;</span><span style="color: #9876AA">hash_final</span><span style="color: #007700">(</span><span style="color: #9876AA">$copy_context</span><span style="color: #007700">),&nbsp;</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen"> <div class="cdata"><pre> 8d777f385d3dfec8815d20f7496026dc 511ae0b1c13f95e5f08f1a0dd3da3d93 </pre></div>     </div>    </div>   </p>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.hash.php">Hash 函数</a></div></div>
 * @return resource a copy of Hashing Context resource.*/
function hash_copy ($context) {}

/**
*<div id="function.hash-algos" class="refentry">  <div class="refnamediv">   <h1 class="refname">hash_algos</h1>   <p class="verinfo">(PHP 5 &gt;= 5.1.2, PHP 7, PECL hash &gt;= 1.1)</p><p class="refpurpose"><span class="refname">hash_algos</span> &mdash; <span class="dc-title">返回已注册的哈希算法列表</span></p>   </div>  <div class="refsect1 description" id="refsect1-function.hash-algos-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">array</span> <span class="methodname"><strong>hash_algos</strong></span>     ( <span class="methodparam">void</span>    )</div>   </div>    <div class="refsect1 returnvalues" id="refsect1-function.hash-algos-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回一个数值索引的数组，    包含了受支持的哈希算法名称。   </p>  </div>    <div class="refsect1 changelog" id="refsect1-function.hash-algos-changelog">   <h3 class="title">更新日志</h3>   <p class="para">    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>7.1.0</td>        <td>         加入 sha512/224，sha512/256，sha3-224，sha3-256，sha3-384 以及         sha3-512 算法的支持。        </td>       </tr>        <tr>        <td>5.6.0</td>        <td>         加入对 gost-crypto 算法的支持。         参照 <a href="http://www.faqs.org/rfcs/rfc4357" class="link external">&raquo;&nbsp;RFC 4357，11.2 小节</a>          定义的 CryptoPro S-box 表格实现 GOST 哈希函数。        </td>       </tr>        <tr>        <td>5.4.0</td>        <td>加入对于 joaat，fnv132 和 fnv164 算法的支持。移除 Salsa10 和 Salsa20 算法。</td>       </tr>        <tr>        <td>5.3.0</td>        <td>加入对 md2，ripemd256，ripemd320，salsa10，salsa20，snefru256 和 sha224 哈希算法的支持。</td>       </tr>       </tbody>         </table>    </p>  </div>     <div class="refsect1 examples" id="refsect1-function.hash-algos-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-886">     <p><strong>Example #1 <span class="function"><strong>hash_algos()</strong></span> 例程</strong></p>     <div class="example-contents"><p>      在 PHP 5.6.0 中，<span class="function"><strong>hash_algos()</strong></span>       会返回下表所示的算法清单：     </p></div>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">hash_algos</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>      <div class="example-contents"><p>以上例程的输出类似于：</p></div>     <div class="example-contents screen"> <div class="cdata"><pre> Array (     [0] =&gt; md2     [1] =&gt; md4     [2] =&gt; md5     [3] =&gt; sha1     [4] =&gt; sha224     [5] =&gt; sha256     [6] =&gt; sha384     [7] =&gt; sha512     [8] =&gt; ripemd128     [9] =&gt; ripemd160     [10] =&gt; ripemd256     [11] =&gt; ripemd320     [12] =&gt; whirlpool     [13] =&gt; tiger128,3     [14] =&gt; tiger160,3     [15] =&gt; tiger192,3     [16] =&gt; tiger128,4     [17] =&gt; tiger160,4     [18] =&gt; tiger192,4     [19] =&gt; snefru     [20] =&gt; snefru256     [21] =&gt; gost     [22] =&gt; gost-crypto     [23] =&gt; adler32     [24] =&gt; crc32     [25] =&gt; crc32b     [26] =&gt; fnv132     [27] =&gt; fnv1a32     [28] =&gt; fnv164     [29] =&gt; fnv1a64     [30] =&gt; joaat     [31] =&gt; haval128,3     [32] =&gt; haval160,3     [33] =&gt; haval192,3     [34] =&gt; haval224,3     [35] =&gt; haval256,3     [36] =&gt; haval128,4     [37] =&gt; haval160,4     [38] =&gt; haval192,4     [39] =&gt; haval224,4     [40] =&gt; haval256,4     [41] =&gt; haval128,5     [42] =&gt; haval160,5     [43] =&gt; haval192,5     [44] =&gt; haval224,5     [45] =&gt; haval256,5 ) </pre></div>     </div>    </div>   </p>  </div>    <div class="refsect1 seealso" id="refsect1-function.hash-algos-seealso">   <h3 class="title">参见</h3>   <ul class="simplelist">    <li class="member"><span class="function">{@link hash_hmac_algos()} - Return a list of registered hashing algorithms suitable for hash_hmac</span></li>   </ul>  </div>    <div class="up"><a href="http://php.net/manual/zh/ref.hash.php">Hash 函数</a></div></div>
 * @return array a numerically indexed array containing the list of supported*/
function hash_algos () {}


/**
*<div id="function.hash-hkdf" class="refentry">  <div class="refnamediv">   <h1 class="refname">hash_hkdf</h1>   <p class="verinfo">(PHP 7 &gt;= 7.1.2)</p><p class="refpurpose"><span class="refname">hash_hkdf</span> &mdash; <span class="dc-title">Generate a HKDF key derivation of a supplied key input</span></p>   </div>  <div class="refsect1 description" id="refsect1-function.hash-hkdf-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">string</span> <span class="methodname"><strong>hash_hkdf</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$algo</code></span>    , <span class="methodparam"><span class="type">string</span> <code class="parameter">$ikm</code></span>    [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$length</code><span class="initializer"> = 0</span></span>    [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$info</code><span class="initializer"> = &#039;&#039;</span></span>    [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$salt</code><span class="initializer"> = &#039;&#039;</span></span>   ]]] )</div>    </div>   <div class="refsect1 parameters" id="refsect1-function.hash-hkdf-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">algo</code></dt>       <dd>        <p class="para">        Name of selected hashing algorithm (i.e. &quot;sha256&quot;, &quot;sha512&quot;, &quot;haval160,4&quot;, etc..)        See <span class="function">{@link hash_algos()}</span> for a list of supported algorithms.        <blockquote class="note"><p><strong class="note">Note</strong>:          <p class="para">          Non-cryptographic hash functions are not allowed.         </p>        </p></blockquote>       </p>      </dd>                 <dt> <code class="parameter">ikm</code></dt>       <dd>        <p class="para">        Input keying material (raw binary). Cannot be empty.       </p>      </dd>                 <dt> <code class="parameter">length</code></dt>       <dd>        <p class="para">        Desired output length in bytes.        Cannot be greater than 255 times the chosen hash function size.       </p>       <p class="para">        If <code class="parameter">length</code> is <em>0</em>, the output length        will default to the chosen hash function size.       </p>      </dd>                 <dt> <code class="parameter">info</code></dt>       <dd>        <p class="para">        Application/context-specific info string.       </p>      </dd>                 <dt> <code class="parameter">salt</code></dt>       <dd>        <p class="para">        Salt to use during derivation.       </p>       <p class="para">        While optional, adding random salt significantly improves the strength of HKDF.       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.hash-hkdf-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    Returns a string containing a raw binary representation of the derived key    (also known as output keying material - OKM); or <strong><code>FALSE</code></strong> on failure.   </p>  </div>    <div class="refsect1 errors" id="refsect1-function.hash-hkdf-errors">   <h3 class="title">错误／异常</h3>   <p class="para">    An <strong><code>E_WARNING</code></strong> will be raised if <code class="parameter">ikm</code>    is empty, <code class="parameter">algo</code> is unknown/non-cryptographic,    <code class="parameter">length</code> is less than <em>0</em> or too large    (greater than 255 times the size of the hash function).   </p>  </div>    <div class="refsect1 examples" id="refsect1-function.hash-hkdf-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-891">     <p><strong>Example #1 <span class="function"><strong>hash_hkdf()</strong></span> example</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">//&nbsp;Generate&nbsp;a&nbsp;random&nbsp;key,&nbsp;and&nbsp;salt&nbsp;to&nbsp;strengthen&nbsp;it&nbsp;during&nbsp;derivation.<br /></span><span style="color: #9876AA">$inputKey&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">random_bytes</span><span style="color: #007700">(</span><span style="color: #9876AA">32</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$salt&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">random_bytes</span><span style="color: #007700">(</span><span style="color: #9876AA">16</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">//&nbsp;Derive&nbsp;a&nbsp;pair&nbsp;of&nbsp;separate&nbsp;keys,&nbsp;using&nbsp;the&nbsp;same&nbsp;input&nbsp;created&nbsp;above.<br /></span><span style="color: #9876AA">$encryptionKey&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">hash_hkdf</span><span style="color: #007700">(</span><span style="color: #DD0000">'sha256'</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$inputKey</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">32</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'aes-256-encryption'</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$salt</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$authenticationKey&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">hash_hkdf</span><span style="color: #007700">(</span><span style="color: #DD0000">'sha256'</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$inputKey</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">32</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'sha-256-authentication'</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$salt</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$encryptionKey&nbsp;</span><span style="color: #007700">!==&nbsp;</span><span style="color: #9876AA">$authenticationKey</span><span style="color: #007700">);&nbsp;</span><span style="color: #FF8000">//&nbsp;bool(true)<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>      <div class="example-contents"><p>      The above example produces a pair of separate keys, suitable for creation of an      encrypt-then-HMAC construct, using AES-256 and SHA-256 for encryption and      authentication respectively.     </p></div>    </div>   </p>  </div>    <div class="refsect1 seealso" id="refsect1-function.hash-hkdf-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link hash_pbkdf2()} - 生成所提供密码的 PBKDF2 密钥导出</span></li>     <li class="member"><a href="http://www.faqs.org/rfcs/rfc5869" class="link external">&raquo;&nbsp;RFC 5869</a></li>     <li class="member"><a href="http://php.net/manual/zh/https://github.com/narfbg/hash_hkdf_compat" class="link external">&raquo;&nbsp;userland implementation</a></li>    </ul>   </p>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.hash.php">Hash 函数</a></div></div>
 * @return string <p>Returns a string containing a raw binary representation of the derived key (also known as output keying material - OKM); or <b>FALSE</b> on failure.</p>*/
function hash_hkdf(string $algo , string $ikm, int $length = 0, string $info = '', string $salt = '') {}

/**
*<div id="function.hash-hmac-algos" class="refentry">  <div class="refnamediv">   <h1 class="refname">hash_hmac_algos</h1>   <p class="verinfo">(PHP 7 &gt;= 7.2.0)</p><p class="refpurpose"><span class="refname">hash_hmac_algos</span> &mdash; <span class="dc-title">Return a list of registered hashing algorithms suitable for hash_hmac</span></p>   </div>   <div class="refsect1 description" id="refsect1-function.hash-hmac-algos-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">array</span> <span class="methodname"><strong>hash_hmac_algos</strong></span>     ( <span class="methodparam">void</span>    )</div>   </div>    <div class="refsect1 returnvalues" id="refsect1-function.hash-hmac-algos-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    Returns a numerically indexed array containing the list of supported hashing    algorithms suitable for <span class="function">{@link hash_hmac()}</span>.   </p>  </div>    <div class="refsect1 examples" id="refsect1-function.hash-hmac-algos-examples">   <h3 class="title">范例</h3>   <div class="example" id="example-892">    <p><strong>Example #1 <span class="function"><strong>hash_hmac_algos()</strong></span> example</strong></p>    <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">hash_hmac_algos</span><span style="color: #007700">());</span> </span> </code></div>    </div>     <div class="example-contents"><p>以上例程的输出类似于：</p></div>    <div class="example-contents screen"> <div class="cdata"><pre> Array (     [0] =&gt; md2     [1] =&gt; md4     [2] =&gt; md5     [3] =&gt; sha1     [4] =&gt; sha224     [5] =&gt; sha256     [6] =&gt; sha384     [7] =&gt; sha512/224     [8] =&gt; sha512/256     [9] =&gt; sha512     [10] =&gt; sha3-224     [11] =&gt; sha3-256     [12] =&gt; sha3-384     [13] =&gt; sha3-512     [14] =&gt; ripemd128     [15] =&gt; ripemd160     [16] =&gt; ripemd256     [17] =&gt; ripemd320     [18] =&gt; whirlpool     [19] =&gt; tiger128,3     [20] =&gt; tiger160,3     [21] =&gt; tiger192,3     [22] =&gt; tiger128,4     [23] =&gt; tiger160,4     [24] =&gt; tiger192,4     [25] =&gt; snefru     [26] =&gt; snefru256     [27] =&gt; gost     [28] =&gt; gost-crypto     [29] =&gt; haval128,3     [30] =&gt; haval160,3     [31] =&gt; haval192,3     [32] =&gt; haval224,3     [33] =&gt; haval256,3     [34] =&gt; haval128,4     [35] =&gt; haval160,4     [36] =&gt; haval192,4     [37] =&gt; haval224,4     [38] =&gt; haval256,4     [39] =&gt; haval128,5     [40] =&gt; haval160,5     [41] =&gt; haval192,5     [42] =&gt; haval224,5     [43] =&gt; haval256,5 ) </pre></div>    </div>   </div>  </div>    <div class="refsect1 notes" id="refsect1-function.hash-hmac-algos-notes">   <h3 class="title">注释</h3>   <blockquote class="note"><p><strong class="note">Note</strong>:     <p class="para">     Before PHP 7.2.0 the only means to get a list of supported hash algorithms     has been to call <span class="function">{@link hash_algos()}</span> which also returns hash     algorithms that are not suitable for <span class="function">{@link hash_hmac()}</span>.    </p>   </p></blockquote>  </div>    <div class="refsect1 seealso" id="refsect1-function.hash-hmac-algos-seealso">   <h3 class="title">参见</h3>   <ul class="simplelist">    <li class="member"><span class="function">{@link hash_hmac()} - 使用 HMAC 方法生成带有密钥的哈希值</span></li>    <li class="member"><span class="function">{@link hash_algos()} - 返回已注册的哈希算法列表</span></li>   </ul>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.hash.php">Hash 函数</a></div></div>
 * @return string Returns a numerically indexed array containing the list of supported hashing algorithms suitable for {@see hash_hmac()}.*/
function hash_hmac_algos() {}

/**
*<div id="function.hash-pbkdf2" class="refentry">  <div class="refnamediv">   <h1 class="refname">hash_pbkdf2</h1>   <p class="verinfo">(PHP 5 &gt;= 5.5.0, PHP 7)</p><p class="refpurpose"><span class="refname">hash_pbkdf2</span> &mdash; <span class="dc-title">生成所提供密码的 PBKDF2 密钥导出</span></p>   </div>   <div class="refsect1 description" id="refsect1-function.hash-pbkdf2-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">string</span> <span class="methodname"><strong>hash_pbkdf2</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$algo</code></span>    , <span class="methodparam"><span class="type">string</span> <code class="parameter">$password</code></span>    , <span class="methodparam"><span class="type">string</span> <code class="parameter">$salt</code></span>    , <span class="methodparam"><span class="type">int</span> <code class="parameter">$iterations</code></span>    [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$length</code><span class="initializer"> = 0</span></span>    [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$raw_output</code><span class="initializer"> = <strong><code>FALSE</code></strong></span></span>   ]] )</div>   </div>    <div class="refsect1 parameters" id="refsect1-function.hash-pbkdf2-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">algo</code></dt>       <dd>        <p class="para">        哈希算法名称，例如        <em>md5</em>，<em>sha256</em>，<em>haval160,4</em> 等。        受支持的算法清单请参见 <span class="function">{@link hash_algos()}</span>。       </p>      </dd>                 <dt> <code class="parameter">password</code></dt>       <dd>        <p class="para">        要进行导出的密码。       </p>      </dd>                 <dt> <code class="parameter">salt</code></dt>       <dd>        <p class="para">        进行导出时所使用的“盐”，这个值应该是随机生成的。       </p>      </dd>                 <dt> <code class="parameter">iterations</code></dt>       <dd>        <p class="para">        进行导出时的迭代次数。       </p>      </dd>                 <dt> <code class="parameter">length</code></dt>       <dd>        <p class="para">        密钥导出数据的长度。如果 <code class="parameter">raw_output</code> 为 <strong><code>TRUE</code></strong>，        此参数为密钥导出数据的字节长度。如果 <code class="parameter">raw_output</code> 为 <strong><code>FALSE</code></strong>，        此参数为密钥导出数据的字节长度的 2 倍，因为 1 个字节数据对应的 2 个 16 进制的字符。       </p>       <p class="para">        如果传入 <em>0</em>，则使用所选算法的完整输出大小。       </p>      </dd>                 <dt> <code class="parameter">raw_output</code></dt>       <dd>        <p class="para">        设置为 <strong><code>TRUE</code></strong> 输出原始二进制数据，        设置为 <strong><code>FALSE</code></strong> 输出小写 16 进制字符串。       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.hash-pbkdf2-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    如果 <code class="parameter">raw_output</code> 设置为 <strong><code>TRUE</code></strong>，     则返回原始二进制数据表示的信息摘要，    否则返回 16 进制小写字符串格式表示的信息摘要。   </p>  </div>    <div class="refsect1 errors" id="refsect1-function.hash-pbkdf2-errors">   <h3 class="title">错误／异常</h3>   <p class="para">    在以下情况下会产生 <strong><code>E_WARNING</code></strong>：    指定了未知的算法，    <code class="parameter">iterations</code> 小于等于 <em>0</em>，    <code class="parameter">length</code> 小于等于 <em>0</em> 或者    <code class="parameter">salt</code> 过长（大于 <strong><code>INT_MAX</code></strong><em> - 4</em>）。   </p>  </div>    <div class="refsect1 changelog" id="refsect1-function.hash-pbkdf2-changelog">   <h3 class="title">更新日志</h3>   <p class="para">    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>7.2.0</td>        <td>不再支持非加密的哈希函数（adler32，crc32，crc32b，fnv132，fnv1a32，fnv164，fnv1a64，joaat）。</td>       </tr>       </tbody>         </table>    </p>  </div>     <div class="refsect1 examples" id="refsect1-function.hash-pbkdf2-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-896">     <p><strong>Example #1 <span class="function"><strong>hash_pbkdf2()</strong></span> 例程，基础用法</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$password&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">"password"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$iterations&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">1000</span><span style="color: #007700">;<br /><br /></span><span style="color: #FF8000">//&nbsp;使用&nbsp;openssl_random_pseudo_bytes()，random_bytes()，或者其他合适的随机数生成函数<br />//&nbsp;来生成随机初始向量<br /></span><span style="color: #9876AA">$salt&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">openssl_random_pseudo_bytes</span><span style="color: #007700">(</span><span style="color: #9876AA">16</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">MCRYPT_DEV_URANDOM</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$hash&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">hash_pbkdf2</span><span style="color: #007700">(</span><span style="color: #DD0000">"sha256"</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$password</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$salt</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$iterations</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">20</span><span style="color: #007700">);<br />echo&nbsp;</span><span style="color: #9876AA">$hash</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>      <div class="example-contents"><p>以上例程的输出类似于：</p></div>     <div class="example-contents screen"> <div class="cdata"><pre> 120fb6cffcf8b32c43e7 </pre></div>     </div>    </div>   </p>  </div>    <div class="refsect1 notes" id="refsect1-function.hash-pbkdf2-notes">   <h3 class="title">注释</h3>   <div class="caution"><strong class="caution">Caution</strong>    <p class="para">     为了安全起见，可以使用 PBKDF2 方法对密码明文进行哈希运算后再存储。     但是更好的方案是使用 <span class="function">{@link password_hash()}</span> 函数     或者使用 <strong><code>CRYPT_BLOWFISH</code></strong> 算法调用      <span class="function">{@link crypt()}</span> 函数。    </p>   </div>  </div>    <div class="refsect1 seealso" id="refsect1-function.hash-pbkdf2-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link crypt()} - 单向字符串散列</span></li>     <li class="member"><span class="function">{@link password_hash()} - 创建密码的散列（hash）</span></li>     <li class="member"><span class="function">{@link hash()} - 生成哈希值 （消息摘要）</span></li>     <li class="member"><span class="function">{@link hash_algos()} - 返回已注册的哈希算法列表</span></li>     <li class="member"><span class="function">{@link hash_init()} - 初始化增量哈希运算上下文</span></li>     <li class="member"><span class="function">{@link hash_hmac()} - 使用 HMAC 方法生成带有密钥的哈希值</span></li>     <li class="member"><span class="function">{@link hash_hmac_file()} - 使用 HMAC 方法和给定文件的内容生成带密钥的哈希值</span></li>     <li class="member"><span class="function">{@link openssl_pbkdf2()} - 生成一个 PKCS5 v2 PBKDF2 字符串</span></li>    </ul>   </p>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.hash.php">Hash 函数</a></div></div>
 * @return mixed a string containing the derived key as lowercase hexits unless*/
function hash_pbkdf2 ($algo, $password, $salt, $iterations, $length, $raw_output) {}

/**
*<div id="function.mhash-keygen-s2k" class="refentry">  <div class="refnamediv">   <h1 class="refname">mhash_keygen_s2k</h1>   <p class="verinfo">(PHP 4 &gt;= 4.0.4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">mhash_keygen_s2k</span> &mdash; <span class="dc-title">Generates a key</span></p>   </div>    <div class="refsect1 description" id="refsect1-function.mhash-keygen-s2k-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">string</span> <span class="methodname"><strong>mhash_keygen_s2k</strong></span>     ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$hash</code></span>    , <span class="methodparam"><span class="type">string</span> <code class="parameter">$password</code></span>    , <span class="methodparam"><span class="type">string</span> <code class="parameter">$salt</code></span>    , <span class="methodparam"><span class="type">int</span> <code class="parameter">$bytes</code></span>    )</div>    <p class="para rdfs-comment">    Generates a key according to the given <code class="parameter">hash</code>, using an user    provided <code class="parameter">password</code>.   </p>   <p class="para">    This is the Salted S2K algorithm as specified in the OpenPGP    document (<a href="http://www.faqs.org/rfcs/rfc2440" class="link external">&raquo;&nbsp;RFC 2440</a>).   </p>   <p class="para">    Keep in mind that user supplied passwords are not really suitable    to be used as keys in cryptographic algorithms, since users normally    choose keys they can write on keyboard. These passwords use    only 6 to 7 bits per character (or less). It is highly recommended    to use some kind of transformation (like this function) to the user    supplied key.   </p>  </div>    <div class="refsect1 parameters" id="refsect1-function.mhash-keygen-s2k-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">hash</code></dt>       <dd>        <p class="para">        The hash ID used to create the key.        One of the <strong><code>MHASH_hashname</code></strong> constants.       </p>      </dd>                 <dt> <code class="parameter">password</code></dt>       <dd>        <p class="para">        An user supplied password.       </p>      </dd>                 <dt> <code class="parameter">salt</code></dt>       <dd>        <p class="para">        Must be different and random enough for every key you generate in        order to create different keys. Because <code class="parameter">salt</code>        must be known when you check the keys, it is a good idea to append        the key to it. Salt has a fixed length of 8 bytes and will be padded        with zeros if you supply less bytes.       </p>      </dd>                 <dt> <code class="parameter">bytes</code></dt>       <dd>        <p class="para">        The key length, in bytes.       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.mhash-keygen-s2k-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    Returns the generated key as a string, or <strong><code>FALSE</code></strong> on error.   </p>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.mhash.php">Mhash 函数</a></div></div>
 * @return string the generated key as a string, or <b>FALSE</b> on error.*/
function mhash_keygen_s2k ($hash, $password, $salt, $bytes) {}

/**
*<div id="function.mhash-get-block-size" class="refentry">  <div class="refnamediv">   <h1 class="refname">mhash_get_block_size</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">mhash_get_block_size</span> &mdash; <span class="dc-title">Gets the block size of the specified hash</span></p>   </div>    <div class="refsect1 description" id="refsect1-function.mhash-get-block-size-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">int</span> <span class="methodname"><strong>mhash_get_block_size</strong></span>     ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$hash</code></span>    )</div>    <p class="para rdfs-comment">    Gets the size of a block of the specified <code class="parameter">hash</code>.   </p>  </div>    <div class="refsect1 parameters" id="refsect1-function.mhash-get-block-size-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">hash</code></dt>       <dd>        <p class="para">        The hash ID. One of the <strong><code>MHASH_hashname</code></strong> constants.       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.mhash-get-block-size-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    Returns the size in bytes or <strong><code>FALSE</code></strong>, if the <code class="parameter">hash</code>    does not exist.   </p>  </div>    <div class="refsect1 examples" id="refsect1-function.mhash-get-block-size-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-918">     <p><strong>Example #1 <span class="function"><strong>mhash_get_block_size()</strong></span> Example</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /><br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #9876AA">mhash_get_block_size</span><span style="color: #007700">(</span><span style="color: #9876AA">MHASH_MD5</span><span style="color: #007700">);&nbsp;</span><span style="color: #FF8000">//&nbsp;16<br /><br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>     </div>   </p>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.mhash.php">Mhash 函数</a></div></div>
 * @return int the size in bytes or <b>FALSE</b>, if the <i>hash</i>*/
function mhash_get_block_size ($hash) {}

/**
*<div id="function.mhash-get-hash-name" class="refentry">  <div class="refnamediv">   <h1 class="refname">mhash_get_hash_name</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">mhash_get_hash_name</span> &mdash; <span class="dc-title">Gets the name of the specified hash</span></p>   </div>    <div class="refsect1 description" id="refsect1-function.mhash-get-hash-name-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">string</span> <span class="methodname"><strong>mhash_get_hash_name</strong></span>     ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$hash</code></span>    )</div>    <p class="para rdfs-comment">    Gets the name of the specified <code class="parameter">hash</code>.   </p>  </div>    <div class="refsect1 parameters" id="refsect1-function.mhash-get-hash-name-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">hash</code></dt>       <dd>        <p class="para">        The hash ID. One of the <strong><code>MHASH_hashname</code></strong> constants.       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.mhash-get-hash-name-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    Returns the name of the hash or <strong><code>FALSE</code></strong>, if the hash does not exist.   </p>  </div>    <div class="refsect1 examples" id="refsect1-function.mhash-get-hash-name-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-919">     <p><strong>Example #1 <span class="function"><strong>mhash_get_hash_name()</strong></span> Example</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /><br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #9876AA">mhash_get_hash_name</span><span style="color: #007700">(</span><span style="color: #9876AA">MHASH_MD5</span><span style="color: #007700">);&nbsp;</span><span style="color: #FF8000">//&nbsp;MD5<br /><br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>     </div>   </p>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.mhash.php">Mhash 函数</a></div></div>
 * @return string the name of the hash or <b>FALSE</b>, if the hash does not exist.*/
function mhash_get_hash_name ($hash) {}

/**
*<div id="function.mhash-count" class="refentry">  <div class="refnamediv">   <h1 class="refname">mhash_count</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">mhash_count</span> &mdash; <span class="dc-title">Gets the highest available hash ID</span></p>   </div>    <div class="refsect1 description" id="refsect1-function.mhash-count-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">int</span> <span class="methodname"><strong>mhash_count</strong></span>     ( <span class="methodparam">void</span>    )</div>    <p class="para rdfs-comment">    Gets the highest available hash ID.   </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.mhash-count-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    Returns the highest available hash ID. Hashes are numbered from 0 to this    hash ID.   </p>  </div>    <div class="refsect1 examples" id="refsect1-function.mhash-count-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-917">     <p><strong>Example #1 Traversing all hashes</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /><br />$nr&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">mhash_count</span><span style="color: #007700">();<br /><br />for&nbsp;(</span><span style="color: #9876AA">$i&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">0</span><span style="color: #007700">;&nbsp;</span><span style="color: #9876AA">$i&nbsp;</span><span style="color: #007700">&lt;=&nbsp;</span><span style="color: #9876AA">$nr</span><span style="color: #007700">;&nbsp;</span><span style="color: #9876AA">$i</span><span style="color: #007700">++)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #9876AA">sprintf</span><span style="color: #007700">(</span><span style="color: #DD0000">"The&nbsp;blocksize&nbsp;of&nbsp;%s&nbsp;is&nbsp;%d\n"</span><span style="color: #007700">,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">mhash_get_hash_name</span><span style="color: #007700">(</span><span style="color: #9876AA">$i</span><span style="color: #007700">),<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">mhash_get_block_size</span><span style="color: #007700">(</span><span style="color: #9876AA">$i</span><span style="color: #007700">));<br />}<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>     </div>   </p>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.mhash.php">Mhash 函数</a></div></div>
 * @return int the highest available hash ID. Hashes are numbered from 0 to this*/
function mhash_count () {}

/**
*<div id="function.mhash" class="refentry">  <div class="refnamediv">   <h1 class="refname">mhash</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">mhash</span> &mdash; <span class="dc-title">Computes hash</span></p>   </div>    <div class="refsect1 description" id="refsect1-function.mhash-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">string</span> <span class="methodname"><strong>mhash</strong></span>     ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$hash</code></span>    , <span class="methodparam"><span class="type">string</span> <code class="parameter">$data</code></span>    [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$key</code></span>   ] )</div>    <p class="para rdfs-comment">    <span class="function"><strong>mhash()</strong></span> applies a hash function specified by    <code class="parameter">hash</code> to the <code class="parameter">data</code>.   </p>  </div>    <div class="refsect1 parameters" id="refsect1-function.mhash-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">hash</code></dt>       <dd>        <p class="para">        The hash ID. One of the <strong><code>MHASH_hashname</code></strong> constants.       </p>      </dd>                 <dt> <code class="parameter">data</code></dt>       <dd>        <p class="para">        The user input, as a string.       </p>      </dd>                 <dt> <code class="parameter">key</code></dt>       <dd>        <p class="para">        If specified, the function will return the resulting HMAC instead.        HMAC is keyed hashing for message authentication, or simply a message        digest that depends on the specified key. Not all algorithms         supported in mhash can be used in HMAC mode.       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.mhash-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    Returns the resulting hash (also called digest) or HMAC as a string, or    <strong><code>FALSE</code></strong> on error.   </p>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.mhash.php">Mhash 函数</a></div></div>
 * @return string the resulting hash (also called digest) or HMAC as a string, or*/
function mhash ($hash, $data, $key = null) {}


/**
*     <span class="function">{@link hash_init()}</span> 中的可选标志。表示 HMAC digest-keying 算法应被用于当前哈希上下文环境。     
*/
define ('HASH_HMAC', 1);
define ('MHASH_CRC32', 0);
define ('MHASH_MD5', 1);
define ('MHASH_SHA1', 2);
define ('MHASH_HAVAL256', 3);
define ('MHASH_RIPEMD160', 5);
define ('MHASH_TIGER', 7);
define ('MHASH_GOST', 8);
define ('MHASH_CRC32B', 9);
define ('MHASH_HAVAL224', 10);
define ('MHASH_HAVAL192', 11);
define ('MHASH_HAVAL160', 12);
define ('MHASH_HAVAL128', 13);
define ('MHASH_TIGER128', 14);
define ('MHASH_TIGER160', 15);
define ('MHASH_MD4', 16);
define ('MHASH_SHA256', 17);
define ('MHASH_ADLER32', 18);
define ('MHASH_SHA224', 19);
define ('MHASH_SHA512', 20);
define ('MHASH_SHA384', 21);
define ('MHASH_WHIRLPOOL', 22);
define ('MHASH_RIPEMD128', 23);
define ('MHASH_RIPEMD256', 24);
define ('MHASH_RIPEMD320', 25);
define ('MHASH_SNEFRU256', 27);
define ('MHASH_MD2', 28);
define ('MHASH_FNV132', 29);
define ('MHASH_FNV1A32', 30);
define ('MHASH_FNV164', 31);
define ('MHASH_FNV1A64', 32);
define ('MHASH_JOAAT', 33);

class HashContext
{
    private function __construct()
    {
    }
}
// End of hash v.1.0
?>
