<?php

// Start of com v.

/**
*<div id="class.com" class="reference">    <h1 class="title">The COM class</h1>  <div class="partintro"><p class="verinfo">(PHP 4 &gt;= 4.1.0, PHP 5, PHP 7)</p>   <div class="section" id="class.com.class">   <h2 class="title">Description</h2>   <p class="simpara">    The COM class allows you to instantiate an OLE compatible COM object and    call its methods and access its properties.   </p>   <p class="simpara">    <em>$obj = new COM(&quot;Application.ID&quot;)</em>   </p>  </div>  <div class="section" id="com.com">   <h2 class="title">Methods</h2>   <div class="methodsynopsis dc-description">    <span class="methodname"><strong>COM::__construct</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$module_name</code></span>    [, <span class="methodparam"><span class="type"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$server_name</code></span>    [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$codepage</code></span>    [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$typelib</code></span>   ]]] )</div>    <p class="para">    COM class constructor. The parameters have the following meanings:    <dl>            <dt> module_name</dt>       <dd>        <span class="simpara">        Can be a ProgID, Class ID or Moniker that names the component to load.       </span>       <span class="simpara">        A ProgID is typically the application or DLL name, followed by a period,        followed by the object name. e.g: <em>Word.Application</em>.       </span>       <span class="simpara">        A Class ID is the UUID that uniquely identifies a given class.       </span>       <span class="simpara">        A Moniker is a special form of naming, similar in concept to a URL        scheme, that identifies a resource and specifies how it should be        loaded.  As an example, you could load up Word and get an object        representing a word document by specifying the full path to the word        document as the module name, or you can use <em>LDAP:</em> as        a moniker to use the ADSI interface to LDAP.       </span>      </dd>                 <dt> server_name</dt>       <dd>        <span class="simpara">        The name of the DCOM server on which the component should be loaded and        run.  If <strong><code>NULL</code></strong>, the object is run using the default for the        application.  The default is typically to run it on the local machine,        although the administrator might have configured the application to        launch on a different machine.       </span>       <span class="simpara">        If you specify a non-<strong><code>NULL</code></strong> value for server, PHP will refuse to load        the object unless the <a href="http://php.net/manual/zh/com.configuration.php#ini.com.allow-dcom" class="xref"></a> configuration option        is set to <strong><code>TRUE</code></strong>.       </span>       <p class="para">        If <code class="parameter">server_name</code> is an array, it should contain the        following elements (case sensitive!).  Note that they are all optional        (although you need to specify both Username and Password together); if        you omit the Server setting, the default server will be used (as        mentioned above), and the instantiation of the object will not be        affected by the <a href="http://php.net/manual/zh/com.configuration.php#ini.com.allow-dcom" class="xref"></a>        directive.        <table class="doctable table">         <caption><strong>DCOM server name</strong></caption>                   <thead>           <tr>            <th><code class="parameter">server_name</code> key</th>            <th>type</th>            <th>description</th>           </tr>           </thead>           <tbody class="tbody">           <tr>            <td>Server</td>            <td>string</td>            <td>The name of the server.</td>           </tr>            <tr>            <td>Username</td>            <td>string</td>            <td>The username to connect as.</td>           </tr>            <tr>            <td>Password</td>            <td>string</td>            <td>The password for <code class="parameter">Username</code>.</td>           </tr>            <tr>            <td>Flags</td>            <td>integer</td>            <td>One or more of the following constants, logically OR&#039;d together:             <strong><code>CLSCTX_INPROC_SERVER</code></strong>,             <strong><code>CLSCTX_INPROC_HANDLER</code></strong>,             <strong><code>CLSCTX_LOCAL_SERVER</code></strong>,             <strong><code>CLSCTX_REMOTE_SERVER</code></strong>,             <strong><code>CLSCTX_SERVER</code></strong> and             <strong><code>CLSCTX_ALL</code></strong>.  The default value if not             specified here is <strong><code>CLSCTX_SERVER</code></strong> if you also             omit <code class="parameter">Server</code>, or             <strong><code>CLSCTX_REMOTE_SERVER</code></strong> if you do specify a             server.  You should consult the Microsoft documentation for             CoCreateInstance for more information on the meaning of these             constants; you will typically never have to use them.            </td>           </tr>           </tbody>                 </table>        </p>      </dd>                 <dt> codepage</dt>       <dd>        <span class="simpara">        Specifies the codepage that is used to convert strings to        unicode-strings and vice versa.  The conversion is applied whenever a        PHP string is passed as a parameter or returned from a method of this        COM object.  The code page is sticky, which means that it will        propagate to objects and variants returned from the object.       </span>       <span class="simpara">        Possible values are        <strong><code>CP_ACP</code></strong> (use system default ANSI code page - the        default if this parameter is omitted),        <strong><code>CP_MACCP</code></strong>,        <strong><code>CP_OEMCP</code></strong>, <strong><code>CP_SYMBOL</code></strong>,        <strong><code>CP_THREAD_ACP</code></strong> (use codepage/locale set for the        current executing thread), <strong><code>CP_UTF7</code></strong>        and <strong><code>CP_UTF8</code></strong>.  You may also use the number for a        given codepage; consult the Microsoft documentation for more details on        codepages and their numeric values.       </span>      </dd>          </dl>    </p>  </div>   <div class="section" id="class.com.overloadedmethods">   <h2 class="title">Overloaded Methods</h2>   <p class="para">    The returned object is an overloaded object, which means that PHP does    not see any fixed methods as it does with regular classes; instead, any    property or method accesses are passed through to COM.   </p>   <p class="para">    PHP will automatically detect methods that accept    parameters by reference, and will automatically convert regular PHP    variables to a form that can be passed by reference.  This means that you    can call the method very naturally; you needn&#039;t go to any extra effort in    your code.   </p>  </div>   <div class="section" id="class.com.examples">   <h2 class="title">COM examples</h2>   <p class="para">    <div class="example" id="example-6440">     <p><strong>Example #1 COM example (1)</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">//&nbsp;starting&nbsp;word<br /></span><span style="color: #9876AA">$word&nbsp;</span><span style="color: #007700">=&nbsp;new&nbsp;</span><span style="color: #9876AA">COM</span><span style="color: #007700">(</span><span style="color: #DD0000">"word.application"</span><span style="color: #007700">)&nbsp;or&nbsp;die(</span><span style="color: #DD0000">"Unable&nbsp;to&nbsp;instantiate&nbsp;Word"</span><span style="color: #007700">);<br />echo&nbsp;</span><span style="color: #DD0000">"Loaded&nbsp;Word,&nbsp;version&nbsp;</span><span style="color: #007700">{</span><span style="color: #9876AA">$word</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">Version</span><span style="color: #007700">}</span><span style="color: #DD0000">\n"</span><span style="color: #007700">;<br /><br /></span><span style="color: #FF8000">//bring&nbsp;it&nbsp;to&nbsp;front<br /></span><span style="color: #9876AA">$word</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">Visible&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">1</span><span style="color: #007700">;<br /><br /></span><span style="color: #FF8000">//open&nbsp;an&nbsp;empty&nbsp;document<br /></span><span style="color: #9876AA">$word</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">Documents</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">Add</span><span style="color: #007700">();<br /><br /></span><span style="color: #FF8000">//do&nbsp;some&nbsp;weird&nbsp;stuff<br /></span><span style="color: #9876AA">$word</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">Selection</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">TypeText</span><span style="color: #007700">(</span><span style="color: #DD0000">"This&nbsp;is&nbsp;a&nbsp;test..."</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$word</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">Documents</span><span style="color: #007700">[</span><span style="color: #9876AA">1</span><span style="color: #007700">]-&gt;</span><span style="color: #9876AA">SaveAs</span><span style="color: #007700">(</span><span style="color: #DD0000">"Useless&nbsp;test.doc"</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">//closing&nbsp;word<br /></span><span style="color: #9876AA">$word</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">Quit</span><span style="color: #007700">();<br /><br /></span><span style="color: #FF8000">//free&nbsp;the&nbsp;object<br /></span><span style="color: #9876AA">$word&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">null</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>     </div>   </p>   <p class="para">    <div class="example" id="example-6441">     <p><strong>Example #2 COM example (2)</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /><br />$conn&nbsp;</span><span style="color: #007700">=&nbsp;new&nbsp;</span><span style="color: #9876AA">COM</span><span style="color: #007700">(</span><span style="color: #DD0000">"ADODB.Connection"</span><span style="color: #007700">)&nbsp;or&nbsp;die(</span><span style="color: #DD0000">"Cannot&nbsp;start&nbsp;ADO"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$conn</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">Open</span><span style="color: #007700">(</span><span style="color: #DD0000">"Provider=SQLOLEDB;&nbsp;Data&nbsp;Source=localhost;<br />Initial&nbsp;Catalog=database;&nbsp;User&nbsp;ID=user;&nbsp;Password=password"</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$rs&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">$conn</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">Execute</span><span style="color: #007700">(</span><span style="color: #DD0000">"SELECT&nbsp;*&nbsp;FROM&nbsp;sometable"</span><span style="color: #007700">);&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;Recordset<br /><br /></span><span style="color: #9876AA">$num_columns&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">$rs</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">Fields</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">Count</span><span style="color: #007700">();<br />echo&nbsp;</span><span style="color: #9876AA">$num_columns&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /><br />for&nbsp;(</span><span style="color: #9876AA">$i</span><span style="color: #007700">=</span><span style="color: #9876AA">0</span><span style="color: #007700">;&nbsp;</span><span style="color: #9876AA">$i&nbsp;</span><span style="color: #007700">&lt;&nbsp;</span><span style="color: #9876AA">$num_columns</span><span style="color: #007700">;&nbsp;</span><span style="color: #9876AA">$i</span><span style="color: #007700">++)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$fld</span><span style="color: #007700">[</span><span style="color: #9876AA">$i</span><span style="color: #007700">]&nbsp;=&nbsp;</span><span style="color: #9876AA">$rs</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">Fields</span><span style="color: #007700">(</span><span style="color: #9876AA">$i</span><span style="color: #007700">);<br />}<br /><br /></span><span style="color: #9876AA">$rowcount&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">0</span><span style="color: #007700">;<br />while&nbsp;(!</span><span style="color: #9876AA">$rs</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">EOF</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(</span><span style="color: #9876AA">$i</span><span style="color: #007700">=</span><span style="color: #9876AA">0</span><span style="color: #007700">;&nbsp;</span><span style="color: #9876AA">$i&nbsp;</span><span style="color: #007700">&lt;&nbsp;</span><span style="color: #9876AA">$num_columns</span><span style="color: #007700">;&nbsp;</span><span style="color: #9876AA">$i</span><span style="color: #007700">++)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #9876AA">$fld</span><span style="color: #007700">[</span><span style="color: #9876AA">$i</span><span style="color: #007700">]-&gt;</span><span style="color: #9876AA">value&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #DD0000">"\t"</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;}<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$rowcount</span><span style="color: #007700">++;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;increments&nbsp;rowcount<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$rs</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">MoveNext</span><span style="color: #007700">();<br />}<br /><br /></span><span style="color: #9876AA">$rs</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">Close</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$conn</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">Close</span><span style="color: #007700">();<br /><br /></span><span style="color: #9876AA">$rs&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">null</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$conn&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">null</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>     </div>   </p>  </div>   </div> <div class="up"><a href="http://php.net/manual/zh/book.com.php">COM</a></div></div>
*/
class COM {

    /**
     * (PHP 4 &gt;= 4.1.0, PHP 5, PHP 7)<br/>
     * COM class constructor.
     * @param string $module_name
     * @param string $server_name [optional]
     * @param int $codepage [optional]
     * @param string $typelib [optional]
     */
    public function __construct ( $module_name, $server_name, $codepage, $typelib ) {}

    public function __get ($name) {}

    public function __set ($name, $value) {}

    public function __call ($name, $args) {}

}

/**
*<div id="class.dotnet" class="reference">    <h1 class="title">The DOTNET class</h1>  <div class="partintro"><p class="verinfo">(PHP 4 &gt;= 4.1.0, PHP 5, PHP 7)</p>   <div class="section" id="class.dotnet.class">   <h2 class="title">Description</h2>   <p class="simpara">    The DOTNET class allows you to instantiate a class from a .Net assembly and    call its methods and access its properties.   </p>   <p class="simpara">    <em>$obj = new DOTNET(&quot;assembly&quot;, &quot;classname&quot;)</em>   </p>  </div>  <div class="section" id="dotnet.dotnet">   <h2 class="title">Methods</h2>   <div class="methodsynopsis dc-description">    <span class="methodname"><strong>DOTNET::__construct</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$assembly_name</code></span>    , <span class="methodparam"><span class="type">string</span> <code class="parameter">$class_name</code></span>    [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$codepage</code></span>   ] )</div>    <p class="para">    DOTNET class constructor.  <code class="parameter">assembly_name</code> specifies    which assembly should be loaded, and <code class="parameter">class_name</code>    specifices which class in that assembly to instantiate.  You may    optionally specify a <code class="parameter">codepage</code> to use for unicode    string transformations; see the <a href="http://php.net/manual/zh/class.com.php" class="xref">COM</a> class    for more details on code pages.   </p>   <p class="para">    The returned object is an overloaded object, which means that PHP does    not see any fixed methods as it does with regular classes; instead, any    property or method accesses are passed through to COM and from there to    DOTNET.  In other words, the .Net object is mapped through the COM    interoperability layer provided by the .Net runtime.   </p>   <p class="para">    Once you have created a DOTNET object, PHP treats it identically to any    other COM object; all the same rules apply.   </p>   <p class="para">    <div class="example" id="example-6442">     <p><strong>Example #1 DOTNET example</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />&nbsp;$stack&nbsp;</span><span style="color: #007700">=&nbsp;new&nbsp;</span><span style="color: #9876AA">DOTNET</span><span style="color: #007700">(</span><span style="color: #DD0000">"mscorlib"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"System.Collections.Stack"</span><span style="color: #007700">);<br />&nbsp;</span><span style="color: #9876AA">$stack</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">Push</span><span style="color: #007700">(</span><span style="color: #DD0000">".Net"</span><span style="color: #007700">);<br />&nbsp;</span><span style="color: #9876AA">$stack</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">Push</span><span style="color: #007700">(</span><span style="color: #DD0000">"Hello&nbsp;"</span><span style="color: #007700">);<br />&nbsp;echo&nbsp;</span><span style="color: #9876AA">$stack</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">Pop</span><span style="color: #007700">()&nbsp;.&nbsp;</span><span style="color: #9876AA">$stack</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">Pop</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>     </div>   </p>   <blockquote class="note"><p><strong class="note">Note</strong>:     <p class="para">     You need to install the .Net runtime on your web server to take advantage     of this feature.    </p>   </p></blockquote>  </div>   </div> <div class="up"><a href="http://php.net/manual/zh/book.com.php">COM</a></div></div>
*/
class DOTNET {

    /**
     * (PHP 4 &gt;= 4.1.0, PHP 5, PHP 7)<br/>
     * COM class constructor.
     * @param string $assembly_name
     * @param string $class_name
     * @param int $codepage [optional]
     */
    public function __construct ( $assembly_name , string $class_name, $codepage ) {}

    public function __get ($name) {}

    public function __set ($name, $value) {}

    public function __call ($name, $args) {}

}

/**
*<div id="class.variant" class="reference">    <h1 class="title">VARIANT class</h1>  <div class="partintro"><p class="verinfo">(PHP 4 &gt;= 4.1.0, PHP 5, PHP 7)</p>   <div class="section" id="class.variant.class">   <h2 class="title">Description</h2>   <p class="simpara">    The VARIANT is COM&#039;s equivalent of the PHP zval; it is a structure that    can contain a value with a range of different possible types.  The VARIANT    class provided by the COM extension allows you to have more control over    the way that PHP passes values to and from COM.   </p>   <p class="simpara">    <em>$vVar = new VARIANT($var)</em>   </p>  </div>  <div class="section" id="variant.variant">   <h2 class="title">Methods</h2>   <div class="methodsynopsis dc-description">    <span class="methodname"><strong>VARIANT::__construct</strong></span>     ([ <span class="methodparam"><span class="type"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$value</code></span>    [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$type</code></span>    [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$codepage</code></span>   ]]] )</div>    <p class="para">    VARIANT class constructor. Parameters:    <dl>     <dt> value</dt>     <dd>      <span class="simpara">      initial value. if omitted, or set to <strong><code>NULL</code></strong> an VT_EMPTY object is created.     </span>    </dd>         <dt> type</dt>     <dd>      <span class="simpara">      specifies the content type of the VARIANT object. Possible values are      one of the <strong><code>VT_XXX</code></strong> <a href="http://php.net/manual/zh/com.constants.php" class="xref">预定义常量</a>.     </span>     <span class="simpara">      In PHP versions prior to PHP 5, you could force PHP to pass a variant      object by reference by OR&#039;ing <strong><code>VT_BYREF</code></strong>      with the <code class="parameter">type</code>.  In PHP 5, this hack is not      supported; instead, PHP 5 can detect parameters passed by reference      automatically; they do not even need to be passed as VARIANT objects.     </span>     <span class="simpara">      Consult the <acronym title="Microsoft Developer Network">MSDN</acronym> library for additional information      on the VARIANT type.     </span>    </dd>         <dt> codepage</dt>     <dd>      <span class="simpara">      specifies the codepage that is used to convert strings to      unicode.  See the parameter of the same name in the      <a href="http://php.net/manual/zh/class.com.php" class="xref">COM</a> class for more information.     </span>    </dd>         </dl>    </p>   <p class="para">    PHP versions prior to PHP 5 define a number of (undocumented) virtual properties    for instances of the VARIANT class; these properties have all been removed in    PHP 5 in favour of its more natural syntax; these differences are best    highlighted by example:   </p>   <p class="para">    <div class="example" id="example-6443">     <p><strong>Example #1 Variant example, PHP 4.x style</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$v&nbsp;</span><span style="color: #007700">=&nbsp;new&nbsp;</span><span style="color: #9876AA">VARIANT</span><span style="color: #007700">(</span><span style="color: #9876AA">42</span><span style="color: #007700">);<br />print&nbsp;</span><span style="color: #DD0000">"The&nbsp;type&nbsp;is&nbsp;"&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #9876AA">$v</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">type&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #DD0000">"&lt;br/&gt;"</span><span style="color: #007700">;<br />print&nbsp;</span><span style="color: #DD0000">"The&nbsp;value&nbsp;is&nbsp;"&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #9876AA">$v</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">value&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #DD0000">"&lt;br/&gt;"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>     </div>   </p>   <p class="para">    <div class="example" id="example-6444">     <p><strong>Example #2 Variant example, PHP 5 style</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$v&nbsp;</span><span style="color: #007700">=&nbsp;new&nbsp;</span><span style="color: #9876AA">VARIANT</span><span style="color: #007700">(</span><span style="color: #9876AA">42</span><span style="color: #007700">);<br />print&nbsp;</span><span style="color: #DD0000">"The&nbsp;type&nbsp;is&nbsp;"&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #9876AA">variant_get_type</span><span style="color: #007700">(</span><span style="color: #9876AA">$v</span><span style="color: #007700">)&nbsp;.&nbsp;</span><span style="color: #DD0000">"&lt;br/&gt;"</span><span style="color: #007700">;<br />print&nbsp;</span><span style="color: #DD0000">"The&nbsp;value&nbsp;is&nbsp;"&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #9876AA">$v&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #DD0000">"&lt;br/&gt;"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>     </div>   </p>   <p class="para">    The reason for the change is that, internally, the COM extension sees    VARIANT, COM and DOTNET classes as the same thing, and the design    philosophy for these classes is that all property and member accesses are    passed through to COM with no interference.  The new syntax is more    natural and less effort, and most of the removed virtual properties didn&#039;t    make any sense in a PHP context in any case.   </p>   <blockquote class="note"><p><strong class="note">Note</strong>:     <p class="para">     PHP 5 takes a much simpler approach to handling VARIANTs; when returning     a value or fetching a variant property, the variant is converted to a PHP     value only when there is a direct mapping between the types that would     not result in a loss of information.  In all other cases, the result is     returned as an instance of the VARIANT class.  You can force PHP to     convert or evaluate the variant as a PHP native type by using a casting     operator explicitly, or implicitly casting to a string by     <span class="function">{@link print}</span>ing it.  You may use the wide range of variant     functions to perform arithmetic operations on variants without forcing a     conversion or risking a loss of data.    </p>   </p></blockquote>   <p class="para">    See also <span class="function">{@link variant_get_type()}</span>.   </p>  </div>   </div> <div class="up"><a href="http://php.net/manual/zh/book.com.php">COM</a></div></div>
*/
class VARIANT {

    /**
     * (PHP 4 &gt;= 4.1.0, PHP 5, PHP 7)<br/>
     * COM class constructor.
     * @param mixed $value [optional]
     * @param int $type [optional]
     * @param int $codepage [optional]
     */
    public function __construct ( $value , string $class_name, $codepage ) {}

    public function __get ($name) {}

    public function __set ($name, $value) {}

    public function __call ($name, $args) {}

}

/**
*<div id="function.com-create-guid" class="refentry">  <div class="refnamediv">   <h1 class="refname">com_create_guid</h1>   <p class="verinfo">(PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">com_create_guid</span> &mdash; <span class="dc-title">Generate a globally unique identifier (GUID)</span></p>   </div>  <div class="refsect1 description" id="refsect1-function.com-create-guid-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">string</span> <span class="methodname"><strong>com_create_guid</strong></span>     ( <span class="methodparam">void</span>    )</div>    <p class="para rdfs-comment">    Generates a Globally Unique Identifier (GUID).   </p>   <p class="para">    A GUID is generated in the same way as DCE UUID&#039;s, except that the    Microsoft convention is to enclose a GUID in curly braces.   </p>  </div>   <div class="refsect1 returnvalues" id="refsect1-function.com-create-guid-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    Returns the GUID as a string.   </p>  </div>   <div class="refsect1 seealso" id="refsect1-function.com-create-guid-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function"><strong>uuid_create()</strong></span> in the PECL uuid extension</li>    </ul>   </p>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.com.php">COM 函数</a></div></div>
 * @return string*/
function com_create_guid () {}

/**
*<div id="function.com-event-sink" class="refentry">  <div class="refnamediv">   <h1 class="refname">com_event_sink</h1>   <p class="verinfo">(PHP 4 &gt;= 4.2.0, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">com_event_sink</span> &mdash; <span class="dc-title">Connect events from a COM object to a PHP object</span></p>   </div>  <div class="refsect1 description" id="refsect1-function.com-event-sink-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">bool</span> <span class="methodname"><strong>com_event_sink</strong></span>     ( <span class="methodparam"><span class="type"><a href="http://php.net/manual/zh/class.variant.php" class="type variant">variant</a></span> <code class="parameter">$comobject</code></span>    , <span class="methodparam"><span class="type">object</span> <code class="parameter">$sinkobject</code></span>    [, <span class="methodparam"><span class="type"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$sinkinterface</code></span>   ] )</div>    <p class="para rdfs-comment">    Instructs COM to sink events generated by    <code class="parameter">comobject</code> into the PHP object    <code class="parameter">sinkobject</code>.   </p>   <p class="para">    Be careful how you use this feature; if you are doing something similar    to the example below, then it doesn&#039;t really make sense to run it in a    web server context.   </p>  </div>   <div class="refsect1 parameters" id="refsect1-function.com-event-sink-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">comobject</code></dt>       <dd>        <p class="para">       </p>      </dd>                 <dt> <code class="parameter">sinkobject</code></dt>       <dd>        <p class="para">        <code class="parameter">sinkobject</code> should be an instance of a class with        methods named after those of the desired dispinterface; you may use        <span class="function">{@link com_print_typeinfo()}</span> to help generate a template class        for this purpose.       </p>      </dd>                 <dt> <code class="parameter">sinkinterface</code></dt>       <dd>        <p class="para">        PHP will attempt to use the default dispinterface type specified by        the typelibrary associated with <code class="parameter">comobject</code>, but        you may override this choice by setting        <code class="parameter">sinkinterface</code> to the name of the dispinterface        that you want to use.       </p>      </dd>          </dl>    </p>  </div>   <div class="refsect1 returnvalues" id="refsect1-function.com-event-sink-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    成功时返回 <strong><code>TRUE</code></strong>， 或者在失败时返回 <strong><code>FALSE</code></strong>。   </p>  </div>   <div class="refsect1 examples" id="refsect1-function.com-event-sink-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-6445">     <p><strong>Example #1 COM event sink example</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">class&nbsp;</span><span style="color: #9876AA">IEEventSinker&nbsp;</span><span style="color: #007700">{<br />&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;</span><span style="color: #9876AA">$terminated&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">false</span><span style="color: #007700">;<br /><br />&nbsp;&nbsp;&nbsp;function&nbsp;</span><span style="color: #9876AA">ProgressChange</span><span style="color: #007700">(</span><span style="color: #9876AA">$progress</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$progressmax</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"Download&nbsp;progress:&nbsp;</span><span style="color: #9876AA">$progress</span><span style="color: #DD0000">&nbsp;/&nbsp;</span><span style="color: #9876AA">$progressmax</span><span style="color: #DD0000">\n"</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;}<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;</span><span style="color: #9876AA">DocumentComplete</span><span style="color: #007700">(&amp;</span><span style="color: #9876AA">$dom</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$url</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"Document&nbsp;</span><span style="color: #9876AA">$url</span><span style="color: #DD0000">&nbsp;complete\n"</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;}<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;</span><span style="color: #9876AA">OnQuit</span><span style="color: #007700">()&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"Quit!\n"</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">terminated&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">true</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;}<br />}<br /></span><span style="color: #9876AA">$ie&nbsp;</span><span style="color: #007700">=&nbsp;new&nbsp;</span><span style="color: #9876AA">COM</span><span style="color: #007700">(</span><span style="color: #DD0000">"InternetExplorer.Application"</span><span style="color: #007700">);<br /></span><span style="color: #FF8000">//&nbsp;note&nbsp;that&nbsp;you&nbsp;don't&nbsp;need&nbsp;the&nbsp;&amp;&nbsp;for&nbsp;PHP&nbsp;5!<br /></span><span style="color: #9876AA">$sink&nbsp;</span><span style="color: #007700">=&nbsp;new&nbsp;</span><span style="color: #9876AA">IEEventSinker</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">com_event_sink</span><span style="color: #007700">(</span><span style="color: #9876AA">$ie</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$sink</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"DWebBrowserEvents2"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$ie</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">Visible&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">true</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$ie</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">Navigate</span><span style="color: #007700">(</span><span style="color: #DD0000">"http://www.example.org"</span><span style="color: #007700">);<br />while(!</span><span style="color: #9876AA">$sink</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">terminated</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;</span><span style="color: #9876AA">com_message_pump</span><span style="color: #007700">(</span><span style="color: #9876AA">4000</span><span style="color: #007700">);<br />}<br /></span><span style="color: #9876AA">$ie&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">null</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>     </div>   </p>  </div>   <div class="refsect1 seealso" id="refsect1-function.com-event-sink-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link com_print_typeinfo()} - Print out a PHP class definition for a dispatchable interface</span></li>     <li class="member"><span class="function">{@link com_message_pump()} - Process COM messages, sleeping for up to timeoutms milliseconds</span></li>    </ul>   </p>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.com.php">COM 函数</a></div></div>
 * @return bool*/
function com_event_sink ( $comobject, $sinkobject, $sinkinterface) {}

/**
*<div id="function.com-get-active-object" class="refentry">  <div class="refnamediv">   <h1 class="refname">com_get_active_object</h1>   <p class="verinfo">(PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">com_get_active_object</span> &mdash; <span class="dc-title">Returns a handle to an already running instance of a COM object</span></p>   </div>  <div class="refsect1 description" id="refsect1-function.com-get-active-object-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type"><a href="http://php.net/manual/zh/class.variant.php" class="type variant">variant</a></span> <span class="methodname"><strong>com_get_active_object</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$progid</code></span>    [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$code_page</code></span>   ] )</div>    <p class="para rdfs-comment">    <span class="function"><strong>com_get_active_object()</strong></span> is similar to creating a new    instance of a <a href="http://php.net/manual/zh/class.com.php" class="xref">COM</a> object, except that it will    only return an object to your script if the object is already running.    OLE applications use something known as the &quot;<em>Running Object Table</em>&quot; to    allow well-known applications to be launched only once; this function    exposes the COM library function GetActiveObject() to get a handle on a    running instance.   </p>  </div>   <div class="refsect1 parameters" id="refsect1-function.com-get-active-object-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">progid</code></dt>       <dd>        <p class="para">        <code class="parameter">progid</code> must be either the ProgID or CLSID for        the object that you want to access (for example        <em>Word.Application</em>).       </p>      </dd>                 <dt> <code class="parameter">code_page</code></dt>       <dd>        <p class="para">        Acts in precisely the same way that it does for the <a href="http://php.net/manual/zh/class.com.php" class="xref">COM</a> class.       </p>      </dd>          </dl>    </p>  </div>   <div class="refsect1 returnvalues" id="refsect1-function.com-get-active-object-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    If the requested object is running, it will be returned to your script    just like any other COM object.   </p>  </div>   <div class="refsect1 errors" id="refsect1-function.com-get-active-object-errors">   <h3 class="title">错误／异常</h3>   <p class="para">    There are a variety of reasons why this function might fail, the most    common being that the object is not already running.  In that situation,    the exception error code will be <strong><code>MK_E_UNAVAILABLE</code></strong>;    you can use the <em>getCode</em> method of the exception object    to check the exception code.   </p>  </div>   <div class="refsect1 notes" id="refsect1-function.com-get-active-object-notes">   <h3 class="title">注释</h3>   <div class="warning"><strong class="warning">Warning</strong>    <p class="para">     Using <span class="function"><strong>com_get_active_object()</strong></span> in a web server context     is not always a smart idea.  Most COM/OLE applications are not designed     to handle more than one client concurrently, even (or especially!)     Microsoft Office.  You should read <a href="http://support.microsoft.com/kb/257757" class="link external">&raquo;&nbsp;Considerations for Server-Side     Automation of Office</a> for more information on the general issues     involved.    </p>   </div>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.com.php">COM 函数</a></div></div>
 * @return \VARIANT*/
function com_get_active_object ( $progid, $code_page ) {}

/**
*<div id="function.com-load-typelib" class="refentry">    <div class="refnamediv">     <h1 class="refname">com_load_typelib</h1>     <p class="verinfo">(PHP 4 &gt;= 4.1.0, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">com_load_typelib</span> &mdash; <span class="dc-title">装载一个 Typelib</span></p>     </div>        <div class="refsect1 description" id="refsect1-function.com-load-typelib-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">bool</span> <span class="methodname"><strong>com_load_typelib</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$typelib_name</code></span>    [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$case_insensitive</code><span class="initializer"> = true</span></span>   ] )</div>        <p class="para rdfs-comment">    Loads a type-library and registers its constants in the engine, as though    they were defined using <span class="function">{@link define()}</span>.   </p>   <p class="para">    Note that it is much more efficient to use the <a href="http://php.net/manual/zh/com.configuration.php#ini.com.typelib-file" class="xref"></a> configuration setting to pre-load and    register the constants, although not so flexible.   </p>   <p class="para">    If you have turned on <a href="http://php.net/manual/zh/com.configuration.php#ini.com.autoregister-typelib" class="xref"></a>, then    PHP will attempt to automatically register the constants associated with a    COM object when you instantiate it.  This depends on the interfaces    provided by the COM object itself, and may not always be possible.   </p>    </div>    <div class="refsect1 parameters" id="refsect1-function.com-load-typelib-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">typelib_name</code></dt>       <dd>        <p class="para">        <code class="parameter">typelib_name</code> can be one of the following:        <ul class="itemizedlist">         <li class="listitem">          <p class="para">           The filename of a <em>.tlb</em> file or the executable module           that contains the type library.          </p>         </li>         <li class="listitem">          <p class="para">           The type library GUID, followed by its version number, for example           <em>{00000200-0000-0010-8000-00AA006D2EA4},2,0</em>.          </p>         </li>         <li class="listitem">          <p class="para">           The type library name, e.g. <em>Microsoft OLE DB ActiveX Data           Objects 1.0 Library</em>.          </p>         </li>        </ul>        PHP will attempt to resolve the type library in this order, as the        process gets more and more expensive as you progress down the list;        searching for the type library by name is handled by physically        enumerating the registry until we find a match.       </p>      </dd>                 <dt> <code class="parameter">case_insensitive</code></dt>       <dd>        <p class="para">        The <code class="parameter">case_insensitive</code> behaves in the same way as        the parameter with the same name in the <span class="function">{@link define()}</span>        function.       </p>      </dd>          </dl>    </p>  </div>   <div class="refsect1 returnvalues" id="refsect1-function.com-load-typelib-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    成功时返回 <strong><code>TRUE</code></strong>， 或者在失败时返回 <strong><code>FALSE</code></strong>。   </p>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.com.php">COM 函数</a></div></div>
 * @return bool*/
function com_load_typelib ( $typelib_name, $case_insensitive = true ) {}

/**
*<div id="function.com-message-pump" class="refentry">  <div class="refnamediv">   <h1 class="refname">com_message_pump</h1>   <p class="verinfo">(PHP 4 &gt;= 4.2.0, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">com_message_pump</span> &mdash; <span class="dc-title">Process COM messages, sleeping for up to timeoutms milliseconds</span></p>   </div>  <div class="refsect1 description" id="refsect1-function.com-message-pump-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">bool</span> <span class="methodname"><strong>com_message_pump</strong></span>     ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$timeoutms</code><span class="initializer"> = 0</span></span>   ] )</div>    <p class="para rdfs-comment">    This function will sleep for up to <code class="parameter">timeoutms</code>    milliseconds, or until a message arrives in the queue.   </p>   <p class="para">    The purpose of this function is to route COM calls between apartments and    handle various synchronization issues.  This allows your script to wait    efficiently for events to be triggered, while still handling other events    or running other code in the background.  You should use it in a loop, as    demonstrated by the example in the <span class="function">{@link com_event_sink()}</span>    function, until you are finished using event bound COM objects.   </p>  </div>   <div class="refsect1 parameters" id="refsect1-function.com-message-pump-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">timeoutms</code></dt>       <dd>        <p class="para">        The timeout, in milliseconds.       </p>       <p class="para">        If you do not specify a value for <code class="parameter">timeoutms</code>,        then 0 will be assumed.  A 0 value means that no waiting will be        performed; if there are messages pending they will be dispatched as        before; if there are no messages pending, the function will return        <strong><code>FALSE</code></strong> immediately without sleeping.       </p>      </dd>          </dl>    </p>  </div>   <div class="refsect1 returnvalues" id="refsect1-function.com-message-pump-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    If a message or messages arrives before the timeout, they will be    dispatched, and the function will return <strong><code>TRUE</code></strong>. If the timeout occurs and    no messages were processed, the return value will be <strong><code>FALSE</code></strong>.   </p>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.com.php">COM 函数</a></div></div>
 * @return bool*/
function com_message_pump ( $timeoutms = 0 ) {}

/**
*<div id="function.com-print-typeinfo" class="refentry">  <div class="refnamediv">   <h1 class="refname">com_print_typeinfo</h1>   <p class="verinfo">(PHP 4 &gt;= 4.2.0, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">com_print_typeinfo</span> &mdash; <span class="dc-title">Print out a PHP class definition for a dispatchable interface</span></p>   </div>  <div class="refsect1 description" id="refsect1-function.com-print-typeinfo-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">bool</span> <span class="methodname"><strong>com_print_typeinfo</strong></span>     ( <span class="methodparam"><span class="type">object</span> <code class="parameter">$comobject</code></span>    [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$dispinterface</code></span>    [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$wantsink</code><span class="initializer"> = <strong><code>FALSE</code></strong></span></span>   ]] )</div>    <p class="para rdfs-comment">    The purpose of this function is to help generate a skeleton class for use    as an event sink.  You may also use it to generate a dump of any COM    object, provided that it supports enough of the introspection interfaces,    and that you know the name of the interface you want to display.   </p>  </div>   <div class="refsect1 parameters" id="refsect1-function.com-print-typeinfo-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">comobject</code></dt>       <dd>        <p class="para">        <code class="parameter">comobject</code> should be either an instance of a COM        object, or be the name of a typelibrary (which will be resolved according        to the rules set out in <span class="function">{@link com_load_typelib()}</span>).       </p>      </dd>                 <dt> <code class="parameter">dispinterface</code></dt>       <dd>        <p class="para">        The name of an <em>IDispatch</em> descendant interface that you want to display.       </p>      </dd>                 <dt> <code class="parameter">wantsink</code></dt>       <dd>        <p class="para">        If set to <strong><code>TRUE</code></strong>, the corresponding sink interface will be displayed        instead.       </p>      </dd>          </dl>    </p>  </div>   <div class="refsect1 returnvalues" id="refsect1-function.com-print-typeinfo-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    成功时返回 <strong><code>TRUE</code></strong>， 或者在失败时返回 <strong><code>FALSE</code></strong>。   </p>  </div>   <div class="refsect1 seealso" id="refsect1-function.com-print-typeinfo-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link com_event_sink()} - Connect events from a COM object to a PHP object</span></li>     <li class="member"><span class="function">{@link com_load_typelib()} - 装载一个 Typelib</span></li>    </ul>   </p>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.com.php">COM 函数</a></div></div>
 * @return bool*/
function com_print_typeinfo ( $comobject, $dispinterface, $wantsink = false ) {}

/**
*<div id="function.variant-abs" class="refentry">  <div class="refnamediv">   <h1 class="refname">variant_abs</h1>   <p class="verinfo">(PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">variant_abs</span> &mdash; <span class="dc-title">Returns the absolute value of a variant</span></p>   </div>  <div class="refsect1 description" id="refsect1-function.variant-abs-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>variant_abs</strong></span>     ( <span class="methodparam"><span class="type"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$val</code></span>    )</div>    <p class="para rdfs-comment">    Returns the absolute value of a variant.   </p>  </div>   <div class="refsect1 parameters" id="refsect1-function.variant-abs-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">val</code></dt>       <dd>        <p class="para">        The variant.       </p>      </dd>          </dl>     <blockquote class="note"><p><strong class="note">Note</strong>:  <p class="para">  对于所有变量运算函数，本函数的参数可以是 PHP  内置的类型（整数，字符串，浮点数，布尔型或者  <strong><code>NULL</code></strong>），或者是一个 COM，VARIANT 或者 DOTNET 类的实例。PHP  内置类型将会使用和构造<a href="http://php.net/manual/zh/class.variant.php" class="xref">VARIANT</a>类相同的规则转换成变量。COM 和 DOTNET  对象的值将会取其默认属性并被当成变量值使用。 </p> <p class="para">  变量运算函数是同名函数在 COM  库中的外包；有关此类函数的更多信息参见 MSDN  库。PHP 函数命名有少许区别，例如 PHP  中的 <span class="function">{@link variant_add()}</span> 对应于  MSDN 文档中的 <em>VarAdd()</em>。 </p> </p></blockquote>    </p>  </div>   <div class="refsect1 returnvalues" id="refsect1-function.variant-abs-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    Returns the absolute value of <code class="parameter">val</code>.   </p>  </div>   <div class="refsect1 seealso" id="refsect1-function.variant-abs-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link abs()} - 绝对值</span></li>    </ul>   </p>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.com.php">COM 函数</a></div></div>
 * @return mixed*/
function variant_abs ( $comobject, $dispinterface, $wantsink = false ) {}

/**
*<div id="function.variant-add" class="refentry">  <div class="refnamediv">   <h1 class="refname">variant_add</h1>   <p class="verinfo">(PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">variant_add</span> &mdash; <span class="dc-title">&quot;Adds&quot; two variant values together and returns the result</span></p>   </div>  <div class="refsect1 description" id="refsect1-function.variant-add-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>variant_add</strong></span>     ( <span class="methodparam"><span class="type"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$left</code></span>    , <span class="methodparam"><span class="type"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$right</code></span>    )</div>    <p class="para rdfs-comment">    Adds <code class="parameter">left</code> to <code class="parameter">right</code> using    the following rules (taken from the MSDN library), which correspond to    those of Visual Basic:    <table class="doctable table">     <caption><strong>Variant Addition Rules</strong></caption>          <thead>      <tr>       <th>If</th>       <th>Then</th>      </tr>      </thead>      <tbody class="tbody">      <tr>       <td>Both expressions are of the string type</td>       <td>Concatenation</td>      </tr>       <tr>       <td>One expression is a string type and the other a       character</td>       <td>Addition</td>      </tr>       <tr>       <td>One expression is numeric and the other is a string</td>       <td>Addition</td>      </tr>       <tr>       <td>Both expressions are numeric</td>       <td>Addition</td>      </tr>       <tr>       <td>Either expression is NULL</td>       <td>NULL is returned</td>      </tr>       <tr>       <td>Both expressions are empty</td>       <td>Integer subtype is returned</td>      </tr>      </tbody>       </table>   </p>  </div>   <div class="refsect1 parameters" id="refsect1-function.variant-add-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">left</code></dt>       <dd>        <p class="para">        The left operand.       </p>      </dd>                 <dt> <code class="parameter">right</code></dt>       <dd>        <p class="para">        The right operand.       </p>      </dd>          </dl>     <blockquote class="note"><p><strong class="note">Note</strong>:  <p class="para">  对于所有变量运算函数，本函数的参数可以是 PHP  内置的类型（整数，字符串，浮点数，布尔型或者  <strong><code>NULL</code></strong>），或者是一个 COM，VARIANT 或者 DOTNET 类的实例。PHP  内置类型将会使用和构造<a href="http://php.net/manual/zh/class.variant.php" class="xref">VARIANT</a>类相同的规则转换成变量。COM 和 DOTNET  对象的值将会取其默认属性并被当成变量值使用。 </p> <p class="para">  变量运算函数是同名函数在 COM  库中的外包；有关此类函数的更多信息参见 MSDN  库。PHP 函数命名有少许区别，例如 PHP  中的 <span class="function"><strong>variant_add()</strong></span> 对应于  MSDN 文档中的 <em>VarAdd()</em>。 </p> </p></blockquote>    </p>  </div>   <div class="refsect1 returnvalues" id="refsect1-function.variant-add-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    Returns the result.   </p>  </div>   <div class="refsect1 seealso" id="refsect1-function.variant-add-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link variant_sub()} - Subtracts the value of the right variant from the left variant value</span></li>    </ul>   </p>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.com.php">COM 函数</a></div></div>
 * @return mixed*/
function variant_add ( $left, $right ) {}

/**
*<div id="function.variant-and" class="refentry">  <div class="refnamediv">   <h1 class="refname">variant_and</h1>   <p class="verinfo">(PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">variant_and</span> &mdash; <span class="dc-title">Performs a bitwise AND operation between two variants</span></p>   </div>  <div class="refsect1 description" id="refsect1-function.variant-and-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>variant_and</strong></span>     ( <span class="methodparam"><span class="type"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$left</code></span>    , <span class="methodparam"><span class="type"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$right</code></span>    )</div>    <p class="para rdfs-comment">    Performs a bitwise AND operation.    Note that this is slightly different from a regular AND operation.   </p>  </div>   <div class="refsect1 parameters" id="refsect1-function.variant-and-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">left</code></dt>       <dd>        <p class="para">        The left operand.       </p>      </dd>                 <dt> <code class="parameter">right</code></dt>       <dd>        <p class="para">        The right operand.       </p>      </dd>          </dl>     <blockquote class="note"><p><strong class="note">Note</strong>:  <p class="para">  对于所有变量运算函数，本函数的参数可以是 PHP  内置的类型（整数，字符串，浮点数，布尔型或者  <strong><code>NULL</code></strong>），或者是一个 COM，VARIANT 或者 DOTNET 类的实例。PHP  内置类型将会使用和构造<a href="http://php.net/manual/zh/class.variant.php" class="xref">VARIANT</a>类相同的规则转换成变量。COM 和 DOTNET  对象的值将会取其默认属性并被当成变量值使用。 </p> <p class="para">  变量运算函数是同名函数在 COM  库中的外包；有关此类函数的更多信息参见 MSDN  库。PHP 函数命名有少许区别，例如 PHP  中的 <span class="function">{@link variant_add()}</span> 对应于  MSDN 文档中的 <em>VarAdd()</em>。 </p> </p></blockquote>    </p>  </div>   <div class="refsect1 returnvalues" id="refsect1-function.variant-and-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    <table class="doctable table">     <caption><strong>Variant AND Rules</strong></caption>           <thead>       <tr>        <th>If <code class="parameter">left</code> is</th>        <th>If <code class="parameter">right</code> is</th>        <th>then the result is</th>       </tr>       </thead>       <tbody class="tbody">       <tr><td><strong><code>TRUE</code></strong></td><td><strong><code>TRUE</code></strong></td><td><strong><code>TRUE</code></strong></td></tr>        <tr><td><strong><code>TRUE</code></strong></td><td><strong><code>FALSE</code></strong></td><td><strong><code>FALSE</code></strong></td></tr>        <tr><td><strong><code>TRUE</code></strong></td><td><strong><code>NULL</code></strong></td><td><strong><code>NULL</code></strong></td></tr>        <tr><td><strong><code>FALSE</code></strong></td><td><strong><code>TRUE</code></strong></td><td><strong><code>FALSE</code></strong></td></tr>        <tr><td><strong><code>FALSE</code></strong></td><td><strong><code>FALSE</code></strong></td><td><strong><code>FALSE</code></strong></td></tr>        <tr><td><strong><code>FALSE</code></strong></td><td><strong><code>NULL</code></strong></td><td><strong><code>FALSE</code></strong></td></tr>        <tr><td><strong><code>NULL</code></strong></td><td><strong><code>TRUE</code></strong></td><td><strong><code>NULL</code></strong></td></tr>        <tr><td><strong><code>NULL</code></strong></td><td><strong><code>FALSE</code></strong></td><td><strong><code>FALSE</code></strong></td></tr>        <tr><td><strong><code>NULL</code></strong></td><td><strong><code>NULL</code></strong></td><td><strong><code>NULL</code></strong></td></tr>       </tbody>         </table>    </p>  </div>   <div class="refsect1 seealso" id="refsect1-function.variant-and-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link variant_or()} - Performs a logical disjunction on two variants</span></li>    </ul>   </p>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.com.php">COM 函数</a></div></div>
 * @return mixed*/
function variant_and ( $left, $right ) {}

/**
*<div id="function.variant-cast" class="refentry">  <div class="refnamediv">   <h1 class="refname">variant_cast</h1>   <p class="verinfo">(PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">variant_cast</span> &mdash; <span class="dc-title">Convert a variant into a new variant object of another type</span></p>   </div>  <div class="refsect1 description" id="refsect1-function.variant-cast-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type"><a href="http://php.net/manual/zh/class.variant.php" class="type variant">variant</a></span> <span class="methodname"><strong>variant_cast</strong></span>     ( <span class="methodparam"><span class="type"><a href="http://php.net/manual/zh/class.variant.php" class="type variant">variant</a></span> <code class="parameter">$variant</code></span>    , <span class="methodparam"><span class="type">int</span> <code class="parameter">$type</code></span>    )</div>    <p class="para rdfs-comment">    This function makes a copy of <code class="parameter">variant</code> and then    performs a variant cast operation to force the copy to have the type    given by <code class="parameter">type</code>.   </p>   <p class="para">    This function wraps VariantChangeType() in the COM library; consult MSDN    for more information.   </p>  </div>   <div class="refsect1 parameters" id="refsect1-function.variant-cast-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">variant</code></dt>       <dd>        <p class="para">        The variant.       </p>      </dd>                 <dt> <code class="parameter">type</code></dt>       <dd>        <p class="para">        <code class="parameter">type</code> should be one of the        <strong><code>VT_XXX</code></strong> constants.       </p>      </dd>          </dl>    </p>  </div>   <div class="refsect1 returnvalues" id="refsect1-function.variant-cast-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    Returns a variant of given <code class="parameter">type</code>.   </p>  </div>   <div class="refsect1 seealso" id="refsect1-function.variant-cast-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link variant_set_type()} - Convert a variant into another type &quot;in-place&quot;</span></li>    </ul>   </p>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.com.php">COM 函数</a></div></div>
 * @return \VARIANT*/
function variant_cast ( $variant, $type ) {}

/**
*<div id="function.variant-cat" class="refentry">  <div class="refnamediv">   <h1 class="refname">variant_cat</h1>   <p class="verinfo">(PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">variant_cat</span> &mdash; <span class="dc-title">Concatenates two variant values together and returns the result</span></p>   </div>  <div class="refsect1 description" id="refsect1-function.variant-cat-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>variant_cat</strong></span>     ( <span class="methodparam"><span class="type"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$left</code></span>    , <span class="methodparam"><span class="type"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$right</code></span>    )</div>    <p class="para rdfs-comment">    Concatenates <code class="parameter">left</code> with    <code class="parameter">right</code> and returns the result.   </p>   <p class="para">    This function is notionally equivalent to    <code class="parameter">$left</code> <em>.</em> <code class="parameter">$right</code>.   </p>  </div>   <div class="refsect1 parameters" id="refsect1-function.variant-cat-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">left</code></dt>       <dd>        <p class="para">        The left operand.       </p>      </dd>                 <dt> <code class="parameter">right</code></dt>       <dd>        <p class="para">        The right operand.       </p>      </dd>          </dl>    </p>   <blockquote class="note"><p><strong class="note">Note</strong>:  <p class="para">  对于所有变量运算函数，本函数的参数可以是 PHP  内置的类型（整数，字符串，浮点数，布尔型或者  <strong><code>NULL</code></strong>），或者是一个 COM，VARIANT 或者 DOTNET 类的实例。PHP  内置类型将会使用和构造<a href="http://php.net/manual/zh/class.variant.php" class="xref">VARIANT</a>类相同的规则转换成变量。COM 和 DOTNET  对象的值将会取其默认属性并被当成变量值使用。 </p> <p class="para">  变量运算函数是同名函数在 COM  库中的外包；有关此类函数的更多信息参见 MSDN  库。PHP 函数命名有少许区别，例如 PHP  中的 <span class="function">{@link variant_add()}</span> 对应于  MSDN 文档中的 <em>VarAdd()</em>。 </p> </p></blockquote>   </div>   <div class="refsect1 returnvalues" id="refsect1-function.variant-cat-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    Returns the result of the concatenation.   </p>  </div>   <div class="refsect1 seealso" id="refsect1-function.variant-cat-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><a href="http://php.net/manual/zh/language.operators.string.php" class="xref">字符串运算符</a> for the string    concatenation operator</li>    </ul>   </p>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.com.php">COM 函数</a></div></div>
 * @return mixed*/
function variant_cat ( $left, $right ) {}

/**
*<div id="function.variant-cmp" class="refentry">  <div class="refnamediv">   <h1 class="refname">variant_cmp</h1>   <p class="verinfo">(PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">variant_cmp</span> &mdash; <span class="dc-title">Compares two variants</span></p>   </div>  <div class="refsect1 description" id="refsect1-function.variant-cmp-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">int</span> <span class="methodname"><strong>variant_cmp</strong></span>     ( <span class="methodparam"><span class="type"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$left</code></span>    , <span class="methodparam"><span class="type"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$right</code></span>    [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$lcid</code></span>    [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$flags</code></span>   ]] )</div>    <p class="para rdfs-comment">    Compares <code class="parameter">left</code> with <code class="parameter">right</code>.   </p>   <p class="para">    This function will only compare scalar values, not arrays or variant records.   </p>  </div>   <div class="refsect1 parameters" id="refsect1-function.variant-cmp-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">left</code></dt>       <dd>        <p class="para">        The left operand.       </p>      </dd>                 <dt> <code class="parameter">right</code></dt>       <dd>        <p class="para">        The right operand.       </p>      </dd>                 <dt> <code class="parameter">lcid</code></dt>       <dd>        <p class="para">        A valid Locale Identifier to use when comparing strings (this affects        string collation).       </p>      </dd>                 <dt> <code class="parameter">flags</code></dt>       <dd>        <p class="para">        <code class="parameter">flags</code> can be one or more of the following values        OR&#039;d together, and affects string comparisons:        <table class="doctable table">         <caption><strong>Variant Comparision Flags</strong></caption>                   <thead>           <tr>            <th>value</th>            <th>meaning</th>           </tr>           </thead>           <tbody class="tbody">           <tr>            <td><strong><code>NORM_IGNORECASE</code></strong></td>            <td>Compare case insensitively</td>           </tr>            <tr>            <td><strong><code>NORM_IGNORENONSPACE</code></strong></td>            <td>Ignore nonspacing characters</td>           </tr>            <tr>            <td><strong><code>NORM_IGNORESYMBOLS</code></strong></td>            <td>Ignore symbols</td>           </tr>            <tr>            <td><strong><code>NORM_IGNOREWIDTH</code></strong></td>            <td>Ignore string width</td>           </tr>            <tr>            <td><strong><code>NORM_IGNOREKANATYPE</code></strong></td>            <td>Ignore Kana type</td>           </tr>            <tr>            <td><strong><code>NORM_IGNOREKASHIDA</code></strong></td>            <td>Ignore Arabic kashida characters</td>           </tr>           </tbody>                 </table>        </p>      </dd>          </dl>    </p>   <blockquote class="note"><p><strong class="note">Note</strong>:  <p class="para">  对于所有变量运算函数，本函数的参数可以是 PHP  内置的类型（整数，字符串，浮点数，布尔型或者  <strong><code>NULL</code></strong>），或者是一个 COM，VARIANT 或者 DOTNET 类的实例。PHP  内置类型将会使用和构造<a href="http://php.net/manual/zh/class.variant.php" class="xref">VARIANT</a>类相同的规则转换成变量。COM 和 DOTNET  对象的值将会取其默认属性并被当成变量值使用。 </p> <p class="para">  变量运算函数是同名函数在 COM  库中的外包；有关此类函数的更多信息参见 MSDN  库。PHP 函数命名有少许区别，例如 PHP  中的 <span class="function">{@link variant_add()}</span> 对应于  MSDN 文档中的 <em>VarAdd()</em>。 </p> </p></blockquote>   </div>   <div class="refsect1 returnvalues" id="refsect1-function.variant-cmp-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    Returns one of the following:    <table class="doctable table">     <caption><strong>Variant Comparision Results</strong></caption>           <thead>       <tr>        <th>value</th>        <th>meaning</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td><strong><code>VARCMP_LT</code></strong></td>        <td><code class="parameter">left</code> is less than         <code class="parameter">right</code>        </td>       </tr>        <tr>        <td><strong><code>VARCMP_EQ</code></strong></td>        <td><code class="parameter">left</code> is equal to         <code class="parameter">right</code>        </td>       </tr>        <tr>        <td><strong><code>VARCMP_GT</code></strong></td>        <td><code class="parameter">left</code> is greater than         <code class="parameter">right</code>        </td>       </tr>        <tr>        <td><strong><code>VARCMP_NULL</code></strong></td>        <td>Either <code class="parameter">left</code>,         <code class="parameter">right</code> or both are <strong><code>NULL</code></strong>        </td>       </tr>       </tbody>         </table>    </p>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.com.php">COM 函数</a></div></div>
 * @return int*/
function variant_cmp ( $left, $right, $lcid, $flags ) {}

/**
*<div id="function.variant-date-from-timestamp" class="refentry">  <div class="refnamediv">   <h1 class="refname">variant_date_from_timestamp</h1>   <p class="verinfo">(PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">variant_date_from_timestamp</span> &mdash; <span class="dc-title">Returns a variant date representation of a Unix timestamp</span></p>   </div>  <div class="refsect1 description" id="refsect1-function.variant-date-from-timestamp-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type"><a href="http://php.net/manual/zh/class.variant.php" class="type variant">variant</a></span> <span class="methodname"><strong>variant_date_from_timestamp</strong></span>     ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$timestamp</code></span>    )</div>    <p class="para rdfs-comment">    Converts <code class="parameter">timestamp</code> from a unix timestamp value    into a variant of type <strong><code>VT_DATE</code></strong>.  This allows easier    interopability between the unix-ish parts of PHP and COM.   </p>  </div>   <div class="refsect1 parameters" id="refsect1-function.variant-date-from-timestamp-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">timestamp</code></dt>       <dd>        <p class="para">        A unix timestamp.       </p>      </dd>          </dl>    </p>  </div>   <div class="refsect1 returnvalues" id="refsect1-function.variant-date-from-timestamp-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    Returns a <strong><code>VT_DATE</code></strong> variant.   </p>  </div>   <div class="refsect1 seealso" id="refsect1-function.variant-date-from-timestamp-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link variant_date_to_timestamp()} - Converts a variant date/time value to Unix timestamp</span></li>     <li class="member"><span class="function">{@link mktime()} - 取得一个日期的 Unix 时间戳</span></li>     <li class="member"><span class="function">{@link time()} - 返回当前的 Unix 时间戳</span></li>    </ul>   </p>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.com.php">COM 函数</a></div></div>
 * @return \VARIANT*/
function variant_date_from_timestamp ( $timestamp ) {}

/**
*<div id="function.variant-date-to-timestamp" class="refentry">  <div class="refnamediv">   <h1 class="refname">variant_date_to_timestamp</h1>   <p class="verinfo">(PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">variant_date_to_timestamp</span> &mdash; <span class="dc-title">Converts a variant date/time value to Unix timestamp</span></p>   </div>  <div class="refsect1 description" id="refsect1-function.variant-date-to-timestamp-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">int</span> <span class="methodname"><strong>variant_date_to_timestamp</strong></span>     ( <span class="methodparam"><span class="type"><a href="http://php.net/manual/zh/class.variant.php" class="type variant">variant</a></span> <code class="parameter">$variant</code></span>    )</div>    <p class="para rdfs-comment">    Converts <code class="parameter">variant</code> from a <strong><code>VT_DATE</code></strong>    (or similar) value into a Unix timestamp.  This allows easier    interopability between the Unix-ish parts of PHP and COM.   </p>  </div>   <div class="refsect1 parameters" id="refsect1-function.variant-date-to-timestamp-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">variant</code></dt>       <dd>        <p class="para">        The variant.       </p>      </dd>          </dl>    </p>  </div>   <div class="refsect1 returnvalues" id="refsect1-function.variant-date-to-timestamp-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    Returns a unix timestamp.   </p>  </div>   <div class="refsect1 seealso" id="refsect1-function.variant-date-to-timestamp-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link variant_date_from_timestamp()} - Returns a variant date representation of a Unix timestamp</span></li>     <li class="member"><span class="function">{@link date()} - 格式化一个本地时间／日期</span></li>     <li class="member"><span class="function">{@link strftime()} - 根据区域设置格式化本地时间／日期</span></li>    </ul>   </p>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.com.php">COM 函数</a></div></div>
 * @return int*/
function variant_date_to_timestamp ( $variant ) {}

/**
*<div id="function.variant-div" class="refentry">  <div class="refnamediv">   <h1 class="refname">variant_div</h1>   <p class="verinfo">(PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">variant_div</span> &mdash; <span class="dc-title">Returns the result from dividing two variants</span></p>   </div>  <div class="refsect1 description" id="refsect1-function.variant-div-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>variant_div</strong></span>     ( <span class="methodparam"><span class="type"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$left</code></span>    , <span class="methodparam"><span class="type"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$right</code></span>    )</div>    <p class="para rdfs-comment">    Divides <code class="parameter">left</code> by <code class="parameter">right</code> and    returns the result.   </p>  </div>   <div class="refsect1 parameters" id="refsect1-function.variant-div-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">left</code></dt>       <dd>        <p class="para">        The left operand.       </p>      </dd>                 <dt> <code class="parameter">right</code></dt>       <dd>        <p class="para">        The right operand.       </p>      </dd>          </dl>     <blockquote class="note"><p><strong class="note">Note</strong>:  <p class="para">  对于所有变量运算函数，本函数的参数可以是 PHP  内置的类型（整数，字符串，浮点数，布尔型或者  <strong><code>NULL</code></strong>），或者是一个 COM，VARIANT 或者 DOTNET 类的实例。PHP  内置类型将会使用和构造<a href="http://php.net/manual/zh/class.variant.php" class="xref">VARIANT</a>类相同的规则转换成变量。COM 和 DOTNET  对象的值将会取其默认属性并被当成变量值使用。 </p> <p class="para">  变量运算函数是同名函数在 COM  库中的外包；有关此类函数的更多信息参见 MSDN  库。PHP 函数命名有少许区别，例如 PHP  中的 <span class="function">{@link variant_add()}</span> 对应于  MSDN 文档中的 <em>VarAdd()</em>。 </p> </p></blockquote>    </p>  </div>   <div class="refsect1 returnvalues" id="refsect1-function.variant-div-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    <table class="doctable table">     <caption><strong>Variant Division Rules</strong></caption>           <thead>       <tr>        <th>If</th>        <th>Then</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>Both expressions are of the string, date, character, boolean type</td>        <td>Double is returned</td>       </tr>        <tr>        <td>One expression is a string type and the other a        character</td>        <td>Division and a double is returned</td>       </tr>        <tr>        <td>One expression is numeric and the other is a string</td>        <td>Division and a double is returned.</td>       </tr>        <tr>        <td>Both expressions are numeric</td>        <td>Division and a double is returned</td>       </tr>        <tr>        <td>Either expression is NULL</td>        <td>NULL is returned</td>       </tr>        <tr>        <td><code class="parameter">right</code> is empty and        <code class="parameter">left</code> is anything but empty</td>        <td>A com_exception with code <strong><code>DISP_E_DIVBYZERO</code></strong>        is thrown</td>       </tr>        <tr>        <td><code class="parameter">left</code> is empty and        <code class="parameter">right</code> is anything but empty.</td>        <td>0 as type double is returned</td>       </tr>        <tr>        <td>Both expressions are empty</td>        <td>A com_exception with code <strong><code>DISP_E_OVERFLOW</code></strong>        is thrown</td>       </tr>       </tbody>         </table>    </p>  </div>   <div class="refsect1 seealso" id="refsect1-function.variant-div-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link variant_idiv()} - Converts variants to integers and then returns the result from dividing them</span></li>    </ul>   </p>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.com.php">COM 函数</a></div></div>
 * @return mixed*/
function variant_div ( $left, $right ) {}

/**
*<div id="function.variant-eqv" class="refentry">  <div class="refnamediv">   <h1 class="refname">variant_eqv</h1>   <p class="verinfo">(PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">variant_eqv</span> &mdash; <span class="dc-title">Performs a bitwise equivalence on two variants</span></p>   </div>  <div class="refsect1 description" id="refsect1-function.variant-eqv-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>variant_eqv</strong></span>     ( <span class="methodparam"><span class="type"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$left</code></span>    , <span class="methodparam"><span class="type"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$right</code></span>    )</div>    <p class="para rdfs-comment">    Performs a bitwise equivalence on two variants.   </p>  </div>   <div class="refsect1 parameters" id="refsect1-function.variant-eqv-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">left</code></dt>       <dd>        <p class="para">        The left operand.       </p>      </dd>                 <dt> <code class="parameter">right</code></dt>       <dd>        <p class="para">        The right operand.       </p>      </dd>          </dl>    </p>   <blockquote class="note"><p><strong class="note">Note</strong>:  <p class="para">  对于所有变量运算函数，本函数的参数可以是 PHP  内置的类型（整数，字符串，浮点数，布尔型或者  <strong><code>NULL</code></strong>），或者是一个 COM，VARIANT 或者 DOTNET 类的实例。PHP  内置类型将会使用和构造<a href="http://php.net/manual/zh/class.variant.php" class="xref">VARIANT</a>类相同的规则转换成变量。COM 和 DOTNET  对象的值将会取其默认属性并被当成变量值使用。 </p> <p class="para">  变量运算函数是同名函数在 COM  库中的外包；有关此类函数的更多信息参见 MSDN  库。PHP 函数命名有少许区别，例如 PHP  中的 <span class="function">{@link variant_add()}</span> 对应于  MSDN 文档中的 <em>VarAdd()</em>。 </p> </p></blockquote>   </div>   <div class="refsect1 returnvalues" id="refsect1-function.variant-eqv-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    If each bit in <code class="parameter">left</code> is equal to the corresponding    bit in <code class="parameter">right</code> then <strong><code>TRUE</code></strong> is returned, otherwise    <strong><code>FALSE</code></strong> is returned.   </p>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.com.php">COM 函数</a></div></div>
 * @return mixed*/
function variant_eqv ( $left, $right ) {}

/**
*<div id="function.variant-fix" class="refentry">  <div class="refnamediv">   <h1 class="refname">variant_fix</h1>   <p class="verinfo">(PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">variant_fix</span> &mdash; <span class="dc-title">Returns the integer portion of a variant</span></p>   </div>  <div class="refsect1 description" id="refsect1-function.variant-fix-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>variant_fix</strong></span>     ( <span class="methodparam"><span class="type"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$variant</code></span>    )</div>    <p class="para rdfs-comment">    Gets the integer portion of a variant.   </p>  </div>   <div class="refsect1 parameters" id="refsect1-function.variant-fix-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">variant</code></dt>       <dd>        <p class="para">        The variant.       </p>      </dd>          </dl>    </p>   <blockquote class="note"><p><strong class="note">Note</strong>:  <p class="para">  对于所有变量运算函数，本函数的参数可以是 PHP  内置的类型（整数，字符串，浮点数，布尔型或者  <strong><code>NULL</code></strong>），或者是一个 COM，VARIANT 或者 DOTNET 类的实例。PHP  内置类型将会使用和构造<a href="http://php.net/manual/zh/class.variant.php" class="xref">VARIANT</a>类相同的规则转换成变量。COM 和 DOTNET  对象的值将会取其默认属性并被当成变量值使用。 </p> <p class="para">  变量运算函数是同名函数在 COM  库中的外包；有关此类函数的更多信息参见 MSDN  库。PHP 函数命名有少许区别，例如 PHP  中的 <span class="function">{@link variant_add()}</span> 对应于  MSDN 文档中的 <em>VarAdd()</em>。 </p> </p></blockquote>   </div>   <div class="refsect1 returnvalues" id="refsect1-function.variant-fix-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    If <code class="parameter">variant</code> is negative, then the first negative    integer greater than or equal to the variant is returned, otherwise    returns the integer portion of the value of    <code class="parameter">variant</code>.   </p>  </div>   <div class="refsect1 notes" id="refsect1-function.variant-fix-notes">   <h3 class="title">注释</h3>   <div class="warning"><strong class="warning">Warning</strong>    <p class="simpara">     This documentation is based on the MSDN documentation; it appears     that this function is either the same as     <span class="function">{@link variant_int()}</span>, or that there is an error in the MSDN     documentation.    </p>   </div>  </div>   <div class="refsect1 seealso" id="refsect1-function.variant-fix-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link variant_int()} - Returns the integer portion of a variant</span></li>     <li class="member"><span class="function">{@link variant_round()} - Rounds a variant to the specified number of decimal places</span></li>     <li class="member"><span class="function">{@link floor()} - 舍去法取整</span></li>     <li class="member"><span class="function">{@link ceil()} - 进一法取整</span></li>     <li class="member"><span class="function">{@link round()} - 对浮点数进行四舍五入</span></li>    </ul>   </p>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.com.php">COM 函数</a></div></div>
 * @return mixed*/
function variant_fix ( $variant ) {}

/**
*<div id="function.variant-get-type" class="refentry">  <div class="refnamediv">   <h1 class="refname">variant_get_type</h1>   <p class="verinfo">(PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">variant_get_type</span> &mdash; <span class="dc-title">Returns the type of a variant object</span></p>   </div>  <div class="refsect1 description" id="refsect1-function.variant-get-type-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">int</span> <span class="methodname"><strong>variant_get_type</strong></span>     ( <span class="methodparam"><span class="type"><a href="http://php.net/manual/zh/class.variant.php" class="type variant">variant</a></span> <code class="parameter">$variant</code></span>    )</div>    <p class="para rdfs-comment">    Returns the type of a variant object.   </p>  </div>   <div class="refsect1 parameters" id="refsect1-function.variant-get-type-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">variant</code></dt>       <dd>        <p class="para">        The variant object.       </p>      </dd>          </dl>    </p>  </div>   <div class="refsect1 returnvalues" id="refsect1-function.variant-get-type-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    This function returns an integer value that indicates the type of    <code class="parameter">variant</code>, which can be an instance of    <a href="http://php.net/manual/zh/class.com.php" class="xref">COM</a>, <a href="http://php.net/manual/zh/class.dotnet.php" class="xref">DOTNET</a> or    <a href="http://php.net/manual/zh/class.variant.php" class="xref">VARIANT</a> classes.  The return value can be compared    to one of the <strong><code>VT_XXX</code></strong> constants.   </p>   <p class="para">    The return value for COM and DOTNET objects will usually be    <strong><code>VT_DISPATCH</code></strong>; the only reason this function works for    those classes is because COM and DOTNET are descendants of VARIANT.   </p>   <p class="para">    In PHP versions prior to 5, you could obtain this information from    instances of the VARIANT class ONLY, by reading a fake    <code class="parameter">type</code> property.  See the <a href="http://php.net/manual/zh/class.variant.php" class="xref">VARIANT</a> class for more information on    this.   </p>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.com.php">COM 函数</a></div></div>
 * @return int*/
function variant_get_type ( $variant ) {}

/**
*<div id="function.variant-idiv" class="refentry">  <div class="refnamediv">   <h1 class="refname">variant_idiv</h1>   <p class="verinfo">(PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">variant_idiv</span> &mdash; <span class="dc-title">Converts variants to integers and then returns the result from dividing them</span></p>   </div>  <div class="refsect1 description" id="refsect1-function.variant-idiv-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>variant_idiv</strong></span>     ( <span class="methodparam"><span class="type"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$left</code></span>    , <span class="methodparam"><span class="type"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$right</code></span>    )</div>    <p class="para rdfs-comment">    Converts <code class="parameter">left</code> and <code class="parameter">right</code> to    integer values, and then performs integer division.   </p>  </div>   <div class="refsect1 parameters" id="refsect1-function.variant-idiv-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">left</code></dt>       <dd>        <p class="para">        The left operand.       </p>      </dd>                 <dt> <code class="parameter">right</code></dt>       <dd>        <p class="para">        The right operand.       </p>      </dd>          </dl>     <blockquote class="note"><p><strong class="note">Note</strong>:  <p class="para">  对于所有变量运算函数，本函数的参数可以是 PHP  内置的类型（整数，字符串，浮点数，布尔型或者  <strong><code>NULL</code></strong>），或者是一个 COM，VARIANT 或者 DOTNET 类的实例。PHP  内置类型将会使用和构造<a href="http://php.net/manual/zh/class.variant.php" class="xref">VARIANT</a>类相同的规则转换成变量。COM 和 DOTNET  对象的值将会取其默认属性并被当成变量值使用。 </p> <p class="para">  变量运算函数是同名函数在 COM  库中的外包；有关此类函数的更多信息参见 MSDN  库。PHP 函数命名有少许区别，例如 PHP  中的 <span class="function">{@link variant_add()}</span> 对应于  MSDN 文档中的 <em>VarAdd()</em>。 </p> </p></blockquote>    </p>  </div>   <div class="refsect1 returnvalues" id="refsect1-function.variant-idiv-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    <table class="doctable table">     <caption><strong>Variant Integer Division Rules</strong></caption>           <thead>       <tr>        <th>If</th>        <th>Then</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>Both expressions are of the string, date, character, boolean type</td>        <td>Division and integer is returned</td>       </tr>        <tr>        <td>One expression is a string type and the other a        character</td>        <td>Division</td>       </tr>        <tr>        <td>One expression is numeric and the other is a string</td>        <td>Division</td>       </tr>        <tr>        <td>Both expressions are numeric</td>        <td>Division</td>       </tr>        <tr>        <td>Either expression is NULL</td>        <td>NULL is returned</td>       </tr>        <tr>        <td>Both expressions are empty</td>        <td>A com_exception with code <strong><code>DISP_E_DIVBYZERO</code></strong>        is thrown</td>       </tr>       </tbody>         </table>    </p>  </div>   <div class="refsect1 seealso" id="refsect1-function.variant-idiv-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link variant_div()} - Returns the result from dividing two variants</span></li>    </ul>   </p>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.com.php">COM 函数</a></div></div>
 * @return mixed*/
function variant_idiv ( $left, $right ) {}

/**
*<div id="function.variant-imp" class="refentry">  <div class="refnamediv">   <h1 class="refname">variant_imp</h1>   <p class="verinfo">(PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">variant_imp</span> &mdash; <span class="dc-title">Performs a bitwise implication on two variants</span></p>   </div>  <div class="refsect1 description" id="refsect1-function.variant-imp-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>variant_imp</strong></span>     ( <span class="methodparam"><span class="type"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$left</code></span>    , <span class="methodparam"><span class="type"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$right</code></span>    )</div>    <p class="para rdfs-comment">    Performs a bitwise implication operation.   </p>  </div>   <div class="refsect1 parameters" id="refsect1-function.variant-imp-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">left</code></dt>       <dd>        <p class="para">        The left operand.       </p>      </dd>                 <dt> <code class="parameter">right</code></dt>       <dd>        <p class="para">        The right operand.       </p>      </dd>          </dl>     <blockquote class="note"><p><strong class="note">Note</strong>:  <p class="para">  对于所有变量运算函数，本函数的参数可以是 PHP  内置的类型（整数，字符串，浮点数，布尔型或者  <strong><code>NULL</code></strong>），或者是一个 COM，VARIANT 或者 DOTNET 类的实例。PHP  内置类型将会使用和构造<a href="http://php.net/manual/zh/class.variant.php" class="xref">VARIANT</a>类相同的规则转换成变量。COM 和 DOTNET  对象的值将会取其默认属性并被当成变量值使用。 </p> <p class="para">  变量运算函数是同名函数在 COM  库中的外包；有关此类函数的更多信息参见 MSDN  库。PHP 函数命名有少许区别，例如 PHP  中的 <span class="function">{@link variant_add()}</span> 对应于  MSDN 文档中的 <em>VarAdd()</em>。 </p> </p></blockquote>    </p>  </div>   <div class="refsect1 returnvalues" id="refsect1-function.variant-imp-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    <table class="doctable table">     <caption><strong>Variant Implication Table</strong></caption>          <thead>      <tr>       <th>If <code class="parameter">left</code> is</th>       <th>If <code class="parameter">right</code> is</th>       <th>then the result is</th>      </tr>      </thead>      <tbody class="tbody">      <tr><td><strong><code>TRUE</code></strong></td><td><strong><code>TRUE</code></strong></td><td><strong><code>TRUE</code></strong></td></tr>       <tr><td><strong><code>TRUE</code></strong></td><td><strong><code>FALSE</code></strong></td><td><strong><code>FALSE</code></strong></td></tr>       <tr><td><strong><code>TRUE</code></strong></td><td><strong><code>NULL</code></strong></td><td><strong><code>TRUE</code></strong></td></tr>       <tr><td><strong><code>FALSE</code></strong></td><td><strong><code>TRUE</code></strong></td><td><strong><code>TRUE</code></strong></td></tr>       <tr><td><strong><code>FALSE</code></strong></td><td><strong><code>FALSE</code></strong></td><td><strong><code>TRUE</code></strong></td></tr>       <tr><td><strong><code>FALSE</code></strong></td><td><strong><code>NULL</code></strong></td><td><strong><code>TRUE</code></strong></td></tr>       <tr><td><strong><code>NULL</code></strong></td><td><strong><code>TRUE</code></strong></td><td><strong><code>TRUE</code></strong></td></tr>       <tr><td><strong><code>NULL</code></strong></td><td><strong><code>FALSE</code></strong></td><td><strong><code>NULL</code></strong></td></tr>       <tr><td><strong><code>NULL</code></strong></td><td><strong><code>NULL</code></strong></td><td><strong><code>NULL</code></strong></td></tr>      </tbody>       </table>    </p>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.com.php">COM 函数</a></div></div>
 * @return mixed*/
function variant_imp ( $left, $right ) {}

/**
*<div id="function.variant-int" class="refentry">  <div class="refnamediv">   <h1 class="refname">variant_int</h1>   <p class="verinfo">(PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">variant_int</span> &mdash; <span class="dc-title">Returns the integer portion of a variant</span></p>   </div>  <div class="refsect1 description" id="refsect1-function.variant-int-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>variant_int</strong></span>     ( <span class="methodparam"><span class="type"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$variant</code></span>    )</div>    <p class="para rdfs-comment">    Gets the integer portion of a variant.   </p>  </div>   <div class="refsect1 parameters" id="refsect1-function.variant-int-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">variant</code></dt>       <dd>        <p class="para">        The variant.       </p>      </dd>          </dl>    </p>   <blockquote class="note"><p><strong class="note">Note</strong>:  <p class="para">  对于所有变量运算函数，本函数的参数可以是 PHP  内置的类型（整数，字符串，浮点数，布尔型或者  <strong><code>NULL</code></strong>），或者是一个 COM，VARIANT 或者 DOTNET 类的实例。PHP  内置类型将会使用和构造<a href="http://php.net/manual/zh/class.variant.php" class="xref">VARIANT</a>类相同的规则转换成变量。COM 和 DOTNET  对象的值将会取其默认属性并被当成变量值使用。 </p> <p class="para">  变量运算函数是同名函数在 COM  库中的外包；有关此类函数的更多信息参见 MSDN  库。PHP 函数命名有少许区别，例如 PHP  中的 <span class="function">{@link variant_add()}</span> 对应于  MSDN 文档中的 <em>VarAdd()</em>。 </p> </p></blockquote>   </div>   <div class="refsect1 returnvalues" id="refsect1-function.variant-int-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    If <code class="parameter">variant</code> is negative, then the first negative    integer greater than or equal to the variant is returned, otherwise    returns the integer portion of the value of    <code class="parameter">variant</code>.   </p>  </div>   <div class="refsect1 seealso" id="refsect1-function.variant-int-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link variant_fix()} - Returns the integer portion of a variant</span></li>     <li class="member"><span class="function">{@link variant_round()} - Rounds a variant to the specified number of decimal places</span></li>     <li class="member"><span class="function">{@link floor()} - 舍去法取整</span></li>     <li class="member"><span class="function">{@link ceil()} - 进一法取整</span></li>     <li class="member"><span class="function">{@link round()} - 对浮点数进行四舍五入</span></li>    </ul>   </p>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.com.php">COM 函数</a></div></div>
 * @return mixed*/
function variant_int ( $variant ) {}

/**
*<div id="function.variant-mod" class="refentry">  <div class="refnamediv">   <h1 class="refname">variant_mod</h1>   <p class="verinfo">(PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">variant_mod</span> &mdash; <span class="dc-title">Divides two variants and returns only the remainder</span></p>   </div>  <div class="refsect1 description" id="refsect1-function.variant-mod-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>variant_mod</strong></span>     ( <span class="methodparam"><span class="type"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$left</code></span>    , <span class="methodparam"><span class="type"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$right</code></span>    )</div>    <p class="para rdfs-comment">    Divides <code class="parameter">left</code> by <code class="parameter">right</code> and    returns the remainder.   </p>  </div>   <div class="refsect1 parameters" id="refsect1-function.variant-mod-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">left</code></dt>       <dd>        <p class="para">        The left operand.       </p>      </dd>                 <dt> <code class="parameter">right</code></dt>       <dd>        <p class="para">        The right operand.       </p>      </dd>          </dl>    </p>   <blockquote class="note"><p><strong class="note">Note</strong>:  <p class="para">  对于所有变量运算函数，本函数的参数可以是 PHP  内置的类型（整数，字符串，浮点数，布尔型或者  <strong><code>NULL</code></strong>），或者是一个 COM，VARIANT 或者 DOTNET 类的实例。PHP  内置类型将会使用和构造<a href="http://php.net/manual/zh/class.variant.php" class="xref">VARIANT</a>类相同的规则转换成变量。COM 和 DOTNET  对象的值将会取其默认属性并被当成变量值使用。 </p> <p class="para">  变量运算函数是同名函数在 COM  库中的外包；有关此类函数的更多信息参见 MSDN  库。PHP 函数命名有少许区别，例如 PHP  中的 <span class="function">{@link variant_add()}</span> 对应于  MSDN 文档中的 <em>VarAdd()</em>。 </p> </p></blockquote>   </div>   <div class="refsect1 returnvalues" id="refsect1-function.variant-mod-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    Returns the remainder of the division.   </p>  </div>   <div class="refsect1 seealso" id="refsect1-function.variant-mod-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link variant_div()} - Returns the result from dividing two variants</span></li>     <li class="member"><span class="function">{@link variant_idiv()} - Converts variants to integers and then returns the result from dividing them</span></li>    </ul>   </p>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.com.php">COM 函数</a></div></div>
 * @return mixed*/
function variant_mod ( $left, $right ) {}

/**
*<div id="function.variant-mul" class="refentry">  <div class="refnamediv">   <h1 class="refname">variant_mul</h1>   <p class="verinfo">(PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">variant_mul</span> &mdash; <span class="dc-title">Multiplies the values of the two variants</span></p>   </div>  <div class="refsect1 description" id="refsect1-function.variant-mul-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>variant_mul</strong></span>     ( <span class="methodparam"><span class="type"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$left</code></span>    , <span class="methodparam"><span class="type"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$right</code></span>    )</div>    <p class="para rdfs-comment">    Multiplies <code class="parameter">left</code> by <code class="parameter">right</code>.   </p>  </div>   <div class="refsect1 parameters" id="refsect1-function.variant-mul-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">left</code></dt>       <dd>        <p class="para">        The left operand.       </p>      </dd>                 <dt> <code class="parameter">right</code></dt>       <dd>        <p class="para">        The right operand.       </p>      </dd>          </dl>     Boolean values are converted to -1 for <strong><code>FALSE</code></strong> and 0 for <strong><code>TRUE</code></strong>.    <blockquote class="note"><p><strong class="note">Note</strong>:  <p class="para">  对于所有变量运算函数，本函数的参数可以是 PHP  内置的类型（整数，字符串，浮点数，布尔型或者  <strong><code>NULL</code></strong>），或者是一个 COM，VARIANT 或者 DOTNET 类的实例。PHP  内置类型将会使用和构造<a href="http://php.net/manual/zh/class.variant.php" class="xref">VARIANT</a>类相同的规则转换成变量。COM 和 DOTNET  对象的值将会取其默认属性并被当成变量值使用。 </p> <p class="para">  变量运算函数是同名函数在 COM  库中的外包；有关此类函数的更多信息参见 MSDN  库。PHP 函数命名有少许区别，例如 PHP  中的 <span class="function">{@link variant_add()}</span> 对应于  MSDN 文档中的 <em>VarAdd()</em>。 </p> </p></blockquote>    </p>  </div>   <div class="refsect1 returnvalues" id="refsect1-function.variant-mul-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    <table class="doctable table">     <caption><strong>Variant Multiplication Rules</strong></caption>           <thead>       <tr>        <th>If</th>        <th>Then</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>Both expressions are of the string, date, character, boolean type</td>        <td>Multiplication</td>       </tr>        <tr>        <td>One expression is a string type and the other a        character</td>        <td>Multiplication</td>       </tr>        <tr>        <td>One expression is numeric and the other is a string</td>        <td>Multiplication</td>       </tr>        <tr>        <td>Both expressions are numeric</td>        <td>Multiplication</td>       </tr>        <tr>        <td>Either expression is NULL</td>        <td>NULL is returned</td>       </tr>        <tr>        <td>Both expressions are empty</td>        <td>Empty string is returned</td>       </tr>       </tbody>         </table>    </p>  </div>   <div class="refsect1 seealso" id="refsect1-function.variant-mul-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link variant_div()} - Returns the result from dividing two variants</span></li>     <li class="member"><span class="function">{@link variant_idiv()} - Converts variants to integers and then returns the result from dividing them</span></li>    </ul>   </p>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.com.php">COM 函数</a></div></div>
 * @return mixed*/
function variant_mul ( $left, $right ) {}

/**
*<div id="function.variant-neg" class="refentry">  <div class="refnamediv">   <h1 class="refname">variant_neg</h1>   <p class="verinfo">(PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">variant_neg</span> &mdash; <span class="dc-title">Performs logical negation on a variant</span></p>   </div>  <div class="refsect1 description" id="refsect1-function.variant-neg-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>variant_neg</strong></span>     ( <span class="methodparam"><span class="type"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$variant</code></span>    )</div>    <p class="para rdfs-comment">    Performs logical negation of <code class="parameter">variant</code>.   </p>  </div>   <div class="refsect1 parameters" id="refsect1-function.variant-neg-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">variant</code></dt>       <dd>        <p class="para">        The variant.       </p>      </dd>          </dl>    </p>   <blockquote class="note"><p><strong class="note">Note</strong>:  <p class="para">  对于所有变量运算函数，本函数的参数可以是 PHP  内置的类型（整数，字符串，浮点数，布尔型或者  <strong><code>NULL</code></strong>），或者是一个 COM，VARIANT 或者 DOTNET 类的实例。PHP  内置类型将会使用和构造<a href="http://php.net/manual/zh/class.variant.php" class="xref">VARIANT</a>类相同的规则转换成变量。COM 和 DOTNET  对象的值将会取其默认属性并被当成变量值使用。 </p> <p class="para">  变量运算函数是同名函数在 COM  库中的外包；有关此类函数的更多信息参见 MSDN  库。PHP 函数命名有少许区别，例如 PHP  中的 <span class="function">{@link variant_add()}</span> 对应于  MSDN 文档中的 <em>VarAdd()</em>。 </p> </p></blockquote>   </div>   <div class="refsect1 returnvalues" id="refsect1-function.variant-neg-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    Returns the result of the logical negation.   </p>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.com.php">COM 函数</a></div></div>
 * @return mixed*/
function variant_neg ( $variant ) {}

/**
*<div id="function.variant-not" class="refentry">  <div class="refnamediv">   <h1 class="refname">variant_not</h1>   <p class="verinfo">(PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">variant_not</span> &mdash; <span class="dc-title">Performs bitwise not negation on a variant</span></p>   </div>  <div class="refsect1 description" id="refsect1-function.variant-not-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>variant_not</strong></span>     ( <span class="methodparam"><span class="type"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$variant</code></span>    )</div>    <p class="para rdfs-comment">    Performs bitwise not negation on <code class="parameter">variant</code> and    returns the result.   </p>  </div>   <div class="refsect1 parameters" id="refsect1-function.variant-not-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">variant</code></dt>       <dd>        <p class="para">        The variant.       </p>      </dd>          </dl>    </p>   <blockquote class="note"><p><strong class="note">Note</strong>:  <p class="para">  对于所有变量运算函数，本函数的参数可以是 PHP  内置的类型（整数，字符串，浮点数，布尔型或者  <strong><code>NULL</code></strong>），或者是一个 COM，VARIANT 或者 DOTNET 类的实例。PHP  内置类型将会使用和构造<a href="http://php.net/manual/zh/class.variant.php" class="xref">VARIANT</a>类相同的规则转换成变量。COM 和 DOTNET  对象的值将会取其默认属性并被当成变量值使用。 </p> <p class="para">  变量运算函数是同名函数在 COM  库中的外包；有关此类函数的更多信息参见 MSDN  库。PHP 函数命名有少许区别，例如 PHP  中的 <span class="function">{@link variant_add()}</span> 对应于  MSDN 文档中的 <em>VarAdd()</em>。 </p> </p></blockquote>   </div>   <div class="refsect1 returnvalues" id="refsect1-function.variant-not-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    Returns the bitwise not negation. If <code class="parameter">variant</code> is    <strong><code>NULL</code></strong>, the result will also be <strong><code>NULL</code></strong>.   </p>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.com.php">COM 函数</a></div></div>
 * @return mixed*/
function variant_not ( $variant ) {}

/**
*<div id="function.variant-or" class="refentry">  <div class="refnamediv">   <h1 class="refname">variant_or</h1>   <p class="verinfo">(PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">variant_or</span> &mdash; <span class="dc-title">Performs a logical disjunction on two variants</span></p>   </div>  <div class="refsect1 description" id="refsect1-function.variant-or-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>variant_or</strong></span>     ( <span class="methodparam"><span class="type"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$left</code></span>    , <span class="methodparam"><span class="type"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$right</code></span>    )</div>    <p class="para rdfs-comment">    Performs a bitwise OR operation.    Note that this is slightly different from a regular OR operation.   </p>  </div>   <div class="refsect1 parameters" id="refsect1-function.variant-or-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">left</code></dt>       <dd>        <p class="para">        The left operand.       </p>      </dd>                 <dt> <code class="parameter">right</code></dt>       <dd>        <p class="para">        The right operand.       </p>      </dd>          </dl>     <blockquote class="note"><p><strong class="note">Note</strong>:  <p class="para">  对于所有变量运算函数，本函数的参数可以是 PHP  内置的类型（整数，字符串，浮点数，布尔型或者  <strong><code>NULL</code></strong>），或者是一个 COM，VARIANT 或者 DOTNET 类的实例。PHP  内置类型将会使用和构造<a href="http://php.net/manual/zh/class.variant.php" class="xref">VARIANT</a>类相同的规则转换成变量。COM 和 DOTNET  对象的值将会取其默认属性并被当成变量值使用。 </p> <p class="para">  变量运算函数是同名函数在 COM  库中的外包；有关此类函数的更多信息参见 MSDN  库。PHP 函数命名有少许区别，例如 PHP  中的 <span class="function">{@link variant_add()}</span> 对应于  MSDN 文档中的 <em>VarAdd()</em>。 </p> </p></blockquote>    </p>  </div>   <div class="refsect1 returnvalues" id="refsect1-function.variant-or-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    <table class="doctable table">     <caption><strong>Variant OR Rules</strong></caption>           <thead>       <tr>        <th>If <code class="parameter">left</code> is</th>        <th>If <code class="parameter">right</code> is</th>        <th>then the result is</th>       </tr>       </thead>       <tbody class="tbody">       <tr><td><strong><code>TRUE</code></strong></td><td><strong><code>TRUE</code></strong></td><td><strong><code>TRUE</code></strong></td></tr>        <tr><td><strong><code>TRUE</code></strong></td><td><strong><code>FALSE</code></strong></td><td><strong><code>TRUE</code></strong></td></tr>        <tr><td><strong><code>TRUE</code></strong></td><td><strong><code>NULL</code></strong></td><td><strong><code>TRUE</code></strong></td></tr>        <tr><td><strong><code>FALSE</code></strong></td><td><strong><code>TRUE</code></strong></td><td><strong><code>TRUE</code></strong></td></tr>        <tr><td><strong><code>FALSE</code></strong></td><td><strong><code>FALSE</code></strong></td><td><strong><code>FALSE</code></strong></td></tr>        <tr><td><strong><code>FALSE</code></strong></td><td><strong><code>NULL</code></strong></td><td><strong><code>NULL</code></strong></td></tr>        <tr><td><strong><code>NULL</code></strong></td><td><strong><code>TRUE</code></strong></td><td><strong><code>TRUE</code></strong></td></tr>        <tr><td><strong><code>NULL</code></strong></td><td><strong><code>FALSE</code></strong></td><td><strong><code>NULL</code></strong></td></tr>        <tr><td><strong><code>NULL</code></strong></td><td><strong><code>NULL</code></strong></td><td><strong><code>NULL</code></strong></td></tr>       </tbody>         </table>    </p>  </div>   <div class="refsect1 seealso" id="refsect1-function.variant-or-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link variant_and()} - Performs a bitwise AND operation between two variants</span></li>     <li class="member"><span class="function">{@link variant_xor()} - Performs a logical exclusion on two variants</span></li>    </ul>   </p>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.com.php">COM 函数</a></div></div>
 * @return mixed*/
function variant_or ( $left, $right ) {}

/**
*<div id="function.variant-pow" class="refentry">  <div class="refnamediv">   <h1 class="refname">variant_pow</h1>   <p class="verinfo">(PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">variant_pow</span> &mdash; <span class="dc-title">Returns the result of performing the power function with two variants</span></p>   </div>  <div class="refsect1 description" id="refsect1-function.variant-pow-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>variant_pow</strong></span>     ( <span class="methodparam"><span class="type"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$left</code></span>    , <span class="methodparam"><span class="type"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$right</code></span>    )</div>    <p class="para rdfs-comment">    Returns the result of <code class="parameter">left</code> to the power of    <code class="parameter">right</code>.   </p>  </div>   <div class="refsect1 parameters" id="refsect1-function.variant-pow-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">left</code></dt>       <dd>        <p class="para">        The left operand.       </p>      </dd>                 <dt> <code class="parameter">right</code></dt>       <dd>        <p class="para">        The right operand.       </p>      </dd>          </dl>    </p>   <blockquote class="note"><p><strong class="note">Note</strong>:  <p class="para">  对于所有变量运算函数，本函数的参数可以是 PHP  内置的类型（整数，字符串，浮点数，布尔型或者  <strong><code>NULL</code></strong>），或者是一个 COM，VARIANT 或者 DOTNET 类的实例。PHP  内置类型将会使用和构造<a href="http://php.net/manual/zh/class.variant.php" class="xref">VARIANT</a>类相同的规则转换成变量。COM 和 DOTNET  对象的值将会取其默认属性并被当成变量值使用。 </p> <p class="para">  变量运算函数是同名函数在 COM  库中的外包；有关此类函数的更多信息参见 MSDN  库。PHP 函数命名有少许区别，例如 PHP  中的 <span class="function">{@link variant_add()}</span> 对应于  MSDN 文档中的 <em>VarAdd()</em>。 </p> </p></blockquote>   </div>   <div class="refsect1 returnvalues" id="refsect1-function.variant-pow-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    Returns the result of <code class="parameter">left</code> to the power of    <code class="parameter">right</code>.   </p>  </div>   <div class="refsect1 seealso" id="refsect1-function.variant-pow-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link pow()} - 指数表达式</span></li>    </ul>   </p>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.com.php">COM 函数</a></div></div>
 * @return mixed*/
function variant_pow ( $left, $right ) {}

/**
*<div id="function.variant-round" class="refentry">  <div class="refnamediv">   <h1 class="refname">variant_round</h1>   <p class="verinfo">(PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">variant_round</span> &mdash; <span class="dc-title">Rounds a variant to the specified number of decimal places</span></p>   </div>  <div class="refsect1 description" id="refsect1-function.variant-round-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>variant_round</strong></span>     ( <span class="methodparam"><span class="type"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$variant</code></span>    , <span class="methodparam"><span class="type">int</span> <code class="parameter">$decimals</code></span>    )</div>    <p class="para rdfs-comment">    Returns the value of <code class="parameter">variant</code> rounded to    <code class="parameter">decimals</code> decimal places.   </p>  </div>   <div class="refsect1 parameters" id="refsect1-function.variant-round-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">variant</code></dt>       <dd>        <p class="para">        The variant.       </p>      </dd>                 <dt> <code class="parameter">decimals</code></dt>       <dd>        <p class="para">        Number of decimal places.       </p>      </dd>          </dl>    </p>   <blockquote class="note"><p><strong class="note">Note</strong>:  <p class="para">  对于所有变量运算函数，本函数的参数可以是 PHP  内置的类型（整数，字符串，浮点数，布尔型或者  <strong><code>NULL</code></strong>），或者是一个 COM，VARIANT 或者 DOTNET 类的实例。PHP  内置类型将会使用和构造<a href="http://php.net/manual/zh/class.variant.php" class="xref">VARIANT</a>类相同的规则转换成变量。COM 和 DOTNET  对象的值将会取其默认属性并被当成变量值使用。 </p> <p class="para">  变量运算函数是同名函数在 COM  库中的外包；有关此类函数的更多信息参见 MSDN  库。PHP 函数命名有少许区别，例如 PHP  中的 <span class="function">{@link variant_add()}</span> 对应于  MSDN 文档中的 <em>VarAdd()</em>。 </p> </p></blockquote>   </div>   <div class="refsect1 returnvalues" id="refsect1-function.variant-round-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    Returns the rounded value.   </p>  </div>   <div class="refsect1 seealso" id="refsect1-function.variant-round-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link round()} - 对浮点数进行四舍五入</span></li>    </ul>   </p>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.com.php">COM 函数</a></div></div>
 * @return mixed*/
function variant_round ( $variant, $decimals ) {}

/**
*<div id="function.variant-set-type" class="refentry">  <div class="refnamediv">   <h1 class="refname">variant_set_type</h1>   <p class="verinfo">(PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">variant_set_type</span> &mdash; <span class="dc-title">Convert a variant into another type &quot;in-place&quot;</span></p>   </div>  <div class="refsect1 description" id="refsect1-function.variant-set-type-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>variant_set_type</strong></span>     ( <span class="methodparam"><span class="type"><a href="http://php.net/manual/zh/class.variant.php" class="type variant">variant</a></span> <code class="parameter">$variant</code></span>    , <span class="methodparam"><span class="type">int</span> <code class="parameter">$type</code></span>    )</div>    <p class="para rdfs-comment">    This function is similar to <span class="function">{@link variant_cast()}</span> except that    the variant is modified &quot;in-place&quot;; no new variant is created. The    parameters for this function have identical meaning to those of    <span class="function">{@link variant_cast()}</span>.   </p>  </div>   <div class="refsect1 parameters" id="refsect1-function.variant-set-type-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">variant</code></dt>       <dd>        <p class="para">        The variant.       </p>      </dd>                 <dt> <code class="parameter">type</code></dt>       <dd>        <p class="para">       </p>      </dd>          </dl>    </p>  </div>   <div class="refsect1 returnvalues" id="refsect1-function.variant-set-type-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    没有返回值。   </p>  </div>   <div class="refsect1 seealso" id="refsect1-function.variant-set-type-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link variant_cast()} - Convert a variant into a new variant object of another type</span></li>    </ul>   </p>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.com.php">COM 函数</a></div></div>
 * @return void*/
function variant_set_type ( $variant, $type ) {}

/**
*<div id="function.variant-set" class="refentry">  <div class="refnamediv">   <h1 class="refname">variant_set</h1>   <p class="verinfo">(PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">variant_set</span> &mdash; <span class="dc-title">Assigns a new value for a variant object</span></p>   </div>  <div class="refsect1 description" id="refsect1-function.variant-set-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>variant_set</strong></span>     ( <span class="methodparam"><span class="type"><a href="http://php.net/manual/zh/class.variant.php" class="type variant">variant</a></span> <code class="parameter">$variant</code></span>    , <span class="methodparam"><span class="type"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$value</code></span>    )</div>    <p class="para rdfs-comment">    Converts <code class="parameter">value</code> to a variant and assigns it to the    <code class="parameter">variant</code> object; no new variant object is created,    and the old value of <code class="parameter">variant</code> is freed/released.   </p>  </div>   <div class="refsect1 parameters" id="refsect1-function.variant-set-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">variant</code></dt>       <dd>        <p class="para">        The variant.       </p>      </dd>                 <dt> <code class="parameter">value</code></dt>       <dd>        <p class="para">       </p>      </dd>          </dl>    </p>  </div>   <div class="refsect1 returnvalues" id="refsect1-function.variant-set-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    没有返回值。   </p>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.com.php">COM 函数</a></div></div>
 * @return void*/
function variant_set ( $variant, $value ) {}

/**
*<div id="function.variant-sub" class="refentry">  <div class="refnamediv">   <h1 class="refname">variant_sub</h1>   <p class="verinfo">(PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">variant_sub</span> &mdash; <span class="dc-title">Subtracts the value of the right variant from the left variant value</span></p>   </div>  <div class="refsect1 description" id="refsect1-function.variant-sub-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>variant_sub</strong></span>     ( <span class="methodparam"><span class="type"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$left</code></span>    , <span class="methodparam"><span class="type"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$right</code></span>    )</div>    <p class="para rdfs-comment">    Subtracts <code class="parameter">right</code> from <code class="parameter">left</code>.   </p>  </div>   <div class="refsect1 parameters" id="refsect1-function.variant-sub-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">left</code></dt>       <dd>        <p class="para">        The left operand.       </p>      </dd>                 <dt> <code class="parameter">right</code></dt>       <dd>        <p class="para">        The right operand.       </p>      </dd>          </dl>     <blockquote class="note"><p><strong class="note">Note</strong>:  <p class="para">  对于所有变量运算函数，本函数的参数可以是 PHP  内置的类型（整数，字符串，浮点数，布尔型或者  <strong><code>NULL</code></strong>），或者是一个 COM，VARIANT 或者 DOTNET 类的实例。PHP  内置类型将会使用和构造<a href="http://php.net/manual/zh/class.variant.php" class="xref">VARIANT</a>类相同的规则转换成变量。COM 和 DOTNET  对象的值将会取其默认属性并被当成变量值使用。 </p> <p class="para">  变量运算函数是同名函数在 COM  库中的外包；有关此类函数的更多信息参见 MSDN  库。PHP 函数命名有少许区别，例如 PHP  中的 <span class="function">{@link variant_add()}</span> 对应于  MSDN 文档中的 <em>VarAdd()</em>。 </p> </p></blockquote>    </p>  </div>   <div class="refsect1 returnvalues" id="refsect1-function.variant-sub-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    <table class="doctable table">     <caption><strong>Variant Subtraction Rules</strong></caption>           <thead>       <tr>        <th>If</th>        <th>Then</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>Both expressions are of the string type</td>        <td>Subtraction</td>       </tr>        <tr>        <td>One expression is a string type and the other a        character</td>        <td>Subtraction</td>       </tr>        <tr>        <td>One expression is numeric and the other is a string</td>        <td>Subtraction.</td>       </tr>        <tr>        <td>Both expressions are numeric</td>        <td>Subtraction</td>       </tr>        <tr>        <td>Either expression is NULL</td>        <td>NULL is returned</td>       </tr>        <tr>        <td>Both expressions are empty</td>        <td>Empty string is returned</td>       </tr>       </tbody>         </table>    </p>  </div>   <div class="refsect1 seealso" id="refsect1-function.variant-sub-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link variant_add()} - &quot;Adds&quot; two variant values together and returns the result</span></li>    </ul>   </p>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.com.php">COM 函数</a></div></div>
 * @return mixed*/
function variant_sub ( $left, $right ) {}

/**
*<div id="function.variant-xor" class="refentry">  <div class="refnamediv">   <h1 class="refname">variant_xor</h1>   <p class="verinfo">(PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">variant_xor</span> &mdash; <span class="dc-title">Performs a logical exclusion on two variants</span></p>   </div>  <div class="refsect1 description" id="refsect1-function.variant-xor-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>variant_xor</strong></span>     ( <span class="methodparam"><span class="type"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$left</code></span>    , <span class="methodparam"><span class="type"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$right</code></span>    )</div>    <p class="para rdfs-comment">    Performs a logical exclusion.   </p>  </div>   <div class="refsect1 parameters" id="refsect1-function.variant-xor-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">left</code></dt>       <dd>        <p class="para">        The left operand.       </p>      </dd>                 <dt> <code class="parameter">right</code></dt>       <dd>        <p class="para">        The right operand.       </p>      </dd>          </dl>     <blockquote class="note"><p><strong class="note">Note</strong>:  <p class="para">  对于所有变量运算函数，本函数的参数可以是 PHP  内置的类型（整数，字符串，浮点数，布尔型或者  <strong><code>NULL</code></strong>），或者是一个 COM，VARIANT 或者 DOTNET 类的实例。PHP  内置类型将会使用和构造<a href="http://php.net/manual/zh/class.variant.php" class="xref">VARIANT</a>类相同的规则转换成变量。COM 和 DOTNET  对象的值将会取其默认属性并被当成变量值使用。 </p> <p class="para">  变量运算函数是同名函数在 COM  库中的外包；有关此类函数的更多信息参见 MSDN  库。PHP 函数命名有少许区别，例如 PHP  中的 <span class="function">{@link variant_add()}</span> 对应于  MSDN 文档中的 <em>VarAdd()</em>。 </p> </p></blockquote>    </p>  </div>   <div class="refsect1 returnvalues" id="refsect1-function.variant-xor-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    <table class="doctable table">     <caption><strong>Variant XOR Rules</strong></caption>           <thead>       <tr>        <th>If <code class="parameter">left</code> is</th>        <th>If <code class="parameter">right</code> is</th>        <th>then the result is</th>       </tr>       </thead>       <tbody class="tbody">       <tr><td><strong><code>TRUE</code></strong></td><td><strong><code>TRUE</code></strong></td><td><strong><code>FALSE</code></strong></td></tr>        <tr><td><strong><code>TRUE</code></strong></td><td><strong><code>FALSE</code></strong></td><td><strong><code>TRUE</code></strong></td></tr>        <tr><td><strong><code>FALSE</code></strong></td><td><strong><code>TRUE</code></strong></td><td><strong><code>TRUE</code></strong></td></tr>        <tr><td><strong><code>FALSE</code></strong></td><td><strong><code>FALSE</code></strong></td><td><strong><code>FALSE</code></strong></td></tr>        <tr><td><strong><code>NULL</code></strong></td><td><strong><code>NULL</code></strong></td><td><strong><code>NULL</code></strong></td></tr>       </tbody>         </table>    </p>  </div>   <div class="refsect1 seealso" id="refsect1-function.variant-xor-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link variant_or()} - Performs a logical disjunction on two variants</span></li>     <li class="member"><span class="function">{@link variant_and()} - Performs a bitwise AND operation between two variants</span></li>    </ul>   </p>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.com.php">COM 函数</a></div></div>
 * @return mixed*/
function variant_xor ( $left, $right ) {}

define ('CLSCTX_INPROC_SERVER', 1);
define ('CLSCTX_INPROC_HANDLER', 2);
define ('CLSCTX_LOCAL_SERVER', 4);
define ('CLSCTX_REMOTE_SERVER', 16);
define ('CLSCTX_SERVER', 21);
define ('CLSCTX_ALL', 23);

define ('VT_NULL', 1);
define ('VT_EMPTY', 0);
define ('VT_UI1', 17);
define ('VT_I2', 2);
define ('VT_I4', 3);
define ('VT_R4', 4);
define ('VT_R8', 5);
define ('VT_BOOL', 11);
define ('VT_ERROR', 10);
define ('VT_CY', 6);
define ('VT_DATE', 7);
define ('VT_BSTR', 8);
define ('VT_DECIMAL', 14);
define ('VT_UNKNOWN', 13);
define ('VT_DISPATCH', 9);
define ('VT_VARIANT', 12);
define ('VT_I1', 16);
define ('VT_UI2', 18);
define ('VT_UI4', 19);
define ('VT_INT', 22);
define ('VT_UINT', 23);
define ('VT_ARRAY', 8192);
define ('VT_BYREF', 16384);

define ('CP_ACP', 0);
define ('CP_MACCP', 2);
define ('CP_OEMCP', 1);
define ('CP_UTF7', 65000);
define ('CP_UTF8', 65001);
define ('CP_SYMBOL', 42);
define ('CP_THREAD_ACP', 3);

define ('VARCMP_LT', 0);
define ('VARCMP_EQ', 1);
define ('VARCMP_GT', 2);
define ('VARCMP_NULL', 3);

define ('NORM_IGNORECASE', 1);
define ('NORM_IGNORENONSPACE', 2);
define ('NORM_IGNORESYMBOLS', 4);
define ('NORM_IGNOREWIDTH', 131072);
define ('NORM_IGNOREKANATYPE', 65536);
define ('NORM_IGNOREKASHIDA', 262144);

define ('DISP_E_DIVBYZERO', -2147352558);
define ('DISP_E_OVERFLOW', -2147352566);
define ('MK_E_UNAVAILABLE', -2147221021);

// End of com v.
?>
