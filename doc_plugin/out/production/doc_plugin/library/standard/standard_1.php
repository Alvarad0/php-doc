<?php


/**
*<div id="function.strtoupper" class="refentry">  <div class="refnamediv">   <h1 class="refname">strtoupper</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">strtoupper</span> &mdash; <span class="dc-title">将字符串转化为大写</span></p>   </div>    <div class="refsect1 description" id="refsect1-function.strtoupper-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">string</span> <span class="methodname"><strong>strtoupper</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$string</code></span>    )</div>    <p class="para rdfs-comment">    将 <code class="parameter">string</code> 中所有的字母字符转换为大写并返回。   </p>   <p class="para">    注意 “字母” 与当前所在区域有关。例如，在默认的 “C” 区域，字符 umlaut-a（ä）就不会被转换。   </p>  </div>    <div class="refsect1 parameters" id="refsect1-function.strtoupper-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">string</code></dt>       <dd>        <p class="para">       输入字符串。       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.strtoupper-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回转换后的大写字符串。   </p>  </div>    <div class="refsect1 examples" id="refsect1-function.strtoupper-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-5982">     <p><strong>Example #1 <span class="function"><strong>strtoupper()</strong></span> 范例</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$str&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">"Mary&nbsp;Had&nbsp;A&nbsp;Little&nbsp;Lamb&nbsp;and&nbsp;She&nbsp;LOVED&nbsp;It&nbsp;So"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$str&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">strtoupper</span><span style="color: #007700">(</span><span style="color: #9876AA">$str</span><span style="color: #007700">);<br />echo&nbsp;</span><span style="color: #9876AA">$str</span><span style="color: #007700">;&nbsp;</span><span style="color: #FF8000">//&nbsp;打印&nbsp;MARY&nbsp;HAD&nbsp;A&nbsp;LITTLE&nbsp;LAMB&nbsp;AND&nbsp;SHE&nbsp;LOVED&nbsp;IT&nbsp;SO<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>     </div>      </p>  </div>    <div class="refsect1 notes" id="refsect1-function.strtoupper-notes">   <h3 class="title">注释</h3>   <blockquote class="note"><p><strong class="note">Note</strong>: <span class="simpara">此函数可安全用于二进制对象。</span></p></blockquote>  </div>    <div class="refsect1 seealso" id="refsect1-function.strtoupper-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link strtolower()} - 将字符串转化为小写</span></li>     <li class="member"><span class="function">{@link ucfirst()} - 将字符串的首字母转换为大写</span></li>     <li class="member"><span class="function">{@link ucwords()} - 将字符串中每个单词的首字母转换为大写</span></li>     <li class="member"><span class="function">{@link mb_strtoupper()} - 使字符串大写</span></li>    </ul>   </p>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.strings.php">字符串 函数</a></div></div>
 * @return string the uppercased string.*/
function strtoupper ($string) {}

/**
*<div id="function.strtolower" class="refentry">  <div class="refnamediv">   <h1 class="refname">strtolower</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">strtolower</span> &mdash; <span class="dc-title">将字符串转化为小写</span></p>   </div>    <div class="refsect1 description" id="refsect1-function.strtolower-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">string</span> <span class="methodname"><strong>strtolower</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$string</code></span>    )</div>    <p class="para rdfs-comment">   将 <code class="parameter">string</code> 中所有的字母字符转换为小写并返回。   </p>   <p class="para">    注意 “字母” 与当前所在区域有关。例如，在默认的 “C” 区域，字符 umlaut-A（ä）就不会被转换。   </p>  </div>    <div class="refsect1 parameters" id="refsect1-function.strtolower-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">string</code></dt>       <dd>        <p class="para">        输入字符串。       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.strtolower-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回转换后的小写字符串。   </p>  </div>    <div class="refsect1 examples" id="refsect1-function.strtolower-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-5981">     <p><strong>Example #1 <span class="function"><strong>strtolower()</strong></span> 范例</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$str&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">"Mary&nbsp;Had&nbsp;A&nbsp;Little&nbsp;Lamb&nbsp;and&nbsp;She&nbsp;LOVED&nbsp;It&nbsp;So"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$str&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">strtolower</span><span style="color: #007700">(</span><span style="color: #9876AA">$str</span><span style="color: #007700">);<br />echo&nbsp;</span><span style="color: #9876AA">$str</span><span style="color: #007700">;&nbsp;</span><span style="color: #FF8000">//&nbsp;打印&nbsp;mary&nbsp;had&nbsp;a&nbsp;little&nbsp;lamb&nbsp;and&nbsp;she&nbsp;loved&nbsp;it&nbsp;so<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>     </div>      </p>  </div>    <div class="refsect1 notes" id="refsect1-function.strtolower-notes">   <h3 class="title">注释</h3>   <blockquote class="note"><p><strong class="note">Note</strong>: <span class="simpara">此函数可安全用于二进制对象。</span></p></blockquote>  </div>    <div class="refsect1 seealso" id="refsect1-function.strtolower-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link strtoupper()} - 将字符串转化为大写</span></li>     <li class="member"><span class="function">{@link ucfirst()} - 将字符串的首字母转换为大写</span></li>     <li class="member"><span class="function">{@link ucwords()} - 将字符串中每个单词的首字母转换为大写</span></li>     <li class="member"><span class="function">{@link mb_strtolower()} - 使字符串小写</span></li>    </ul>   </p>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.strings.php">字符串 函数</a></div></div>
 * @return string the lowercased string.*/
function strtolower ($str) {}

/**
*<div id="function.strpos" class="refentry">  <div class="refnamediv">   <h1 class="refname">strpos</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">strpos</span> &mdash; <span class="dc-title">查找字符串首次出现的位置</span></p>   </div>    <div class="refsect1 description" id="refsect1-function.strpos-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">int</span> <span class="methodname"><strong>strpos</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$haystack</code></span>    , <span class="methodparam"><span class="type"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$needle</code></span>    [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$offset</code><span class="initializer"> = 0</span></span>   ] )</div>    <p class="para rdfs-comment">    返回 <code class="parameter">needle</code> 在 <code class="parameter">haystack</code> 中首次出现的数字位置。   </p>  </div>    <div class="refsect1 parameters" id="refsect1-function.strpos-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">haystack</code></dt>       <dd>        <p class="para">        在该字符串中进行查找。       </p>      </dd>                 <dt> <code class="parameter">needle</code></dt>       <dd>        <p class="para">        如果 <code class="parameter">needle</code> 不是一个字符串，那么它将被转换为整型并被视为字符的顺序值。       </p>      </dd>                 <dt> <code class="parameter">offset</code></dt>       <dd>        <p class="para">            如果提供了此参数，搜索会从字符串该字符数的起始位置开始统计。        如果是负数，搜索会从字符串结尾指定字符数开始。       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.strpos-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回 needle 存在于 <code class="parameter">haystack</code> 字符串起始的位置(独立于 offset)。同时注意字符串位置是从0开始，而不是从1开始的。   </p>   <p class="para">    如果没找到 needle，将返回 <strong><code>FALSE</code></strong>。   </p>   <div class="warning"><strong class="warning">Warning</strong><p class="simpara">此函数可能返回布尔值 <strong><code>FALSE</code></strong>，但也可能返回等同于 <strong><code>FALSE</code></strong> 的非布尔值。请阅读 <a href="http://php.net/manual/zh/language.types.boolean.php" class="link">布尔类型</a>章节以获取更多信息。应使用 <a href="http://php.net/manual/zh/language.operators.comparison.php" class="link">=== 运算符</a>来测试此函数的返回值。</p></div>  </div>    <div class="refsect1 changelog" id="refsect1-function.strpos-changelog">   <h3 class="title">更新日志</h3>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>      </thead>      <tbody class="tbody">      <tr>       <td>7.1.0</td>       <td>        开始支持负数的 <code class="parameter">offset</code>。       </td>      </tr>      </tbody>       </table>   </div>    <div class="refsect1 examples" id="refsect1-function.strpos-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-5969">     <p><strong>Example #1 使用 <em>===</em></strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$mystring&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'abc'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$findme&nbsp;&nbsp;&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'a'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$pos&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">strpos</span><span style="color: #007700">(</span><span style="color: #9876AA">$mystring</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$findme</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">//&nbsp;注意这里使用的是&nbsp;===。简单的&nbsp;==&nbsp;不能像我们期待的那样工作，<br />//&nbsp;因为&nbsp;'a'&nbsp;是第&nbsp;0&nbsp;位置上的（第一个）字符。<br /></span><span style="color: #007700">if&nbsp;(</span><span style="color: #9876AA">$pos&nbsp;</span><span style="color: #007700">===&nbsp;</span><span style="color: #9876AA">false</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"The&nbsp;string&nbsp;'</span><span style="color: #9876AA">$findme</span><span style="color: #DD0000">'&nbsp;was&nbsp;not&nbsp;found&nbsp;in&nbsp;the&nbsp;string&nbsp;'</span><span style="color: #9876AA">$mystring</span><span style="color: #DD0000">'"</span><span style="color: #007700">;<br />}&nbsp;else&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"The&nbsp;string&nbsp;'</span><span style="color: #9876AA">$findme</span><span style="color: #DD0000">'&nbsp;was&nbsp;found&nbsp;in&nbsp;the&nbsp;string&nbsp;'</span><span style="color: #9876AA">$mystring</span><span style="color: #DD0000">'"</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"&nbsp;and&nbsp;exists&nbsp;at&nbsp;position&nbsp;</span><span style="color: #9876AA">$pos</span><span style="color: #DD0000">"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>     </div>     <div class="example" id="example-5970">     <p><strong>Example #2 使用 !==</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$mystring&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'abc'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$findme&nbsp;&nbsp;&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'a'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$pos&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">strpos</span><span style="color: #007700">(</span><span style="color: #9876AA">$mystring</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$findme</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">//&nbsp;使用&nbsp;!==&nbsp;操作符。使用&nbsp;!=&nbsp;不能像我们期待的那样工作，<br />//&nbsp;因为&nbsp;'a'&nbsp;的位置是&nbsp;0。语句&nbsp;(0&nbsp;!=&nbsp;false)&nbsp;的结果是&nbsp;false。<br /></span><span style="color: #007700">if&nbsp;(</span><span style="color: #9876AA">$pos&nbsp;</span><span style="color: #007700">!==&nbsp;</span><span style="color: #9876AA">false</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"The&nbsp;string&nbsp;'</span><span style="color: #9876AA">$findme</span><span style="color: #DD0000">'&nbsp;was&nbsp;found&nbsp;in&nbsp;the&nbsp;string&nbsp;'</span><span style="color: #9876AA">$mystring</span><span style="color: #DD0000">'"</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"&nbsp;and&nbsp;exists&nbsp;at&nbsp;position&nbsp;</span><span style="color: #9876AA">$pos</span><span style="color: #DD0000">"</span><span style="color: #007700">;<br />}&nbsp;else&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"The&nbsp;string&nbsp;'</span><span style="color: #9876AA">$findme</span><span style="color: #DD0000">'&nbsp;was&nbsp;not&nbsp;found&nbsp;in&nbsp;the&nbsp;string&nbsp;'</span><span style="color: #9876AA">$mystring</span><span style="color: #DD0000">'"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>     </div>     <div class="example" id="example-5971">     <p><strong>Example #3 使用位置偏移量</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">//&nbsp;忽视位置偏移量之前的字符进行查找<br /></span><span style="color: #9876AA">$newstring&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'abcdef&nbsp;abcdef'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$pos&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">strpos</span><span style="color: #007700">(</span><span style="color: #9876AA">$newstring</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'a'</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">1</span><span style="color: #007700">);&nbsp;</span><span style="color: #FF8000">//&nbsp;$pos&nbsp;=&nbsp;7,&nbsp;不是&nbsp;0<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>     </div>   </p>  </div>    <div class="refsect1 notes" id="refsect1-function.strpos-notes">   <h3 class="title">注释</h3>   <blockquote class="note"><p><strong class="note">Note</strong>: <span class="simpara">此函数可安全用于二进制对象。</span></p></blockquote>  </div>    <div class="refsect1 seealso" id="refsect1-function.strpos-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link stripos()} - 查找字符串首次出现的位置（不区分大小写）</span></li>     <li class="member"><span class="function">{@link strrpos()} - 计算指定字符串在目标字符串中最后一次出现的位置</span></li>     <li class="member"><span class="function">{@link strripos()} - 计算指定字符串在目标字符串中最后一次出现的位置（不区分大小写）</span></li>     <li class="member"><span class="function">{@link strstr()} - 查找字符串的首次出现</span></li>     <li class="member"><span class="function">{@link strpbrk()} - 在字符串中查找一组字符的任何一个字符</span></li>     <li class="member"><span class="function">{@link substr()} - 返回字符串的子串</span></li>     <li class="member"><span class="function">{@link preg_match()} - 执行匹配正则表达式</span></li>    </ul>   </p>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.strings.php">字符串 函数</a></div></div>
 * @return int|boolean <p>*/
function strpos ($haystack, $needle, $offset = 0) {}

/**
*<div id="function.stripos" class="refentry">  <div class="refnamediv">   <h1 class="refname">stripos</h1>   <p class="verinfo">(PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">stripos</span> &mdash; <span class="dc-title">查找字符串首次出现的位置（不区分大小写）</span></p>   </div>    <div class="refsect1 description" id="refsect1-function.stripos-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">int</span> <span class="methodname"><strong>stripos</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$haystack</code></span>    , <span class="methodparam"><span class="type">string</span> <code class="parameter">$needle</code></span>    [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$offset</code><span class="initializer"> = 0</span></span>   ] )</div>    <p class="para rdfs-comment">    返回在<span class="type"><span class="type 字符串">字符串</span></span> <code class="parameter">haystack</code> 中 <code class="parameter">needle</code> 首次出现的数字位置。   </p>   <p class="para">    与 <span class="function">{@link strpos()}</span> 不同，<span class="function"><strong>stripos()</strong></span> 不区分大小写。   </p>  </div>    <div class="refsect1 parameters" id="refsect1-function.stripos-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">haystack</code></dt>       <dd>        <p class="para">        在该字符串中查找。       </p>      </dd>                 <dt> <code class="parameter">needle</code></dt>       <dd>        <p class="para">        注意 <code class="parameter">needle</code> 可以是一个单字符或者多字符的字符串。       </p>       <p class="para">        如果 <code class="parameter">needle</code> 不是一个字符串，那么它将被转换为整型并被视为字符顺序值。       </p>      </dd>                 <dt> <code class="parameter">offset</code></dt>       <dd>        <p class="para">        可选的 <code class="parameter">offset</code> 参数，从字符此数量的开始位置进行搜索。        如果是负数，就从字符末尾此数量的字符数开始统计。       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.stripos-returnvalues">   <h3 class="title">返回值</h3>     <p class="para">      返回 needle 存在于 <code class="parameter">haystack</code> 字符串开始的位置(独立于偏移量)。同时注意字符串位置起始于 0，而不是 1。   </p>   <p class="para">    如果未发现 needle 将返回 <strong><code>FALSE</code></strong>。   </p>   <div class="warning"><strong class="warning">Warning</strong><p class="simpara">此函数可能返回布尔值 <strong><code>FALSE</code></strong>，但也可能返回等同于 <strong><code>FALSE</code></strong> 的非布尔值。请阅读 <a href="http://php.net/manual/zh/language.types.boolean.php" class="link">布尔类型</a>章节以获取更多信息。应使用 <a href="http://php.net/manual/zh/language.operators.comparison.php" class="link">=== 运算符</a>来测试此函数的返回值。</p></div>  </div>    <div class="refsect1 changelog" id="refsect1-function.stripos-changelog">   <h3 class="title">更新日志</h3>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>      </thead>      <tbody class="tbody">      <tr>       <td>7.1.0</td>       <td>        开始支持负数的 <code class="parameter">offset</code>。       </td>      </tr>      </tbody>       </table>   </div>    <div class="refsect1 examples" id="refsect1-function.stripos-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-5961">    <p><strong>Example #1 <span class="function"><strong>stripos()</strong></span> 范例</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$findme&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'a'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$mystring1&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'xyz'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$mystring2&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'ABC'</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">$pos1&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">stripos</span><span style="color: #007700">(</span><span style="color: #9876AA">$mystring1</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$findme</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$pos2&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">stripos</span><span style="color: #007700">(</span><span style="color: #9876AA">$mystring2</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$findme</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">//&nbsp;'a'&nbsp;当然不在&nbsp;'xyz'&nbsp;中<br /></span><span style="color: #007700">if&nbsp;(</span><span style="color: #9876AA">$pos1&nbsp;</span><span style="color: #007700">===&nbsp;</span><span style="color: #9876AA">false</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"The&nbsp;string&nbsp;'</span><span style="color: #9876AA">$findme</span><span style="color: #DD0000">'&nbsp;was&nbsp;not&nbsp;found&nbsp;in&nbsp;the&nbsp;string&nbsp;'</span><span style="color: #9876AA">$mystring1</span><span style="color: #DD0000">'"</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #FF8000">//&nbsp;注意这里使用的是&nbsp;===。简单的&nbsp;==&nbsp;不能像我们期望的那样工作，<br />//&nbsp;因为&nbsp;'a'&nbsp;的位置是&nbsp;0（第一个字符）。<br /></span><span style="color: #007700">if&nbsp;(</span><span style="color: #9876AA">$pos2&nbsp;</span><span style="color: #007700">!==&nbsp;</span><span style="color: #9876AA">false</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"We&nbsp;found&nbsp;'</span><span style="color: #9876AA">$findme</span><span style="color: #DD0000">'&nbsp;in&nbsp;'</span><span style="color: #9876AA">$mystring2</span><span style="color: #DD0000">'&nbsp;at&nbsp;position&nbsp;</span><span style="color: #9876AA">$pos2</span><span style="color: #DD0000">"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>     </div>   </p>  </div>    <div class="refsect1 notes" id="refsect1-function.stripos-notes">   <h3 class="title">注释</h3>   <blockquote class="note"><p><strong class="note">Note</strong>: <span class="simpara">此函数可安全用于二进制对象。</span></p></blockquote>  </div>    <div class="refsect1 seealso" id="refsect1-function.stripos-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link mb_stripos()} - 大小写不敏感地查找字符串在另一个字符串中首次出现的位置</span></li>     <li class="member"><span class="function">{@link strpos()} - 查找字符串首次出现的位置</span></li>     <li class="member"><span class="function">{@link strrpos()} - 计算指定字符串在目标字符串中最后一次出现的位置</span></li>     <li class="member"><span class="function">{@link strripos()} - 计算指定字符串在目标字符串中最后一次出现的位置（不区分大小写）</span></li>     <li class="member"><span class="function">{@link stristr()} - strstr 函数的忽略大小写版本</span></li>     <li class="member"><span class="function">{@link substr()} - 返回字符串的子串</span></li>     <li class="member"><span class="function">{@link str_ireplace()} - str_replace 的忽略大小写版本</span></li>    </ul>   </p>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.strings.php">字符串 函数</a></div></div>
 * @return int If needle is not found,*/
function stripos ($haystack, $needle, $offset = null) {}

/**
*<div id="function.strrpos" class="refentry">  <div class="refnamediv">   <h1 class="refname">strrpos</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">strrpos</span> &mdash; <span class="dc-title">计算指定字符串在目标字符串中最后一次出现的位置</span></p>   </div>    <div class="refsect1 description" id="refsect1-function.strrpos-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">int</span> <span class="methodname"><strong>strrpos</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$haystack</code></span>    , <span class="methodparam"><span class="type">string</span> <code class="parameter">$needle</code></span>    [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$offset</code><span class="initializer"> = 0</span></span>   ] )</div>    <p class="para rdfs-comment">    返回字符串 <code class="parameter">haystack</code> 中 <code class="parameter">needle</code> 最后一次出现的数字位置。注意 PHP4 中，needle 只能为单个字符。如果 needle 被指定为一个字符串，那么将仅使用第一个字符。   </p>  </div>    <div class="refsect1 parameters" id="refsect1-function.strrpos-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">haystack</code></dt>       <dd>        <p class="para">        在此字符串中进行查找。       </p>      </dd>                 <dt> <code class="parameter">needle</code></dt>       <dd>        <p class="para">        如果 <code class="parameter">needle</code>不是一个字符串，它将被转换为整型并被视为字符的顺序值。       </p>      </dd>                 <dt> <code class="parameter">offset</code></dt>       <dd>        <p class="para">        或许会查找字符串中任意长度的子字符串。负数值将导致查找在字符串结尾处开始的计数位置处结束。       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.strrpos-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回 needle 存在的位置。如果没有找到，返回 <strong><code>FALSE</code></strong>。    Also note that string positions start at 0, and not 1.   </p>   <p class="para">    Returns <strong><code>FALSE</code></strong> if the needle was not found.   </p>   <div class="warning"><strong class="warning">Warning</strong><p class="simpara">此函数可能返回布尔值 <strong><code>FALSE</code></strong>，但也可能返回等同于 <strong><code>FALSE</code></strong> 的非布尔值。请阅读 <a href="http://php.net/manual/zh/language.types.boolean.php" class="link">布尔类型</a>章节以获取更多信息。应使用 <a href="http://php.net/manual/zh/language.operators.comparison.php" class="link">=== 运算符</a>来测试此函数的返回值。</p></div>  </div>     <div class="refsect1 changelog" id="refsect1-function.strrpos-changelog">   <h3 class="title">更新日志</h3>   <p class="para">    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>5.0.0</td>        <td>         参数 <code class="parameter">needle</code> 可以是一个多字符的字符串。        </td>       </tr>        <tr>        <td>5.0.0</td>        <td>         引入 <code class="parameter">offset</code> 参数。        </td>       </tr>       </tbody>         </table>    </p>  </div>     <div class="refsect1 examples" id="refsect1-function.strrpos-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-5975">     <p><strong>Example #1 检查字串是否存在</strong></p>     <div class="example-contents"><p>      很容易将“在位置 0 处找到”和“未发现字符串”这两种情况搞错。这是检测区别的办法：     </p></div>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /><br />$pos&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">strrpos</span><span style="color: #007700">(</span><span style="color: #9876AA">$mystring</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"b"</span><span style="color: #007700">);<br />if&nbsp;(</span><span style="color: #9876AA">$pos&nbsp;</span><span style="color: #007700">===&nbsp;</span><span style="color: #9876AA">false</span><span style="color: #007700">)&nbsp;{&nbsp;</span><span style="color: #FF8000">//&nbsp;注意:&nbsp;三个等号<br />&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;未发现...<br /></span><span style="color: #007700">}<br /><br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>     </div>   </p>   <p class="para">    <div class="example" id="example-5976">     <p><strong>Example #2 使用偏移位置进行查找</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$foo&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">"0123456789a123456789b123456789c"</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">strrpos</span><span style="color: #007700">(</span><span style="color: #9876AA">$foo</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'7'</span><span style="color: #007700">,&nbsp;-</span><span style="color: #9876AA">5</span><span style="color: #007700">));&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;从尾部第&nbsp;5&nbsp;个位置开始查找<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;结果:&nbsp;int(17)<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">strrpos</span><span style="color: #007700">(</span><span style="color: #9876AA">$foo</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'7'</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">20</span><span style="color: #007700">));&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;从第&nbsp;20&nbsp;个位置开始查找<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;结果:&nbsp;int(27)<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">strrpos</span><span style="color: #007700">(</span><span style="color: #9876AA">$foo</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'7'</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">28</span><span style="color: #007700">));&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;结果:&nbsp;bool(false)<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>     </div>   </p>  </div>    <div class="refsect1 seealso" id="refsect1-function.strrpos-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link strpos()} - 查找字符串首次出现的位置</span></li>     <li class="member"><span class="function">{@link stripos()} - 查找字符串首次出现的位置（不区分大小写）</span></li>     <li class="member"><span class="function">{@link strripos()} - 计算指定字符串在目标字符串中最后一次出现的位置（不区分大小写）</span></li>     <li class="member"><span class="function">{@link strrchr()} - 查找指定字符在字符串中的最后一次出现</span></li>     <li class="member"><span class="function">{@link substr()} - 返回字符串的子串</span></li>    </ul>   </p>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.strings.php">字符串 函数</a></div></div>
 * @return int|boolean <p>*/
function strrpos ($haystack, $needle, $offset = 0) {}

/**
*<div id="function.strripos" class="refentry">  <div class="refnamediv">   <h1 class="refname">strripos</h1>   <p class="verinfo">(PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">strripos</span> &mdash; <span class="dc-title">计算指定字符串在目标字符串中最后一次出现的位置（不区分大小写）</span></p>   </div>    <div class="refsect1 description" id="refsect1-function.strripos-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">int</span> <span class="methodname"><strong>strripos</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$haystack</code></span>    , <span class="methodparam"><span class="type">string</span> <code class="parameter">$needle</code></span>    [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$offset</code><span class="initializer"> = 0</span></span>   ] )</div>    <p class="para rdfs-comment">    以不区分大小写的方式查找指定字符串在目标字符串中最后一次出现的位置。与 <span class="function">{@link strrpos()}</span> 不同，<span class="function"><strong>strripos()</strong></span> 不区分大小写。   </p>  </div>    <div class="refsect1 parameters" id="refsect1-function.strripos-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">haystack</code></dt>       <dd>        <p class="para">        在此字符串中进行查找。       </p>      </dd>                 <dt> <code class="parameter">needle</code></dt>       <dd>        <p class="para">        注意 <code class="parameter">needle</code> 可以是一个单字符或者多字符的字符串。       </p>      </dd>                 <dt> <code class="parameter">offset</code></dt>       <dd>        <p class="para">        参数 <code class="parameter">offset</code> 可以被指定来查找字符串中任意长度的子字符串。       </p>       <p class="para">        负数偏移量将使得查找从字符串的起始位置开始，到 <code class="parameter">offset</code> 位置为止。       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.strripos-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回 needle 相对于 <code class="parameter">haystack</code> 字符串的位置(和搜索的方向和偏移量无关)。同时注意字符串的起始位置为 0 而非 1。   </p>   <p class="para">    如果 needle 未被发现，返回 <strong><code>FALSE</code></strong>。   </p>   <div class="warning"><strong class="warning">Warning</strong><p class="simpara">此函数可能返回布尔值 <strong><code>FALSE</code></strong>，但也可能返回等同于 <strong><code>FALSE</code></strong> 的非布尔值。请阅读 <a href="http://php.net/manual/zh/language.types.boolean.php" class="link">布尔类型</a>章节以获取更多信息。应使用 <a href="http://php.net/manual/zh/language.operators.comparison.php" class="link">=== 运算符</a>来测试此函数的返回值。</p></div>  </div>    <div class="refsect1 examples" id="refsect1-function.strripos-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-5974">     <p><strong>Example #1 <span class="function"><strong>strripos()</strong></span> 简单范例</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$haystack&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'ababcd'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$needle&nbsp;&nbsp;&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'aB'</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">$pos&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">strripos</span><span style="color: #007700">(</span><span style="color: #9876AA">$haystack</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$needle</span><span style="color: #007700">);<br /><br />if&nbsp;(</span><span style="color: #9876AA">$pos&nbsp;</span><span style="color: #007700">===&nbsp;</span><span style="color: #9876AA">false</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"Sorry,&nbsp;we&nbsp;did&nbsp;not&nbsp;find&nbsp;(</span><span style="color: #9876AA">$needle</span><span style="color: #DD0000">)&nbsp;in&nbsp;(</span><span style="color: #9876AA">$haystack</span><span style="color: #DD0000">)"</span><span style="color: #007700">;<br />}&nbsp;else&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"Congratulations!\n"</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"We&nbsp;found&nbsp;the&nbsp;last&nbsp;(</span><span style="color: #9876AA">$needle</span><span style="color: #DD0000">)&nbsp;in&nbsp;(</span><span style="color: #9876AA">$haystack</span><span style="color: #DD0000">)&nbsp;at&nbsp;position&nbsp;(</span><span style="color: #9876AA">$pos</span><span style="color: #DD0000">)"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen"> <div class="cdata"><pre>    Congratulations!    We found the last (aB) in (ababcd) at position (2) </pre></div>     </div>    </div>   </p>  </div>    <div class="refsect1 seealso" id="refsect1-function.strripos-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link strpos()} - 查找字符串首次出现的位置</span></li>     <li class="member"><span class="function">{@link stripos()} - 查找字符串首次出现的位置（不区分大小写）</span></li>     <li class="member"><span class="function">{@link strrchr()} - 查找指定字符在字符串中的最后一次出现</span></li>     <li class="member"><span class="function">{@link substr()} - 返回字符串的子串</span></li>     <li class="member"><span class="function">{@link stristr()} - strstr 函数的忽略大小写版本</span></li>     <li class="member"><span class="function">{@link strstr()} - 查找字符串的首次出现</span></li>    </ul>   </p>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.strings.php">字符串 函数</a></div></div>
 * @return int the numerical position of the last occurrence of*/
function strripos ($haystack, $needle, $offset = null) {}

/**
*<div id="function.strrev" class="refentry">  <div class="refnamediv">   <h1 class="refname">strrev</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">strrev</span> &mdash; <span class="dc-title">反转字符串</span></p>   </div>    <div class="refsect1 description" id="refsect1-function.strrev-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">string</span> <span class="methodname"><strong>strrev</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$string</code></span>    )</div>    <p class="para rdfs-comment">    返回 <code class="parameter">string</code> 反转后的字符串。   </p>  </div>    <div class="refsect1 parameters" id="refsect1-function.strrev-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">string</code></dt>       <dd>        <p class="para">        待反转的原始字符串。       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.strrev-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回反转后的字符串。   </p>  </div>    <div class="refsect1 examples" id="refsect1-function.strrev-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-5973">     <p><strong>Example #1 使用 <span class="function"><strong>strrev()</strong></span> 反转字符串</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #9876AA">strrev</span><span style="color: #007700">(</span><span style="color: #DD0000">"Hello&nbsp;world!"</span><span style="color: #007700">);&nbsp;</span><span style="color: #FF8000">//&nbsp;输出&nbsp;"!dlrow&nbsp;olleH"<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>     </div>   </p>     </div>   <div class="up"><a href="http://php.net/manual/zh/ref.strings.php">字符串 函数</a></div></div>
 * @return string the reversed string.*/
function strrev ($string) {}

/**
*<div id="function.hebrev" class="refentry">  <div class="refnamediv">   <h1 class="refname">hebrev</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">hebrev</span> &mdash; <span class="dc-title">将逻辑顺序希伯来文（logical-Hebrew）转换为视觉顺序希伯来文（visual-Hebrew）</span></p>   </div>    <div class="refsect1 description" id="refsect1-function.hebrev-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">string</span> <span class="methodname"><strong>hebrev</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$hebrew_text</code></span>    [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$max_chars_per_line</code><span class="initializer"> = 0</span></span>   ] )</div>    <p class="para rdfs-comment">    将逻辑顺序希伯来文（logical-Hebrew）转换为视觉顺序希伯来文（visual-Hebrew）   </p>   <p class="para">    函数将会尝试避免破坏单词。   </p>  </div>    <div class="refsect1 parameters" id="refsect1-function.hebrev-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">hebrew_text</code></dt>       <dd>        <p class="para">        逻辑顺序希伯来文字符串。       </p>      </dd>                 <dt> <code class="parameter">max_chars_per_line</code></dt>       <dd>        <p class="para">        可选参数，表示每行可返回的最多字符数。       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.hebrev-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回视觉顺序字符串。   </p>  </div>    <div class="refsect1 seealso" id="refsect1-function.hebrev-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link hebrevc()} - 将逻辑顺序希伯来文（logical-Hebrew）转换为视觉顺序希伯来文（visual-Hebrew），并且转换换行符</span></li>    </ul>   </p>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.strings.php">字符串 函数</a></div></div>
 * @return string the visual string.*/
function hebrev ($hebrew_text, $max_chars_per_line = null) {}

/**
*<div id="function.hebrevc" class="refentry">  <div class="refnamediv">   <h1 class="refname">hebrevc</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">hebrevc</span> &mdash; <span class="dc-title">将逻辑顺序希伯来文（logical-Hebrew）转换为视觉顺序希伯来文（visual-Hebrew），并且转换换行符</span></p>   </div>    <div class="refsect1 description" id="refsect1-function.hebrevc-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">string</span> <span class="methodname"><strong>hebrevc</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$hebrew_text</code></span>    [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$max_chars_per_line</code><span class="initializer"> = 0</span></span>   ] )</div>    <p class="para rdfs-comment">    本函数与<span class="function">{@link hebrev()}</span> 一样，唯一的区别是    本函数会额外将换行符(\n)转换为&quot;&lt;br&gt;\n&quot;。   </p>   <p class="para">    函数将会尝试避免破坏单词。   </p>  </div>    <div class="refsect1 parameters" id="refsect1-function.hebrevc-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">hebrew_text</code></dt>       <dd>        <p class="para">        逻辑顺序希伯来文字符串。       </p>      </dd>                 <dt> <code class="parameter">max_chars_per_line</code></dt>       <dd>        <p class="para">        可选参数，表示每行可返回的最多字符数。       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.hebrevc-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回视觉顺序字符串。   </p>  </div>    <div class="refsect1 seealso" id="refsect1-function.hebrevc-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link hebrev()} - 将逻辑顺序希伯来文（logical-Hebrew）转换为视觉顺序希伯来文（visual-Hebrew）</span></li>    </ul>   </p>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.strings.php">字符串 函数</a></div></div>
 * @return string the visual string.*/
function hebrevc ($hebrew_text, $max_chars_per_line = null) {}

/**
*<div id="function.nl2br" class="refentry">  <div class="refnamediv">   <h1 class="refname">nl2br</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">nl2br</span> &mdash; <span class="dc-title">在字符串所有新行之前插入 HTML 换行标记</span></p>   </div>    <div class="refsect1 description" id="refsect1-function.nl2br-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">string</span> <span class="methodname"><strong>nl2br</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$string</code></span>    [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$is_xhtml</code><span class="initializer"> = <strong><code>TRUE</code></strong></span></span>   ] )</div>    <p class="para rdfs-comment">    在字符串 <code class="parameter">string</code> 所有新行之前插入 <code class="code">&#039;&lt;br /&gt;&#039;</code> 或 <code class="code">&#039;&lt;br&gt;&#039;</code>，并返回。   </p>  </div>    <div class="refsect1 parameters" id="refsect1-function.nl2br-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">string</code></dt>       <dd>        <p class="para">        输入字符串。       </p>      </dd>                 <dt> <code class="parameter">is_xhtml</code></dt>       <dd>        <p class="para">        是否使用 XHTML 兼容换行符。       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.nl2br-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回调整后的字符串。   </p>  </div>    <div class="refsect1 examples" id="refsect1-function.nl2br-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-5920">     <p><strong>Example #1 <span class="function"><strong>nl2br()</strong></span> 使用范例</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #9876AA">nl2br</span><span style="color: #007700">(</span><span style="color: #DD0000">"foo&nbsp;isn't\n&nbsp;bar"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen"> <div class="cdata"><pre> foo isn&#039;t&lt;br /&gt;  bar </pre></div>     </div>    </div>    <div class="example" id="example-5921">     <p><strong>Example #2 使用 <code class="parameter">is_xhtml</code> 生成合法的 HTML 标记</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #9876AA">nl2br</span><span style="color: #007700">(</span><span style="color: #DD0000">"Welcome\r\nThis&nbsp;is&nbsp;my&nbsp;HTML&nbsp;document"</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">false</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen"> <div class="cdata"><pre> Welcome&lt;br&gt; This is my HTML document </pre></div>     </div>    </div>        <div class="example" id="example-5922">     <p><strong>Example #3 各种换行分隔符</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$string&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">"This\r\nis\n\ra\nstring\r"</span><span style="color: #007700">;<br />echo&nbsp;</span><span style="color: #9876AA">nl2br</span><span style="color: #007700">(</span><span style="color: #9876AA">$string</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen"> <div class="cdata"><pre> This&lt;br /&gt; is&lt;br /&gt; a&lt;br /&gt; string&lt;br /&gt; </pre></div>     </div>    </div>   </p>  </div>    <div class="refsect1 changelog" id="refsect1-function.nl2br-changelog">   <h3 class="title">更新日志</h3>   <p class="para">    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>5.3.0</td>        <td>          新增可选的 <code class="parameter">is_xhtml</code> 参数。在此之前，总是插入 &#039;&lt;br /&gt;&#039;。        </td>       </tr>       </tbody>         </table>    </p>  </div>    <div class="refsect1 seealso" id="refsect1-function.nl2br-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link htmlspecialchars()} - 将特殊字符转换为 HTML 实体</span></li>     <li class="member"><span class="function">{@link htmlentities()} - 将字符转换为 HTML 转义字符</span></li>     <li class="member"><span class="function">{@link wordwrap()} - 打断字符串为指定数量的字串</span></li>     <li class="member"><span class="function">{@link str_replace()} - 子字符串替换</span></li>    </ul>   </p>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.strings.php">字符串 函数</a></div></div>
 * @return string the altered string.*/
function nl2br ($string, $is_xhtml = null) {}

/**
*<div id="function.basename" class="refentry">  <div class="refnamediv">   <h1 class="refname">basename</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">basename</span> &mdash; <span class="dc-title">返回路径中的文件名部分</span></p>   </div>     <div class="refsect1 description" id="refsect1-function.basename-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">string</span> <span class="methodname"><strong>basename</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$path</code></span>    [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$suffix</code></span>   ] )</div>    <p class="para rdfs-comment">    给出一个包含有指向一个文件的全路径的字符串，本函数返回基本的文件名。   </p>  </div>     <div class="refsect1 parameters" id="refsect1-function.basename-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">path</code></dt>       <dd>        <p class="para">        一个路径。       </p>       <p class="para">        在 Windows   中，斜线（<em>/</em>）和反斜线（<em>\</em>）都可以用作目录分隔符。在其它环境下是斜线（<em>/</em>）。       </p>      </dd>                 <dt> <code class="parameter">suffix</code></dt>       <dd>        <p class="para">        如果文件名是以   <code class="parameter">suffix</code> 结束的，那这一部分也会被去掉。       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.basename-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    Returns the base name of the given <code class="parameter">path</code>.    返回 <code class="parameter">path</code> 的基本的文件名。   </p>  </div>    <div class="refsect1 changelog" id="refsect1-function.basename-changelog">   <h3 class="title">更新日志</h3>   <p class="para">    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>4.1.0</td>        <td>         增加了参数 <code class="parameter">suffix</code>        </td>       </tr>       </tbody>         </table>    </p>  </div>    <div class="refsect1 examples" id="refsect1-function.basename-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-2757">     <p><strong>Example #1 <span class="function"><strong>basename()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #DD0000">"1)&nbsp;"</span><span style="color: #007700">.</span><span style="color: #9876AA">basename</span><span style="color: #007700">(</span><span style="color: #DD0000">"/etc/sudoers.d"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">".d"</span><span style="color: #007700">).</span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />echo&nbsp;</span><span style="color: #DD0000">"2)&nbsp;"</span><span style="color: #007700">.</span><span style="color: #9876AA">basename</span><span style="color: #007700">(</span><span style="color: #DD0000">"/etc/passwd"</span><span style="color: #007700">).</span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />echo&nbsp;</span><span style="color: #DD0000">"3)&nbsp;"</span><span style="color: #007700">.</span><span style="color: #9876AA">basename</span><span style="color: #007700">(</span><span style="color: #DD0000">"/etc/"</span><span style="color: #007700">).</span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />echo&nbsp;</span><span style="color: #DD0000">"4)&nbsp;"</span><span style="color: #007700">.</span><span style="color: #9876AA">basename</span><span style="color: #007700">(</span><span style="color: #DD0000">"."</span><span style="color: #007700">).</span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />echo&nbsp;</span><span style="color: #DD0000">"5)&nbsp;"</span><span style="color: #007700">.</span><span style="color: #9876AA">basename</span><span style="color: #007700">(</span><span style="color: #DD0000">"/"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen"> <div class="cdata"><pre> 1) sudoers 2) passwd 3) etc 4) . 5)  </pre></div>     </div>    </div>   </p>  </div>     <div class="refsect1 notes" id="refsect1-function.basename-notes">   <h3 class="title">注释</h3>   <blockquote class="note"><p><strong class="note">Note</strong>:     <p class="para">     <span class="function"><strong>basename()</strong></span> operates naively on the input string,     and is not aware of the actual filesystem, or path components such     as &quot;<em>..</em>&quot;.    </p>   </p></blockquote>   <blockquote class="note"><p><strong class="note">Note</strong>:     <p class="para">     <span class="function"><strong>basename()</strong></span> is locale aware, so for it to see the      correct basename with multibyte character paths, the matching locale must      be set using the <span class="function">{@link setlocale()}</span> function.    </p>   </p></blockquote>  </div>    <div class="refsect1 seealso" id="refsect1-function.basename-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link dirname()} - 返回路径中的目录部分</span></li>     <li class="member"><span class="function">{@link pathinfo()} - 返回文件路径的信息</span></li>    </ul>   </p>  </div>     <div class="up"><a href="http://php.net/manual/zh/ref.filesystem.php">文件系统函数</a></div></div>
 * @return string the base name of the given path.*/
function basename ($path, $suffix = null) {}

/**
*<div id="function.dirname" class="refentry">  <div class="refnamediv">   <h1 class="refname">dirname</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">dirname</span> &mdash; <span class="dc-title">返回路径中的目录部分</span></p>   </div>     <div class="refsect1 description" id="refsect1-function.dirname-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">string</span> <span class="methodname"><strong>dirname</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$path</code></span>    )</div>    <p class="para rdfs-comment">    给出一个包含有指向一个文件的全路径的字符串，本函数返回去掉文件名后的目录名。   </p>  </div>      <div class="refsect1 parameters" id="refsect1-function.dirname-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">path</code></dt>       <dd>        <p class="para">        一个路径。       </p>       <p class="para">        在 Windows 中，斜线（<em>/</em>）和反斜线（<em>\</em>）都可以用作目录分隔符。在其它环境下是斜线（<em>/</em>）。       </p>      </dd>          </dl>    </p>  </div>      <div class="refsect1 returnvalues" id="refsect1-function.dirname-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回 path 的父目录。    如果在 <code class="parameter">path</code>     中没有斜线，则返回一个点（&#039;<em>.</em>&#039;），表示当前目录。否则返回的是把     <code class="parameter">path</code> 中结尾的     <em>/component</em>（最后一个斜线以及后面部分）去掉之后的字符串。   </p>  </div>     <div class="refsect1 changelog" id="refsect1-function.dirname-changelog">   <h3 class="title">更新日志</h3>   <p class="para">    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>5.0.0</td>        <td>         <span class="function"><strong>dirname()</strong></span> 的操作从 PHP 5.0.0 版开始是二进制安全的。        </td>       </tr>        <tr>        <td>4.0.3</td>        <td>         在这个版本中，<span class="function"><strong>dirname()</strong></span> 被修正为     POSIX 兼容。        </td>       </tr>       </tbody>         </table>    </p>  </div>     <div class="refsect1 examples" id="refsect1-function.dirname-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-2762">     <p><strong>Example #1 <span class="function"><strong>dirname()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #DD0000">"1)&nbsp;"&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #9876AA">dirname</span><span style="color: #007700">(</span><span style="color: #DD0000">"/etc/passwd"</span><span style="color: #007700">)&nbsp;.&nbsp;</span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;&nbsp;</span><span style="color: #FF8000">//&nbsp;1)&nbsp;/etc<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #DD0000">"2)&nbsp;"&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #9876AA">dirname</span><span style="color: #007700">(</span><span style="color: #DD0000">"/etc/"</span><span style="color: #007700">)&nbsp;.&nbsp;</span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;&nbsp;</span><span style="color: #FF8000">//&nbsp;2)&nbsp;/&nbsp;(or&nbsp;\&nbsp;on&nbsp;Windows)<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #DD0000">"3)&nbsp;"&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #9876AA">dirname</span><span style="color: #007700">(</span><span style="color: #DD0000">"."</span><span style="color: #007700">);&nbsp;</span><span style="color: #FF8000">//&nbsp;3)&nbsp;.<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>     </div>   </p>  </div>      <div class="refsect1 notes" id="refsect1-function.dirname-notes">   <h3 class="title">注释</h3>   <blockquote class="note"><p><strong class="note">Note</strong>:     <p class="para">     <span class="function"><strong>dirname()</strong></span> operates naively on the input string,     and is not aware of the actual filesystem, or path components such     as &quot;<em>..</em>&quot;.    </p>   </p></blockquote>   <blockquote class="note"><p><strong class="note">Note</strong>:     <p class="para">     <span class="function"><strong>dirname()</strong></span> is locale aware, so for it to see the      correct directory name with multibyte character paths, the matching locale must      be set using the <span class="function">{@link setlocale()}</span> function.    </p>   </p></blockquote>   <blockquote class="note"><p><strong class="note">Note</strong>:     <p class="para">     Since PHP 4.3.0, you will often get a slash or a dot back from     <span class="function"><strong>dirname()</strong></span> in situations where the older     functionality would have given you the empty string.    </p>   </p></blockquote>   <p class="para">    检查下面发生变化的例子：    <div class="informalexample">     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /><br /></span><span style="color: #FF8000">//&nbsp;PHP&nbsp;4.3.0&nbsp;以前<br /></span><span style="color: #9876AA">dirname</span><span style="color: #007700">(</span><span style="color: #DD0000">'c:/'</span><span style="color: #007700">);&nbsp;</span><span style="color: #FF8000">//&nbsp;返回&nbsp;'.'<br /><br />//&nbsp;PHP&nbsp;4.3.0&nbsp;以后<br /></span><span style="color: #9876AA">dirname</span><span style="color: #007700">(</span><span style="color: #DD0000">'c:/x'</span><span style="color: #007700">);&nbsp;</span><span style="color: #FF8000">//&nbsp;返回&nbsp;'c:'<br /></span><span style="color: #9876AA">dirname</span><span style="color: #007700">(</span><span style="color: #DD0000">'c:/Temp/x'</span><span style="color: #007700">);&nbsp;</span><span style="color: #FF8000">//&nbsp;返回&nbsp;'c:/Temp'<br /></span><span style="color: #9876AA">dirname</span><span style="color: #007700">(</span><span style="color: #DD0000">'/x'</span><span style="color: #007700">);&nbsp;</span><span style="color: #FF8000">//&nbsp;返回&nbsp;'\'<br /><br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>     </div>   </p>  </div>    <div class="refsect1 seealso" id="refsect1-function.dirname-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link basename()} - 返回路径中的文件名部分</span></li>     <li class="member"><span class="function">{@link pathinfo()} - 返回文件路径的信息</span></li>     <li class="member"><span class="function">{@link realpath()} - 返回规范化的绝对路径名</span></li>    </ul>   </p>  </div>    <div class="up"><a href="http://php.net/manual/zh/ref.filesystem.php">文件系统函数</a></div></div>
 * @return string the name of the directory. If there are no slashes in*/
function dirname ($path, $levels = 1) {}

/**
*<div id="function.pathinfo" class="refentry">  <div class="refnamediv">   <h1 class="refname">pathinfo</h1>   <p class="verinfo">(PHP 4 &gt;= 4.0.3, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">pathinfo</span> &mdash; <span class="dc-title">返回文件路径的信息</span></p>   </div>    <div class="refsect1 description" id="refsect1-function.pathinfo-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>pathinfo</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$path</code></span>    [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$options</code><span class="initializer"> = PATHINFO_DIRNAME | PATHINFO_BASENAME | PATHINFO_EXTENSION | PATHINFO_FILENAME</span></span>   ] )</div>    <p class="para rdfs-comment">    <span class="function"><strong>pathinfo()</strong></span> 返回一个关联数组包含有 <em>path</em>    的信息。返回关联数组还是字符串取决于 <code class="parameter">options</code>。   </p>  </div>    <div class="refsect1 parameters" id="refsect1-function.pathinfo-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">path</code></dt>       <dd>        <p class="para">        要解析的路径。       </p>      </dd>                 <dt> <code class="parameter">options</code></dt>       <dd>        <p class="para">        如果指定了，将会返回指定元素；它们包括：<strong><code>PATHINFO_DIRNAME</code></strong>，<strong><code>PATHINFO_BASENAME</code></strong>    和 <strong><code>PATHINFO_EXTENSION</code></strong> 或 <strong><code>PATHINFO_FILENAME</code></strong>。       </p>       <p class="para">如果没有指定 <code class="parameter">options</code> 默认是返回全部的单元。       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.pathinfo-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    如果没有传入 <code class="parameter">options</code> ，将会返回包括以下单元的数组 <span class="type"><a href="http://php.net/manual/zh/language.types.array.php" class="type array">array</a></span>：<em>dirname</em>，<em>basename</em>    和 <em>extension</em>（如果有），以 及<em>filename</em>。   </p>   <blockquote class="note"><p><strong class="note">Note</strong>:     <p class="para">     If the <code class="parameter">path</code> does not have an extension, no     <em>extension</em> element will be returned（以下第二个案例）。    </p>   </p></blockquote>   <p class="para">    If <code class="parameter">options</code> is present, returns a     <span class="type"><a href="http://php.net/manual/zh/language.types.string.php" class="type string">string</a></span> containing the requested element.   </p>  </div>    <div class="refsect1 changelog" id="refsect1-function.pathinfo-changelog">   <h3 class="title">更新日志</h3>   <p class="para">    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>5.2.0</td>        <td>         添加了常量 <strong><code>PATHINFO_FILENAME</code></strong>。        </td>       </tr>       </tbody>         </table>    </p>  </div>    <div class="refsect1 examples" id="refsect1-function.pathinfo-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-2826">     <p><strong>Example #1 <span class="function"><strong>pathinfo()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$path_parts&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">pathinfo</span><span style="color: #007700">(</span><span style="color: #DD0000">'/www/htdocs/inc/lib.inc.php'</span><span style="color: #007700">);<br /><br />echo&nbsp;</span><span style="color: #9876AA">$path_parts</span><span style="color: #007700">[</span><span style="color: #DD0000">'dirname'</span><span style="color: #007700">],&nbsp;</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />echo&nbsp;</span><span style="color: #9876AA">$path_parts</span><span style="color: #007700">[</span><span style="color: #DD0000">'basename'</span><span style="color: #007700">],&nbsp;</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />echo&nbsp;</span><span style="color: #9876AA">$path_parts</span><span style="color: #007700">[</span><span style="color: #DD0000">'extension'</span><span style="color: #007700">],&nbsp;</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />echo&nbsp;</span><span style="color: #9876AA">$path_parts</span><span style="color: #007700">[</span><span style="color: #DD0000">'filename'</span><span style="color: #007700">],&nbsp;</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;&nbsp;</span><span style="color: #FF8000">//&nbsp;since&nbsp;PHP&nbsp;5.2.0<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen"> <div class="cdata"><pre> /www/htdocs/inc lib.inc.php php lib.inc </pre></div>     </div>    </div>   </p>   <p class="para">    <div class="example" id="example-2827">     <p><strong>Example #2 <span class="function"><strong>pathinfo()</strong></span> example showing difference between null and no extension</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$path_parts&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">pathinfo</span><span style="color: #007700">(</span><span style="color: #DD0000">'/path/emptyextension.'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$path_parts</span><span style="color: #007700">[</span><span style="color: #DD0000">'extension'</span><span style="color: #007700">]);<br /><br /></span><span style="color: #9876AA">$path_parts&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">pathinfo</span><span style="color: #007700">(</span><span style="color: #DD0000">'/path/noextension'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$path_parts</span><span style="color: #007700">[</span><span style="color: #DD0000">'extension'</span><span style="color: #007700">]);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>      <div class="example-contents"><p>以上例程的输出类似于：</p></div>     <div class="example-contents screen"> <div class="cdata"><pre> string(0) &quot;&quot;  Notice: Undefined index: extension in test.php on line 6 NULL </pre></div>     </div>    </div>   </p>  </div>    <div class="refsect1 notes" id="refsect1-function.pathinfo-notes">   <h3 class="title">注释</h3>   <blockquote class="note"><p><strong class="note">Note</strong>:     <p class="para">     有关取得当前路径信息的说明，请阅读<a href="http://php.net/manual/zh/language.variables.predefined.php" class="link">预定义变量</a>一节。    </p>   </p></blockquote>   <blockquote class="note"><p><strong class="note">Note</strong>:     <p class="para">     <span class="function"><strong>pathinfo()</strong></span> is locale aware, so for it to parse a path      containing multibyte characters correctly, the matching locale must be set using      the <span class="function">{@link setlocale()}</span> function.    </p>   </p></blockquote>  </div>     <div class="refsect1 seealso" id="refsect1-function.pathinfo-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link dirname()} - 返回路径中的目录部分</span></li>     <li class="member"><span class="function">{@link basename()} - 返回路径中的文件名部分</span></li>     <li class="member"><span class="function">{@link parse_url()} - 解析 URL，返回其组成部分</span></li>     <li class="member"><span class="function">{@link realpath()} - 返回规范化的绝对路径名</span></li>    </ul>   </p>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.filesystem.php">文件系统函数</a></div></div>
 * @return mixed The following associative array elements are returned:*/
function pathinfo ($path, $options = null) {}

/**
*<div id="function.stripslashes" class="refentry">  <div class="refnamediv">   <h1 class="refname">stripslashes</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">stripslashes</span> &mdash; <span class="dc-title">反引用一个引用字符串</span></p>   </div>    <div class="refsect1 description" id="refsect1-function.stripslashes-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">string</span> <span class="methodname"><strong>stripslashes</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>    )</div>    <p class="para rdfs-comment">    反引用一个引用字符串。   </p>   <blockquote class="note"><p><strong class="note">Note</strong>:     <p class="para">     如果 <a href="http://php.net/manual/zh/sybase.configuration.php#ini.magic-quotes-sybase" class="link">magic_quotes_sybase</a> 项开启，反斜线将被去除，但是两个反斜线将会被替换成一个。    </p>   </p></blockquote>   <p class="para">    一个使用范例是使用 PHP 检测 <a href="http://php.net/manual/zh/info.configuration.php#ini.magic-quotes-gpc" class="link">magic_quotes_gpc</a> 配置项的 <em>开启</em>情况（在 PHP 5.4之 前默认是开启的）并且你不需要将数据插入到一个需要转义的位置（例如数据库）。例如，你只是简单地将表单数据直接输出。   </p>  </div>    <div class="refsect1 parameters" id="refsect1-function.stripslashes-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">str</code></dt>       <dd>        <p class="para">        输入字符串。       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.stripslashes-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回一个去除转义反斜线后的字符串（<em>\&#039;</em> 转换为 <em>&#039;</em> 等等）。双反斜线（<em>\\</em>）被转换为单个反斜线（<em>\</em>）。   </p>  </div>    <div class="refsect1 examples" id="refsect1-function.stripslashes-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-5962">     <p><strong>Example #1 <span class="function"><strong>stripslashes()</strong></span> 范例</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$str&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">"Is&nbsp;your&nbsp;name&nbsp;O\'reilly?"</span><span style="color: #007700">;<br /><br /></span><span style="color: #FF8000">//&nbsp;输出:&nbsp;Is&nbsp;your&nbsp;name&nbsp;O'reilly?<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #9876AA">stripslashes</span><span style="color: #007700">(</span><span style="color: #9876AA">$str</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>     </div>   </p>   <blockquote class="note"><p><strong class="note">Note</strong>:     <p class="para">     <span class="function"><strong>stripslashes()</strong></span> 是非递归的。如果你想要在多维数组中使用该函数，你需要使用递归函数。    </p>   </p></blockquote>   <p class="para">    <div class="example" id="example-5963">     <p><strong>Example #2 对数组使用 <span class="function"><strong>stripslashes()</strong></span></strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function&nbsp;</span><span style="color: #9876AA">stripslashes_deep</span><span style="color: #007700">(</span><span style="color: #9876AA">$value</span><span style="color: #007700">)<br />{<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$value&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">is_array</span><span style="color: #007700">(</span><span style="color: #9876AA">$value</span><span style="color: #007700">)&nbsp;?<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">array_map</span><span style="color: #007700">(</span><span style="color: #DD0000">'stripslashes_deep'</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$value</span><span style="color: #007700">)&nbsp;:<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">stripslashes</span><span style="color: #007700">(</span><span style="color: #9876AA">$value</span><span style="color: #007700">);<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;</span><span style="color: #9876AA">$value</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #FF8000">//&nbsp;范例<br /></span><span style="color: #9876AA">$array&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">"f\\'oo"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"b\\'ar"</span><span style="color: #007700">,&nbsp;array(</span><span style="color: #DD0000">"fo\\'o"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"b\\'ar"</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">$array&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">stripslashes_deep</span><span style="color: #007700">(</span><span style="color: #9876AA">$array</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">//&nbsp;输出<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$array</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen"> <div class="cdata"><pre> Array (     [0] =&gt; f&#039;oo     [1] =&gt; b&#039;ar     [2] =&gt; Array         (             [0] =&gt; fo&#039;o             [1] =&gt; b&#039;ar         )  ) </pre></div>     </div>    </div>   </p>  </div>    <div class="refsect1 seealso" id="refsect1-function.stripslashes-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link addslashes()} - 使用反斜线引用字符串</span></li>     <li class="member"><span class="function">{@link get_magic_quotes_gpc()} - 获取当前 magic_quotes_gpc 的配置选项设置</span></li>    </ul>   </p>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.strings.php">字符串 函数</a></div></div>
 * @return string a string with backslashes stripped off.*/
function stripslashes ($str) {}

/**
*<div id="function.stripcslashes" class="refentry">  <div class="refnamediv">   <h1 class="refname">stripcslashes</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">stripcslashes</span> &mdash; <span class="dc-title">反引用一个使用 <span class="function">{@link addcslashes()}</span> 转义的字符串</span></p>   </div>    <div class="refsect1 description" id="refsect1-function.stripcslashes-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">string</span> <span class="methodname"><strong>stripcslashes</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>    )</div>    <p class="para rdfs-comment">    返回反转义后的字符串。可识别类似 C 语言的 <em>\n</em>，<em>\r</em>，... 八进制以及十六进制的描述。   </p>  </div>    <div class="refsect1 parameters" id="refsect1-function.stripcslashes-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">str</code></dt>       <dd>        <p class="para">        需要反转义的字符串。       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.stripcslashes-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回反转义后的字符串。   </p>  </div>    <div class="refsect1 seealso" id="refsect1-function.stripcslashes-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link addcslashes()} - 以 C 语言风格使用反斜线转义字符串中的字符</span></li>    </ul>   </p>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.strings.php">字符串 函数</a></div></div>
 * @return string the unescaped string.*/
function stripcslashes ($str) {}

/**
*<div id="function.strstr" class="refentry">
<div class="refnamediv">
<h1 class="refname">strstr</h1>
<p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">strstr</span> — <span class="dc-title">查找字符串的首次出现</span></p>

</div>

<div class="refsect1 description" id="refsect1-function.strstr-description">
<h3 class="title">说明</h3>
<div class="methodsynopsis dc-description">
<span class="type">string</span> <span class="methodname"><strong>strstr</strong></span>
( <span class="methodparam"><span class="type">string</span> <code class="parameter">$haystack</code></span>
, <span class="methodparam"><span class="type"><a href="language.pseudo-types.html#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$needle</code></span>
[, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$before_needle</code><span class="initializer"> = <strong><code>FALSE</code></strong></span></span>
] )</div>

<p class="para rdfs-comment">
返回 <code class="parameter">haystack</code> 字符串从 <code class="parameter">needle</code> 第一次出现的位置开始到 <code class="parameter">haystack</code> 结尾的字符串。
</p>
<blockquote class="note"><p><strong class="note">Note</strong>:
</p><p class="para">
该函数区分大小写。如果想要不区分大小写，请使用 <span class="function"><a href="function.stristr.html" class="function">stristr()</a></span>。
</p>
<p></p></blockquote>
<blockquote class="note"><p><strong class="note">Note</strong>:
</p><p class="para">
如果你仅仅想确定 <code class="parameter">needle</code> 是否存在于 <code class="parameter">haystack</code> 中，请使用速度更快、耗费内存更少的 <span class="function"><a href="function.strpos.html" class="function">strpos()</a></span> 函数。
</p>
<p></p></blockquote>
</div>


<div class="refsect1 parameters" id="refsect1-function.strstr-parameters">
<h3 class="title">参数</h3>
<p class="para">
</p><dl>


<dt>
<code class="parameter">haystack</code></dt>

<dd>

<p class="para">
输入字符串。
</p>
</dd>



<dt>
<code class="parameter">needle</code></dt>

<dd>

<p class="para">
如果 <code class="parameter">needle</code> 不是一个字符串，那么它将被转化为整型并且作为字符的序号来使用。
</p>
</dd>



<dt>
<code class="parameter">before_needle</code></dt>

<dd>

<p class="para">
若为 <strong><code>TRUE</code></strong>，<span class="function"><strong>strstr()</strong></span> 将返回 <code class="parameter">needle</code> 在 <code class="parameter">haystack</code> 中的位置之前的部分。
</p>
</dd>


</dl>

<p></p>
</div>


<div class="refsect1 returnvalues" id="refsect1-function.strstr-returnvalues">
<h3 class="title">返回值</h3>
<p class="para">
返回字符串的一部分或者 <strong><code>FALSE</code></strong>（如果未发现 <code class="parameter">needle</code>）。
</p>
</div>


<div class="refsect1 changelog" id="refsect1-function.strstr-changelog">
<h3 class="title">更新日志</h3>
<p class="para">
</p><table class="doctable informaltable">

<thead>
<tr>
<th>版本</th>
<th>说明</th>
</tr>

</thead>

<tbody class="tbody">
<tr>
<td>5.3.0</td>
<td>
新增可选的 <code class="parameter">before_needle</code> 参数。
</td>
</tr>

<tr>
<td>4.3.0</td>
<td>
<span class="function"><strong>strstr()</strong></span> 成为二进制安全的。
</td>
</tr>

</tbody>

</table>

<p></p>
</div>


<div class="refsect1 examples" id="refsect1-function.strstr-examples">
<h3 class="title">范例</h3>
<p class="para">
</p><div class="example" id="example-5978">
<p><strong>Example #1 <span class="function"><strong>strstr()</strong></span> 范例</strong></p>
<div class="example-contents">
<div class="phpcode"><code><span style="color: #000000">
<span style="color: #0000BB">&lt;?php<br>$email&nbsp;&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'name@example.com'</span><span style="color: #007700">;<br></span><span style="color: #0000BB">$domain&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #0000BB">strstr</span><span style="color: #007700">(</span><span style="color: #0000BB">$email</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'@'</span><span style="color: #007700">);<br>echo&nbsp;</span><span style="color: #0000BB">$domain</span><span style="color: #007700">;&nbsp;</span><span style="color: #FF8000">//&nbsp;打印&nbsp;@example.com<br><br></span><span style="color: #0000BB">$user&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #0000BB">strstr</span><span style="color: #007700">(</span><span style="color: #0000BB">$email</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'@'</span><span style="color: #007700">,&nbsp;</span><span style="color: #0000BB">true</span><span style="color: #007700">);&nbsp;</span><span style="color: #FF8000">//&nbsp;从&nbsp;PHP&nbsp;5.3.0&nbsp;起<br></span><span style="color: #007700">echo&nbsp;</span><span style="color: #0000BB">$user</span><span style="color: #007700">;&nbsp;</span><span style="color: #FF8000">//&nbsp;打印&nbsp;name<br></span><span style="color: #0000BB">?&gt;</span>
</span>
</code></div>
</div>

</div>
<p></p>
</div>


<div class="refsect1 seealso" id="refsect1-function.strstr-seealso">
<h3 class="title">参见</h3>
<p class="para">
</p><ul class="simplelist">
<li class="member"><span class="function"><a href="function.preg-match.html" class="function" rel="rdfs-seeAlso">preg_match()</a> - 执行匹配正则表达式</span></li>
<li class="member"><span class="function"><a href="function.stristr.html" class="function" rel="rdfs-seeAlso">stristr()</a> - strstr 函数的忽略大小写版本</span></li>
<li class="member"><span class="function"><a href="function.strpos.html" class="function" rel="rdfs-seeAlso">strpos()</a> - 查找字符串首次出现的位置</span></li>
<li class="member"><span class="function"><a href="function.strrchr.html" class="function" rel="rdfs-seeAlso">strrchr()</a> - 查找指定字符在字符串中的最后一次出现</span></li>
<li class="member"><span class="function"><a href="function.substr.html" class="function" rel="rdfs-seeAlso">substr()</a> - 返回字符串的子串</span></li>
</ul>
<p></p>
</div>
</div>
 * @return string the portion of string, or false if needle*/
function strstr ($haystack, $needle, $before_needle = null) {}

/**
*<div id="function.stristr" class="refentry">  <div class="refnamediv">   <h1 class="refname">stristr</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">stristr</span> &mdash; <span class="dc-title"><span class="function">{@link strstr()}</span> 函数的忽略大小写版本</span></p>   </div>    <div class="refsect1 description" id="refsect1-function.stristr-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">string</span> <span class="methodname"><strong>stristr</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$haystack</code></span>    , <span class="methodparam"><span class="type"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$needle</code></span>    [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$before_needle</code><span class="initializer"> = <strong><code>FALSE</code></strong></span></span>   ] )</div>    <p class="para rdfs-comment">    返回 <code class="parameter">haystack</code> 字符串从 <code class="parameter">needle</code> 第一次出现的位置开始到结尾的字符串。   </p>  </div>    <div class="refsect1 parameters" id="refsect1-function.stristr-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">haystack</code></dt>       <dd>        <p class="para">        在该字符串中查找。       </p>      </dd>                 <dt> <code class="parameter">needle</code></dt>       <dd>        <p class="para">        如果 <code class="parameter">needle</code> 不是一个字符串，那么它将被转换为整型并被视为字符顺序值。       </p>      </dd>                 <dt> <code class="parameter">before_needle</code></dt>       <dd>        <p class="para">       若为 <strong><code>TRUE</code></strong>，<span class="function">{@link strstr()}</span> 将返回 <code class="parameter">needle</code> 在 <code class="parameter">haystack</code> 中的位置之前的部分(不包括 needle)。       </p>      </dd>          </dl>    </p>   <p class="para">    参数 <code class="parameter">needle</code> 和 <code class="parameter">haystack</code> 将以不区分大小写的方式对待。   </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.stristr-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回匹配的子字符串。如果 <code class="parameter">needle</code> 未找到，返回 <strong><code>FALSE</code></strong>。   </p>  </div>    <div class="refsect1 changelog" id="refsect1-function.stristr-changelog">   <h3 class="title">更新日志</h3>   <p class="para">    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>5.3.0</td>        <td>         新增可选的 <code class="parameter">before_needle</code> 参数。        </td>       </tr>        <tr>        <td>4.3.0</td>        <td>         <span class="function"><strong>stristr()</strong></span> 变为二进制安全的。        </td>       </tr>       </tbody>         </table>    </p>  </div>    <div class="refsect1 examples" id="refsect1-function.stristr-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-5964">     <p><strong>Example #1 <span class="function"><strong>stristr()</strong></span> 范例</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />&nbsp;&nbsp;$email&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'USER@EXAMPLE.com'</span><span style="color: #007700">;<br />&nbsp;&nbsp;echo&nbsp;</span><span style="color: #9876AA">stristr</span><span style="color: #007700">(</span><span style="color: #9876AA">$email</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'e'</span><span style="color: #007700">);&nbsp;</span><span style="color: #FF8000">//&nbsp;输出&nbsp;ER@EXAMPLE.com<br />&nbsp;&nbsp;</span><span style="color: #007700">echo&nbsp;</span><span style="color: #9876AA">stristr</span><span style="color: #007700">(</span><span style="color: #9876AA">$email</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'e'</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">true</span><span style="color: #007700">);&nbsp;</span><span style="color: #FF8000">//&nbsp;自&nbsp;PHP&nbsp;5.3.0&nbsp;起，输出&nbsp;US<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>     </div>   </p>   <p class="para">    <div class="example" id="example-5965">     <p><strong>Example #2 测试字符串的存在与否</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />&nbsp;&nbsp;$string&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'Hello&nbsp;World!'</span><span style="color: #007700">;<br />&nbsp;&nbsp;if(</span><span style="color: #9876AA">stristr</span><span style="color: #007700">(</span><span style="color: #9876AA">$string</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'earth'</span><span style="color: #007700">)&nbsp;===&nbsp;</span><span style="color: #9876AA">FALSE</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">'"earth"&nbsp;not&nbsp;found&nbsp;in&nbsp;string'</span><span style="color: #007700">;<br />&nbsp;&nbsp;}<br /></span><span style="color: #FF8000">//&nbsp;输出:&nbsp;"earth"&nbsp;not&nbsp;found&nbsp;in&nbsp;string<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>     </div>   </p>   <p class="para">    <div class="example" id="example-5966">     <p><strong>Example #3 使用非字符串 needle</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />&nbsp;&nbsp;$string&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'APPLE'</span><span style="color: #007700">;<br />&nbsp;&nbsp;echo&nbsp;</span><span style="color: #9876AA">stristr</span><span style="color: #007700">(</span><span style="color: #9876AA">$string</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">97</span><span style="color: #007700">);&nbsp;</span><span style="color: #FF8000">//&nbsp;97&nbsp;=&nbsp;小写字母&nbsp;a<br />//&nbsp;输出:&nbsp;APPLE<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>     </div>   </p>  </div>    <div class="refsect1 notes" id="refsect1-function.stristr-notes">   <h3 class="title">注释</h3>   <blockquote class="note"><p><strong class="note">Note</strong>: <span class="simpara">此函数可安全用于二进制对象。</span></p></blockquote>  </div>    <div class="refsect1 seealso" id="refsect1-function.stristr-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link strstr()} - 查找字符串的首次出现</span></li>     <li class="member"><span class="function">{@link strrchr()} - 查找指定字符在字符串中的最后一次出现</span></li>     <li class="member"><span class="function">{@link stripos()} - 查找字符串首次出现的位置（不区分大小写）</span></li>     <li class="member"><span class="function">{@link strpbrk()} - 在字符串中查找一组字符的任何一个字符</span></li>     <li class="member"><span class="function">{@link preg_match()} - 执行匹配正则表达式</span></li>    </ul>   </p>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.strings.php">字符串 函数</a></div></div>
 * @return string the matched substring. If needle is not*/
function stristr ($haystack, $needle, $before_needle = null) {}

/**
*<div id="function.strrchr" class="refentry">  <div class="refnamediv">   <h1 class="refname">strrchr</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">strrchr</span> &mdash; <span class="dc-title">查找指定字符在字符串中的最后一次出现</span></p>   </div>    <div class="refsect1 description" id="refsect1-function.strrchr-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">string</span> <span class="methodname"><strong>strrchr</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$haystack</code></span>    , <span class="methodparam"><span class="type"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$needle</code></span>    )</div>    <p class="para rdfs-comment">    该函数返回 <code class="parameter">haystack</code> 字符串中的一部分，这部分以 <code class="parameter">needle</code> 的最后出现位置开始，直到 <code class="parameter">haystack</code> 末尾。   </p>  </div>    <div class="refsect1 parameters" id="refsect1-function.strrchr-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">haystack</code></dt>       <dd>        <p class="para">        在该字符串中查找。       </p>      </dd>                 <dt> <code class="parameter">needle</code></dt>       <dd>        <p class="para">        如果 <code class="parameter">needle</code> 包含了不止一个字符，那么仅使用第一个字符。该行为不同于 <span class="function">{@link strstr()}</span>。       </p>       <p class="para">        如果 <code class="parameter">needle</code> 不是一个字符串，那么将被转化为整型并被视为字符顺序值。       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.strrchr-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    该函数返回字符串的一部分。如果 <code class="parameter">needle</code> 未被找到，返回 <strong><code>FALSE</code></strong>。   </p>  </div>    <div class="refsect1 changelog" id="refsect1-function.strrchr-changelog">   <h3 class="title">更新日志</h3>   <p class="para">    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>4.3.0</td>        <td>         该函数是二进制安全的。        </td>       </tr>       </tbody>         </table>    </p>  </div>    <div class="refsect1 examples" id="refsect1-function.strrchr-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="strcspn.example">     <p><strong>Example #1 <span class="function"><strong>strrchr()</strong></span> 范例</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">//&nbsp;获取&nbsp;$PATH&nbsp;中不含磁盘符号的目录<br /></span><span style="color: #9876AA">$dir&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">substr</span><span style="color: #007700">(</span><span style="color: #9876AA">strrchr</span><span style="color: #007700">(</span><span style="color: #9876AA">$PATH</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">":"</span><span style="color: #007700">),&nbsp;</span><span style="color: #9876AA">1</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">//&nbsp;获取最后一行内容<br /></span><span style="color: #9876AA">$text&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">"Line&nbsp;1\nLine&nbsp;2\nLine&nbsp;3"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$last&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">substr</span><span style="color: #007700">(</span><span style="color: #9876AA">strrchr</span><span style="color: #007700">(</span><span style="color: #9876AA">$text</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">10</span><span style="color: #007700">),&nbsp;</span><span style="color: #9876AA">1&nbsp;</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>     </div>      </p>  </div>    <div class="refsect1 notes" id="refsect1-function.strrchr-notes">   <h3 class="title">注释</h3>   <blockquote class="note"><p><strong class="note">Note</strong>: <span class="simpara">此函数可安全用于二进制对象。</span></p></blockquote>  </div>    <div class="refsect1 seealso" id="refsect1-function.strrchr-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link strstr()} - 查找字符串的首次出现</span></li>     <li class="member"><span class="function">{@link strrpos()} - 计算指定字符串在目标字符串中最后一次出现的位置</span></li>    </ul>   </p>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.strings.php">字符串 函数</a></div></div>
 * @return string <p>*/
function strrchr ($haystack, $needle) {}

/**
*<div id="function.str-shuffle" class="refentry">  <div class="refnamediv">   <h1 class="refname">str_shuffle</h1>   <p class="verinfo">(PHP 4 &gt;= 4.3.0, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">str_shuffle</span> &mdash; <span class="dc-title">随机打乱一个字符串</span></p>   </div>    <div class="refsect1 description" id="refsect1-function.str-shuffle-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">string</span> <span class="methodname"><strong>str_shuffle</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>    )</div>    <p class="simpara">    <span class="function"><strong>str_shuffle()</strong></span> 函数打乱一个字符串，使用任何一种可能的排序方案。   </p>    <div class="caution"><strong class="caution">Caution</strong><p class="para">本函数并不会生成安全加密的值，不应用于加密用途。若需要安全加密的值，考虑使用<span class="function">{@link openssl_random_pseudo_bytes()}</span>。</p></div>  </div>    <div class="refsect1 parameters" id="refsect1-function.str-shuffle-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">str</code></dt>       <dd>        <p class="para">        输入字符串。       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.str-shuffle-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回打乱后的字符串。   </p>  </div>    <div class="refsect1 changelog" id="refsect1-function.str-shuffle-changelog">   <h3 class="title">更新日志</h3>   <p class="para">    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>7.1.0</td>        <td>         <a href="http://php.net/manual/zh/migration71.incompatible.php#migration71.incompatible.rand-srand-aliases" class="link">内置的随机算法从 libc rand 函数改成了<a href="http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html" class="link external">&raquo;&nbsp;梅森旋转演</a>伪随机数发生算法。</a>        </td>       </tr>       </tbody>         </table>    </p>  </div>     <div class="refsect1 examples" id="refsect1-function.str-shuffle-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-5954">     <p><strong>Example #1 <span class="function"><strong>str_shuffle()</strong></span> 范例</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$str&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'abcdef'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$shuffled&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">str_shuffle</span><span style="color: #007700">(</span><span style="color: #9876AA">$str</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">//&nbsp;输出类似于:&nbsp;bfdaec<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #9876AA">$shuffled</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>     </div>   </p>  </div>    <div class="refsect1 seealso" id="refsect1-function.str-shuffle-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link shuffle()} - 打乱数组</span></li>     <li class="member"><span class="function">{@link rand()} - 产生一个随机整数</span></li>    </ul>   </p>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.strings.php">字符串 函数</a></div></div>
 * @return string the shuffled string.*/
function str_shuffle ($str) {}

/**
*<div id="function.str-word-count" class="refentry">  <div class="refnamediv">   <h1 class="refname">str_word_count</h1>   <p class="verinfo">(PHP 4 &gt;= 4.3.0, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">str_word_count</span> &mdash; <span class="dc-title">返回字符串中单词的使用情况</span></p>   </div>  <div class="refsect1 description" id="refsect1-function.str-word-count-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>str_word_count</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$string</code></span>    [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$format</code><span class="initializer"> = 0</span></span>    [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$charlist</code></span>   ]] )</div>    <p class="para rdfs-comment">    统计 <code class="parameter">string</code> 中单词的数量。如果可选的参数 <code class="parameter">format</code> 没有被指定，那么返回值是一个代表单词数量的整型数。如果指定了 <code class="parameter">format</code> 参数，返回值将是一个数组，数组的内容则取决于 <code class="parameter">format</code> 参数。<code class="parameter">format</code> 的可能值和相应的输出结果如下所列。   </p>   <p class="para">    对于这个函数的目的来说，单词的定义是一个与区域设置相关的字符串。这个字符串可以包含字母字符，也可以包含 &quot;&#039;&quot; 和 &quot;-&quot; 字符（但不能以这两个字符开始）。   </p>  </div>    <div class="refsect1 parameters" id="refsect1-function.str-word-count-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">string</code></dt>       <dd>        <p class="para">        字符串。       </p>      </dd>                 <dt> <code class="parameter">format</code></dt>       <dd>        <p class="para">        指定函数的返回值。当前支持的值如下：        <ul class="itemizedlist">         <li class="listitem">          <span class="simpara">           0 - 返回单词数量          </span>         </li>         <li class="listitem">          <span class="simpara">           1 - 返回一个包含 <code class="parameter">string</code> 中全部单词的数组          </span>         </li>         <li class="listitem">          <span class="simpara">           2 - 返回关联数组。数组的键是单词在 <code class="parameter">string</code> 中出现的数值位置，数组的值是这个单词          </span>         </li>         </ul>       </p>      </dd>                 <dt> <code class="parameter">charlist</code></dt>       <dd>        <p class="para">        附加的字符串列表，其中的字符将被视为单词的一部分。       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.str-word-count-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回一个数组或整型数，这取决于 <code class="parameter">format</code> 参数的选择。   </p>  </div>    <div class="refsect1 changelog" id="refsect1-function.str-word-count-changelog">   <h3 class="title">更新日志</h3>   <p class="para">    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>5.1.0</td>        <td>         新增 <code class="parameter">charlist</code> 参数。        </td>       </tr>       </tbody>         </table>    </p>  </div>    <div class="refsect1 examples" id="refsect1-function.str-word-count-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-5956">     <p><strong>Example #1 <span class="function"><strong>str_word_count()</strong></span> 范例</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /><br />$str&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">"Hello&nbsp;fri3nd,&nbsp;you're<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;looking&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;good&nbsp;today!"</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">str_word_count</span><span style="color: #007700">(</span><span style="color: #9876AA">$str</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">1</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">str_word_count</span><span style="color: #007700">(</span><span style="color: #9876AA">$str</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">2</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">str_word_count</span><span style="color: #007700">(</span><span style="color: #9876AA">$str</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">1</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'àáãç3'</span><span style="color: #007700">));<br /><br />echo&nbsp;</span><span style="color: #9876AA">str_word_count</span><span style="color: #007700">(</span><span style="color: #9876AA">$str</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen"> <div class="cdata"><pre> Array (     [0] =&gt; Hello     [1] =&gt; fri     [2] =&gt; nd     [3] =&gt; you&#039;re     [4] =&gt; looking     [5] =&gt; good     [6] =&gt; today )  Array (     [0] =&gt; Hello     [6] =&gt; fri     [10] =&gt; nd     [14] =&gt; you&#039;re     [29] =&gt; looking     [46] =&gt; good     [51] =&gt; today )  Array (     [0] =&gt; Hello     [1] =&gt; fri3nd     [2] =&gt; you&#039;re     [3] =&gt; looking     [4] =&gt; good     [5] =&gt; today )  7 </pre></div>     </div>    </div>   </p>  </div>    <div class="refsect1 seealso" id="refsect1-function.str-word-count-seealso">   <h3 class="title">参见</h3>    <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link explode()} - 使用一个字符串分割另一个字符串</span></li>     <li class="member"><span class="function">{@link preg_split()} - 通过一个正则表达式分隔字符串</span></li>     <li class="member"><span class="function">{@link split()} - 用正则表达式将字符串分割到数组中</span></li>     <li class="member"><span class="function">{@link count_chars()} - 返回字符串所用字符的信息</span></li>     <li class="member"><span class="function">{@link substr_count()} - 计算字串出现的次数</span></li>    </ul>   </p>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.strings.php">字符串 函数</a></div></div>
 * @return mixed an array or an integer, depending on the*/
function str_word_count ($string, $format = null, $charlist = null) {}

/**
*<div id="function.str-split" class="refentry">  <div class="refnamediv">   <h1 class="refname">str_split</h1>   <p class="verinfo">(PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">str_split</span> &mdash; <span class="dc-title">将字符串转换为数组</span></p>   </div>    <div class="refsect1 description" id="refsect1-function.str-split-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">array</span> <span class="methodname"><strong>str_split</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$string</code></span>    [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$split_length</code><span class="initializer"> = 1</span></span>   ] )</div>    <p class="para rdfs-comment">    将一个字符串转换为数组。   </p>  </div>    <div class="refsect1 parameters" id="refsect1-function.str-split-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">string</code></dt>       <dd>        <p class="para">        输入字符串。       </p>      </dd>                 <dt> <code class="parameter">split_length</code></dt>       <dd>        <p class="para">        每一段的长度。       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.str-split-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    如果指定了可选的 <code class="parameter">split_length</code> 参数，返回数组中的每个元素均为一个长度为 <code class="parameter">split_length</code> 的字符块，否则每个字符块为单个字符。   </p>   <p class="para">    如果 <code class="parameter">split_length</code> 小于 1，返回 <strong><code>FALSE</code></strong>。如果 <code class="parameter">split_length</code> 参数超过了 <code class="parameter">string</code> 超过了字符串 <code class="parameter">string</code> 的长度，整个字符串将作为数组仅有的一个元素返回。   </p>  </div>    <div class="refsect1 examples" id="refsect1-function.str-split-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-5955">     <p><strong>Example #1 <span class="function"><strong>str_split()</strong></span> 使用范例</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /><br />$str&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">"Hello&nbsp;Friend"</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">$arr1&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">str_split</span><span style="color: #007700">(</span><span style="color: #9876AA">$str</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$arr2&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">str_split</span><span style="color: #007700">(</span><span style="color: #9876AA">$str</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">3</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$arr1</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$arr2</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen"> <div class="cdata"><pre> Array (     [0] =&gt; H     [1] =&gt; e     [2] =&gt; l     [3] =&gt; l     [4] =&gt; o     [5] =&gt;     [6] =&gt; F     [7] =&gt; r     [8] =&gt; i     [9] =&gt; e     [10] =&gt; n     [11] =&gt; d )  Array (     [0] =&gt; Hel     [1] =&gt; lo     [2] =&gt; Fri     [3] =&gt; end ) </pre></div>     </div>    </div>   </p>  </div>    <div class="refsect1 notes" id="refsect1-function.str-split-notes">   <h3 class="title">注释</h3>   <blockquote class="note"><p><strong class="note">Note</strong>:     <p class="para">     在处理多字节字符时，<span class="function"><strong>str_split()</strong></span> 会按字节数转换，而非字符数。    </p>   </p></blockquote>  </div>     <div class="refsect1 seealso" id="refsect1-function.str-split-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link chunk_split()} - 将字符串分割成小块</span></li>     <li class="member"><span class="function">{@link preg_split()} - 通过一个正则表达式分隔字符串</span></li>     <li class="member"><span class="function">{@link explode()} - 使用一个字符串分割另一个字符串</span></li>     <li class="member"><span class="function">{@link count_chars()} - 返回字符串所用字符的信息</span></li>     <li class="member"><span class="function">{@link str_word_count()} - 返回字符串中单词的使用情况</span></li>     <li class="member"><a href="http://php.net/manual/zh/control-structures.for.php" class="link">for</a></li>    </ul>   </p>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.strings.php">字符串 函数</a></div></div>
 * @return array If the optional split_length parameter is*/
function str_split ($string, $split_length = 1) {}

/**
*<div id="function.strpbrk" class="refentry">  <div class="refnamediv">   <h1 class="refname">strpbrk</h1>   <p class="verinfo">(PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">strpbrk</span> &mdash; <span class="dc-title">在字符串中查找一组字符的任何一个字符</span></p>   </div>    <div class="refsect1 description" id="refsect1-function.strpbrk-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">string</span> <span class="methodname"><strong>strpbrk</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$haystack</code></span>    , <span class="methodparam"><span class="type">string</span> <code class="parameter">$char_list</code></span>    )</div>    <p class="para rdfs-comment">    <span class="function"><strong>strpbrk()</strong></span> 函数在 <code class="parameter">haystack</code> 字符串中查找 <code class="parameter">char_list</code> 中的字符。   </p>  </div>    <div class="refsect1 parameters" id="refsect1-function.strpbrk-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">haystack</code></dt>       <dd>        <p class="para">        在此字符串中查找 <code class="parameter">char_list</code>。       </p>      </dd>                 <dt> <code class="parameter">char_list</code></dt>       <dd>        <p class="para">        该参数区分大小写。       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.strpbrk-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回一个以找到的字符开始的子字符串。如果没有找到，则返回 <strong><code>FALSE</code></strong>。   </p>  </div>    <div class="refsect1 examples" id="refsect1-function.strpbrk-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-5968">     <p><strong>Example #1 <span class="function"><strong>strpbrk()</strong></span> 范例</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /><br />$text&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'This&nbsp;is&nbsp;a&nbsp;Simple&nbsp;text.'</span><span style="color: #007700">;<br /><br /></span><span style="color: #FF8000">//&nbsp;输出&nbsp;"is&nbsp;is&nbsp;a&nbsp;Simple&nbsp;text."，因为&nbsp;'i'&nbsp;先被匹配<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #9876AA">strpbrk</span><span style="color: #007700">(</span><span style="color: #9876AA">$text</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'mi'</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">//&nbsp;输出&nbsp;"Simple&nbsp;text."，因为字符区分大小写<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #9876AA">strpbrk</span><span style="color: #007700">(</span><span style="color: #9876AA">$text</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'S'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>     </div>   </p>  </div>     <div class="refsect1 seealso" id="refsect1-function.strpbrk-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link strpos()} - 查找字符串首次出现的位置</span></li>     <li class="member"><span class="function">{@link strstr()} - 查找字符串的首次出现</span></li>     <li class="member"><span class="function">{@link preg_match()} - 执行匹配正则表达式</span></li>    </ul>   </p>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.strings.php">字符串 函数</a></div></div>
 * @return string a string starting from the character found, or false if it is*/
function strpbrk ($haystack, $char_list) {}

/**
*<div id="function.substr-compare" class="refentry">  <div class="refnamediv">   <h1 class="refname">substr_compare</h1>   <p class="verinfo">(PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">substr_compare</span> &mdash; <span class="dc-title">二进制安全比较字符串（从偏移位置比较指定长度）</span></p>   </div>    <div class="refsect1 description" id="refsect1-function.substr-compare-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">int</span> <span class="methodname"><strong>substr_compare</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$main_str</code></span>    , <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>    , <span class="methodparam"><span class="type">int</span> <code class="parameter">$offset</code></span>    [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$length</code></span>    [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$case_insensitivity</code><span class="initializer"> = <strong><code>FALSE</code></strong></span></span>   ]] )</div>    <p class="para rdfs-comment">    <span class="function"><strong>substr_compare()</strong></span> 从偏移位置 <code class="parameter">offset</code> 开始比较 <code class="parameter">main_str</code> 与 <code class="parameter">str</code>，比较长度为 <code class="parameter">length</code> 个字符。   </p>  </div>    <div class="refsect1 parameters" id="refsect1-function.substr-compare-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">main_str</code></dt>       <dd>        <p class="para">        待比较的第一个字符串。       </p>      </dd>                 <dt> <code class="parameter">str</code></dt>       <dd>        <p class="para">        待比较的第二个字符串。       </p>      </dd>                 <dt> <code class="parameter">offset</code></dt>       <dd>        <p class="para">        比较开始的位置。如果为负数，则从字符串结尾处开始算起。       </p>      </dd>                 <dt> <code class="parameter">length</code></dt>       <dd>        <p class="para">        比较的长度。默认值为 <code class="parameter">str</code> 的长度与 <code class="parameter">main_str</code> 的长度减去位置偏移量 <code class="parameter">offset</code> 后二者中的较大者。       </p>      </dd>                 <dt> <code class="parameter">case_insensitivity</code></dt>       <dd>        <p class="para">        如果 <code class="parameter">case_insensitivity</code> 为 <strong><code>TRUE</code></strong>，比较将不区分大小写。       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.substr-compare-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    如果 <code class="parameter">main_str</code> 从偏移位置 <code class="parameter">offset</code> 起的子字符串小于 <code class="parameter">str</code>，则返回小于 0 的数；如果大于 <code class="parameter">str</code>，则返回大于 0 的数；如果二者相等，则返回 0。如果 <code class="parameter">offset</code> 大于等于 <code class="parameter">main_str</code> 的长度或 <code class="parameter">length</code> 被设置为小于 1 的值（ PHP 5.5.11 之前的版本），<span class="function"><strong>substr_compare()</strong></span> 将打印出一条警告信息并且返回 <strong><code>FALSE</code></strong>。   </p>  </div>    <div class="refsect1 changelog" id="refsect1-function.substr-compare-changelog">   <h3 class="title">更新日志</h3>   <p class="para">    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>5.5.11</td>        <td>         <code class="parameter">length</code> 可以是 <em>0</em>。        </td>       </tr>        <tr>        <td>5.1.0</td>        <td>         允许使用负数的 <code class="parameter">offset</code> 参数。        </td>       </tr>       </tbody>         </table>    </p>  </div>    <div class="refsect1 examples" id="refsect1-function.substr-compare-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-5986">     <p><strong>Example #1 <span class="function"><strong>substr_compare()</strong></span> 范例</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #9876AA">substr_compare</span><span style="color: #007700">(</span><span style="color: #DD0000">"abcde"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"bc"</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">1</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">2</span><span style="color: #007700">);&nbsp;</span><span style="color: #FF8000">//&nbsp;0<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #9876AA">substr_compare</span><span style="color: #007700">(</span><span style="color: #DD0000">"abcde"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"de"</span><span style="color: #007700">,&nbsp;-</span><span style="color: #9876AA">2</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">2</span><span style="color: #007700">);&nbsp;</span><span style="color: #FF8000">//&nbsp;0<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #9876AA">substr_compare</span><span style="color: #007700">(</span><span style="color: #DD0000">"abcde"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"bcg"</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">1</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">2</span><span style="color: #007700">);&nbsp;</span><span style="color: #FF8000">//&nbsp;0<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #9876AA">substr_compare</span><span style="color: #007700">(</span><span style="color: #DD0000">"abcde"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"BC"</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">1</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">2</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">true</span><span style="color: #007700">);&nbsp;</span><span style="color: #FF8000">//&nbsp;0<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #9876AA">substr_compare</span><span style="color: #007700">(</span><span style="color: #DD0000">"abcde"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"bc"</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">1</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">3</span><span style="color: #007700">);&nbsp;</span><span style="color: #FF8000">//&nbsp;1<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #9876AA">substr_compare</span><span style="color: #007700">(</span><span style="color: #DD0000">"abcde"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"cd"</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">1</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">2</span><span style="color: #007700">);&nbsp;</span><span style="color: #FF8000">//&nbsp;-1<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #9876AA">substr_compare</span><span style="color: #007700">(</span><span style="color: #DD0000">"abcde"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"abc"</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">5</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">1</span><span style="color: #007700">);&nbsp;</span><span style="color: #FF8000">//&nbsp;warning<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>     </div>   </p>  </div>    <div class="refsect1 seealso" id="refsect1-function.substr-compare-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link strncmp()} - 二进制安全比较字符串开头的若干个字符</span></li>    </ul>   </p>  </div>    <div class="up"><a href="http://php.net/manual/zh/ref.strings.php">字符串 函数</a></div></div>
 * @return int &lt; 0 if main_str from position*/
function substr_compare ($main_str, $str, $offset, $length = null, $case_insensitivity = null) {}

/**
*<div id="function.strcoll" class="refentry">  <div class="refnamediv">   <h1 class="refname">strcoll</h1>   <p class="verinfo">(PHP 4 &gt;= 4.0.5, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">strcoll</span> &mdash; <span class="dc-title">基于区域设置的字符串比较</span></p>   </div>    <div class="refsect1 description" id="refsect1-function.strcoll-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">int</span> <span class="methodname"><strong>strcoll</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str1</code></span>    , <span class="methodparam"><span class="type">string</span> <code class="parameter">$str2</code></span>    )</div>    <p class="para rdfs-comment">    注意该比较区分大小写。和 <span class="function">{@link strcmp()}</span> 不同，该函数不是二进制安全的。   </p>   <p class="para">    <span class="function"><strong>strcoll()</strong></span> 使用当前区域设置进行比较。如果当前区域为 C 或 POSIX，该函数等同于 <span class="function">{@link strcmp()}</span>。   </p>  </div>    <div class="refsect1 parameters" id="refsect1-function.strcoll-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">str1</code></dt>       <dd>        <p class="para">        第一个字符串。       </p>      </dd>                 <dt> <code class="parameter">str2</code></dt>       <dd>        <p class="para">        第二个字符串。       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.strcoll-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">      如果 <code class="parameter">str1</code> 小于    <code class="parameter">str2</code> 返回 &lt; 0；    如果 <code class="parameter">str1</code>    大于 <code class="parameter">str2</code>    返回 &gt; 0；如果两者相等，返回 0。   </p>  </div>    <div class="refsect1 changelog" id="refsect1-function.strcoll-changelog">   <h3 class="title">更新日志</h3>   <p class="para">    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>4.2.3</td>        <td>         函数在 Win32 平台可用。        </td>       </tr>       </tbody>         </table>    </p>  </div>    <div class="refsect1 seealso" id="refsect1-function.strcoll-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link preg_match()} - 执行匹配正则表达式</span></li>     <li class="member"><span class="function">{@link strcmp()} - 二进制安全字符串比较</span></li>     <li class="member"><span class="function">{@link strcasecmp()} - 二进制安全比较字符串（不区分大小写）</span></li>     <li class="member"><span class="function">{@link substr()} - 返回字符串的子串</span></li>     <li class="member"><span class="function">{@link stristr()} - strstr 函数的忽略大小写版本</span></li>     <li class="member"><span class="function">{@link strncasecmp()} - 二进制安全比较字符串开头的若干个字符（不区分大小写）</span></li>     <li class="member"><span class="function">{@link strncmp()} - 二进制安全比较字符串开头的若干个字符</span></li>     <li class="member"><span class="function">{@link strstr()} - 查找字符串的首次出现</span></li>     <li class="member"><span class="function">{@link setlocale()} - 设置地区信息</span></li>    </ul>   </p>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.strings.php">字符串 函数</a></div></div>
 * @return int &lt; 0 if str1 is less than*/
function strcoll ($str1, $str2) {}

/**
*<div id="function.money-format" class="refentry">  <div class="refnamediv">   <h1 class="refname">money_format</h1>   <p class="verinfo">(PHP 4 &gt;= 4.3.0, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">money_format</span> &mdash; <span class="dc-title">将数字格式化成货币字符串</span></p>   </div>    <div class="refsect1 description" id="refsect1-function.money-format-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">string</span> <span class="methodname"><strong>money_format</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$format</code></span>    , <span class="methodparam"><span class="type">float</span> <code class="parameter">$number</code></span>    )</div>    <p class="para rdfs-comment">    <span class="function"><strong>money_format()</strong></span> 返回格式化好的     <code class="parameter">number</code> 版本。    此函数包装了 C 函数库中的 <span class="function"><strong>strfmon()</strong></span>，不同之处是：此实现每次只能转化一个数字。   </p>  </div>    <div class="refsect1 parameters" id="refsect1-function.money-format-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">format</code></dt>       <dd>        <p class="para">        格式字符串由以下几部分组成：        <ul class="itemizedlist">         <li class="listitem"><p class="para">单个 <em>%</em> 字符</p></li>         <li class="listitem"><p class="para">可选的标记（flags）</p></li>         <li class="listitem"><p class="para">可选的字段宽度</p></li>         <li class="listitem"><p class="para">可选的，左侧精度</p></li>         <li class="listitem"><p class="para">可选的，右侧精度</p></li>         <li class="listitem"><p class="para">必选的，单个转化字符</p></li>        </ul>       </p>       <p class="formalpara">        <h5 class="title">标记(Flags)</h5>        <p class="para">         可选多个标记，分别是：         <dl>                      <dt> <em>=</em><span class="replaceable">f</span></dt>            <dd>             <p class="para">             字符：<em>=</em>，并紧跟一个字符（单字节） <span class="replaceable">f</span>，用于数字填充。默认的填充字符是空格。            </p>           </dd>                                <dt> <em>^</em></dt>            <dd>             <p class="para">             禁用分组字符（比如金额中的逗号。在本地区域设置 locale 中定义）。            </p>           </dd>                                <dt> <em>+</em> or <em>(</em></dt>            <dd>             <p class="para">             正负数字的格式。使用 <em>+</em>，将使用区域设置（locale）中相当于 <em>+</em> 和 <em>-</em> 的符号。             如果使用 <em>(</em>，负数将被圆括号围绕。不设置的话，默认为             <em>+</em>。            </p>           </dd>                                <dt> <em>!</em></dt>            <dd>             <p class="para">             不输出货币符号（比如 ¥）。            </p>           </dd>                                <dt> <em>-</em></dt>            <dd>             <p class="para">             有这个符号的时候，将使字段左对齐（填充到右边），默认是相反的，是右对齐的（填充到左边）。            </p>           </dd>                    </dl>         </p>       </p>       <p class="formalpara">        <h5 class="title">字段宽度</h5>        <p class="para">         <dl>                      <dt> <span class="replaceable">w</span></dt>            <dd>             <p class="para">             十进制数值字符串的宽度。字段将右对齐，除非使用了 <em>-</em> 标记。默认值 0。            </p>           </dd>                    </dl>         </p>       </p>       <p class="formalpara">        <h5 class="title">左侧精度</h5>        <p class="para">         <dl>                      <dt> <em>#</em><span class="replaceable">n</span></dt>            <dd>             <p class="para">             小数字符（比如小数点）前的最大位数 (<span class="replaceable">n</span>)。             常用于同一列中的格式对齐。             如果位数小于 <span class="replaceable">n</span> 则使用填充字符填满。             如果实际位数大于 <span class="replaceable">n</span>，此设置将被忽略。            </p>            <p class="para">             如果没用 <em>^</em> 标识禁用分组，分组分隔符会在添加填充字符之前插入（如果有的话）。             分组分隔符不会应用到填充字符里，哪怕填充字符是个数字。            </p>            <p class="para">             为了保证对齐，出现在之前或者之后的字符，都会填充必要的空格，保证正负情况下长度都一样。            </p>           </dd>                    </dl>         </p>       </p>       <p class="formalpara">        <h5 class="title">         右侧精度        </h5>        <p class="para">         <dl>                      <dt> <em>.</em><span class="replaceable">p</span></dt>            <dd>             <p class="para">             小数点后的一段数字             (<span class="replaceable">p</span>)。             如果 <span class="replaceable">p</span> 的值是 0（零），小数点右侧的数值将被删除。             如果不使用这个标记，默认展现取决于当前的区域设置。             小数点后指定位数的数字，四舍五入格式化。            </p>           </dd>                    </dl>         </p>       </p>       <p class="formalpara">        <h5 class="title">         转化字符        </h5>        <p class="para">         <dl>                      <dt> <em>i</em></dt>            <dd>             <p class="para">             根据国际化区域设置中的货币格式，格式化数值。（比如，locale 是 USA：USD 1,234.56）。            </p>           </dd>                                <dt> <em>n</em></dt>            <dd>             <p class="para">             根据国际化区域设置中国家的货币格式，格式化数值。（比如，locale 是 de_DE：EU1.234,56）。            </p>           </dd>                                <dt> <em>%</em></dt>            <dd>             <p class="para">             返回字符 <em>%</em>。            </p>           </dd>                    </dl>         </p>       </p>      </dd>                 <dt> <code class="parameter">number</code></dt>       <dd>        <p class="para">        需要格式化的数字。       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.money-format-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回格式化后的字符。格式字符串前后的字符将原封不动返回。    传入的 <code class="parameter">number</code> 如果不是数字，将返回  <strong><code>NULL</code></strong> 并且产生     <strong><code>E_WARNING</code></strong>。   </p>  </div>    <div class="refsect1 notes" id="refsect1-function.money-format-notes">   <h3 class="title">注释</h3>   <blockquote class="note"><p><strong class="note">Note</strong>:     <p class="para">     具有 strfmon 的系统才有 <span class="function"><strong>money_format()</strong></span> 函数。     例如 Windows 不具备，所以 Windows 系统上 <span class="function"><strong>money_format()</strong></span> 未定义。    </p>   </p></blockquote>   <blockquote class="note"><p><strong class="note">Note</strong>:     <p class="para">     locale 设置中， <strong><code>LC_MONETARY</code></strong> 会影响此函数的行为。 在使用函数前，首先要用  <span class="function">{@link setlocale()}</span> 来设置合适的区域设置（locale）。    </p>   </p></blockquote>     </div>    <div class="refsect1 examples" id="refsect1-function.money-format-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-5919">     <p><strong>Example #1 <span class="function"><strong>money_format()</strong></span> 例子</strong></p>     <div class="example-contents"><p>      使用不同的 locale 和格式字符串，来说明此函数的用法。     </p></div>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /><br />$number&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">1234.56</span><span style="color: #007700">;<br /><br /></span><span style="color: #FF8000">//&nbsp;让我们打印&nbsp;en_US&nbsp;locale&nbsp;的国际化格式<br /></span><span style="color: #9876AA">setlocale</span><span style="color: #007700">(</span><span style="color: #9876AA">LC_MONETARY</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'en_US'</span><span style="color: #007700">);<br />echo&nbsp;</span><span style="color: #9876AA">money_format</span><span style="color: #007700">(</span><span style="color: #DD0000">'%i'</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$number</span><span style="color: #007700">)&nbsp;.&nbsp;</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /></span><span style="color: #FF8000">//&nbsp;USD&nbsp;1,234.56<br /><br />//&nbsp;意大利国家的格式，带两位浮点小数`<br /></span><span style="color: #9876AA">setlocale</span><span style="color: #007700">(</span><span style="color: #9876AA">LC_MONETARY</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'it_IT'</span><span style="color: #007700">);<br />echo&nbsp;</span><span style="color: #9876AA">money_format</span><span style="color: #007700">(</span><span style="color: #DD0000">'%.2n'</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$number</span><span style="color: #007700">)&nbsp;.&nbsp;</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /></span><span style="color: #FF8000">//&nbsp;Eu&nbsp;1.234,56<br /><br />//&nbsp;负数的使用<br /></span><span style="color: #9876AA">$number&nbsp;</span><span style="color: #007700">=&nbsp;-</span><span style="color: #9876AA">1234.5672</span><span style="color: #007700">;<br /><br /></span><span style="color: #FF8000">//&nbsp;美国国家的格式，使用圆括号&nbsp;()&nbsp;标记负数。<br />//&nbsp;左侧精度使用十位<br /></span><span style="color: #9876AA">setlocale</span><span style="color: #007700">(</span><span style="color: #9876AA">LC_MONETARY</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'en_US'</span><span style="color: #007700">);<br />echo&nbsp;</span><span style="color: #9876AA">money_format</span><span style="color: #007700">(</span><span style="color: #DD0000">'%(#10n'</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$number</span><span style="color: #007700">)&nbsp;.&nbsp;</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /></span><span style="color: #FF8000">//&nbsp;($&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1,234.57)<br /><br />//&nbsp;相似的格式，添加了右侧两位小数点的精度，同时用&nbsp;*&nbsp;来填充<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #9876AA">money_format</span><span style="color: #007700">(</span><span style="color: #DD0000">'%=*(#10.2n'</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$number</span><span style="color: #007700">)&nbsp;.&nbsp;</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /></span><span style="color: #FF8000">//&nbsp;($********1,234.57)<br /><br />//&nbsp;让我们左对齐，14位宽，左侧八位，右侧两位，不带分组字符<br />//&nbsp;de_DE&nbsp;的国际化格式<br /></span><span style="color: #9876AA">setlocale</span><span style="color: #007700">(</span><span style="color: #9876AA">LC_MONETARY</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'de_DE'</span><span style="color: #007700">);<br />echo&nbsp;</span><span style="color: #9876AA">money_format</span><span style="color: #007700">(</span><span style="color: #DD0000">'%=*^-14#8.2i'</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">1234.56</span><span style="color: #007700">)&nbsp;.&nbsp;</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /></span><span style="color: #FF8000">//&nbsp;Eu&nbsp;1234,56****<br /><br />//&nbsp;让我们在格式字符串前后，添加一些简介<br /></span><span style="color: #9876AA">setlocale</span><span style="color: #007700">(</span><span style="color: #9876AA">LC_MONETARY</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'en_GB'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$fmt&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'The&nbsp;final&nbsp;value&nbsp;is&nbsp;%i&nbsp;(after&nbsp;a&nbsp;10%%&nbsp;discount)'</span><span style="color: #007700">;<br />echo&nbsp;</span><span style="color: #9876AA">money_format</span><span style="color: #007700">(</span><span style="color: #9876AA">$fmt</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">1234.56</span><span style="color: #007700">)&nbsp;.&nbsp;</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /></span><span style="color: #FF8000">//&nbsp;The&nbsp;final&nbsp;value&nbsp;is&nbsp;&nbsp;GBP&nbsp;1,234.56&nbsp;(after&nbsp;a&nbsp;10%&nbsp;discount)<br /><br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>     </div>   </p>  </div>    <div class="refsect1 seealso" id="refsect1-function.money-format-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link setlocale()} - 设置地区信息</span></li>     <li class="member"><span class="function">{@link sscanf()} - 根据指定格式解析输入的字符</span></li>     <li class="member"><span class="function">{@link sprintf()} - Return a formatted string</span></li>     <li class="member"><span class="function">{@link printf()} - 输出格式化字符串</span></li>     <li class="member"><span class="function">{@link number_format()} - 以千位分隔符方式格式化一个数字</span></li>    </ul>   </p>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.strings.php">字符串 函数</a></div></div>
 * @return string the formatted string. Characters before and after the formatting*/
function money_format ($format, $number) {}

/**
*<div id="function.substr" class="refentry">  <div class="refnamediv">   <h1 class="refname">substr</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">substr</span> &mdash; <span class="dc-title">返回字符串的子串</span></p>   </div>    <div class="refsect1 description" id="refsect1-function.substr-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">string</span> <span class="methodname"><strong>substr</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$string</code></span>    , <span class="methodparam"><span class="type">int</span> <code class="parameter">$start</code></span>    [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$length</code></span>   ] )</div>    <p class="para rdfs-comment">    返回字符串 <code class="parameter">string</code> 由 <code class="parameter">start</code> 和 <code class="parameter">length</code> 参数指定的子字符串。   </p>  </div>    <div class="refsect1 parameters" id="refsect1-function.substr-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">string</code></dt>       <dd>        <p class="para">        输入字符串。必须至少有一个字符。       </p>      </dd>                 <dt> <code class="parameter">start</code></dt>       <dd>        <p class="para">        如果 <code class="parameter">start</code> 是非负数，返回的字符串将从 <code class="parameter">string</code> 的 <code class="parameter">start</code> 位置开始，从 0 开始计算。例如，在字符串 “<em>abcdef</em>” 中，在位置 <em>0</em> 的字符是 “<em>a</em>”，位置 <em>2</em> 的字符串是 “<em>c</em>” 等等。       </p>       <p class="para">        如果 <code class="parameter">start</code> 是负数，返回的字符串将从 <code class="parameter">string</code> 结尾处向前数第 <code class="parameter">start</code> 个字符开始。       </p>       <p class="para">        如果 <code class="parameter">string</code> 的长度小于 <code class="parameter">start</code>，将返回 <strong><code>FALSE</code></strong>。       </p>       <p class="para">        <div class="example" id="example-5990">         <p><strong>Example #1 使用负数 <code class="parameter">start</code></strong></p>         <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$rest&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">substr</span><span style="color: #007700">(</span><span style="color: #DD0000">"abcdef"</span><span style="color: #007700">,&nbsp;-</span><span style="color: #9876AA">1</span><span style="color: #007700">);&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;返回&nbsp;"f"<br /></span><span style="color: #9876AA">$rest&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">substr</span><span style="color: #007700">(</span><span style="color: #DD0000">"abcdef"</span><span style="color: #007700">,&nbsp;-</span><span style="color: #9876AA">2</span><span style="color: #007700">);&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;返回&nbsp;"ef"<br /></span><span style="color: #9876AA">$rest&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">substr</span><span style="color: #007700">(</span><span style="color: #DD0000">"abcdef"</span><span style="color: #007700">,&nbsp;-</span><span style="color: #9876AA">3</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">1</span><span style="color: #007700">);&nbsp;</span><span style="color: #FF8000">//&nbsp;返回&nbsp;"d"<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>         </div>         </div>       </p>      </dd>                 <dt> <code class="parameter">length</code></dt>       <dd>        <p class="para">        如果提供了正数的 <code class="parameter">length</code>，返回的字符串将从 <code class="parameter">start</code> 处开始最多包括 <code class="parameter">length</code> 个字符（取决于 <code class="parameter">string</code> 的长度）。       </p>       <p class="para">        如果提供了负数的 <code class="parameter">length</code>，那么 <code class="parameter">string</code> 末尾处的 <code class="parameter">length</code> 个字符将会被省略（若 <code class="parameter">start</code> 是负数则从字符串尾部算起）。如果 <code class="parameter">start</code> 不在这段文本中，那么将返回 <strong><code>FALSE</code></strong>。       </p>       <p class="para">        如果提供了值为 <em>0</em>，<strong><code>FALSE</code></strong> 或 <strong><code>NULL</code></strong> 的 <code class="parameter">length</code>，那么将返回一个空字符串。       </p>       <p class="para">        如果没有提供 <code class="parameter">length</code>，返回的子字符串将从 <code class="parameter">start</code> 位置开始直到字符串结尾。       </p>       <div class="example" id="example-5991">        <p><strong>Example #2 使用负数 <code class="parameter">length</code></strong></p>        <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$rest&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">substr</span><span style="color: #007700">(</span><span style="color: #DD0000">"abcdef"</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">0</span><span style="color: #007700">,&nbsp;-</span><span style="color: #9876AA">1</span><span style="color: #007700">);&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;返回&nbsp;"abcde"<br /></span><span style="color: #9876AA">$rest&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">substr</span><span style="color: #007700">(</span><span style="color: #DD0000">"abcdef"</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">2</span><span style="color: #007700">,&nbsp;-</span><span style="color: #9876AA">1</span><span style="color: #007700">);&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;返回&nbsp;"cde"<br /></span><span style="color: #9876AA">$rest&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">substr</span><span style="color: #007700">(</span><span style="color: #DD0000">"abcdef"</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">4</span><span style="color: #007700">,&nbsp;-</span><span style="color: #9876AA">4</span><span style="color: #007700">);&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;返回&nbsp;""<br /></span><span style="color: #9876AA">$rest&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">substr</span><span style="color: #007700">(</span><span style="color: #DD0000">"abcdef"</span><span style="color: #007700">,&nbsp;-</span><span style="color: #9876AA">3</span><span style="color: #007700">,&nbsp;-</span><span style="color: #9876AA">1</span><span style="color: #007700">);&nbsp;</span><span style="color: #FF8000">//&nbsp;返回&nbsp;"de"<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>        </div>        </div>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.substr-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回提取的子字符串， 或者在失败时返回 <strong><code>FALSE</code></strong>。   </p>  </div>    <div class="refsect1 changelog" id="refsect1-function.substr-changelog">   <h3 class="title">更新日志</h3>   <p class="para">    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>7.0.0</td>        <td>         如果 <code class="parameter">string</code> 的字符串长度与         <code class="parameter">start</code> 相同时将返回一个空字符串。在之前的版本中，这种情况将返回  <strong><code>FALSE</code></strong> 。        </td>       </tr>        <tr>        <td>5.2.2 - 5.2.6</td>        <td>         If the <code class="parameter">start</code> parameter indicates the position of         a negative truncation or beyond, false is returned. Other versions get         the string from start.        </td>       </tr>       </tbody>         </table>    </p>  </div>    <div class="refsect1 examples" id="refsect1-function.substr-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-5992">     <p><strong>Example #3 <span class="function"><strong>substr()</strong></span> 基本用法</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #9876AA">substr</span><span style="color: #007700">(</span><span style="color: #DD0000">'abcdef'</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">1</span><span style="color: #007700">);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;bcdef<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #9876AA">substr</span><span style="color: #007700">(</span><span style="color: #DD0000">'abcdef'</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">1</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">3</span><span style="color: #007700">);&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;bcd<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #9876AA">substr</span><span style="color: #007700">(</span><span style="color: #DD0000">'abcdef'</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">0</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">4</span><span style="color: #007700">);&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;abcd<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #9876AA">substr</span><span style="color: #007700">(</span><span style="color: #DD0000">'abcdef'</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">0</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">8</span><span style="color: #007700">);&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;abcdef<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #9876AA">substr</span><span style="color: #007700">(</span><span style="color: #DD0000">'abcdef'</span><span style="color: #007700">,&nbsp;-</span><span style="color: #9876AA">1</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">1</span><span style="color: #007700">);&nbsp;</span><span style="color: #FF8000">//&nbsp;f<br /><br />//&nbsp;访问字符串中的单个字符<br />//&nbsp;也可以使用中括号<br /></span><span style="color: #9876AA">$string&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'abcdef'</span><span style="color: #007700">;<br />echo&nbsp;</span><span style="color: #9876AA">$string</span><span style="color: #007700">[</span><span style="color: #9876AA">0</span><span style="color: #007700">];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;a<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #9876AA">$string</span><span style="color: #007700">[</span><span style="color: #9876AA">3</span><span style="color: #007700">];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;d<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #9876AA">$string</span><span style="color: #007700">[</span><span style="color: #9876AA">strlen</span><span style="color: #007700">(</span><span style="color: #9876AA">$string</span><span style="color: #007700">)-</span><span style="color: #9876AA">1</span><span style="color: #007700">];&nbsp;</span><span style="color: #FF8000">//&nbsp;f<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>     </div>       <div class="example" id="example-5993">     <p><strong>Example #4 <span class="function"><strong>substr()</strong></span> casting behaviour</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">class&nbsp;</span><span style="color: #9876AA">apple&nbsp;</span><span style="color: #007700">{<br />&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;function&nbsp;</span><span style="color: #9876AA">__toString</span><span style="color: #007700">()&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;</span><span style="color: #DD0000">"green"</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;}<br />}<br /><br />echo&nbsp;</span><span style="color: #DD0000">"1)&nbsp;"</span><span style="color: #007700">.</span><span style="color: #9876AA">var_export</span><span style="color: #007700">(</span><span style="color: #9876AA">substr</span><span style="color: #007700">(</span><span style="color: #DD0000">"pear"</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">0</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">2</span><span style="color: #007700">),&nbsp;</span><span style="color: #9876AA">true</span><span style="color: #007700">).</span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />echo&nbsp;</span><span style="color: #DD0000">"2)&nbsp;"</span><span style="color: #007700">.</span><span style="color: #9876AA">var_export</span><span style="color: #007700">(</span><span style="color: #9876AA">substr</span><span style="color: #007700">(</span><span style="color: #9876AA">54321</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">0</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">2</span><span style="color: #007700">),&nbsp;</span><span style="color: #9876AA">true</span><span style="color: #007700">).</span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />echo&nbsp;</span><span style="color: #DD0000">"3)&nbsp;"</span><span style="color: #007700">.</span><span style="color: #9876AA">var_export</span><span style="color: #007700">(</span><span style="color: #9876AA">substr</span><span style="color: #007700">(new&nbsp;</span><span style="color: #9876AA">apple</span><span style="color: #007700">(),&nbsp;</span><span style="color: #9876AA">0</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">2</span><span style="color: #007700">),&nbsp;</span><span style="color: #9876AA">true</span><span style="color: #007700">).</span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />echo&nbsp;</span><span style="color: #DD0000">"4)&nbsp;"</span><span style="color: #007700">.</span><span style="color: #9876AA">var_export</span><span style="color: #007700">(</span><span style="color: #9876AA">substr</span><span style="color: #007700">(</span><span style="color: #9876AA">true</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">0</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">1</span><span style="color: #007700">),&nbsp;</span><span style="color: #9876AA">true</span><span style="color: #007700">).</span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />echo&nbsp;</span><span style="color: #DD0000">"5)&nbsp;"</span><span style="color: #007700">.</span><span style="color: #9876AA">var_export</span><span style="color: #007700">(</span><span style="color: #9876AA">substr</span><span style="color: #007700">(</span><span style="color: #9876AA">false</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">0</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">1</span><span style="color: #007700">),&nbsp;</span><span style="color: #9876AA">true</span><span style="color: #007700">).</span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />echo&nbsp;</span><span style="color: #DD0000">"6)&nbsp;"</span><span style="color: #007700">.</span><span style="color: #9876AA">var_export</span><span style="color: #007700">(</span><span style="color: #9876AA">substr</span><span style="color: #007700">(</span><span style="color: #DD0000">""</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">0</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">1</span><span style="color: #007700">),&nbsp;</span><span style="color: #9876AA">true</span><span style="color: #007700">).</span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />echo&nbsp;</span><span style="color: #DD0000">"7)&nbsp;"</span><span style="color: #007700">.</span><span style="color: #9876AA">var_export</span><span style="color: #007700">(</span><span style="color: #9876AA">substr</span><span style="color: #007700">(</span><span style="color: #9876AA">1.2e3</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">0</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">4</span><span style="color: #007700">),&nbsp;</span><span style="color: #9876AA">true</span><span style="color: #007700">).</span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>      <div class="example-contents"><p>Output of the above example in PHP 7:</p></div>     <div class="example-contents screen"> <div class="cdata"><pre> 1) &#039;pe&#039; 2) &#039;54&#039; 3) &#039;gr&#039; 4) &#039;1&#039; 5) false 6) false 7) &#039;1200&#039; </pre></div>     </div>     <div class="example-contents"><p>Output of the above example in PHP 5:</p></div>     <div class="example-contents screen"> <div class="cdata"><pre> 1) &#039;pe&#039; 2) &#039;54&#039; 3) &#039;gr&#039; 4) &#039;1&#039; 5) false 6) false 7) &#039;1200&#039; </pre></div>     </div>    </div>   </p>  </div>    <div class="refsect1 errors" id="refsect1-function.substr-errors">   <h3 class="title">错误／异常</h3>   <p class="para">    错误时返回 <strong><code>FALSE</code></strong>。    <div class="example" id="example-5994">     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">substr</span><span style="color: #007700">(</span><span style="color: #DD0000">'a'</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">2</span><span style="color: #007700">));&nbsp;</span><span style="color: #FF8000">//&nbsp;bool(false)<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>     </div>      </p>  </div>    <div class="refsect1 seealso" id="refsect1-function.substr-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link strrchr()} - 查找指定字符在字符串中的最后一次出现</span></li>     <li class="member"><span class="function">{@link substr_replace()} - 替换字符串的子串</span></li>     <li class="member"><span class="function">{@link preg_match()} - 执行匹配正则表达式</span></li>     <li class="member"><span class="function">{@link trim()} - 去除字符串首尾处的空白字符（或者其他字符）</span></li>     <li class="member"><span class="function">{@link mb_substr()} - 获取部分字符串</span></li>     <li class="member"><span class="function">{@link wordwrap()} - 打断字符串为指定数量的字串</span></li>     <li class="member"><a href="http://php.net/manual/zh/language.types.string.php#language.types.string.substr" class="link">字符串访问和修改</a></li>    </ul>   </p>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.strings.php">字符串 函数</a></div></div>
 * @return string|bool the extracted part of string or false on failure.*/
function substr ($string, $start, $length = null) {}

/**
*<div id="function.substr-replace" class="refentry">  <div class="refnamediv">   <h1 class="refname">substr_replace</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">substr_replace</span> &mdash; <span class="dc-title">替换字符串的子串</span></p>   </div>    <div class="refsect1 description" id="refsect1-function.substr-replace-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>substr_replace</strong></span>     ( <span class="methodparam"><span class="type"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$string</code></span>    , <span class="methodparam"><span class="type"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$replacement</code></span>    , <span class="methodparam"><span class="type"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$start</code></span>    [, <span class="methodparam"><span class="type"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$length</code></span>   ] )</div>    <p class="para rdfs-comment">    <span class="function"><strong>substr_replace()</strong></span> 在字符串 <code class="parameter">string</code> 的副本中将由 <code class="parameter">start</code> 和可选的 <code class="parameter">length</code> 参数限定的子字符串使用 <code class="parameter">replacement</code> 进行替换。   </p>  </div>    <div class="refsect1 parameters" id="refsect1-function.substr-replace-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">string</code></dt>       <dd>        <p class="para">        输入字符串。       </p>       <p class="para">        An <span class="type"><a href="http://php.net/manual/zh/language.types.array.php" class="type array">array</a></span> of <span class="type"><a href="http://php.net/manual/zh/language.types.string.php" class="type string">string</a></span>s can be provided, in which        case the replacements will occur on each string in turn. In this case,        the <code class="parameter">replacement</code>, <code class="parameter">start</code>        and <code class="parameter">length</code> parameters may be provided either as        scalar values to be applied to each input string in turn, or as        <span class="type"><a href="http://php.net/manual/zh/language.types.array.php" class="type array">array</a></span>s, in which case the corresponding array element will        be used for each input string.       </p>      </dd>                 <dt> <code class="parameter">replacement</code></dt>       <dd>        <p class="para">        替换字符串。       </p>      </dd>                 <dt> <code class="parameter">start</code></dt>       <dd>        <p class="para">        如果 <code class="parameter">start</code> 为正数，替换将从 <code class="parameter">string</code> 的 <code class="parameter">start</code> 位置开始。       </p>       <p class="para">        如果 <code class="parameter">start</code> 为负数，替换将从 <code class="parameter">string</code> 的倒数第 <code class="parameter">start</code> 个位置开始。       </p>      </dd>                 <dt> <code class="parameter">length</code></dt>       <dd>        <p class="para">        如果设定了这个参数并且为正数，表示 <code class="parameter">string</code> 中被替换的子字符串的长度。如果设定为负数，它表示待替换的子字符串结尾处距离 <code class="parameter">string</code> 末端的字符个数。如果没有提供此参数，那么它默认为 strlen( <code class="parameter">string</code> ) （字符串的长度）。当然，如果 <code class="parameter">length</code> 为 0，那么这个函数的功能为将 <code class="parameter">replacement</code> 插入到 <code class="parameter">string</code> 的 <code class="parameter">start</code> 位置处。       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.substr-replace-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回结果字符串。如果 <code class="parameter">string</code> 是个数组，那么也将返回一个数组。   </p>  </div>    <div class="refsect1 changelog" id="refsect1-function.substr-replace-changelog">   <h3 class="title">更新日志</h3>   <p class="para">    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>4.3.3</td>        <td>         All parameters now accept <span class="type"><a href="http://php.net/manual/zh/language.types.array.php" class="type array">array</a></span>s.        </td>       </tr>       </tbody>         </table>    </p>  </div>    <div class="refsect1 examples" id="refsect1-function.substr-replace-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-5988">     <p><strong>Example #1 <span class="function"><strong>substr_replace()</strong></span> 范例</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$var&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'ABCDEFGH:/MNRPQR/'</span><span style="color: #007700">;<br />echo&nbsp;</span><span style="color: #DD0000">"Original:&nbsp;</span><span style="color: #9876AA">$var</span><span style="color: #DD0000">&lt;hr&nbsp;/&gt;\n"</span><span style="color: #007700">;<br /><br /></span><span style="color: #FF8000">//&nbsp;这两个例子使用&nbsp;“bob”&nbsp;替换整个&nbsp;$var。<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #9876AA">substr_replace</span><span style="color: #007700">(</span><span style="color: #9876AA">$var</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'bob'</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">0</span><span style="color: #007700">)&nbsp;.&nbsp;</span><span style="color: #DD0000">"&lt;br&nbsp;/&gt;\n"</span><span style="color: #007700">;<br />echo&nbsp;</span><span style="color: #9876AA">substr_replace</span><span style="color: #007700">(</span><span style="color: #9876AA">$var</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'bob'</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">0</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">strlen</span><span style="color: #007700">(</span><span style="color: #9876AA">$var</span><span style="color: #007700">))&nbsp;.&nbsp;</span><span style="color: #DD0000">"&lt;br&nbsp;/&gt;\n"</span><span style="color: #007700">;<br /><br /></span><span style="color: #FF8000">//&nbsp;将&nbsp;“bob”&nbsp;插入到&nbsp;$var&nbsp;的开头处。<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #9876AA">substr_replace</span><span style="color: #007700">(</span><span style="color: #9876AA">$var</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'bob'</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">0</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">0</span><span style="color: #007700">)&nbsp;.&nbsp;</span><span style="color: #DD0000">"&lt;br&nbsp;/&gt;\n"</span><span style="color: #007700">;<br /><br /></span><span style="color: #FF8000">//&nbsp;下面两个例子使用&nbsp;“bob”&nbsp;替换&nbsp;$var&nbsp;中的&nbsp;“MNRPQR”。<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #9876AA">substr_replace</span><span style="color: #007700">(</span><span style="color: #9876AA">$var</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'bob'</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">10</span><span style="color: #007700">,&nbsp;-</span><span style="color: #9876AA">1</span><span style="color: #007700">)&nbsp;.&nbsp;</span><span style="color: #DD0000">"&lt;br&nbsp;/&gt;\n"</span><span style="color: #007700">;<br />echo&nbsp;</span><span style="color: #9876AA">substr_replace</span><span style="color: #007700">(</span><span style="color: #9876AA">$var</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'bob'</span><span style="color: #007700">,&nbsp;-</span><span style="color: #9876AA">7</span><span style="color: #007700">,&nbsp;-</span><span style="color: #9876AA">1</span><span style="color: #007700">)&nbsp;.&nbsp;</span><span style="color: #DD0000">"&lt;br&nbsp;/&gt;\n"</span><span style="color: #007700">;<br /><br /></span><span style="color: #FF8000">//&nbsp;从&nbsp;$var&nbsp;中删除&nbsp;“MNRPQR”。<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #9876AA">substr_replace</span><span style="color: #007700">(</span><span style="color: #9876AA">$var</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">''</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">10</span><span style="color: #007700">,&nbsp;-</span><span style="color: #9876AA">1</span><span style="color: #007700">)&nbsp;.&nbsp;</span><span style="color: #DD0000">"&lt;br&nbsp;/&gt;\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>    </div>   </p>   <p class="para">    <div class="example" id="example-5989">     <p><strong>Example #2       Using <span class="function"><strong>substr_replace()</strong></span> to replace multiple strings at      once     </strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$input&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">'A:&nbsp;XXX'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'B:&nbsp;XXX'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'C:&nbsp;XXX'</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">//&nbsp;A&nbsp;simple&nbsp;case:&nbsp;replace&nbsp;XXX&nbsp;in&nbsp;each&nbsp;string&nbsp;with&nbsp;YYY.<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #9876AA">implode</span><span style="color: #007700">(</span><span style="color: #DD0000">';&nbsp;'</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">substr_replace</span><span style="color: #007700">(</span><span style="color: #9876AA">$input</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'YYY'</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">3</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">3</span><span style="color: #007700">)).</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /><br /></span><span style="color: #FF8000">//&nbsp;A&nbsp;more&nbsp;complicated&nbsp;case&nbsp;where&nbsp;each&nbsp;replacement&nbsp;is&nbsp;different.<br /></span><span style="color: #9876AA">$replace&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">'AAA'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'BBB'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'CCC'</span><span style="color: #007700">);<br />echo&nbsp;</span><span style="color: #9876AA">implode</span><span style="color: #007700">(</span><span style="color: #DD0000">';&nbsp;'</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">substr_replace</span><span style="color: #007700">(</span><span style="color: #9876AA">$input</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$replace</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">3</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">3</span><span style="color: #007700">)).</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /><br /></span><span style="color: #FF8000">//&nbsp;Replace&nbsp;a&nbsp;different&nbsp;number&nbsp;of&nbsp;characters&nbsp;each&nbsp;time.<br /></span><span style="color: #9876AA">$length&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #9876AA">1</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">2</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">3</span><span style="color: #007700">);<br />echo&nbsp;</span><span style="color: #9876AA">implode</span><span style="color: #007700">(</span><span style="color: #DD0000">';&nbsp;'</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">substr_replace</span><span style="color: #007700">(</span><span style="color: #9876AA">$input</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$replace</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">3</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$length</span><span style="color: #007700">)).</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen"> <div class="cdata"><pre> A: YYY; B: YYY; C: YYY A: AAA; B: BBB; C: CCC A: AAAXX; B: BBBX; C: CCC </pre></div>     </div>    </div>   </p>  </div>    <div class="refsect1 notes" id="refsect1-function.substr-replace-notes">   <h3 class="title">注释</h3>   <blockquote class="note"><p><strong class="note">Note</strong>: <span class="simpara">此函数可安全用于二进制对象。</span></p></blockquote>  </div>    <div class="refsect1 seealso" id="refsect1-function.substr-replace-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link str_replace()} - 子字符串替换</span></li>     <li class="member"><span class="function">{@link substr()} - 返回字符串的子串</span></li>     <li class="member"><a href="http://php.net/manual/zh/language.types.string.php#language.types.string.substr" class="link">字符串访问与修改</a></li>    </ul>   </p>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.strings.php">字符串 函数</a></div></div>
 * @return mixed The result string is returned. If string is an*/
function substr_replace ($string, $replacement, $start, $length = null) {}

/**
*<div id="function.quotemeta" class="refentry">  <div class="refnamediv">   <h1 class="refname">quotemeta</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">quotemeta</span> &mdash; <span class="dc-title">转义元字符集</span></p>   </div>    <div class="refsect1 description" id="refsect1-function.quotemeta-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">string</span> <span class="methodname"><strong>quotemeta</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>    )</div>    <p class="para rdfs-comment">    返回 在下面这些特殊字符前加 反斜线(<em>\</em>) 转义后的字符串。    这些特殊字符包含：    <div class="example-contents screen">. \ + * ? [ ^ ] ( $ )</div>   </p>  </div>    <div class="refsect1 parameters" id="refsect1-function.quotemeta-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">str</code></dt>       <dd>        <p class="para">        输入字符串       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.quotemeta-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回 元字符集被转义后的 字符串，如果输入字符串<code class="parameter">str</code>为空，    则返回 <strong><code>FALSE</code></strong>。   </p>  </div>    <div class="refsect1 notes" id="refsect1-function.quotemeta-notes">   <h3 class="title">注释</h3>   <blockquote class="note"><p><strong class="note">Note</strong>: <span class="simpara">此函数可安全用于二进制对象。</span></p></blockquote>  </div>    <div class="refsect1 seealso" id="refsect1-function.quotemeta-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link addslashes()} - 使用反斜线引用字符串</span></li>     <li class="member"><span class="function">{@link addcslashes()} - 以 C 语言风格使用反斜线转义字符串中的字符</span></li>     <li class="member"><span class="function">{@link htmlentities()} - 将字符转换为 HTML 转义字符</span></li>     <li class="member"><span class="function">{@link htmlspecialchars()} - 将特殊字符转换为 HTML 实体</span></li>     <li class="member"><span class="function">{@link nl2br()} - 在字符串所有新行之前插入 HTML 换行标记</span></li>     <li class="member"><span class="function">{@link stripslashes()} - 反引用一个引用字符串</span></li>     <li class="member"><span class="function">{@link stripcslashes()} - 反引用一个使用 addcslashes 转义的字符串</span></li>     <li class="member"><span class="function">{@link ereg()} - 正则表达式匹配</span></li>     <li class="member"><span class="function">{@link preg_quote()} - 转义正则表达式字符</span></li>    </ul>   </p>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.strings.php">字符串 函数</a></div></div>
 * @return string the string with meta characters quoted.*/
function quotemeta ($str) {}

/**
*<div id="function.ucfirst" class="refentry">  <div class="refnamediv">   <h1 class="refname">ucfirst</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">ucfirst</span> &mdash; <span class="dc-title">将字符串的首字母转换为大写</span></p>   </div>    <div class="refsect1 description" id="refsect1-function.ucfirst-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">string</span> <span class="methodname"><strong>ucfirst</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>    )</div>    <p class="para rdfs-comment">    将 <code class="parameter">str</code> 的首字符（如果首字符是字母）转换为大写字母，并返回这个字符串。   </p>   <p class="para">    注意字母的定义取决于当前区域设定。例如，在默认的 “C” 区域，字符 umlaut-a（ä）将不会被转换。   </p>  </div>    <div class="refsect1 parameters" id="refsect1-function.ucfirst-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">str</code></dt>       <dd>        <p class="para">        输入字符串。       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.ucfirst-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回结果字符串。   </p>  </div>    <div class="refsect1 examples" id="refsect1-function.ucfirst-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-5997">     <p><strong>Example #1 <span class="function"><strong>ucfirst()</strong></span> 范例</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$foo&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'hello&nbsp;world!'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$foo&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">ucfirst</span><span style="color: #007700">(</span><span style="color: #9876AA">$foo</span><span style="color: #007700">);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;Hello&nbsp;world!<br /><br /></span><span style="color: #9876AA">$bar&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'HELLO&nbsp;WORLD!'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$bar&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">ucfirst</span><span style="color: #007700">(</span><span style="color: #9876AA">$bar</span><span style="color: #007700">);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;HELLO&nbsp;WORLD!<br /></span><span style="color: #9876AA">$bar&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">ucfirst</span><span style="color: #007700">(</span><span style="color: #9876AA">strtolower</span><span style="color: #007700">(</span><span style="color: #9876AA">$bar</span><span style="color: #007700">));&nbsp;</span><span style="color: #FF8000">//&nbsp;Hello&nbsp;world!<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>     </div>      </p>  </div>    <div class="refsect1 seealso" id="refsect1-function.ucfirst-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link lcfirst()} - 使一个字符串的第一个字符小写</span></li>     <li class="member"><span class="function">{@link strtolower()} - 将字符串转化为小写</span></li>     <li class="member"><span class="function">{@link strtoupper()} - 将字符串转化为大写</span></li>     <li class="member"><span class="function">{@link ucwords()} - 将字符串中每个单词的首字母转换为大写</span></li>    </ul>   </p>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.strings.php">字符串 函数</a></div></div>
 * @return string the resulting string.*/
function ucfirst ($str) {}

/**
*<div id="function.lcfirst" class="refentry">  <div class="refnamediv">   <h1 class="refname">lcfirst</h1>   <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7)</p><p class="refpurpose"><span class="refname">lcfirst</span> &mdash; <span class="dc-title">使一个字符串的第一个字符小写</span></p>   </div>    <div class="refsect1 description" id="refsect1-function.lcfirst-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">string</span> <span class="methodname"><strong>lcfirst</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>    )</div>    <p class="para rdfs-comment">    返回第一个字母小写的 <code class="parameter">str</code> ，如果是字母的话。   </p>   <p class="para">    需要注意的是“字母”是由当前语言区域决定的。比如，在默认的“C”区域像日耳曼语系中的元音变音a (ä) 将不会被转换。   </p>  </div>    <div class="refsect1 parameters" id="refsect1-function.lcfirst-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">str</code></dt>       <dd>        <p class="para">        输入的字符串。       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.lcfirst-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回转换后的字符串。   </p>  </div>    <div class="refsect1 examples" id="refsect1-function.lcfirst-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-5911">     <p><strong>Example #1 <span class="function"><strong>lcfirst()</strong></span> 例子：</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$foo&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'HelloWorld'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$foo&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">lcfirst</span><span style="color: #007700">(</span><span style="color: #9876AA">$foo</span><span style="color: #007700">);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;helloWorld<br /><br /></span><span style="color: #9876AA">$bar&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'HELLO&nbsp;WORLD!'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$bar&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">lcfirst</span><span style="color: #007700">(</span><span style="color: #9876AA">$bar</span><span style="color: #007700">);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;hELLO&nbsp;WORLD!<br /></span><span style="color: #9876AA">$bar&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">lcfirst</span><span style="color: #007700">(</span><span style="color: #9876AA">strtoupper</span><span style="color: #007700">(</span><span style="color: #9876AA">$bar</span><span style="color: #007700">));&nbsp;</span><span style="color: #FF8000">//&nbsp;hELLO&nbsp;WORLD!<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>     </div>      </p>  </div>    <div class="refsect1 seealso" id="refsect1-function.lcfirst-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link ucfirst()} - 将字符串的首字母转换为大写</span></li>     <li class="member"><span class="function">{@link strtolower()} - 将字符串转化为小写</span></li>     <li class="member"><span class="function">{@link strtoupper()} - 将字符串转化为大写</span></li>     <li class="member"><span class="function">{@link ucwords()} - 将字符串中每个单词的首字母转换为大写</span></li>    </ul>   </p>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.strings.php">字符串 函数</a></div></div>
 * @return string the resulting string.*/
function lcfirst ($str) {}

/**
*<div id="function.ucwords" class="refentry">  <div class="refnamediv">   <h1 class="refname">ucwords</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">ucwords</span> &mdash; <span class="dc-title">将字符串中每个单词的首字母转换为大写</span></p>   </div>    <div class="refsect1 description" id="refsect1-function.ucwords-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">string</span> <span class="methodname"><strong>ucwords</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>    [, <span class="methodparam">     <span class="type">string</span> <code class="parameter">$delimiters</code><span class="initializer"> = &quot; \t\r\n\f\v&quot;</span>    </span>   ] )</div>    <p class="para rdfs-comment">    将 <code class="parameter">str</code> 中每个单词的首字符（如果首字符是字母）转换为大写字母，并返回这个字符串。   </p>   <p class="para">    这里单词的定义是紧跟在 <code class="parameter">delimiters</code> 参数（默认：空格符、制表符、换行符、回车符、水平线以及竖线）之后的子字符串。   </p>  </div>    <div class="refsect1 parameters" id="refsect1-function.ucwords-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">str</code></dt>       <dd>        <p class="para">        输入字符串。       </p>      </dd>                 <dt> <code class="parameter">delimiters</code></dt>       <dd>        <p class="para">        可选的 <code class="parameter">delimiters</code>，包含了单词分割字符。       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.ucwords-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回转换后的字符串。   </p>  </div>    <div class="refsect1 changelog" id="refsect1-function.ucwords-changelog">   <h3 class="title">更新日志</h3>   <p class="para">    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>5.4.32, 5.5.16</td>        <td>        增加了 <code class="parameter">delimiters</code> 参数。        </td>       </tr>       </tbody>         </table>    </p>  </div>    <div class="refsect1 examples" id="refsect1-function.ucwords-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-5998">     <p><strong>Example #1 <span class="function"><strong>ucwords()</strong></span> 范例</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$foo&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'hello&nbsp;world!'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$foo&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">ucwords</span><span style="color: #007700">(</span><span style="color: #9876AA">$foo</span><span style="color: #007700">);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;Hello&nbsp;World!<br /><br /></span><span style="color: #9876AA">$bar&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'HELLO&nbsp;WORLD!'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$bar&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">ucwords</span><span style="color: #007700">(</span><span style="color: #9876AA">$bar</span><span style="color: #007700">);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;HELLO&nbsp;WORLD!<br /></span><span style="color: #9876AA">$bar&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">ucwords</span><span style="color: #007700">(</span><span style="color: #9876AA">strtolower</span><span style="color: #007700">(</span><span style="color: #9876AA">$bar</span><span style="color: #007700">));&nbsp;</span><span style="color: #FF8000">//&nbsp;Hello&nbsp;World!<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>     </div>   </p>      <p class="para">    <div class="example" id="example-5999">     <p><strong>Example #2 <span class="function"><strong>ucwords()</strong></span> 自定义 delimiters 的例子</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$foo&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'hello|world!'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$bar&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">ucwords</span><span style="color: #007700">(</span><span style="color: #9876AA">$foo</span><span style="color: #007700">);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;Hello|world!<br /><br /></span><span style="color: #9876AA">$baz&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">ucwords</span><span style="color: #007700">(</span><span style="color: #9876AA">$foo</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"|"</span><span style="color: #007700">);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;Hello|World!<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>     </div>   </p>  </div>    <div class="refsect1 notes" id="refsect1-function.ucwords-notes">   <h3 class="title">注释</h3>   <blockquote class="note"><p><strong class="note">Note</strong>: <span class="simpara">此函数可安全用于二进制对象。</span></p></blockquote>  </div>    <div class="refsect1 seealso" id="refsect1-function.ucwords-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link strtoupper()} - 将字符串转化为大写</span></li>     <li class="member"><span class="function">{@link strtolower()} - 将字符串转化为小写</span></li>     <li class="member"><span class="function">{@link ucfirst()} - 将字符串的首字母转换为大写</span></li>     <li class="member"><span class="function">{@link mb_convert_case()} - 对字符串进行大小写转换</span></li>    </ul>   </p>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.strings.php">字符串 函数</a></div></div>
 * @return string the modified string.*/
function ucwords ($str, $delimiters = " \t\r\n\f\v") {}

/**
*<div id="function.strtr" class="refentry">  <div class="refnamediv">   <h1 class="refname">strtr</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">strtr</span> &mdash; <span class="dc-title">转换指定字符</span></p>   </div>    <div class="refsect1 description" id="refsect1-function.strtr-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">string</span> <span class="methodname"><strong>strtr</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>    , <span class="methodparam"><span class="type">string</span> <code class="parameter">$from</code></span>    , <span class="methodparam"><span class="type">string</span> <code class="parameter">$to</code></span>    )</div>    <div class="methodsynopsis dc-description">    <span class="type">string</span> <span class="methodname"><strong>strtr</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>    , <span class="methodparam"><span class="type">array</span> <code class="parameter">$replace_pairs</code></span>    )</div>    <p class="para rdfs-comment">    该函数返回 <code class="parameter">str</code> 的一个副本，并将在 <code class="parameter">from</code> 中指定的字符转换为 <code class="parameter">to</code> 中相应的字符。    比如， <em>$from[$n]</em>中每次的出现都会被替换为    <em>$to[$n]</em>，其中 <em>$n</em> 是两个参数都有效的位移(offset)。   </p>   <p class="para">    如果 <code class="parameter">from</code> 与 <code class="parameter">to</code> 长度不相等，那么多余的字符部分将被忽略。 <code class="parameter">str</code> 的长度将会和返回的值一样。   </p>   <p class="para">    If given two arguments, the second should be an <span class="type"><a href="http://php.net/manual/zh/language.types.array.php" class="type array">array</a></span> in the    form <em>array(&#039;from&#039; =&gt; &#039;to&#039;, ...)</em>. The return value is    a <span class="type"><a href="http://php.net/manual/zh/language.types.string.php" class="type string">string</a></span> where all the occurrences of the array keys have been    replaced by the corresponding values. The longest keys will be tried first.    Once a substring has been replaced, its new value will not be searched    again.   </p>   <p class="para">    In this case, the keys and the values may have any length, provided that    there is no empty key; additionally, the length of the return value may    differ from that of <code class="parameter">str</code>.    However, this function will be the most efficient when all the keys have the    same size.   </p>  </div>    <div class="refsect1 parameters" id="refsect1-function.strtr-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">str</code></dt>       <dd>        <p class="para">        待转换的<span class="type"><span class="type 字符串">字符串</span></span>。       </p>      </dd>                 <dt> <code class="parameter">from</code></dt>       <dd>        <p class="para">        <span class="type"><span class="type 字符串">字符串</span></span>中与将要被转换的目的字符 <code class="parameter">to</code> 相对应的源字符。       </p>      </dd>                 <dt> <code class="parameter">to</code></dt>       <dd>        <p class="para">        <span class="type"><span class="type 字符串">字符串</span></span>中与将要被转换的字符 <code class="parameter">from</code> 相对应的目的字符。       </p>      </dd>                 <dt> <code class="parameter">replace_pairs</code></dt>       <dd>        <p class="para">        参数 <code class="parameter">replace_pairs</code> 可以用来取代 <code class="parameter">to</code> 和 <code class="parameter">from</code> 参数，因为它是以  <em>array(&#039;from&#039; =&gt; &#039;to&#039;, ...)</em> 格式出现的数组。       </p>      </dd>          </dl>    </p>  </div>     <div class="refsect1 returnvalues" id="refsect1-function.strtr-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回转换后的<span class="type"><span class="type 字符串">字符串</span></span>。   </p>   <p class="para">    如果 <code class="parameter">replace_pairs</code> 中包含一个空<span class="type"><span class="type 字符串">字符串</span></span>（<em>&quot;&quot;</em>）键，那么将返回 <strong><code>FALSE</code></strong>。    If the <code class="parameter">str</code> is not a scalar    then it is not typecasted into a string, instead a warning is raised and     <strong><code>NULL</code></strong> is returned.    </p>  </div>    <div class="refsect1 examples" id="refsect1-function.strtr-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-5983">     <p><strong>Example #1 <span class="function"><strong>strtr()</strong></span> 范例</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$addr&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">strtr</span><span style="color: #007700">(</span><span style="color: #9876AA">$addr</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"äåö"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"aao"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>     </div>   </p>   <p class="para">    The next example shows the behavior of <span class="function"><strong>strtr()</strong></span> when    called with only two arguments. Note the preference of the replacements    (<em>&quot;h&quot;</em> is not picked because there are longer matches)    and how replaced text was not searched again.   </p>   <div class="example" id="example-5984">    <p><strong>Example #2 使用两个参数的 <span class="function"><strong>strtr()</strong></span> 范例</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$trans&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">"hello"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"hi"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"hi"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"hello"</span><span style="color: #007700">);<br />echo&nbsp;</span><span style="color: #9876AA">strtr</span><span style="color: #007700">(</span><span style="color: #DD0000">"hi&nbsp;all,&nbsp;I&nbsp;said&nbsp;hello"</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$trans</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen"> <div class="cdata"><pre> hello all, I said hi </pre></div>     </div>   </div>   <p class="para">    The two modes of behavior are substantially different. With three arguments,    <span class="function"><strong>strtr()</strong></span> will replace bytes; with two, it may replace    longer substrings.   </p>   <div class="example" id="example-5985">    <p><strong>Example #3 <span class="function"><strong>strtr()</strong></span> behavior comparison</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #9876AA">strtr</span><span style="color: #007700">(</span><span style="color: #DD0000">"baab"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"ab"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"01"</span><span style="color: #007700">),</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">$trans&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">"ab"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"01"</span><span style="color: #007700">);<br />echo&nbsp;</span><span style="color: #9876AA">strtr</span><span style="color: #007700">(</span><span style="color: #DD0000">"baab"</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$trans</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen"> <div class="cdata"><pre> 1001 ba01 </pre></div>     </div>   </div>  </div>    <div class="refsect1 seealso" id="refsect1-function.strtr-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link str_replace()} - 子字符串替换</span></li>     <li class="member"><span class="function">{@link preg_replace()} - 执行一个正则表达式的搜索和替换</span></li>    </ul>   </p>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.strings.php">字符串 函数</a></div></div>
 * @return string This function returns a copy of str,*/
function strtr ($str, $from, $to) {}

/**
*<div id="function.addslashes" class="refentry">  <div class="refnamediv">   <h1 class="refname">addslashes</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">addslashes</span> &mdash; <span class="dc-title">使用反斜线引用字符串</span></p>   </div>     <div class="refsect1 description" id="refsect1-function.addslashes-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">string</span> <span class="methodname"><strong>addslashes</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>    )</div>    <p class="para rdfs-comment">    返回字符串，该字符串为了数据库查询语句等的需要在某些字符前加上了反斜线。这些字符是单引号（<em>&#039;</em>）、双引号（<em>&quot;</em>）、反斜线（<em>\</em>）与    NUL（<strong><code>NULL</code></strong> 字符）。   </p>   <p class="para">    一个使用 <span class="function"><strong>addslashes()</strong></span>    的例子是当你要往数据库中输入数据时。    例如，将名字    <em>O&#039;reilly</em> 插入到数据库中，这就需要对其进行转义。    强烈建议使用 DBMS 指定的转义函数    （比如 MySQL 是  <span class="function"><a href="http://php.net/manual/zh/mysqli.real-escape-string.php" class="function">mysqli_real_escape_string()</a></span>，PostgreSQL 是 <span class="function">{@link pg_escape_string()}</span>），但是如果你使用的 DBMS 没有一个转义函数，并且使用 <em>\</em> 来转义特殊字符，你可以使用这个函数。    仅仅是为了获取插入数据库的数据，额外的 <em>\</em> 并不会插入。    当 PHP    指令 <a href="http://php.net/manual/zh/sybase.configuration.php#ini.magic-quotes-sybase" class="link">magic_quotes_sybase</a>    被设置成 <em>on</em> 时，意味着插入    <em>&#039;</em> 时将使用    <em>&#039;</em> 进行转义。   </p>   <p class="para">    PHP 5.4 之前 PHP 指令 <a href="http://php.net/manual/zh/info.configuration.php#ini.magic-quotes-gpc" class="link">    magic_quotes_gpc</a> 默认是 <em>on</em>， 实际上所有的 GET、POST 和 COOKIE 数据都用被 <span class="function"><strong>addslashes()</strong></span> 了。 不要对已经被    <a href="http://php.net/manual/zh/info.configuration.php#ini.magic-quotes-gpc" class="link">magic_quotes_gpc</a>    转义过的字符串使用    <span class="function"><strong>addslashes()</strong></span>，因为这样会导致双层转义。 遇到这种情况时可以使用函数    <span class="function">{@link get_magic_quotes_gpc()}</span>    进行检测。   </p>  </div>     <div class="refsect1 parameters" id="refsect1-function.addslashes-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">str</code></dt>       <dd>        <p class="para">        要转义的字符。       </p>      </dd>          </dl>    </p>  </div>        <div class="refsect1 returnvalues" id="refsect1-function.addslashes-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回转义后的字符。   </p>  </div>     <div class="refsect1 examples" id="refsect1-function.addslashes-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-5887">     <p><strong>Example #1 一个 <span class="function"><strong>addslashes()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$str&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">"Is&nbsp;your&nbsp;name&nbsp;O'reilly?"</span><span style="color: #007700">;<br /><br /></span><span style="color: #FF8000">//&nbsp;输出：&nbsp;Is&nbsp;your&nbsp;name&nbsp;O\'reilly?<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #9876AA">addslashes</span><span style="color: #007700">(</span><span style="color: #9876AA">$str</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>     </div>   </p>  </div>      <div class="refsect1 seealso" id="refsect1-function.addslashes-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link stripcslashes()} - 反引用一个使用 addcslashes 转义的字符串</span></li>     <li class="member"><span class="function">{@link stripslashes()} - 反引用一个引用字符串</span></li>     <li class="member"><span class="function">{@link addcslashes()} - 以 C 语言风格使用反斜线转义字符串中的字符</span></li>     <li class="member"><span class="function">{@link htmlspecialchars()} - 将特殊字符转换为 HTML 实体</span></li>     <li class="member"><span class="function">{@link quotemeta()} - 转义元字符集</span></li>     <li class="member"><span class="function">{@link get_magic_quotes_gpc()} - 获取当前 magic_quotes_gpc 的配置选项设置</span></li>    </ul>   </p>  </div>    <div class="up"><a href="http://php.net/manual/zh/ref.strings.php">字符串 函数</a></div></div>
 * @return string the escaped string.*/
function addslashes ($str) {}

/**
*<div id="function.addcslashes" class="refentry">  <div class="refnamediv">   <h1 class="refname">addcslashes</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">addcslashes</span> &mdash; <span class="dc-title">以 C 语言风格使用反斜线转义字符串中的字符</span></p>   </div>     <div class="refsect1 description" id="refsect1-function.addcslashes-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">string</span> <span class="methodname"><strong>addcslashes</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>    , <span class="methodparam"><span class="type">string</span> <code class="parameter">$charlist</code></span>    )</div>    <p class="para rdfs-comment">    返回字符串，该字符串在属于参数 <code class="parameter">charlist</code>    列表中的字符前都加上了反斜线。   </p>  </div>     <div class="refsect1 parameters" id="refsect1-function.addcslashes-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">str</code></dt>       <dd>        <p class="para">        要转义的字符。       </p>      </dd>                 <dt> <code class="parameter">charlist</code></dt>       <dd>        <p class="para">        如果 <code class="parameter">charlist</code>    中包含有 <em>\n</em>，<em>\r</em>    等字符，将以 C 语言风格转换，而其它非字母数字且 ASCII 码低于 32 以及高于 126     的字符均转换成使用八进制表示。       </p>       <p class="para">        当定义 charlist    参数中的字符序列时，需要确实知道介于自己设置的开始及结束范围之内的都是些什么字符。        <div class="informalexample">         <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #9876AA">addcslashes</span><span style="color: #007700">(</span><span style="color: #DD0000">'foo[&nbsp;]'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'A..z'</span><span style="color: #007700">);<br /></span><span style="color: #FF8000">//&nbsp;输出：\f\o\o\[&nbsp;\]<br />//&nbsp;所有大小写字母均被转义<br />//&nbsp;...&nbsp;但&nbsp;[\]^_`&nbsp;以及分隔符、换行符、回车符等也一并被转义了。<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>         </div>         </div>        另外，如果设置范围中的结束字符 ASCII     码高于开始字符，则不会创建范围，只是将开始字符、结束字符以及其间的字符逐个转义。可使用    <span class="function">{@link ord()}</span> 函数获取字符的 ASCII 码值。        <div class="informalexample">         <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #9876AA">addcslashes</span><span style="color: #007700">(</span><span style="color: #DD0000">"zoo['.']"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'z..A'</span><span style="color: #007700">);<br /></span><span style="color: #FF8000">//&nbsp;输出：\zoo['\.']<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>         </div>         </div>       </p>       <p class="para">        当选择对字符 0，a，b，f，n，r，t    和 v 进行转义时需要小心，它们将被转换成    \0，\a，\b，\f，\n，\r，\t 和     \v。在 PHP 中，只有 \0（NULL），\r（回车符），\n（换行符）和    \t（制表符）是预定义的转义序列， 而在    C 语言中，上述的所有转换后的字符都是预定义的转义序列。       </p>      </dd>          </dl>    </p>  </div>      <div class="refsect1 returnvalues" id="refsect1-function.addcslashes-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回转义后的字符。   </p>  </div>     <div class="refsect1 changelog" id="refsect1-function.addcslashes-changelog">   <h3 class="title">更新日志</h3>   <p class="para">    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>5.2.5</td>        <td>         The escape sequences \v and \f were added.        </td>       </tr>       </tbody>         </table>    </p>  </div>      <div class="refsect1 examples" id="refsect1-function.addcslashes-examples">   <h3 class="title">范例</h3>   <p class="para">     <code class="parameter">charlist</code> 参数，如“\0..\37”，将转义所有    ASCII 码介于 0 和 31 之间的字符。    <div class="example" id="example-5886">     <p><strong>Example #1 <span class="function"><strong>addcslashes()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$escaped&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">addcslashes</span><span style="color: #007700">(</span><span style="color: #9876AA">$not_escaped</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"\0..\37!@\177..\377"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>     </div>   </p>  </div>    <div class="refsect1 seealso" id="refsect1-function.addcslashes-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link stripcslashes()} - 反引用一个使用 addcslashes 转义的字符串</span></li>     <li class="member"><span class="function">{@link stripslashes()} - 反引用一个引用字符串</span></li>     <li class="member"><span class="function">{@link addslashes()} - 使用反斜线引用字符串</span></li>     <li class="member"><span class="function">{@link htmlspecialchars()} - 将特殊字符转换为 HTML 实体</span></li>     <li class="member"><span class="function">{@link quotemeta()} - 转义元字符集</span></li>    </ul>   </p>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.strings.php">字符串 函数</a></div></div>
 * @return string the escaped string.*/
function addcslashes ($str, $charlist) {}

/**
*<div id="function.rtrim" class="refentry">  <div class="refnamediv">   <h1 class="refname">rtrim</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">rtrim</span> &mdash; <span class="dc-title">删除字符串末端的空白字符（或者其他字符）</span></p>   </div>    <div class="refsect1 description" id="refsect1-function.rtrim-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">string</span> <span class="methodname"><strong>rtrim</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>    [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$character_mask</code></span>   ] )</div>    <p class="para rdfs-comment">    该函数删除 <code class="parameter">str</code> 末端的空白字符（或者其他字符）并返回。   </p>   <p class="para">    不使用第二个参数，<span class="function"><strong>rtrim()</strong></span> 仅删除以下字符：        <ul class="itemizedlist">     <li class="listitem">      <span class="simpara">       &quot; &quot; (<acronym title="American Standard Code for Information Interchange">ASCII</acronym> <em>32</em>       (<em>0x20</em>))，普通空白符。      </span>     </li>     <li class="listitem">      <span class="simpara">       &quot;\t&quot; (<acronym title="American Standard Code for Information Interchange">ASCII</acronym> <em>9</em>       (<em>0x09</em>))，制表符。      </span>     </li>     <li class="listitem">      <span class="simpara">       &quot;\n&quot; (<acronym title="American Standard Code for Information Interchange">ASCII</acronym> <em>10</em>       (<em>0x0A</em>))，换行符。      </span>     </li>     <li class="listitem">      <span class="simpara">       &quot;\r&quot; (<acronym title="American Standard Code for Information Interchange">ASCII</acronym> <em>13</em>       (<em>0x0D</em>))，回车符。      </span>     </li>     <li class="listitem">      <span class="simpara">       &quot;\0&quot; (<acronym title="American Standard Code for Information Interchange">ASCII</acronym> <em>0</em>       (<em>0x00</em>))，<em>NUL</em> 空字节符。      </span>     </li>     <li class="listitem">      <span class="simpara">        &quot;\x0B&quot; (<acronym title="American Standard Code for Information Interchange">ASCII</acronym> <em>11</em>       (<em>0x0B</em>))，垂直制表符。      </span>     </li>    </ul>   </p>  </div>    <div class="refsect1 parameters" id="refsect1-function.rtrim-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">str</code></dt>       <dd>        <p class="para">        输入字符串。       </p>      </dd>                 <dt> <code class="parameter">character_mask</code></dt>       <dd>        <p class="para">        通过指定 <code class="parameter">character_mask</code>，可以指定想要删除的字符列表。简单地列出你想要删除的全部字符。使用 <em>..</em> 格式，可以指定一个范围。       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.rtrim-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回改变后的字符串。   </p>  </div>    <div class="refsect1 examples" id="refsect1-function.rtrim-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-5929">     <p><strong>Example #1 <span class="function"><strong>rtrim()</strong></span> 使用范例</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /><br />$text&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">"\t\tThese&nbsp;are&nbsp;a&nbsp;few&nbsp;words&nbsp;:)&nbsp;...&nbsp;&nbsp;"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$binary&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">"\x09Example&nbsp;string\x0A"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$hello&nbsp;&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">"Hello&nbsp;World"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$text</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$binary</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$hello</span><span style="color: #007700">);<br /><br />print&nbsp;</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">$trimmed&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">rtrim</span><span style="color: #007700">(</span><span style="color: #9876AA">$text</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$trimmed</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$trimmed&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">rtrim</span><span style="color: #007700">(</span><span style="color: #9876AA">$text</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"&nbsp;\t."</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$trimmed</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$trimmed&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">rtrim</span><span style="color: #007700">(</span><span style="color: #9876AA">$hello</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"Hdle"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$trimmed</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">//&nbsp;删除&nbsp;$binary&nbsp;末端的&nbsp;ASCII&nbsp;码控制字符<br />//&nbsp;(包括&nbsp;0&nbsp;-&nbsp;31)<br /></span><span style="color: #9876AA">$clean&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">rtrim</span><span style="color: #007700">(</span><span style="color: #9876AA">$binary</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"\x00..\x1F"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$clean</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen"> <div class="cdata"><pre> string(32) &quot;        These are a few words :) ...  &quot; string(16) &quot;    Example string &quot; string(11) &quot;Hello World&quot;  string(30) &quot;        These are a few words :) ...&quot; string(26) &quot;        These are a few words :)&quot; string(9) &quot;Hello Wor&quot; string(15) &quot;    Example string&quot; </pre></div>     </div>    </div>      </p>  </div>    <div class="refsect1 seealso" id="refsect1-function.rtrim-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link trim()} - 去除字符串首尾处的空白字符（或者其他字符）</span></li>     <li class="member"><span class="function">{@link ltrim()} - 删除字符串开头的空白字符（或其他字符）</span></li>    </ul>   </p>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.strings.php">字符串 函数</a></div></div>
 * @return string the modified string.*/
function rtrim ($str, $charlist = " \t\n\r\0\x0B") {}

/**
*<div id="function.str-replace" class="refentry">  <div class="refnamediv">   <h1 class="refname">str_replace</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">str_replace</span> &mdash; <span class="dc-title">子字符串替换</span></p>   </div>    <div class="refsect1 description" id="refsect1-function.str-replace-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>str_replace</strong></span>     ( <span class="methodparam"><span class="type"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$search</code></span>    , <span class="methodparam"><span class="type"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$replace</code></span>    , <span class="methodparam"><span class="type"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$subject</code></span>    [, <span class="methodparam"><span class="type">int</span> <code class="parameter reference">&$count</code></span>   ] )</div>    <p class="para rdfs-comment">    该函数返回一个字符串或者数组。该字符串或数组是将 <code class="parameter">subject</code> 中全部的 <code class="parameter">search</code> 都被 <code class="parameter">replace</code> 替换之后的结果。   </p>   <p class="para">    如果没有一些特殊的替换需求（比如正则表达式），你应该使用该函数替换 <span class="function">{@link ereg_replace()}</span> 和 <span class="function">{@link preg_replace()}</span>。   </p>  </div>    <div class="refsect1 parameters" id="refsect1-function.str-replace-parameters">   <h3 class="title">参数</h3>   <p class="para">    如果 <code class="parameter">search</code> 和 <code class="parameter">replace</code> 为数组，那么 <span class="function"><strong>str_replace()</strong></span> 将对 <code class="parameter">subject</code> 做二者的映射替换。如果 <code class="parameter">replace</code> 的值的个数少于 <code class="parameter">search</code> 的个数，多余的替换将使用空字符串来进行。如果 <code class="parameter">search</code> 是一个数组而 <code class="parameter">replace</code> 是一个字符串，那么 <code class="parameter">search</code> 中每个元素的替换将始终使用这个字符串。该转换不会改变大小写。   </p>   <p class="para">    如果 <code class="parameter">search</code> 和 <code class="parameter">replace</code> 都是数组，它们的值将会被依次处理。   </p>   <p class="para">    <dl>            <dt> <code class="parameter">search</code></dt>       <dd>        <p class="para">        查找的目标值，也就是 <em class="emphasis">needle</em>。一个数组可以指定多个目标。       </p>      </dd>                 <dt> <code class="parameter">replace</code></dt>       <dd>        <p class="para">        <code class="parameter">search</code> 的替换值。一个数组可以被用来指定多重替换。       </p>      </dd>                 <dt> <code class="parameter">subject</code></dt>       <dd>        <p class="para">        执行替换的数组或者字符串。也就是 <em class="emphasis">haystack</em>。       </p>       <p class="para">        如果 <code class="parameter">subject</code> 是一个数组，替换操作将遍历整个 <code class="parameter">subject</code>，返回值也将是一个数组。       </p>      </dd>                 <dt> <code class="parameter">count</code></dt>       <dd>        <p class="para">         如果被指定，它的值将被设置为替换发生的次数。       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.str-replace-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    该函数返回替换后的数组或者字符串。   </p>  </div>    <div class="refsect1 examples" id="refsect1-function.str-replace-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-5951">     <p><strong>Example #1 <span class="function"><strong>str_replace()</strong></span> 基本范例</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">//&nbsp;赋值:&nbsp;&lt;body&nbsp;text='black'&gt;<br /></span><span style="color: #9876AA">$bodytag&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">str_replace</span><span style="color: #007700">(</span><span style="color: #DD0000">"%body%"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"black"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"&lt;body&nbsp;text='%body%'&gt;"</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">//&nbsp;赋值:&nbsp;Hll&nbsp;Wrld&nbsp;f&nbsp;PHP<br /></span><span style="color: #9876AA">$vowels&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">"a"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"e"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"i"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"o"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"u"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"A"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"E"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"I"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"O"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"U"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$onlyconsonants&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">str_replace</span><span style="color: #007700">(</span><span style="color: #9876AA">$vowels</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">""</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"Hello&nbsp;World&nbsp;of&nbsp;PHP"</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">//&nbsp;赋值:&nbsp;You&nbsp;should&nbsp;eat&nbsp;pizza,&nbsp;beer,&nbsp;and&nbsp;ice&nbsp;cream&nbsp;every&nbsp;day<br /></span><span style="color: #9876AA">$phrase&nbsp;&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">"You&nbsp;should&nbsp;eat&nbsp;fruits,&nbsp;vegetables,&nbsp;and&nbsp;fiber&nbsp;every&nbsp;day."</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$healthy&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">"fruits"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"vegetables"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"fiber"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$yummy&nbsp;&nbsp;&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">"pizza"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"beer"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"ice&nbsp;cream"</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$newphrase&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">str_replace</span><span style="color: #007700">(</span><span style="color: #9876AA">$healthy</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$yummy</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$phrase</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">//&nbsp;赋值:&nbsp;2<br /></span><span style="color: #9876AA">$str&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">str_replace</span><span style="color: #007700">(</span><span style="color: #DD0000">"ll"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">""</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"good&nbsp;golly&nbsp;miss&nbsp;molly!"</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$count</span><span style="color: #007700">);<br />echo&nbsp;</span><span style="color: #9876AA">$count</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>     </div>   </p>   <p class="para">    <div class="example" id="example-5952">     <p><strong>Example #2 可能的 <span class="function"><strong>str_replace()</strong></span> 替换范例</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">//&nbsp;替换顺序<br /></span><span style="color: #9876AA">$str&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">"Line&nbsp;1\nLine&nbsp;2\rLine&nbsp;3\r\nLine&nbsp;4\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$order&nbsp;&nbsp;&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">"\r\n"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"\r"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$replace&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'&lt;br&nbsp;/&gt;'</span><span style="color: #007700">;<br /><br /></span><span style="color: #FF8000">//&nbsp;首先替换&nbsp;\r\n&nbsp;字符，因此它们不会被两次转换<br /></span><span style="color: #9876AA">$newstr&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">str_replace</span><span style="color: #007700">(</span><span style="color: #9876AA">$order</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$replace</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$str</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">//&nbsp;输出&nbsp;F&nbsp;，因为&nbsp;A&nbsp;被&nbsp;B&nbsp;替换，B&nbsp;又被&nbsp;C&nbsp;替换，以此类推...<br />//&nbsp;由于从左到右依次替换，最终&nbsp;E&nbsp;被&nbsp;F&nbsp;替换<br /></span><span style="color: #9876AA">$search&nbsp;&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">'A'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'B'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'C'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'D'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'E'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$replace&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">'B'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'C'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'D'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'E'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'F'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$subject&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'A'</span><span style="color: #007700">;<br />echo&nbsp;</span><span style="color: #9876AA">str_replace</span><span style="color: #007700">(</span><span style="color: #9876AA">$search</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$replace</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$subject</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">//&nbsp;输出:&nbsp;apearpearle&nbsp;pear<br />//&nbsp;由于上面提到的原因<br /></span><span style="color: #9876AA">$letters&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">'a'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'p'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$fruit&nbsp;&nbsp;&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">'apple'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'pear'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$text&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'a&nbsp;p'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$output&nbsp;&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">str_replace</span><span style="color: #007700">(</span><span style="color: #9876AA">$letters</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$fruit</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$text</span><span style="color: #007700">);<br />echo&nbsp;</span><span style="color: #9876AA">$output</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>     </div>   </p>  </div>    <div class="refsect1 notes" id="refsect1-function.str-replace-notes">   <h3 class="title">注释</h3>   <blockquote class="note"><p><strong class="note">Note</strong>: <span class="simpara">此函数可安全用于二进制对象。</span></p></blockquote>   <div class="caution"><strong class="caution">Caution</strong>    <h1 class="title">了解替换顺序</h1>    <p class="para">     由于 <span class="function"><strong>str_replace()</strong></span> 的替换时从左到右依次进行的，进行多重替换的时候可能会替换掉之前插入的值。参见该文档的范例。    </p>   </div>   <blockquote class="note"><p><strong class="note">Note</strong>:     <p class="para">     该函数区分大小写。使用 <span class="function">{@link str_ireplace()}</span> 可以进行不区分大小写的替换。    </p>   </p></blockquote>  </div>    <div class="refsect1 seealso" id="refsect1-function.str-replace-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link str_ireplace()} - str_replace 的忽略大小写版本</span></li>     <li class="member"><span class="function">{@link substr_replace()} - 替换字符串的子串</span></li>     <li class="member"><span class="function">{@link preg_replace()} - 执行一个正则表达式的搜索和替换</span></li>     <li class="member"><span class="function">{@link strtr()} - 转换指定字符</span></li>    </ul>   </p>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.strings.php">字符串 函数</a></div></div>
 * @return mixed This function returns a string or an array with the replaced values.*/
function str_replace ($search, $replace, $subject, &$count = null) {}

/**
*<div id="function.str-ireplace" class="refentry">  <div class="refnamediv">   <h1 class="refname">str_ireplace</h1>   <p class="verinfo">(PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">str_ireplace</span> &mdash; <span class="dc-title"><span class="function">{@link str_replace()}</span> 的忽略大小写版本</span></p>   </div>    <div class="refsect1 description" id="refsect1-function.str-ireplace-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>str_ireplace</strong></span>     ( <span class="methodparam"><span class="type"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$search</code></span>    , <span class="methodparam"><span class="type"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$replace</code></span>    , <span class="methodparam"><span class="type"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$subject</code></span>    [, <span class="methodparam"><span class="type">int</span> <code class="parameter reference">&$count</code></span>   ] )</div>    <p class="para rdfs-comment">       该函数返回一个字符串或者数组。该字符串或数组是将 <code class="parameter">subject</code> 中全部的 <code class="parameter">search</code> 都被 <code class="parameter">replace</code> 替换（忽略大小写）之后的结果。如果没有一些特殊的替换规则，你应该使用该函数替换带有 <em>i</em> 修正符的 <span class="function">{@link preg_replace()}</span> 函数。   </p>  </div>    <div class="refsect1 parameters" id="refsect1-function.str-ireplace-parameters">   <h3 class="title">参数</h3>      <p class="para">    如果 <code class="parameter">search</code> 和 <code class="parameter">replace</code> 为数组，那么 <span class="function">{@link str_replace()}</span> 将对 <code class="parameter">subject</code> 做二者的映射替换。如果 <code class="parameter">replace</code> 的值的个数少于 <code class="parameter">search</code> 的个数，多余的替换将使用空字符串来进行。如果 <code class="parameter">search</code> 是一个数组而 <code class="parameter">replace</code> 是一个字符串，那么 <code class="parameter">search</code> 中每个元素的替换将始终使用这个字符串。   </p>   <p class="para">    如果 <code class="parameter">search</code> 或 <code class="parameter">replace</code> 是数组，他们的元素将从头到尾一个个处理。   </p>   <p class="para">    <dl>            <dt> <code class="parameter">search</code></dt>       <dd>         <p class="para">         要搜索的值，就像是 <em class="emphasis">needle</em>。可以使用 array 来提供多个 needle。        </p>      </dd>                 <dt> <code class="parameter">replace</code></dt>       <dd>        <p class="para">        The replacement value that replaces found <code class="parameter">search</code>        values. An array may be used to designate multiple replacements.       </p>      </dd>                 <dt> <code class="parameter">subject</code></dt>       <dd>        <p class="para">        要被搜索和替换的字符串或数组，就像是       <em class="emphasis">haystack</em>。       </p>       <p class="para">        如果 <code class="parameter">subject</code> 是一个数组，替换操作将遍历整个 <code class="parameter">subject</code>，并且也将返回一个数组。       </p>      </dd>                 <dt> <code class="parameter">count</code></dt>       <dd>        <p class="para">       如果设定了，将会设置执行替换的次数。       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.str-ireplace-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回替换后的字符串或者数组。   </p>  </div>     <div class="refsect1 examples" id="refsect1-function.str-ireplace-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-5948">     <p><strong>Example #1 <span class="function"><strong>str_ireplace()</strong></span> 范例</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$bodytag&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">str_ireplace</span><span style="color: #007700">(</span><span style="color: #DD0000">"%body%"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"black"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"&lt;body&nbsp;text=%BODY%&gt;"</span><span style="color: #007700">);<br />echo&nbsp;</span><span style="color: #9876AA">$bodytag</span><span style="color: #007700">;&nbsp;</span><span style="color: #FF8000">//&nbsp;&lt;body&nbsp;text=black&gt;<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>     </div>   </p>  </div>    <div class="refsect1 notes" id="refsect1-function.str-ireplace-notes">   <h3 class="title">注释</h3>   <blockquote class="note"><p><strong class="note">Note</strong>: <span class="simpara">此函数可安全用于二进制对象。</span></p></blockquote>   <div class="caution"><strong class="caution">Caution</strong>    <h1 class="title">Replacement order gotcha</h1>    <p class="para">     Because <span class="function"><strong>str_ireplace()</strong></span> replaces left to right, it might     replace a previously inserted value when doing multiple replacements.     Example #2 in the <span class="function">{@link str_replace()}</span> documentation     demonstrates how this may affect you in practice.    </p>   </div>  </div>    <div class="refsect1 seealso" id="refsect1-function.str-ireplace-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link str_replace()} - 子字符串替换</span></li>     <li class="member"><span class="function">{@link preg_replace()} - 执行一个正则表达式的搜索和替换</span></li>     <li class="member"><span class="function">{@link strtr()} - 转换指定字符</span></li>    </ul>   </p>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.strings.php">字符串 函数</a></div></div>
 * @return mixed a string or an array of replacements.*/
function str_ireplace ($search, $replace, $subject, &$count = null) {}

/**
*<div id="function.str-repeat" class="refentry">  <div class="refnamediv">   <h1 class="refname">str_repeat</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">str_repeat</span> &mdash; <span class="dc-title">重复一个字符串</span></p>   </div>    <div class="refsect1 description" id="refsect1-function.str-repeat-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">string</span> <span class="methodname"><strong>str_repeat</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$input</code></span>    , <span class="methodparam"><span class="type">int</span> <code class="parameter">$multiplier</code></span>    )</div>    <p class="para rdfs-comment">    返回 <code class="parameter">input</code> 重复    <code class="parameter">multiplier</code> 次后的结果。   </p>  </div>    <div class="refsect1 parameters" id="refsect1-function.str-repeat-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">input</code></dt>       <dd>        <p class="para">        待操作的字符串。       </p>      </dd>                 <dt> <code class="parameter">multiplier</code></dt>       <dd>        <p class="para">        <code class="parameter">input</code> 被重复的次数。       </p>       <p class="para">        <code class="parameter">multiplier</code> 必须大于等于 0。如果 <code class="parameter">multiplier</code> 被设置为 0，函数返回空字符串。       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.str-repeat-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回重复后的字符串。   </p>  </div>    <div class="refsect1 examples" id="refsect1-function.str-repeat-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-5950">     <p><strong>Example #1 <span class="function"><strong>str_repeat()</strong></span> 范例</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #9876AA">str_repeat</span><span style="color: #007700">(</span><span style="color: #DD0000">"-="</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">10</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen"> <div class="cdata"><pre> -=-=-=-=-=-=-=-=-=-= </pre></div>     </div>    </div>      </p>  </div>    <div class="refsect1 seealso" id="refsect1-function.str-repeat-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><a href="http://php.net/manual/zh/control-structures.for.php" class="link">for</a></li>     <li class="member"><span class="function">{@link str_pad()} - 使用另一个字符串填充字符串为指定长度</span></li>     <li class="member"><span class="function">{@link substr_count()} - 计算字串出现的次数</span></li>    </ul>   </p>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.strings.php">字符串 函数</a></div></div>
 * @return string the repeated string.*/
function str_repeat ($input, $multiplier) {}

/**
*<div id="function.count-chars" class="refentry">  <div class="refnamediv">   <h1 class="refname">count_chars</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">count_chars</span> &mdash; <span class="dc-title">返回字符串所用字符的信息</span></p>   </div>  <div class="refsect1 description" id="refsect1-function.count-chars-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>count_chars</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$string</code></span>    [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$mode</code><span class="initializer"> = 0</span></span>   ] )</div>    <p class="para rdfs-comment">    统计 <code class="parameter">string</code>    中每个字节值（0..255）出现的次数，使用多种模式返回结果。   </p>  </div>    <div class="refsect1 parameters" id="refsect1-function.count-chars-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">string</code></dt>       <dd>        <p class="para">        需要统计的字符串。       </p>      </dd>                 <dt> <code class="parameter">mode</code></dt>       <dd>        <p class="para">        参见返回的值。       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.count-chars-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    根据不同的   <code class="parameter">mode</code>，<span class="function"><strong>count_chars()</strong></span>    返回下列不同的结果：    <ul class="itemizedlist">     <li class="listitem">      <span class="simpara">       0 - 以所有的每个字节值作为键名，出现次数作为值的数组。      </span>     </li>     <li class="listitem">      <span class="simpara">       1 - 与 0 相同，但只列出出现次数大于零的字节值。      </span>     </li>     <li class="listitem">      <span class="simpara">       2 - 与 0 相同，但只列出出现次数等于零的字节值。      </span>     </li>     <li class="listitem">      <span class="simpara">       3 - 返回由所有使用了的字节值组成的字符串。      </span>     </li>     <li class="listitem">      <span class="simpara">      4 - 返回由所有未使用的字节值组成的字符串。      </span>     </li>    </ul>   </p>  </div>    <div class="refsect1 examples" id="refsect1-function.count-chars-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-5892">     <p><strong>Example #1 <span class="function"><strong>count_chars()</strong></span>  示例</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$data&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">"Two&nbsp;Ts&nbsp;and&nbsp;one&nbsp;F."</span><span style="color: #007700">;<br /><br />foreach&nbsp;(</span><span style="color: #9876AA">count_chars</span><span style="color: #007700">(</span><span style="color: #9876AA">$data</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">1</span><span style="color: #007700">)&nbsp;as&nbsp;</span><span style="color: #9876AA">$i&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">$val</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"There&nbsp;were&nbsp;</span><span style="color: #9876AA">$val</span><span style="color: #DD0000">&nbsp;instance(s)&nbsp;of&nbsp;\""&nbsp;</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">chr</span><span style="color: #007700">(</span><span style="color: #9876AA">$i</span><span style="color: #007700">)&nbsp;,&nbsp;</span><span style="color: #DD0000">"\"&nbsp;in&nbsp;the&nbsp;string.\n"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen"> <div class="cdata"><pre> There were 4 instance(s) of &quot; &quot; in the string. There were 1 instance(s) of &quot;.&quot; in the string. There were 1 instance(s) of &quot;F&quot; in the string. There were 2 instance(s) of &quot;T&quot; in the string. There were 1 instance(s) of &quot;a&quot; in the string. There were 1 instance(s) of &quot;d&quot; in the string. There were 1 instance(s) of &quot;e&quot; in the string. There were 2 instance(s) of &quot;n&quot; in the string. There were 2 instance(s) of &quot;o&quot; in the string. There were 1 instance(s) of &quot;s&quot; in the string. There were 1 instance(s) of &quot;w&quot; in the string. </pre></div>     </div>    </div>   </p>  </div>    <div class="refsect1 seealso" id="refsect1-function.count-chars-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link strpos()} - 查找字符串首次出现的位置</span></li>     <li class="member"><span class="function">{@link substr_count()} - 计算字串出现的次数</span></li>    </ul>   </p>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.strings.php">字符串 函数</a></div></div>
 * @return mixed Depending on mode*/
function count_chars ($string, $mode = null) {}

/**
*<div id="function.chunk-split" class="refentry">  <div class="refnamediv">   <h1 class="refname">chunk_split</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">chunk_split</span> &mdash; <span class="dc-title">将字符串分割成小块</span></p>   </div>  <div class="refsect1 description" id="refsect1-function.chunk-split-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">string</span> <span class="methodname"><strong>chunk_split</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$body</code></span>    [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$chunklen</code><span class="initializer"> = 76</span></span>    [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$end</code><span class="initializer"> = &quot;\r\n&quot;</span></span>   ]] )</div>    <p class="para rdfs-comment">    使用此函数将字符串分割成小块非常有用。例如将    <span class="function">{@link base64_encode()}</span> 的输出转换成符合 RFC 2045 语义的字符串。它会在每    <code class="parameter">chunklen</code> 个字符后边插入    <code class="parameter">end</code>。   </p>  </div>     <div class="refsect1 parameters" id="refsect1-function.chunk-split-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">body</code></dt>       <dd>        <p class="para">        要分割的字符。       </p>      </dd>                 <dt> <code class="parameter">chunklen</code></dt>       <dd>        <p class="para">        分割的尺寸。       </p>      </dd>                 <dt> <code class="parameter">end</code></dt>       <dd>        <p class="para">        行尾序列符号。       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.chunk-split-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回分割后的字符。   </p>  </div>    <div class="refsect1 examples" id="refsect1-function.chunk-split-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-5889">     <p><strong>Example #1 <span class="function"><strong>chunk_split()</strong></span>  例子</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">//&nbsp;使用&nbsp;RFC&nbsp;2045&nbsp;语义格式化&nbsp;$data<br /></span><span style="color: #9876AA">$new_string&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">chunk_split</span><span style="color: #007700">(</span><span style="color: #9876AA">base64_encode</span><span style="color: #007700">(</span><span style="color: #9876AA">$data</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>     </div>   </p>  </div>     <div class="refsect1 seealso" id="refsect1-function.chunk-split-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link str_split()} - 将字符串转换为数组</span></li>     <li class="member"><span class="function">{@link explode()} - 使用一个字符串分割另一个字符串</span></li>     <li class="member"><span class="function">{@link split()} - 用正则表达式将字符串分割到数组中</span></li>     <li class="member"><span class="function">{@link wordwrap()} - 打断字符串为指定数量的字串</span></li>     <li class="member"><a href="http://www.faqs.org/rfcs/rfc2045" class="link external">&raquo;&nbsp;RFC 2045</a></li>    </ul>   </p>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.strings.php">字符串 函数</a></div></div>
 * @return string the chunked string.*/
function chunk_split ($body, $chunklen = null, $end = null) {}

/**
*<div id="function.trim" class="refentry">  <div class="refnamediv">   <h1 class="refname">trim</h1>    <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">trim</span> &mdash; <span class="dc-title">去除字符串首尾处的空白字符（或者其他字符）</span></p>   </div>   <div class="refsect1 description" id="refsect1-function.trim-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">string</span> <span class="methodname"><strong>trim</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>    [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$character_mask</code><span class="initializer"> = &quot; \t\n\r\0\x0B&quot;</span></span>   ] )</div>    <p class="para rdfs-comment">    此函数返回字符串 <code class="parameter">str</code> 去除首尾空白字符后的结果。如果不指定第二个参数，<span class="function"><strong>trim()</strong></span> 将去除这些字符：        <ul class="itemizedlist">     <li class="listitem">      <span class="simpara">       &quot; &quot; (<acronym title="American Standard Code for Information Interchange">ASCII</acronym> <em>32</em>        (<em>0x20</em>))，普通空格符。      </span>     </li>     <li class="listitem">      <span class="simpara">       &quot;\t&quot; (<acronym title="American Standard Code for Information Interchange">ASCII</acronym> <em>9</em>        (<em>0x09</em>))，制表符。      </span>     </li>     <li class="listitem">      <span class="simpara">       &quot;\n&quot; (<acronym title="American Standard Code for Information Interchange">ASCII</acronym> <em>10</em>        (<em>0x0A</em>))，换行符。      </span>     </li>     <li class="listitem">      <span class="simpara">       &quot;\r&quot; (<acronym title="American Standard Code for Information Interchange">ASCII</acronym> <em>13</em>        (<em>0x0D</em>))，回车符。      </span>     </li>     <li class="listitem">      <span class="simpara">       &quot;\0&quot; (<acronym title="American Standard Code for Information Interchange">ASCII</acronym> <em>0</em>        (<em>0x00</em>))，空字节符。      </span>     </li>     <li class="listitem">      <span class="simpara">        &quot;\x0B&quot; (<acronym title="American Standard Code for Information Interchange">ASCII</acronym> <em>11</em>        (<em>0x0B</em>))，垂直制表符。      </span>     </li>    </ul>   </p>  </div>    <div class="refsect1 parameters" id="refsect1-function.trim-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">str</code></dt>       <dd>        <p class="para">        待处理的<span class="type"><span class="type 字符串">字符串</span></span>。       </p>      </dd>                 <dt> <code class="parameter">character_mask</code></dt>       <dd>        <p class="para">       可选参数，过滤字符也可由 <code class="parameter">character_mask</code> 参数指定。一般要列出所有希望过滤的字符，也可以使用 “<em>..</em>” 列出一个字符范围。       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.trim-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    过滤后的字符串。   </p>  </div>    <div class="refsect1 examples" id="refsect1-function.trim-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-5995">     <p><strong>Example #1 <span class="function"><strong>trim()</strong></span> 使用范例</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /><br />$text&nbsp;&nbsp;&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">"\t\tThese&nbsp;are&nbsp;a&nbsp;few&nbsp;words&nbsp;:)&nbsp;...&nbsp;&nbsp;"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$binary&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">"\x09Example&nbsp;string\x0A"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$hello&nbsp;&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">"Hello&nbsp;World"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$text</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$binary</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$hello</span><span style="color: #007700">);<br /><br />print&nbsp;</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">$trimmed&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">trim</span><span style="color: #007700">(</span><span style="color: #9876AA">$text</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$trimmed</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$trimmed&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">trim</span><span style="color: #007700">(</span><span style="color: #9876AA">$text</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"&nbsp;\t."</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$trimmed</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$trimmed&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">trim</span><span style="color: #007700">(</span><span style="color: #9876AA">$hello</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"Hdle"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$trimmed</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">//&nbsp;清除&nbsp;$binary&nbsp;首位的&nbsp;ASCII&nbsp;控制字符<br />//&nbsp;（包括&nbsp;0-31）<br /></span><span style="color: #9876AA">$clean&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">trim</span><span style="color: #007700">(</span><span style="color: #9876AA">$binary</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"\x00..\x1F"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$clean</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen"> <div class="cdata"><pre> string(32) &quot;        These are a few words :) ...  &quot; string(16) &quot;    Example string &quot; string(11) &quot;Hello World&quot;  string(28) &quot;These are a few words :) ...&quot; string(24) &quot;These are a few words :)&quot; string(5) &quot;o Wor&quot; string(14) &quot;Example string&quot; </pre></div>     </div>    </div>   </p>   <p class="para">    <div class="example" id="example-5996">     <p><strong>Example #2 使用 <span class="function"><strong>trim()</strong></span> 清理数组值</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function&nbsp;</span><span style="color: #9876AA">trim_value</span><span style="color: #007700">(&amp;</span><span style="color: #9876AA">$value</span><span style="color: #007700">)&nbsp;<br />{&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$value&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">trim</span><span style="color: #007700">(</span><span style="color: #9876AA">$value</span><span style="color: #007700">);&nbsp;<br />}<br /><br /></span><span style="color: #9876AA">$fruit&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">'apple'</span><span style="color: #007700">,</span><span style="color: #DD0000">'banana&nbsp;'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'&nbsp;cranberry&nbsp;'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$fruit</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">array_walk</span><span style="color: #007700">(</span><span style="color: #9876AA">$fruit</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'trim_value'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$fruit</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen"> <div class="cdata"><pre> array(3) {   [0]=&gt;   string(5) &quot;apple&quot;   [1]=&gt;   string(7) &quot;banana &quot;   [2]=&gt;   string(11) &quot; cranberry &quot; } array(3) {   [0]=&gt;   string(5) &quot;apple&quot;   [1]=&gt;   string(6) &quot;banana&quot;   [2]=&gt;   string(9) &quot;cranberry&quot; }  </pre></div>     </div>    </div>   </p>  </div>     <div class="refsect1 notes" id="refsect1-function.trim-notes">   <h3 class="title">注释</h3>   <blockquote class="note"><p><strong class="note">Note</strong>:     <strong>Possible gotcha: removing middle characters</strong><br />    <p class="para">     Because <span class="function"><strong>trim()</strong></span> trims characters from the beginning and end of     a <span class="type"><a href="http://php.net/manual/zh/language.types.string.php" class="type string">string</a></span>, it may be confusing when characters are (or are not) removed from     the middle. <em>trim(&#039;abc&#039;, &#039;bad&#039;)</em> removes both &#039;a&#039; and &#039;b&#039; because it     trims &#039;a&#039; thus moving &#039;b&#039; to the beginning to also be trimmed. So, this is why it &quot;works&quot;     whereas <em>trim(&#039;abc&#039;, &#039;b&#039;)</em> seemingly does not.    </p>   </p></blockquote>  </div>    <div class="refsect1 seealso" id="refsect1-function.trim-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link ltrim()} - 删除字符串开头的空白字符（或其他字符）</span></li>     <li class="member"><span class="function">{@link rtrim()} - 删除字符串末端的空白字符（或者其他字符）</span></li>     <li class="member"><span class="function">{@link str_replace()} - 子字符串替换</span></li>    </ul>   </p>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.strings.php">字符串 函数</a></div></div>
 * @return string The trimmed string.*/
function trim ($str, $charlist = " \t\n\r\0\x0B") {}

/**
*<div id="function.ltrim" class="refentry">  <div class="refnamediv">   <h1 class="refname">ltrim</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">ltrim</span> &mdash; <span class="dc-title">删除字符串开头的空白字符（或其他字符）</span></p>   </div>    <div class="refsect1 description" id="refsect1-function.ltrim-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">string</span> <span class="methodname"><strong>ltrim</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>    [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$character_mask</code></span>   ] )</div>    <p class="para rdfs-comment">    删除字符串开头的空白字符（或其他字符）   </p>  </div>    <div class="refsect1 parameters" id="refsect1-function.ltrim-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">str</code></dt>       <dd>        <p class="para">        输入的字符串。       </p>      </dd>                 <dt> <code class="parameter">character_mask</code></dt>       <dd>        <p class="para">        通过参数 <code class="parameter">character_mask</code>，你也可以指定想要删除的字符，简单地列出你想要删除的所有字符即可。使用<em>..</em>，可以指定字符的范围。       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.ltrim-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    该函数返回一个删除了 <code class="parameter">str</code> 最左边的空白字符的字符串。    如果不使用第二个参数，    <span class="function"><strong>ltrim()</strong></span> 仅删除以下字符：        <ul class="itemizedlist">     <li class="listitem">      <span class="simpara">       &quot; &quot; (<acronym title="American Standard Code for Information Interchange">ASCII</acronym> <em>32</em>       (<em>0x20</em>))，普通空白字符。      </span>     </li>     <li class="listitem">      <span class="simpara">       &quot;\t&quot; (<acronym title="American Standard Code for Information Interchange">ASCII</acronym> <em>9</em>       (<em>0x09</em>))， 制表符.      </span>     </li>     <li class="listitem">      <span class="simpara">       &quot;\n&quot; (<acronym title="American Standard Code for Information Interchange">ASCII</acronym> <em>10</em>       (<em>0x0A</em>))，换行符。      </span>     </li>     <li class="listitem">      <span class="simpara">       &quot;\r&quot; (<acronym title="American Standard Code for Information Interchange">ASCII</acronym> <em>13</em>       (<em>0x0D</em>))，回车符。      </span>     </li>     <li class="listitem">      <span class="simpara">       &quot;\0&quot; (<acronym title="American Standard Code for Information Interchange">ASCII</acronym> <em>0</em>       (<em>0x00</em>))， <em>NUL</em>空字节符。      </span>     </li>     <li class="listitem">      <span class="simpara">        &quot;\x0B&quot; (<acronym title="American Standard Code for Information Interchange">ASCII</acronym> <em>11</em>       (<em>0x0B</em>))，垂直制表符。      </span>     </li>    </ul>   </p>  </div>    <div class="refsect1 examples" id="refsect1-function.ltrim-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-5914">     <p><strong>Example #1 <span class="function"><strong>ltrim()</strong></span>的使用范例</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /><br />$text&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">"\t\tThese&nbsp;are&nbsp;a&nbsp;few&nbsp;words&nbsp;:)&nbsp;...&nbsp;&nbsp;"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$binary&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">"\x09Example&nbsp;string\x0A"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$hello&nbsp;&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">"Hello&nbsp;World"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$text</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$binary</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$hello</span><span style="color: #007700">);<br /><br />print&nbsp;</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /><br /><br /></span><span style="color: #9876AA">$trimmed&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">ltrim</span><span style="color: #007700">(</span><span style="color: #9876AA">$text</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$trimmed</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$trimmed&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">ltrim</span><span style="color: #007700">(</span><span style="color: #9876AA">$text</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"&nbsp;\t."</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$trimmed</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$trimmed&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">ltrim</span><span style="color: #007700">(</span><span style="color: #9876AA">$hello</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"Hdle"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$trimmed</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">//&nbsp;删除&nbsp;$binary&nbsp;开头的&nbsp;ASCII&nbsp;控制字符<br />//&nbsp;(从&nbsp;0&nbsp;到&nbsp;31，包括&nbsp;0&nbsp;和&nbsp;31)<br /></span><span style="color: #9876AA">$clean&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">ltrim</span><span style="color: #007700">(</span><span style="color: #9876AA">$binary</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"\x00..\x1F"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$clean</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen"> <div class="cdata"><pre> string(32) &quot;        These are a few words :) ...  &quot; string(16) &quot;    Example string &quot; string(11) &quot;Hello World&quot;  string(30) &quot;These are a few words :) ...  &quot; string(30) &quot;These are a few words :) ...  &quot; string(7) &quot;o World&quot; string(15) &quot;Example string &quot; </pre></div>     </div>    </div>   </p>  </div>    <div class="refsect1 seealso" id="refsect1-function.ltrim-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link trim()} - 去除字符串首尾处的空白字符（或者其他字符）</span></li>     <li class="member"><span class="function">{@link rtrim()} - 删除字符串末端的空白字符（或者其他字符）</span></li>    </ul>   </p>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.strings.php">字符串 函数</a></div></div>
 * @return string This function returns a string with whitespace stripped from the*/
function ltrim ($str, $charlist = " \t\n\r\0\x0B") {}

/**
*<div id="function.strip-tags" class="refentry">  <div class="refnamediv">   <h1 class="refname">strip_tags</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">strip_tags</span> &mdash; <span class="dc-title">从字符串中去除 HTML 和 PHP 标记</span></p>   </div>    <div class="refsect1 description" id="refsect1-function.strip-tags-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">string</span> <span class="methodname"><strong>strip_tags</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>    [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$allowable_tags</code></span>   ] )</div>    <p class="para rdfs-comment">    该函数尝试返回给定的字符串 <code class="parameter">str</code> 去除空字符、HTML 和 PHP 标记后的结果。它使用与函数 <span class="function">{@link fgetss()}</span> 一样的机制去除标记。   </p>  </div>    <div class="refsect1 parameters" id="refsect1-function.strip-tags-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">str</code></dt>       <dd>        <p class="para">        输入字符串。       </p>      </dd>                 <dt> <code class="parameter">allowable_tags</code></dt>       <dd>        <p class="para">        使用可选的第二个参数指定不被去除的字符列表。       </p>       <blockquote class="note"><p><strong class="note">Note</strong>:         <p class="para">         HTML 注释和 PHP 标签也会被去除。这里是硬编码处理的，所以无法通过 <code class="parameter">allowable_tags</code> 参数进行改变。        </p>       </p></blockquote>       <blockquote class="note"><p><strong class="note">Note</strong>:         <p class="para">         In PHP 5.3.4 and later, self-closing         XHTML tags are ignored and only non-self-closing tags should be used in         <code class="parameter">allowable_tags</code>. For example,         to allow both <em>&lt;br&gt;</em> and         <em>&lt;br/&gt;</em>, you should use:        </p>        <div class="informalexample">         <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />strip_tags</span><span style="color: #007700">(</span><span style="color: #9876AA">$input</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'&lt;br&gt;'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>         </div>         </div>       </p></blockquote>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.strip-tags-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回处理后的字符串。   </p>  </div>    <div class="refsect1 changelog" id="refsect1-function.strip-tags-changelog">   <h3 class="title">更新日志</h3>   <p class="para">    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>5.3.4</td>        <td>         <span class="function"><strong>strip_tags()</strong></span> ignores self-closing XHTML         tags in         <code class="parameter">allowable_tags</code>.        </td>       </tr>        <tr>        <td>5.0.0</td>        <td>         <span class="function"><strong>strip_tags()</strong></span> 变为二进制安全的。        </td>       </tr>       </tbody>         </table>    </p>  </div>    <div class="refsect1 examples" id="refsect1-function.strip-tags-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-5960">     <p><strong>Example #1 <span class="function"><strong>strip_tags()</strong></span> 范例</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$text&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'&lt;p&gt;Test&nbsp;paragraph.&lt;/p&gt;&lt;!--&nbsp;Comment&nbsp;--&gt;&nbsp;&lt;a&nbsp;href="#fragment"&gt;Other&nbsp;text&lt;/a&gt;'</span><span style="color: #007700">;<br />echo&nbsp;</span><span style="color: #9876AA">strip_tags</span><span style="color: #007700">(</span><span style="color: #9876AA">$text</span><span style="color: #007700">);<br />echo&nbsp;</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /><br /></span><span style="color: #FF8000">//&nbsp;允许&nbsp;&lt;p&gt;&nbsp;和&nbsp;&lt;a&gt;<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #9876AA">strip_tags</span><span style="color: #007700">(</span><span style="color: #9876AA">$text</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'&lt;p&gt;&lt;a&gt;'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen"> <div class="cdata"><pre> Test paragraph. Other text &lt;p&gt;Test paragraph.&lt;/p&gt; &lt;a href=&quot;#fragment&quot;&gt;Other text&lt;/a&gt; </pre></div>     </div>    </div>   </p>  </div>    <div class="refsect1 notes" id="refsect1-function.strip-tags-notes">   <h3 class="title">注释</h3>   <div class="warning"><strong class="warning">Warning</strong>    <p class="para">     由于 <span class="function"><strong>strip_tags()</strong></span> 无法实际验证 HTML，不完整或者破损标签将导致更多的数据被删除。    </p>   </div>   <div class="warning"><strong class="warning">Warning</strong>    <p class="para">     该函数不会修改 <code class="parameter">allowable_tags</code> 参数中指定的允许标记的任何属性，包括 <em>style</em> 和 <em>onmouseover</em> 属性，用户可能会在提交的内容中恶意滥用这些属性，从而展示给其他用户。    </p>   </div>   <blockquote class="note"><p><strong class="note">Note</strong>:     <p class="para">     输入 HTML 标签名字如果大于 1023 字节(bytes)将会被认为是无效的，无论     <code class="parameter">allowable_tags</code> 参数是怎样的。    </p>   </p></blockquote>  </div>    <div class="refsect1 seealso" id="refsect1-function.strip-tags-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link htmlspecialchars()} - 将特殊字符转换为 HTML 实体</span></li>    </ul>   </p>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.strings.php">字符串 函数</a></div></div>
 * @return string the stripped string.*/
function strip_tags ($str, $allowable_tags = null) {}

/**
*<div id="function.similar-text" class="refentry">  <div class="refnamediv">   <h1 class="refname">similar_text</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">similar_text</span> &mdash; <span class="dc-title">计算两个字符串的相似度</span></p>   </div>    <div class="refsect1 description" id="refsect1-function.similar-text-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">int</span> <span class="methodname"><strong>similar_text</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$first</code></span>    , <span class="methodparam"><span class="type">string</span> <code class="parameter">$second</code></span>    [, <span class="methodparam"><span class="type">float</span> <code class="parameter reference">&$percent</code></span>   ] )</div>    <p class="para rdfs-comment">    两个字符串的相似程度计算依据 Programming Classics: Implementing the World&#039;s Best Algorithms by Oliver (ISBN 0-131-00413-1)  的描述进行。注意该实现没有使用 Oliver 虚拟码中的堆栈，但是却进行了递归调用，这个做法可能会导致整个过程变慢或变快。也请注意，该算法的复杂度是 O(N**3)，N 是最长字符串的长度。   </p>  </div>    <div class="refsect1 parameters" id="refsect1-function.similar-text-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">first</code></dt>       <dd>        <p class="para">        第一个字符串。       </p>      </dd>                 <dt> <code class="parameter">second</code></dt>       <dd>        <p class="para">        第二个字符串。       </p>      </dd>                 <dt> <code class="parameter">percent</code></dt>       <dd>        <p class="para">        通过引用方式传递第三个参数，<span class="function"><strong>similar_text()</strong></span> 将计算相似程度百分数。       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.similar-text-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回在两个字符串中匹配字符的数目。   </p>  </div>    <div class="refsect1 seealso" id="refsect1-function.similar-text-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link levenshtein()} - 计算两个字符串之间的编辑距离</span></li>     <li class="member"><span class="function">{@link soundex()} - Calculate the soundex key of a string</span></li>    </ul>   </p>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.strings.php">字符串 函数</a></div></div>
 * @return int the number of matching chars in both strings.*/
function similar_text ($first, $second, &$percent = null) {}

/**
*<div id="function.explode" class="refentry">  <div class="refnamediv">   <h1 class="refname">explode</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">explode</span> &mdash; <span class="dc-title">使用一个字符串分割另一个字符串</span></p>    </div>    <div class="refsect1 description" id="refsect1-function.explode-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">array</span> <span class="methodname"><strong>explode</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$delimiter</code></span>    , <span class="methodparam"><span class="type">string</span> <code class="parameter">$string</code></span>    [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$limit</code></span>   ] )</div>    <p class="para rdfs-comment">    此函数返回由字符串组成的数组，每个元素都是    <code class="parameter">string</code>    的一个子串，它们被字符串    <code class="parameter">delimiter</code>    作为边界点分割出来。   </p>  </div>    <div class="refsect1 parameters" id="refsect1-function.explode-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">delimiter</code></dt>       <dd>        <p class="para">        边界上的分隔字符。       </p>      </dd>                 <dt> <code class="parameter">string</code></dt>       <dd>        <p class="para">        输入的字符串。       </p>      </dd>                 <dt> <code class="parameter">limit</code></dt>       <dd>        <p class="para">        如果设置了    <code class="parameter">limit</code>    参数并且是正数，则返回的数组包含最多    <code class="parameter">limit</code>    个元素，而最后那个元素将包含    <code class="parameter">string</code>    的剩余部分。       </p>       <p class="para">        如果   <code class="parameter">limit</code>   参数是负数，则返回除了最后的   -<code class="parameter">limit</code>   个元素外的所有元素。       </p>       <p class="para">        如果 <code class="parameter">limit</code> 是 0，则会被当做 1。       </p>      </dd>          </dl>    </p>   <p class="para">    由于历史原因，虽然 <span class="function">{@link implode()}</span>   可以接收两种参数顺序，但是   <span class="function"><strong>explode()</strong></span> 不行。你必须保证   <code class="parameter">separator</code> 参数在   <code class="parameter">string</code> 参数之前才行。   </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.explode-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    此函数返回由字符串组成的 <span class="type"><a href="http://php.net/manual/zh/language.types.array.php" class="type array">array</a></span>，每个元素都是    <code class="parameter">string</code>    的一个子串，它们被字符串    <code class="parameter">delimiter</code>    作为边界点分割出来。   </p>   <p class="para">    如果 <code class="parameter">delimiter</code>    为空字符串（&quot;&quot;），<span class="function"><strong>explode()</strong></span>    将返回 <strong><code>FALSE</code></strong>。    如果    <code class="parameter">delimiter</code>    所包含的值在    <code class="parameter">string</code>    中找不到，并且使用了负数的 <code class="parameter">limit</code> ，    那么会返回空的 <span class="type"><a href="http://php.net/manual/zh/language.types.array.php" class="type array">array</a></span>，    否则返回包含 <code class="parameter">string</code>    单个元素的数组。   </p>  </div>    <div class="refsect1 changelog" id="refsect1-function.explode-changelog">   <h3 class="title">更新日志</h3>   <p class="para">    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>5.1.0</td>        <td>         支持负数的  <code class="parameter">limit</code>        </td>       </tr>        <tr>        <td>4.0.1</td>        <td>           增加了参数 <code class="parameter">limit</code>        </td>       </tr>       </tbody>         </table>    </p>  </div>    <div class="refsect1 examples" id="refsect1-function.explode-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-5898">     <p><strong>Example #1 <span class="function"><strong>explode()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">//&nbsp;示例&nbsp;1<br /></span><span style="color: #9876AA">$pizza&nbsp;&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">"piece1&nbsp;piece2&nbsp;piece3&nbsp;piece4&nbsp;piece5&nbsp;piece6"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$pieces&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">explode</span><span style="color: #007700">(</span><span style="color: #DD0000">"&nbsp;"</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$pizza</span><span style="color: #007700">);<br />echo&nbsp;</span><span style="color: #9876AA">$pieces</span><span style="color: #007700">[</span><span style="color: #9876AA">0</span><span style="color: #007700">];&nbsp;</span><span style="color: #FF8000">//&nbsp;piece1<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #9876AA">$pieces</span><span style="color: #007700">[</span><span style="color: #9876AA">1</span><span style="color: #007700">];&nbsp;</span><span style="color: #FF8000">//&nbsp;piece2<br /><br />//&nbsp;示例&nbsp;2<br /></span><span style="color: #9876AA">$data&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">"foo:*:1023:1000::/home/foo:/bin/sh"</span><span style="color: #007700">;<br />list(</span><span style="color: #9876AA">$user</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$pass</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$uid</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$gid</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$gecos</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$home</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$shell</span><span style="color: #007700">)&nbsp;=&nbsp;</span><span style="color: #9876AA">explode</span><span style="color: #007700">(</span><span style="color: #DD0000">":"</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$data</span><span style="color: #007700">);<br />echo&nbsp;</span><span style="color: #9876AA">$user</span><span style="color: #007700">;&nbsp;</span><span style="color: #FF8000">//&nbsp;foo<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #9876AA">$pass</span><span style="color: #007700">;&nbsp;</span><span style="color: #FF8000">//&nbsp;*<br /><br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>     </div>   </p>     <p class="para">    <div class="example" id="example-5899">     <p><strong>Example #2 <span class="function"><strong>explode()</strong></span> return examples</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">//&nbsp;A&nbsp;string&nbsp;that&nbsp;doesn't&nbsp;contain&nbsp;the&nbsp;delimiter&nbsp;will&nbsp;simply&nbsp;return&nbsp;a&nbsp;one-length&nbsp;array&nbsp;of&nbsp;the&nbsp;original&nbsp;string.&nbsp;<br /></span><span style="color: #9876AA">$input1&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">"hello"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$input2&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">"hello,there"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(&nbsp;</span><span style="color: #9876AA">explode</span><span style="color: #007700">(&nbsp;</span><span style="color: #DD0000">','</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$input1&nbsp;</span><span style="color: #007700">)&nbsp;);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(&nbsp;</span><span style="color: #9876AA">explode</span><span style="color: #007700">(&nbsp;</span><span style="color: #DD0000">','</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$input2&nbsp;</span><span style="color: #007700">)&nbsp;);<br /><br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen"> <div class="cdata"><pre> array(1) (     [0] =&gt; string(5) &quot;hello&quot; ) array(2) (     [0] =&gt; string(5) &quot;hello&quot;     [1] =&gt; string(5) &quot;there&quot; ) </pre></div>     </div>    </div>   </p>   <p class="para">    <div class="example" id="example-5900">     <p><strong>Example #3 <code class="parameter">limit</code> 参数的例子</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$str&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'one|two|three|four'</span><span style="color: #007700">;<br /><br /></span><span style="color: #FF8000">//&nbsp;正数的&nbsp;limit<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">explode</span><span style="color: #007700">(</span><span style="color: #DD0000">'|'</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$str</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">2</span><span style="color: #007700">));<br /><br /></span><span style="color: #FF8000">//&nbsp;负数的&nbsp;limit（自&nbsp;PHP&nbsp;5.1&nbsp;起）<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">explode</span><span style="color: #007700">(</span><span style="color: #DD0000">'|'</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$str</span><span style="color: #007700">,&nbsp;-</span><span style="color: #9876AA">1</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen"> <div class="cdata"><pre> Array (     [0] =&gt; one     [1] =&gt; two|three|four ) Array (     [0] =&gt; one     [1] =&gt; two     [2] =&gt; three ) </pre></div>     </div>    </div>   </p>  </div>    <div class="refsect1 notes" id="refsect1-function.explode-notes">   <h3 class="title">注释</h3>   <blockquote class="note"><p><strong class="note">Note</strong>: <span class="simpara">此函数可安全用于二进制对象。</span></p></blockquote>  </div>    <div class="refsect1 seealso" id="refsect1-function.explode-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link preg_split()} - 通过一个正则表达式分隔字符串</span></li>     <li class="member"><span class="function">{@link str_split()} - 将字符串转换为数组</span></li>     <li class="member"><span class="function">{@link mb_split()} - 使用正则表达式分割多字节字符串</span></li>     <li class="member"><span class="function">{@link str_word_count()} - 返回字符串中单词的使用情况</span></li>     <li class="member"><span class="function">{@link strtok()} - 标记分割字符串</span></li>     <li class="member"><span class="function">{@link implode()} - 将一个一维数组的值转化为字符串</span></li>    </ul>   </p>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.strings.php">字符串 函数</a></div></div>
 * @return array If delimiter is an empty string (""),*/
function explode ($delimiter, $string, $limit = null) {}

/**
*<div id="function.implode" class="refentry">  <div class="refnamediv">   <h1 class="refname">implode</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">implode</span> &mdash; <span class="dc-title">将一个一维数组的值转化为字符串</span></p>   </div>    <div class="refsect1 description" id="refsect1-function.implode-description">   <h3 class="title">说明</h3>    <div class="methodsynopsis dc-description">    <span class="type">string</span> <span class="methodname"><strong>implode</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$glue</code></span>    , <span class="methodparam"><span class="type">array</span> <code class="parameter">$pieces</code></span>    )</div>    <div class="methodsynopsis dc-description">    <span class="type">string</span> <span class="methodname"><strong>implode</strong></span>     ( <span class="methodparam"><span class="type">array</span> <code class="parameter">$pieces</code></span>    )</div>    <p class="para rdfs-comment">    用 <code class="parameter">glue</code> 将一维数组的值连接为一个字符串。   </p>   <blockquote class="note"><p><strong class="note">Note</strong>:     <p class="para">     因为历史原因，<span class="function"><strong>implode()</strong></span> 可以接收两种参数顺序，但是 <span class="function">{@link explode()}</span> 不行。不过按文档中的顺序可以避免混淆。    </p>   </p></blockquote>  </div>    <div class="refsect1 parameters" id="refsect1-function.implode-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">glue</code></dt>       <dd>        <p class="para">        默认为空的字符串。       </p>      </dd>                 <dt> <code class="parameter">pieces</code></dt>       <dd>        <p class="para">        你想要转换的数组。       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.implode-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回一个字符串，其内容为由 glue 分割开的数组的值。   </p>  </div>    <div class="refsect1 examples" id="refsect1-function.implode-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-5910">     <p><strong>Example #1 <span class="function"><strong>implode()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /><br />$array&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">'lastname'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'email'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'phone'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$comma_separated&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">implode</span><span style="color: #007700">(</span><span style="color: #DD0000">","</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$array</span><span style="color: #007700">);<br /><br />echo&nbsp;</span><span style="color: #9876AA">$comma_separated</span><span style="color: #007700">;&nbsp;</span><span style="color: #FF8000">//&nbsp;lastname,email,phone<br /><br />//&nbsp;Empty&nbsp;string&nbsp;when&nbsp;using&nbsp;an&nbsp;empty&nbsp;array:<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">implode</span><span style="color: #007700">(</span><span style="color: #DD0000">'hello'</span><span style="color: #007700">,&nbsp;array()));&nbsp;</span><span style="color: #FF8000">//&nbsp;string(0)&nbsp;""<br /><br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>     </div>      </p>  </div>    <div class="refsect1 notes" id="refsect1-function.implode-notes">   <h3 class="title">注释</h3>   <blockquote class="note"><p><strong class="note">Note</strong>: <span class="simpara">此函数可安全用于二进制对象。</span></p></blockquote>  </div>    <div class="refsect1 seealso" id="refsect1-function.implode-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link explode()} - 使用一个字符串分割另一个字符串</span></li>     <li class="member"><span class="function">{@link preg_split()} - 通过一个正则表达式分隔字符串</span></li>     <li class="member"><span class="function">{@link http_build_query()} - 生成 URL-encode 之后的请求字符串</span></li>    </ul>   </p>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.strings.php">字符串 函数</a></div></div>
 * @return string a string containing a string representation of all the array*/
function implode ($glue = "", array $pieces) {}

/**
*<div id="function.join" class="refentry">  <div class="refnamediv">   <h1 class="refname">join</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">join</span> &mdash; <span class="dc-title">别名 <span class="function">{@link implode()}</span></span></p>   </div>   <div class="refsect1 description" id="refsect1-function.join-description">   <h3 class="title">说明</h3>   <p class="simpara">    此函数是该函数的别名：    <span class="function">{@link implode()}</span>.   </p>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.strings.php">字符串 函数</a></div></div>
 * @return string a string containing a string representation of all the array*/
function join ($glue = "", $pieces) {}

/**
*<div id="function.setlocale" class="refentry">  <div class="refnamediv">   <h1 class="refname">setlocale</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">setlocale</span> &mdash; <span class="dc-title">设置地区信息</span></p>   </div>    <div class="refsect1 description" id="refsect1-function.setlocale-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">string</span> <span class="methodname"><strong>setlocale</strong></span>     ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$category</code></span>    , <span class="methodparam"><span class="type">string</span> <code class="parameter">$locale</code></span>    [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$...</code></span>   ] )</div>    <div class="methodsynopsis dc-description">    <span class="type">string</span> <span class="methodname"><strong>setlocale</strong></span>     ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$category</code></span>    , <span class="methodparam"><span class="type">array</span> <code class="parameter">$locale</code></span>    )</div>    <p class="para rdfs-comment">    设置地区信息。   </p>  </div>    <div class="refsect1 parameters" id="refsect1-function.setlocale-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">category</code></dt>       <dd>        <p class="para">        <code class="parameter">category</code> 命名常量指定的受区域设置的功能类别:        <ul class="itemizedlist">         <li class="listitem">          <span class="simpara">           <strong><code>LC_ALL</code></strong> 所有的设置          </span>         </li>         <li class="listitem">          <span class="simpara">           <strong><code>LC_COLLATE</code></strong> 字符串比较, 详见           <span class="function">{@link strcoll()}</span>          </span>         </li>         <li class="listitem">          <span class="simpara">           <strong><code>LC_CTYPE</code></strong> 字符串的分类与转换, 参见例子           <span class="function">{@link strtoupper()}</span>          </span>         </li>         <li class="listitem">          <span class="simpara">           <strong><code>LC_MONETARY</code></strong> 等同 <span class="function">{@link localeconv()}</span>          </span>         </li>         <li class="listitem">          <span class="simpara">           <strong><code>LC_NUMERIC</code></strong> 对于小数点的分隔 (另请参见           <span class="function">{@link localeconv()}</span>)          </span>         </li>         <li class="listitem">          <span class="simpara">           <strong><code>LC_TIME</code></strong> 时间与格式           <span class="function">{@link strftime()}</span>          </span>         </li>         <li class="listitem">          <span class="simpara">           <strong><code>LC_MESSAGES</code></strong> 系统响应 (如果PHP使用<em>libintl</em>编译)          </span>         </li>        </ul>       </p>      </dd>                 <dt> <code class="parameter">locale</code></dt>       <dd>        <p class="para">        If <code class="parameter">locale</code> is <strong><code>NULL</code></strong> or the empty string        <em>&quot;&quot;</em>, the locale names will be set from the        values of environment variables with the same names as the above        categories, or from &quot;LANG&quot;.       </p>       <p class="para">        If <code class="parameter">locale</code> is <em>&quot;0&quot;</em>,        the locale setting is not affected, only the current setting is returned.       </p>       <p class="para">        If <code class="parameter">locale</code> is an array or followed by additional        parameters then each array element or parameter is tried to be set as        new locale until success. This is useful if a locale is known under        different names on different systems or for providing a fallback        for a possibly not available locale.       </p>      </dd>                 <dt> <code class="parameter">...</code></dt>       <dd>        <p class="para">        (可使用字符串或数组参数进行尝试直到设置成功。)       </p>      </dd>          </dl>     <blockquote class="note"><p><strong class="note">Note</strong>:      <p class="para">      在Windows中，setlocale(LC_ALL, &#039;&#039;)要从系统中的区域/语言设置(通过控制面板访问) 。     </p>    </p></blockquote>   </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.setlocale-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    Returns the new current locale, or <strong><code>FALSE</code></strong> if the locale functionality is    not implemented on your platform, the specified locale does not exist or    the category name is invalid.   </p>   <p class="para">    An invalid category name also causes a warning message. Category/locale    names can be found in <a href="http://www.faqs.org/rfcs/rfc1766" class="link external">&raquo;&nbsp;RFC 1766</a>    and <a href="http://www.w3.org/WAI/ER/IG/ert/iso639.htm" class="link external">&raquo;&nbsp;ISO 639</a>.    Different systems have different naming schemes for locales.   </p>   <blockquote class="note"><p><strong class="note">Note</strong>:     <p class="para">     The return value of <span class="function"><strong>setlocale()</strong></span> depends     on the system that PHP is running.  It returns exactly     what the system <em>setlocale</em> function returns.    </p>   </p></blockquote>  </div>    <div class="refsect1 changelog" id="refsect1-function.setlocale-changelog">   <h3 class="title">更新日志</h3>   <p class="para">    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>5.3.0</td>        <td>         This function now throws an <strong><code>E_DEPRECATED</code></strong> notice if a string is passed          to the <code class="parameter">category</code> parameter instead of one of the          <em>LC_*</em> constants.        </td>       </tr>       </tbody>         </table>    </p>  </div>    <div class="refsect1 examples" id="refsect1-function.setlocale-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="metaphone.example.basic">     <p><strong>Example #1 <span class="function"><strong>setlocale()</strong></span> Examples</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">//&nbsp;Set&nbsp;locale&nbsp;to&nbsp;Dutch&nbsp;<br /></span><span style="color: #9876AA">setlocale</span><span style="color: #007700">(</span><span style="color: #9876AA">LC_ALL</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'nl_NL'</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">//&nbsp;Output:&nbsp;vrijdag&nbsp;22&nbsp;december&nbsp;1978&nbsp;<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #9876AA">strftime</span><span style="color: #007700">(</span><span style="color: #DD0000">"%A&nbsp;%e&nbsp;%B&nbsp;%Y"</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">mktime</span><span style="color: #007700">(</span><span style="color: #9876AA">0</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">0</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">0</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">12</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">22</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">1978</span><span style="color: #007700">));<br /><br /></span><span style="color: #FF8000">//&nbsp;try&nbsp;different&nbsp;possible&nbsp;locale&nbsp;names&nbsp;for&nbsp;german&nbsp;as&nbsp;of&nbsp;PHP&nbsp;4.3.0&nbsp;<br /></span><span style="color: #9876AA">$loc_de&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">setlocale</span><span style="color: #007700">(</span><span style="color: #9876AA">LC_ALL</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'de_DE@euro'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'de_DE'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'de'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'ge'</span><span style="color: #007700">);<br />echo&nbsp;</span><span style="color: #DD0000">"Preferred&nbsp;locale&nbsp;for&nbsp;german&nbsp;on&nbsp;this&nbsp;system&nbsp;is&nbsp;'</span><span style="color: #9876AA">$loc_de</span><span style="color: #DD0000">'"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>     </div>   </p>   <p class="para">    <div class="example" id="metaphone.example.phonemes">     <p><strong>Example #2 <span class="function"><strong>setlocale()</strong></span> Examples for Windows</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">//&nbsp;Set&nbsp;locale&nbsp;to&nbsp;Dutch&nbsp;<br /></span><span style="color: #9876AA">setlocale</span><span style="color: #007700">(</span><span style="color: #9876AA">LC_ALL</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'nld_nld'</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">//&nbsp;Output:&nbsp;vrijdag&nbsp;22&nbsp;december&nbsp;1978&nbsp;<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #9876AA">strftime</span><span style="color: #007700">(</span><span style="color: #DD0000">"%A&nbsp;%d&nbsp;%B&nbsp;%Y"</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">mktime</span><span style="color: #007700">(</span><span style="color: #9876AA">0</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">0</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">0</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">12</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">22</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">1978</span><span style="color: #007700">));<br /><br /></span><span style="color: #FF8000">//&nbsp;try&nbsp;different&nbsp;possible&nbsp;locale&nbsp;names&nbsp;for&nbsp;german&nbsp;as&nbsp;of&nbsp;PHP&nbsp;4.3.0&nbsp;<br /></span><span style="color: #9876AA">$loc_de&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">setlocale</span><span style="color: #007700">(</span><span style="color: #9876AA">LC_ALL</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'de_DE@euro'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'de_DE'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'deu_deu'</span><span style="color: #007700">);<br />echo&nbsp;</span><span style="color: #DD0000">"Preferred&nbsp;locale&nbsp;for&nbsp;german&nbsp;on&nbsp;this&nbsp;system&nbsp;is&nbsp;'</span><span style="color: #9876AA">$loc_de</span><span style="color: #DD0000">'"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>     </div>   </p>  </div>    <div class="refsect1 notes" id="refsect1-function.setlocale-notes">   <h3 class="title">注释</h3>   <div class="warning"><strong class="warning">Warning</strong>    <p class="para">     The locale information is maintained per process, not per thread. If you     are running PHP on a multithreaded server API like IIS or Apache on     Windows, you may experience sudden changes in locale settings while a     script is running, though the script itself never called      <span class="function"><strong>setlocale()</strong></span>. This happens due to other scripts     running in different threads of the same process at the same time,     changing the process-wide locale using <span class="function"><strong>setlocale()</strong></span>.    </p>   </div>   <div class="tip"><strong class="tip">Tip</strong>    <p class="para">     Windows users will find useful information about     <code class="parameter">locale</code> strings at Microsoft&#039;s     <acronym title="Microsoft Developer Network">MSDN</acronym> website. Supported language strings can be found     in the     <a href="http://msdn.microsoft.com/en-us/library/39cwe7zf%28v=vs.90%29.aspx" class="link external">&raquo;&nbsp;language strings documentation</a>     and supported country/region strings in the     <a href="http://msdn.microsoft.com/en-us/library/cdax410z%28v=vs.90%29.aspx" class="link external">&raquo;&nbsp;country/region strings documentation</a>.    </p>   </div>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.strings.php">字符串 函数</a></div></div>
 * @return string the new current locale, or false if the locale functionality is*/
function setlocale ($category, $locale, $_ = null) {}

/**
*<div id="function.localeconv" class="refentry">  <div class="refnamediv">   <h1 class="refname">localeconv</h1>   <p class="verinfo">(PHP 4 &gt;= 4.0.5, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">localeconv</span> &mdash; <span class="dc-title">Get numeric formatting information</span></p>   </div>    <div class="refsect1 description" id="refsect1-function.localeconv-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">array</span> <span class="methodname"><strong>localeconv</strong></span>     ( <span class="methodparam">void</span>    )</div>    <p class="para rdfs-comment">    Returns an associative array containing localized numeric and    monetary formatting information.   </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.localeconv-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    <span class="function"><strong>localeconv()</strong></span> returns data based upon the current locale    as set by <span class="function">{@link setlocale()}</span>.  The associative array that is    returned contains the following fields:    <table class="doctable informaltable">           <thead>       <tr>        <th>Array element</th>        <th>Description</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>decimal_point</td>        <td>Decimal point character</td>       </tr>        <tr>        <td>thousands_sep</td>        <td>Thousands separator</td>       </tr>        <tr>        <td>grouping</td>        <td>Array containing numeric groupings</td>       </tr>        <tr>        <td>int_curr_symbol</td>        <td>International currency symbol (i.e. USD)</td>       </tr>        <tr>        <td>currency_symbol</td>        <td>Local currency symbol (i.e. $)</td>       </tr>        <tr>        <td>mon_decimal_point</td>        <td>Monetary decimal point character</td>       </tr>        <tr>        <td>mon_thousands_sep</td>        <td>Monetary thousands separator</td>       </tr>        <tr>        <td>mon_grouping</td>        <td>Array containing monetary groupings</td>       </tr>        <tr>        <td>positive_sign</td>        <td>Sign for positive values</td>       </tr>        <tr>        <td>negative_sign</td>        <td>Sign for negative values</td>       </tr>        <tr>        <td>int_frac_digits</td>        <td>International fractional digits</td>       </tr>        <tr>        <td>frac_digits</td>        <td>Local fractional digits</td>       </tr>        <tr>        <td>p_cs_precedes</td>        <td>         <strong><code>TRUE</code></strong> if currency_symbol precedes a positive value, <strong><code>FALSE</code></strong>         if it succeeds one        </td>       </tr>        <tr>        <td>p_sep_by_space</td>        <td>         <strong><code>TRUE</code></strong> if a space separates currency_symbol from a positive         value, <strong><code>FALSE</code></strong> otherwise        </td>       </tr>        <tr>        <td>n_cs_precedes</td>        <td>         <strong><code>TRUE</code></strong> if currency_symbol precedes a negative value, <strong><code>FALSE</code></strong>         if it succeeds one        </td>       </tr>        <tr>        <td>n_sep_by_space</td>        <td>         <strong><code>TRUE</code></strong> if a space separates currency_symbol from a negative         value, <strong><code>FALSE</code></strong> otherwise        </td>       </tr>        <tr style="vertical-align: top;">        <td>p_sign_posn</td>        <td>         <ul class="simplelist">          <li class="member">0 - Parentheses surround the quantity and currency_symbol</li>          <li class="member">1 - The sign string precedes the quantity and currency_symbol</li>          <li class="member">2 - The sign string succeeds the quantity and currency_symbol</li>          <li class="member">3 - The sign string immediately precedes the currency_symbol</li>          <li class="member">4 - The sign string immediately succeeds the currency_symbol</li>         </ul>        </td>       </tr>        <tr style="vertical-align: top;">        <td>n_sign_posn</td>        <td>         <ul class="simplelist">          <li class="member">0 - Parentheses surround the quantity and currency_symbol</li>          <li class="member">1 - The sign string precedes the quantity and currency_symbol</li>          <li class="member">2 - The sign string succeeds the quantity and currency_symbol</li>          <li class="member">3 - The sign string immediately precedes the currency_symbol</li>          <li class="member">4 - The sign string immediately succeeds the currency_symbol</li>         </ul>        </td>       </tr>       </tbody>         </table>    </p>   <p class="para">    The <em>p_sign_posn</em>, and <em>n_sign_posn</em> contain a string    of formatting options. Each number representing one of the above listed conditions.   </p>   <p class="para">    The grouping fields contain arrays that define the way numbers should be    grouped. For example, the monetary grouping field for the nl_NL locale (in    UTF-8 mode with the euro sign), would contain a 2 item array with the    values 3 and 3. The higher the index in the array, the farther left the    grouping is. If an array element is equal to <strong><code>CHAR_MAX</code></strong>,    no further grouping is done. If an array element is equal to 0, the previous    element should be used.   </p>  </div>    <div class="refsect1 examples" id="refsect1-function.localeconv-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-5913">     <p><strong>Example #1 <span class="function"><strong>localeconv()</strong></span> example</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">if&nbsp;(</span><span style="color: #9876AA">false&nbsp;</span><span style="color: #007700">!==&nbsp;</span><span style="color: #9876AA">setlocale</span><span style="color: #007700">(</span><span style="color: #9876AA">LC_ALL</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'nl_NL.UTF-8@euro'</span><span style="color: #007700">))&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$locale_info&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">localeconv</span><span style="color: #007700">();<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$locale_info</span><span style="color: #007700">);<br />}<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen"> <div class="cdata"><pre> Array (     [decimal_point] =&gt; .     [thousands_sep] =&gt;     [int_curr_symbol] =&gt; EUR     [currency_symbol] =&gt; €     [mon_decimal_point] =&gt; ,     [mon_thousands_sep] =&gt;     [positive_sign] =&gt;     [negative_sign] =&gt; -     [int_frac_digits] =&gt; 2     [frac_digits] =&gt; 2     [p_cs_precedes] =&gt; 1     [p_sep_by_space] =&gt; 1     [n_cs_precedes] =&gt; 1     [n_sep_by_space] =&gt; 1     [p_sign_posn] =&gt; 1     [n_sign_posn] =&gt; 2     [grouping] =&gt; Array         (         )      [mon_grouping] =&gt; Array         (             [0] =&gt; 3             [1] =&gt; 3         )  ) </pre></div>     </div>    </div>      </p>  </div>    <div class="refsect1 seealso" id="refsect1-function.localeconv-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link setlocale()} - 设置地区信息</span></li>    </ul>   </p>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.strings.php">字符串 函数</a></div></div>
 * @return array localeconv returns data based upon the current locale*/
function localeconv () {}
