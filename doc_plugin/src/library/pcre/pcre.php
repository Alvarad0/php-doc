<?php

// Start of pcre v.

/**
*<div id="function.preg-match" class="refentry">  <div class="refnamediv">   <h1 class="refname">preg_match</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">preg_match</span> &mdash; <span class="dc-title">执行匹配正则表达式</span></p>   </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.preg-match-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">int</span> <span class="methodname" style="color:#CC7832"><strong>preg_match</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#2EACF9">$pattern</span></span>    , <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#2EACF9">$subject</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">&$matches</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#2EACF9">$flags</span><span class="initializer"> = 0</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#2EACF9">$offset</span><span class="initializer"> = 0</span></span>   ]]] )</div>    <p class="para rdfs-comment">   搜索<span class="parameter" style="color:#2EACF9">subject</span>与<span class="parameter" style="color:#2EACF9">pattern</span>给定的正则表达式的一个匹配.   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.preg-match-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">pattern</span></dt>       <dd>        <p class="para">        要搜索的模式，字符串类型。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">subject</span></dt>       <dd>        <p class="para">        输入字符串。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">matches</span></dt>       <dd>        <p class="para">       如果提供了参数<span class="parameter" style="color:#2EACF9">matches</span>，它将被填充为搜索结果。       <var class="varname"><var class="varname">$matches[0]</var></var>将包含完整模式匹配到的文本， <var class="varname"><var class="varname">$matches[1]</var></var>       将包含第一个捕获子组匹配到的文本，以此类推。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">flags</span></dt>       <dd>        <p class="para">        <span class="parameter" style="color:#2EACF9">flags</span>可以被设置为以下标记值：        <dl>                    <dt> <strong><span>PREG_OFFSET_CAPTURE</span></strong></dt>           <dd>            <p class="para">           如果传递了这个标记，对于每一个出现的匹配返回时会附加字符串偏移量(相对于目标字符串的)。           注意：这会改变填充到<span class="parameter" style="color:#2EACF9">matches</span>参数的数组，使其每个元素成为一个由           第<em>0</em>个元素是匹配到的字符串，第<em>1</em>个元素是该匹配字符串           在目标字符串<span class="parameter" style="color:#2EACF9">subject</span>中的偏移量。            <div class="informalexample">             <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />preg_match</span><span style="color: #007700">(</span><span style="color: #DD0000">'/(foo)(bar)(baz)/'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'foobarbaz'</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$matches</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">PREG_OFFSET_CAPTURE</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$matches</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>             </div>              <p class="para">以上例程会输出：</p>             <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Array (     [0] =&gt; Array         (             [0] =&gt; foobarbaz             [1] =&gt; 0         )      [1] =&gt; Array         (             [0] =&gt; foo             [1] =&gt; 0         )      [2] =&gt; Array         (             [0] =&gt; bar             [1] =&gt; 3         )      [3] =&gt; Array         (             [0] =&gt; baz             [1] =&gt; 6         )  ) </span></div>             </div>            </div>           </p>          </dd>                  </dl>        </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">offset</span></dt>       <dd>        <p class="para">       通常，搜索从目标字符串的开始位置开始。可选参数 <span class="parameter" style="color:#2EACF9">offset</span> 用于       指定从目标字符串的某个位置开始搜索(单位是字节)。       </p>       <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>:         <p class="para">        使用<span class="parameter" style="color:#2EACF9">offset</span>参数不同于向<span class="function"><strong style="color:#CC7832">preg_match()</strong></span>        传递按照位置通过<em>substr($subject, $offset)</em>截取目标字符串结果，        因为<span class="parameter" style="color:#2EACF9">pattern</span>可以包含断言比如<em class="emphasis">^</em>， <em class="emphasis">$</em>        或者<em class="emphasis">(?&lt;=x)</em>。 比较：         <div class="informalexample">          <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$subject&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">"abcdef"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$pattern&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'/^def/'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">preg_match</span><span style="color: #007700">(</span><span style="color: #9876AA">$pattern</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$subject</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$matches</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">PREG_OFFSET_CAPTURE</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">3</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$matches</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>          </div>           <p class="para">以上例程会输出：</p>          <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Array ( ) </span></div>          </div>          <p class="para">           当这个示例使用截取后传递时          </p>          <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$subject&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">"abcdef"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$pattern&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'/^def/'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">preg_match</span><span style="color: #007700">(</span><span style="color: #9876AA">$pattern</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">substr</span><span style="color: #007700">(</span><span style="color: #9876AA">$subject</span><span style="color: #007700">,</span><span style="color: #9876AA">3</span><span style="color: #007700">),&nbsp;</span><span style="color: #9876AA">$matches</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">PREG_OFFSET_CAPTURE</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$matches</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>          </div>           <p class="para">           将会产生匹配          </p>          <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Array (     [0] =&gt; Array         (             [0] =&gt; def             [1] =&gt; 0         )  ) </span></div>          </div>         </div>        </p>       </p></blockquote>      </dd>          </dl>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.preg-match-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">   <span class="function"><strong style="color:#CC7832">preg_match()</strong></span>返回 <span class="parameter" style="color:#2EACF9">pattern</span> 的匹配次数。   它的值将是0次（不匹配）或1次，因为<span class="function"><strong style="color:#CC7832">preg_match()</strong></span>在第一次匹配后   将会停止搜索。<span class="function">{@link preg_match_all()}</span>不同于此，它会一直搜索<span class="parameter" style="color:#2EACF9">subject</span>   直到到达结尾。    如果发生错误<span class="function"><strong style="color:#CC7832">preg_match()</strong></span>返回 <strong><span>FALSE</span></strong>。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.preg-match-changelog">   <h3 class="title">更新日志</h3>   <span>    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>5.3.6</td>        <td>         如果 <span class="parameter" style="color:#2EACF9">offset</span> 比 <span class="parameter" style="color:#2EACF9">subject</span> 的长度还要大则返回 <strong><span>FALSE</span></strong>。        </td>       </tr>        <tr>        <td>5.2.2</td>        <td>        命名子组可以接受<em>(?&lt;name&gt;)</em>， <em>(?&#039;name&#039;)</em>        以及<em>(?P&lt;name&gt;)</em>语法。之前版本仅接受<em>(?P&lt;name&gt;)</em>语法。        </td>       </tr>       </tbody>         </table>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.preg-match-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-5857">     <p><strong>Example #1 查找文本字符串&quot;php&quot;</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">//模式分隔符后的"i"标记这是一个大小写不敏感的搜索<br /></span><span style="color: #007700">if&nbsp;(</span><span style="color: #9876AA">preg_match</span><span style="color: #007700">(</span><span style="color: #DD0000">"/php/i"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"PHP&nbsp;is&nbsp;the&nbsp;web&nbsp;scripting&nbsp;language&nbsp;of&nbsp;choice."</span><span style="color: #007700">))&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"A&nbsp;match&nbsp;was&nbsp;found."</span><span style="color: #007700">;<br />}&nbsp;else&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"A&nbsp;match&nbsp;was&nbsp;not&nbsp;found."</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>     </div>   </span>   <p class="para">    <div class="example" id="example-5858">     <p><strong>Example #2 查找单词&quot;word&quot;</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">//&nbsp;模式中的\b标记一个单词边界，所以只有独立的单词"web"会被匹配，而不会匹配<br />&nbsp;*&nbsp;单词的部分内容比如"webbing"&nbsp;或&nbsp;"cobweb"&nbsp;<br /></span><span style="color: #007700">if&nbsp;(</span><span style="color: #9876AA">preg_match</span><span style="color: #007700">(</span><span style="color: #DD0000">"/\bweb\b/i"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"PHP&nbsp;is&nbsp;the&nbsp;web&nbsp;scripting&nbsp;language&nbsp;of&nbsp;choice."</span><span style="color: #007700">))&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"A&nbsp;match&nbsp;was&nbsp;found."</span><span style="color: #007700">;<br />}&nbsp;else&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"A&nbsp;match&nbsp;was&nbsp;not&nbsp;found."</span><span style="color: #007700">;<br />}<br /><br />if&nbsp;(</span><span style="color: #9876AA">preg_match</span><span style="color: #007700">(</span><span style="color: #DD0000">"/\bweb\b/i"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"PHP&nbsp;is&nbsp;the&nbsp;website&nbsp;scripting&nbsp;language&nbsp;of&nbsp;choice."</span><span style="color: #007700">))&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"A&nbsp;match&nbsp;was&nbsp;found."</span><span style="color: #007700">;<br />}&nbsp;else&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"A&nbsp;match&nbsp;was&nbsp;not&nbsp;found."</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>     </div>   </p>   <p class="para">    <div class="example" id="example-5859">     <p><strong>Example #3 获取URL中的域名</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">//从URL中获取主机名称<br /></span><span style="color: #9876AA">preg_match</span><span style="color: #007700">(</span><span style="color: #DD0000">'@^(?:http://)?([^/]+)@i'</span><span style="color: #007700">,<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #DD0000">"http://www.php.net/index.html"</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$matches</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$host&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">$matches</span><span style="color: #007700">[</span><span style="color: #9876AA">1</span><span style="color: #007700">];<br /><br /></span><span style="color: #FF8000">//获取主机名称的后面两部分<br /></span><span style="color: #9876AA">preg_match</span><span style="color: #007700">(</span><span style="color: #DD0000">'/[^.]+\.[^.]+$/'</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$host</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$matches</span><span style="color: #007700">);<br />echo&nbsp;</span><span style="color: #DD0000">"domain&nbsp;name&nbsp;is:&nbsp;</span><span style="color: #007700">{</span><span style="color: #9876AA">$matches</span><span style="color: #007700">[</span><span style="color: #9876AA">0</span><span style="color: #007700">]}</span><span style="color: #DD0000">\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> domain name is: php.net </span></div>     </div>    </div>   </p>   <p class="para">    <div class="example" id="example-5860">     <p><strong>Example #4 使用命名子组</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /><br />$str&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'foobar:&nbsp;2008'</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">preg_match</span><span style="color: #007700">(</span><span style="color: #DD0000">'/(?P&lt;name&gt;\w+):&nbsp;(?P&lt;digit&gt;\d+)/'</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$str</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$matches</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">//&nbsp;下面例子在php&nbsp;5.2.2(pcre&nbsp;7.0)或更新版本下工作,&nbsp;然而,&nbsp;为了后向兼容,&nbsp;上面的方式是推荐写法.&nbsp;<br />//&nbsp;preg_match('/(?&lt;name&gt;\w+):&nbsp;(?&lt;digit&gt;\d+)/',&nbsp;$str,&nbsp;$matches);<br /><br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$matches</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Array (     [0] =&gt; foobar: 2008     [name] =&gt; foobar     [1] =&gt; foobar     [digit] =&gt; 2008     [2] =&gt; 2008 ) </span></div>     </div>    </div>   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.preg-match-notes">   <h3 class="title">注释</h3>   <div class="tip"><strong class="tip">Tip</strong>    <p class="para">    如果你仅仅想要检查某个字符串是否包含另外一个字符串，不要使用<span class="function"><strong style="color:#CC7832">preg_match()</strong></span>。    使用 <span class="function">{@link strpos()}</span> 会更快。    </p>   </div>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.preg-match-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><a href="http://php.net/manual/zh/pcre.pattern.php" class="link">PCRE 模式</a></li>     <li class="member"><span class="function">{@link preg_quote()} - 转义正则表达式字符</span></li>     <li class="member"><span class="function">{@link preg_match_all()} - 执行一个全局正则表达式匹配</span></li>     <li class="member"><span class="function">{@link preg_replace()} - 执行一个正则表达式的搜索和替换</span></li>     <li class="member"><span class="function">{@link preg_split()} - 通过一个正则表达式分隔字符串</span></li>     <li class="member"><span class="function">{@link preg_last_error()} - 返回最后一个PCRE正则执行产生的错误代码</span></li>    </ul>   </span>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.pcre.php">PCRE 函数</a></div></div>
 * @return int|false <b>preg_match</b> returns 1 if the <i>pattern</i>*/
function preg_match ($pattern, $subject, array &$matches = null, $flags = 0, $offset = 0) {}

/**
*<div id="function.preg-match-all" class="refentry">   <div class="refnamediv">   <h1 class="refname">preg_match_all</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">preg_match_all</span> &mdash; <span class="dc-title">执行一个全局正则表达式匹配</span></p>   </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.preg-match-all-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">int</span> <span class="methodname" style="color:#CC7832"><strong>preg_match_all</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#2EACF9">$pattern</span></span>    , <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#2EACF9">$subject</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">&$matches</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#2EACF9">$flags</span><span class="initializer"> = <strong><span>PREG_PATTERN_ORDER</span></strong></span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#2EACF9">$offset</span><span class="initializer"> = 0</span></span>   ]]] )</div>    <p class="para rdfs-comment">   搜索<span class="parameter" style="color:#2EACF9">subject</span>中所有匹配<span class="parameter" style="color:#2EACF9">pattern</span>给定正则表达式   的匹配结果并且将它们以<span class="parameter" style="color:#2EACF9">flag</span>指定顺序输出到<span class="parameter" style="color:#2EACF9">matches</span>中.   </p>   <p class="para">   在第一个匹配找到后, 子序列继续从最后一次匹配位置搜索.   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.preg-match-all-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">pattern</span></dt>       <dd>        <p class="para">        要搜索的模式，字符串形式。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">subject</span></dt>       <dd>        <p class="para">        输入字符串。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">matches</span></dt>       <dd>        <p class="para">       多维数组，作为输出参数输出所有匹配结果, 数组排序通过<span class="parameter" style="color:#2EACF9">flags</span>指定。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">flags</span></dt>       <dd>        <p class="para">       可以结合下面标记使用(注意不能同时使用<strong><span>PREG_PATTERN_ORDER</span></strong>和       <strong><span>PREG_SET_ORDER</span></strong>)：        <dl>                    <dt> <strong><span>PREG_PATTERN_ORDER</span></strong></dt>           <dd>            <p class="para">           结果排序为<var class="varname"><var class="varname">$matches[0]</var></var>保存完整模式的所有匹配, <var class="varname"><var class="varname">$matches[1]</var></var>           保存第一个子组的所有匹配，以此类推。           </p>           <p class="para">            <div class="informalexample">             <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />preg_match_all</span><span style="color: #007700">(</span><span style="color: #DD0000">"|&lt;[^&gt;]+&gt;(.*)&lt;/[^&gt;]+&gt;|U"</span><span style="color: #007700">,<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #DD0000">"&lt;b&gt;example:&nbsp;&lt;/b&gt;&lt;div&nbsp;align=left&gt;this&nbsp;is&nbsp;a&nbsp;test&lt;/div&gt;"</span><span style="color: #007700">,<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$out</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">PREG_PATTERN_ORDER</span><span style="color: #007700">);<br />echo&nbsp;</span><span style="color: #9876AA">$out</span><span style="color: #007700">[</span><span style="color: #9876AA">0</span><span style="color: #007700">][</span><span style="color: #9876AA">0</span><span style="color: #007700">]&nbsp;.&nbsp;</span><span style="color: #DD0000">",&nbsp;"&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #9876AA">$out</span><span style="color: #007700">[</span><span style="color: #9876AA">0</span><span style="color: #007700">][</span><span style="color: #9876AA">1</span><span style="color: #007700">]&nbsp;.&nbsp;</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />echo&nbsp;</span><span style="color: #9876AA">$out</span><span style="color: #007700">[</span><span style="color: #9876AA">1</span><span style="color: #007700">][</span><span style="color: #9876AA">0</span><span style="color: #007700">]&nbsp;.&nbsp;</span><span style="color: #DD0000">",&nbsp;"&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #9876AA">$out</span><span style="color: #007700">[</span><span style="color: #9876AA">1</span><span style="color: #007700">][</span><span style="color: #9876AA">1</span><span style="color: #007700">]&nbsp;.&nbsp;</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>             </div>              <p class="para">以上例程会输出：</p>             <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> &lt;b&gt;example: &lt;/b&gt;, &lt;div align=left&gt;this is a test&lt;/div&gt; example: , this is a test </span></div>             </div>             <p class="para">              因此, <var class="varname"><var class="varname">$out[0]</var></var>是包含匹配完整模式的字符串的数组，       <var class="varname"><var class="varname">$out[1]</var></var>是包含闭合标签内的字符串的数组。             </p>            </div>           </p>           <p class="para">            如果正则表达式包含了带名称的子组，<var class="varname"><var class="varname">$matches</var></var> 额外包含了带名称子组的键。           </p>           <p class="para">            如果正则表达式里，子组名称重名了，则仅最右侧的自组储存在 <var class="varname"><var class="varname">$matches[NAME]</var></var> 中。            <div class="informalexample">             <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />preg_match_all</span><span style="color: #007700">(<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #DD0000">'/(?J)(?&lt;match&gt;foo)|(?&lt;match&gt;bar)/'</span><span style="color: #007700">,<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #DD0000">'foo&nbsp;bar'</span><span style="color: #007700">,<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$matches</span><span style="color: #007700">,<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">PREG_PATTERN_ORDER<br /></span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$matches</span><span style="color: #007700">[</span><span style="color: #DD0000">'match'</span><span style="color: #007700">]);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>             </div>              <p class="para">以上例程会输出：</p>             <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Array (     [0] =&gt;      [1] =&gt; bar ) </span></div>             </div>            </div>           </p>          </dd>                             <dt> <strong><span>PREG_SET_ORDER</span></strong></dt>           <dd>            <p class="para">           结果排序为<var class="varname"><var class="varname">$matches[0]</var></var>包含第一次匹配得到的所有匹配(包含子组)，           <var class="varname"><var class="varname">$matches[1]</var></var>是包含第二次匹配到的所有匹配(包含子组)的数组，以此类推。            <div class="informalexample">             <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />preg_match_all</span><span style="color: #007700">(</span><span style="color: #DD0000">"|&lt;[^&gt;]+&gt;(.*)&lt;/[^&gt;]+&gt;|U"</span><span style="color: #007700">,<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #DD0000">"&lt;b&gt;example:&nbsp;&lt;/b&gt;&lt;div&nbsp;align=\"left\"&gt;this&nbsp;is&nbsp;a&nbsp;test&lt;/div&gt;"</span><span style="color: #007700">,<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$out</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">PREG_SET_ORDER</span><span style="color: #007700">);<br />echo&nbsp;</span><span style="color: #9876AA">$out</span><span style="color: #007700">[</span><span style="color: #9876AA">0</span><span style="color: #007700">][</span><span style="color: #9876AA">0</span><span style="color: #007700">]&nbsp;.&nbsp;</span><span style="color: #DD0000">",&nbsp;"&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #9876AA">$out</span><span style="color: #007700">[</span><span style="color: #9876AA">0</span><span style="color: #007700">][</span><span style="color: #9876AA">1</span><span style="color: #007700">]&nbsp;.&nbsp;</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />echo&nbsp;</span><span style="color: #9876AA">$out</span><span style="color: #007700">[</span><span style="color: #9876AA">1</span><span style="color: #007700">][</span><span style="color: #9876AA">0</span><span style="color: #007700">]&nbsp;.&nbsp;</span><span style="color: #DD0000">",&nbsp;"&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #9876AA">$out</span><span style="color: #007700">[</span><span style="color: #9876AA">1</span><span style="color: #007700">][</span><span style="color: #9876AA">1</span><span style="color: #007700">]&nbsp;.&nbsp;</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>             </div>              <p class="para">以上例程会输出：</p>             <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> &lt;b&gt;example: &lt;/b&gt;, example: &lt;div align=&quot;left&quot;&gt;this is a test&lt;/div&gt;, this is a test </span></div>             </div>            </div>           </p>          </dd>                             <dt> <strong><span>PREG_OFFSET_CAPTURE</span></strong></dt>           <dd>            <p class="para">           如果这个标记被传递，每个发现的匹配返回时会增加它相对目标字符串的偏移量。           注意这会改变<span class="parameter" style="color:#2EACF9">matches</span>中的每一个匹配结果字符串元素，使其           成为一个第<em>0</em>个元素为匹配结果字符串，第<em>1</em>个元素为           匹配结果字符串在<span class="parameter" style="color:#2EACF9">subject</span>中的偏移量。                        <div class="informalexample">             <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />preg_match_all</span><span style="color: #007700">(</span><span style="color: #DD0000">'/(foo)(bar)(baz)/'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'foobarbaz'</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$matches</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">PREG_OFFSET_CAPTURE</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$matches</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>             </div>              <p class="para">以上例程会输出：</p>             <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Array (     [0] =&gt; Array         (             [0] =&gt; Array                 (                     [0] =&gt; foobarbaz                     [1] =&gt; 0                 )          )      [1] =&gt; Array         (             [0] =&gt; Array                 (                     [0] =&gt; foo                     [1] =&gt; 0                 )          )      [2] =&gt; Array         (             [0] =&gt; Array                 (                     [0] =&gt; bar                     [1] =&gt; 3                 )          )      [3] =&gt; Array         (             [0] =&gt; Array                 (                     [0] =&gt; baz                     [1] =&gt; 6                 )          )  ) </span></div>             </div>            </div>           </p>          </dd>                  </dl>        </p>       <p class="para">       如果没有给定排序标记，假定设置为<strong><span>PREG_PATTERN_ORDER</span></strong>。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">offset</span></dt>       <dd>        <p class="para">       通常， 查找时从目标字符串的开始位置开始。可选参数<span class="parameter" style="color:#2EACF9">offset</span>用于       从目标字符串中指定位置开始搜索(单位是字节)。       </p>       <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>:         <p class="para">        使用 <span class="parameter" style="color:#2EACF9">offset</span> 参数不同于传递 <em>substr($subject, $offset)</em> 的        结果到 <span class="function"><strong style="color:#CC7832">preg_match_all()</strong></span> 作为目标字符串，因为 <span class="parameter" style="color:#2EACF9">pattern</span>         可以包含断言比如<em class="emphasis">^</em>， <em class="emphasis">$</em> 或者 <em class="emphasis">(?&lt;=x) </em>。        示例查看 <span class="function">{@link preg_match()}</span>。        </p>       </p></blockquote>      </dd>          </dl>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.preg-match-all-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">   返回完整匹配次数（可能是0），或者如果发生错误返回<strong><span>FALSE</span></strong>。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.preg-match-all-changelog">   <h3 class="title">更新日志</h3>   <span>    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>5.4.0</td>        <td>         参数<span class="parameter" style="color:#2EACF9">matches</span>成为可选的。        </td>       </tr>        <tr>        <td>5.3.6</td>        <td>         如果 <span class="parameter" style="color:#2EACF9">offset</span>         大于         <span class="parameter" style="color:#2EACF9">subject</span> 的程度，将返回 <strong><span>FALSE</span></strong>。        </td>       </tr>        <tr>        <td>5.2.2</td>        <td>        子命名分组语法可以接受<em>(?&lt;name&gt;)</em>，<em>(?&#039;name&#039;)</em>以及        <em>(?P&lt;name&gt;)</em>了。 之前版本仅接受<em>(?P&lt;name&gt;)</em>方式。        </td>       </tr>       </tbody>         </table>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.preg-match-all-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-5854">     <p><strong>Example #1 查找所有文本中的电话号码。</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />preg_match_all</span><span style="color: #007700">(</span><span style="color: #DD0000">"/\(?&nbsp;&nbsp;(\d{3})?&nbsp;&nbsp;\)?&nbsp;&nbsp;(?(1)&nbsp;&nbsp;[\-\s]&nbsp;)&nbsp;\d{3}-\d{4}/x"</span><span style="color: #007700">,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #DD0000">"Call&nbsp;555-1212&nbsp;or&nbsp;1-800-555-1212"</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$phones</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>     </div>   </span>   <p class="para">    <div class="example" id="example-5855">     <p><strong>Example #2 查找匹配的HTML标签（贪婪）</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">//\\2是一个后向引用的示例.&nbsp;这会告诉pcre它必须匹配正则表达式中第二个圆括号(这里是([\w]+))<br />//匹配到的结果.&nbsp;这里使用两个反斜线是因为这里使用了双引号.<br /></span><span style="color: #9876AA">$html&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">"&lt;b&gt;bold&nbsp;text&lt;/b&gt;&lt;a&nbsp;href=howdy.html&gt;click&nbsp;me&lt;/a&gt;"</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">preg_match_all</span><span style="color: #007700">(</span><span style="color: #DD0000">"/(&lt;([\w]+)[^&gt;]*&gt;)(.*?)(&lt;\/\\2&gt;)/"</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$html</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$matches</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">PREG_SET_ORDER</span><span style="color: #007700">);<br /><br />foreach&nbsp;(</span><span style="color: #9876AA">$matches&nbsp;</span><span style="color: #007700">as&nbsp;</span><span style="color: #9876AA">$val</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"matched:&nbsp;"&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #9876AA">$val</span><span style="color: #007700">[</span><span style="color: #9876AA">0</span><span style="color: #007700">]&nbsp;.&nbsp;</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"part&nbsp;1:&nbsp;"&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #9876AA">$val</span><span style="color: #007700">[</span><span style="color: #9876AA">1</span><span style="color: #007700">]&nbsp;.&nbsp;</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"part&nbsp;2:&nbsp;"&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #9876AA">$val</span><span style="color: #007700">[</span><span style="color: #9876AA">2</span><span style="color: #007700">]&nbsp;.&nbsp;</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"part&nbsp;3:&nbsp;"&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #9876AA">$val</span><span style="color: #007700">[</span><span style="color: #9876AA">3</span><span style="color: #007700">]&nbsp;.&nbsp;</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"part&nbsp;4:&nbsp;"&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #9876AA">$val</span><span style="color: #007700">[</span><span style="color: #9876AA">4</span><span style="color: #007700">]&nbsp;.&nbsp;</span><span style="color: #DD0000">"\n\n"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> matched: &lt;b&gt;bold text&lt;/b&gt; part 1: &lt;b&gt; part 2: b part 3: bold text part 4: &lt;/b&gt;  matched: &lt;a href=howdy.html&gt;click me&lt;/a&gt; part 1: &lt;a href=howdy.html&gt; part 2: a part 3: click me part 4: &lt;/a&gt; </span></div>     </div>    </div>   </p>   <p class="para">    <div class="example" id="example-5856">     <p><strong>Example #3 使用子命名组</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /><br />$str&nbsp;</span><span style="color: #007700">=&nbsp;&lt;&lt;&lt;FOO<br /></span><span style="color: #DD0000">a:&nbsp;1<br />b:&nbsp;2<br />c:&nbsp;3<br /></span><span style="color: #007700">FOO;<br /><br /></span><span style="color: #9876AA">preg_match_all</span><span style="color: #007700">(</span><span style="color: #DD0000">'/(?P&lt;name&gt;\w+):&nbsp;(?P&lt;digit&gt;\d+)/'</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$str</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$matches</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">//&nbsp;下面代码在php&nbsp;5.2.2(pcre&nbsp;7.0)或更高版本下工作,&nbsp;不过,&nbsp;为了向后兼容<br />&nbsp;*&nbsp;推荐使用上面的方式.&nbsp;<br />//&nbsp;preg_match_all('/(?&lt;name&gt;\w+):&nbsp;(?&lt;digit&gt;\d+)/',&nbsp;$str,&nbsp;$matches);<br /><br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$matches</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Array (     [0] =&gt; Array         (             [0] =&gt; a: 1             [1] =&gt; b: 2             [2] =&gt; c: 3         )      [name] =&gt; Array         (             [0] =&gt; a             [1] =&gt; b             [2] =&gt; c         )      [1] =&gt; Array         (             [0] =&gt; a             [1] =&gt; b             [2] =&gt; c         )      [digit] =&gt; Array         (             [0] =&gt; 1             [1] =&gt; 2             [2] =&gt; 3         )      [2] =&gt; Array         (             [0] =&gt; 1             [1] =&gt; 2             [2] =&gt; 3         )  ) </span></div>     </div>    </div>   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.preg-match-all-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><a href="http://php.net/manual/zh/pcre.pattern.php" class="link">PCRE 匹配</a></li>     <li class="member"><span class="function">{@link preg_quote()} - 转义正则表达式字符</span></li>     <li class="member"><span class="function">{@link preg_match()} - 执行匹配正则表达式</span></li>     <li class="member"><span class="function">{@link preg_replace()} - 执行一个正则表达式的搜索和替换</span></li>     <li class="member"><span class="function">{@link preg_split()} - 通过一个正则表达式分隔字符串</span></li>     <li class="member"><span class="function">{@link preg_last_error()} - 返回最后一个PCRE正则执行产生的错误代码</span></li>    </ul>   </span>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.pcre.php">PCRE 函数</a></div></div>
 * @return int|false the number of full pattern matches (which might be zero),*/
function preg_match_all ($pattern, $subject, array &$matches = null, $flags = PREG_PATTERN_ORDER, $offset = 0) {}

/**
*<div id="function.preg-replace" class="refentry">  <div class="refnamediv">   <h1 class="refname">preg_replace</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">preg_replace</span> &mdash; <span class="dc-title">执行一个正则表达式的搜索和替换</span></p>   </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.preg-replace-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="methodname" style="color:#CC7832"><strong>preg_replace</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#2EACF9">$pattern</span></span>    , <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#2EACF9">$replacement</span></span>    , <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#2EACF9">$subject</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#2EACF9">$limit</span><span class="initializer"> = -1</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#2EACF9">&$count</span></span>   ]] )</div>    <p class="para rdfs-comment">   搜索<span class="parameter" style="color:#2EACF9">subject</span>中匹配<span class="parameter" style="color:#2EACF9">pattern</span>的部分，    以<span class="parameter" style="color:#2EACF9">replacement</span>进行替换。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.preg-replace-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">pattern</span></dt>       <dd>        <p class="para">       要搜索的模式。可以使一个字符串或字符串数组。       </p>       <p class="para">        可以使用一些<a href="http://php.net/manual/zh/reference.pcre.pattern.modifiers.php" class="link">PCRE修饰符</a>。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">replacement</span></dt>       <dd>        <p class="para">       用于替换的字符串或字符串数组。如果这个参数是一个字符串，并且<span class="parameter" style="color:#2EACF9">pattern</span>       是一个数组，那么所有的模式都使用这个字符串进行替换。如果<span class="parameter" style="color:#2EACF9">pattern</span>和<span class="parameter" style="color:#2EACF9">replacement</span>       都是数组，每个<span class="parameter" style="color:#2EACF9">pattern</span>使用<span class="parameter" style="color:#2EACF9">replacement</span>中对应的       元素进行替换。如果<span class="parameter" style="color:#2EACF9">replacement</span>中的元素比<span class="parameter" style="color:#2EACF9">pattern</span>中的少，       多出来的<span class="parameter" style="color:#2EACF9">pattern</span>使用空字符串进行替换。       </p>       <p class="para">       <span class="parameter" style="color:#2EACF9">replacement</span>中可以包含后向引用<em>\\<span class="replaceable">n</span></em>       或<em>$<span class="replaceable">n</span></em>，语法上首选后者。 每个       这样的引用将被匹配到的第<span class="replaceable">n</span>个捕获子组捕获到的文本替换。 <span class="replaceable">n</span>       可以是0-99，<em>\\0</em>和<em>$0</em>代表完整的模式匹配文本。       捕获子组的序号计数方式为：代表捕获子组的左括号从左到右， 从1开始数。如果要在<span class="parameter" style="color:#2EACF9">replacement</span>       中使用反斜线，必须使用4个(<em>&quot;\\\\&quot;</em>，译注：因为这首先是php的字符串，经过转义后，是两个，再经过       正则表达式引擎后才被认为是一个原文反斜线)。       </p>       <p class="para">       当在替换模式下工作并且后向引用后面紧跟着需要是另外一个数字(比如：在一个匹配模式后紧接着增加一个原文数字)，       不能使用<em>\\1</em>这样的语法来描述后向引用。比如， <em>\\11</em>将会使<span class="function"><strong style="color:#CC7832">preg_replace()</strong></span>       不能理解你希望的是一个<em>\\1</em>后向引用紧跟一个原文<em>1</em>，还是       一个<em>\\11</em>后向引用后面不跟任何东西。 这种情况下解决方案是使用<em>${1}1</em>。       这创建了一个独立的<em>$1</em>后向引用, 一个独立的原文<em>1</em>。       </p>       <p class="para">       当使用被弃用的 <em>e</em> 修饰符时, 这个函数会转义一些字符(即：<em>&#039;</em>、<em>&quot;</em>、        <em>\</em> 和 NULL) 然后进行后向引用替换。当这些完成后请确保后向引用解析完后没有单引号或        双引号引起的语法错误(比如： <em>&#039;strlen(\&#039;$1\&#039;)+strlen(&quot;$2&quot;)&#039;</em>)。确保符合PHP的        <a href="http://php.net/manual/zh/language.types.string.php" class="link">字符串语法</a>，并且符合eval语法。因为在完成替换后，        引擎会将结果字符串作为php代码使用eval方式进行评估并将返回值作为最终参与替换的字符串。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">subject</span></dt>       <dd>        <p class="para">       要进行搜索和替换的字符串或字符串数组。       </p>       <p class="para">       如果<span class="parameter" style="color:#2EACF9">subject</span>是一个数组，搜索和替换回在<span class="parameter" style="color:#2EACF9">subject</span>       的每一个元素上进行, 并且返回值也会是一个数组。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">limit</span></dt>       <dd>        <p class="para">       每个模式在每个<span class="parameter" style="color:#2EACF9">subject</span>上进行替换的最大次数。默认是       <em>-1</em>(无限)。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">count</span></dt>       <dd>        <p class="para">       如果指定，将会被填充为完成的替换次数。       </p>      </dd>          </dl>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.preg-replace-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">   如果<span class="parameter" style="color:#2EACF9">subject</span>是一个数组， <span class="function"><strong style="color:#CC7832">preg_replace()</strong></span>返回一个数组，   其他情况下返回一个字符串。   </p>   <p class="para">   如果匹配被查找到，替换后的<span class="parameter" style="color:#2EACF9">subject</span>被返回，其他情况下   返回没有改变的 <span class="parameter" style="color:#2EACF9">subject</span>。如果发生错误，返回 <strong><span>NULL</span></strong> 。   </p>  </div>     <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-function.preg-replace-errors">   <h3 class="title">错误／异常</h3>   <p class="para">    PHP 5.5.0 起， 传入 &quot;\e&quot; 修饰符的时候，会产生一个 <strong><span>E_DEPRECATED</span></strong> 错误； PHP 7.0.0 起，会产生 <strong><span>E_WARNING</span></strong> 错误，同时  &quot;\e&quot; 也无法起效。   </p>  </div>     <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.preg-replace-changelog">   <h3 class="title">更新日志</h3>   <span>    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>7.0.0</td>        <td>         不再支持  <em>/e</em>修饰符。         请用 <span class="function">{@link preg_replace_callback()}</span> 代替。        </td>       </tr>        <tr>        <td>5.5.0</td>        <td>         <em>/e</em> 修饰符已经被弃用了。使用         <span class="function">{@link preg_replace_callback()}</span> 代替。参见文档中 <a href="http://php.net/manual/zh/reference.pcre.pattern.modifiers.php#reference.pcre.pattern.modifiers.eval" class="link">PREG_REPLACE_EVAL</a> 关于安全风险的更多信息。        </td>       </tr>        <tr>        <td>5.1.0</td>        <td>         增加参数<span class="parameter" style="color:#2EACF9">count</span>.        </td>       </tr>       </tbody>         </table>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.preg-replace-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-5867">     <p><strong>Example #1 使用后向引用紧跟数值原文</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$string&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'April&nbsp;15,&nbsp;2003'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$pattern&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'/(\w+)&nbsp;(\d+),&nbsp;(\d+)/i'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$replacement&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'${1}1,$3'</span><span style="color: #007700">;<br />echo&nbsp;</span><span style="color: #9876AA">preg_replace</span><span style="color: #007700">(</span><span style="color: #9876AA">$pattern</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$replacement</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$string</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> April1,2003 </span></div>     </div>    </div>   </span>   <p class="para">    <div class="example" id="example-5868">     <p><strong>Example #2 <span class="function"><strong style="color:#CC7832">preg_replace()</strong></span>中使用基于索引的数组</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$string&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'The&nbsp;quick&nbsp;brown&nbsp;fox&nbsp;jumps&nbsp;over&nbsp;the&nbsp;lazy&nbsp;dog.'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$patterns&nbsp;</span><span style="color: #007700">=&nbsp;array();<br /></span><span style="color: #9876AA">$patterns</span><span style="color: #007700">[</span><span style="color: #9876AA">0</span><span style="color: #007700">]&nbsp;=&nbsp;</span><span style="color: #DD0000">'/quick/'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$patterns</span><span style="color: #007700">[</span><span style="color: #9876AA">1</span><span style="color: #007700">]&nbsp;=&nbsp;</span><span style="color: #DD0000">'/brown/'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$patterns</span><span style="color: #007700">[</span><span style="color: #9876AA">2</span><span style="color: #007700">]&nbsp;=&nbsp;</span><span style="color: #DD0000">'/fox/'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$replacements&nbsp;</span><span style="color: #007700">=&nbsp;array();<br /></span><span style="color: #9876AA">$replacements</span><span style="color: #007700">[</span><span style="color: #9876AA">2</span><span style="color: #007700">]&nbsp;=&nbsp;</span><span style="color: #DD0000">'bear'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$replacements</span><span style="color: #007700">[</span><span style="color: #9876AA">1</span><span style="color: #007700">]&nbsp;=&nbsp;</span><span style="color: #DD0000">'black'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$replacements</span><span style="color: #007700">[</span><span style="color: #9876AA">0</span><span style="color: #007700">]&nbsp;=&nbsp;</span><span style="color: #DD0000">'slow'</span><span style="color: #007700">;<br />echo&nbsp;</span><span style="color: #9876AA">preg_replace</span><span style="color: #007700">(</span><span style="color: #9876AA">$patterns</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$replacements</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$string</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> The bear black slow jumps over the lazy dog. </span></div>     </div>     <div class="example-contents"><p>     对模式和替换内容按key进行排序我们可以得到期望的结果。     </p></div>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />ksort</span><span style="color: #007700">(</span><span style="color: #9876AA">$patterns</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">ksort</span><span style="color: #007700">(</span><span style="color: #9876AA">$replacements</span><span style="color: #007700">);<br />echo&nbsp;</span><span style="color: #9876AA">preg_replace</span><span style="color: #007700">(</span><span style="color: #9876AA">$patterns</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$replacements</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$string</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> The slow black bear jumps over the lazy dog. </span></div>     </div>    </div>   </p>   <p class="para">    <div class="example" id="example-5869">     <p><strong>Example #3 替换一些值</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$patterns&nbsp;</span><span style="color: #007700">=&nbsp;array&nbsp;(</span><span style="color: #DD0000">'/(19|20)(\d{2})-(\d{1,2})-(\d{1,2})/'</span><span style="color: #007700">,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #DD0000">'/^\s*{(\w+)}\s*=/'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$replace&nbsp;</span><span style="color: #007700">=&nbsp;array&nbsp;(</span><span style="color: #DD0000">'\3/\4/\1\2'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'$\1&nbsp;='</span><span style="color: #007700">);<br />echo&nbsp;</span><span style="color: #9876AA">preg_replace</span><span style="color: #007700">(</span><span style="color: #9876AA">$patterns</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$replace</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'{startDate}&nbsp;=&nbsp;1999-5-27'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> $startDate = 5/27/1999 </span></div>     </div>    </div>   </p>   <p class="para">    <div class="example" id="example-5870">     <p><strong>Example #4 剥离空白字符</strong></p>     <div class="example-contents"><p>      这个例子剥离多余的空白字符     </p></div>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$str&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'foo&nbsp;&nbsp;&nbsp;o'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$str&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">preg_replace</span><span style="color: #007700">(</span><span style="color: #DD0000">'/\s\s+/'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'&nbsp;'</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$str</span><span style="color: #007700">);<br /></span><span style="color: #FF8000">//&nbsp;将会改变为'foo&nbsp;o'<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #9876AA">$str</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>     </div>   </p>   <p class="para">    <div class="example" id="example-5871">     <p><strong>Example #5 使用参数<span class="parameter" style="color:#2EACF9">count</span></strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$count&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">0</span><span style="color: #007700">;<br /><br />echo&nbsp;</span><span style="color: #9876AA">preg_replace</span><span style="color: #007700">(array(</span><span style="color: #DD0000">'/\d/'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'/\s/'</span><span style="color: #007700">),&nbsp;</span><span style="color: #DD0000">'*'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'xp&nbsp;4&nbsp;to'</span><span style="color: #007700">,&nbsp;-</span><span style="color: #9876AA">1&nbsp;</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$count</span><span style="color: #007700">);<br />echo&nbsp;</span><span style="color: #9876AA">$count</span><span style="color: #007700">;&nbsp;</span><span style="color: #FF8000">//3<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> xp***to 3 </span></div>                                               </div>    </div>   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.preg-replace-notes">   <h3 class="title">注释</h3>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>:     <p class="para">    当使用数组形式的<span class="parameter" style="color:#2EACF9">pattern</span>和<span class="parameter" style="color:#2EACF9">replacement</span>时,     将会按照key在数组中出现的顺序进行处理. 这<em class="emphasis">不一定</em>和数组的索引顺序一致.    如果你期望使用索引对等方式用<span class="parameter" style="color:#2EACF9">replacement</span>对<span class="parameter" style="color:#2EACF9">pattern</span>    进行替换, 你可以在调用<span class="function"><strong style="color:#CC7832">preg_replace()</strong></span>之前对两个数组各进行一次<span class="function">{@link ksort()}</span>排序.    </p>   </p></blockquote>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.preg-replace-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><a href="http://php.net/manual/zh/pcre.pattern.php" class="link">PCRE 模式</a></li>     <li class="member"><span class="function">{@link preg_quote()} - 转义正则表达式字符</span></li>     <li class="member"><span class="function">{@link preg_filter()} - 执行一个正则表达式搜索和替换</span></li>     <li class="member"><span class="function">{@link preg_match()} - 执行匹配正则表达式</span></li>     <li class="member"><span class="function">{@link preg_replace_callback()} - 执行一个正则表达式搜索并且使用一个回调进行替换</span></li>     <li class="member"><span class="function">{@link preg_split()} - 通过一个正则表达式分隔字符串</span></li>     <li class="member"><span class="function">{@link preg_last_error()} - 返回最后一个PCRE正则执行产生的错误代码</span></li>    </ul>   </span>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.pcre.php">PCRE 函数</a></div></div>
 * @return string|string[]|null <b>preg_replace</b> returns an array if the*/
function preg_replace ($pattern, $replacement, $subject, $limit = -1, &$count = null) {}

/**
*<div id="function.preg-replace-callback" class="refentry">  <div class="refnamediv">   <h1 class="refname">preg_replace_callback</h1>   <p class="verinfo">(PHP 4 &gt;= 4.0.5, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">preg_replace_callback</span> &mdash; <span class="dc-title">执行一个正则表达式搜索并且使用一个回调进行替换</span></p>   </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.preg-replace-callback-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="methodname" style="color:#CC7832"><strong>preg_replace_callback</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#2EACF9">$pattern</span></span>    , <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#2EACF9">$callback</span></span>    , <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#2EACF9">$subject</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#2EACF9">$limit</span><span class="initializer"> = -1</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#2EACF9">&$count</span></span>   ]] )</div>    <p class="para rdfs-comment">   这个函数的行为除了   可以指定一个 <span class="parameter" style="color:#2EACF9">callback</span> 替代 <span class="parameter" style="color:#2EACF9">replacement</span> 进行替换   字符串的计算，其他方面等同于 <span class="function">{@link preg_replace()}</span>。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.preg-replace-callback-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">pattern</span></dt>       <dd>        <p class="para">       要搜索的模式，可以是字符串或一个字符串数组。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">callback</span></dt>       <dd>        <p class="para">       一个回调函数，在每次需要替换时调用，调用时函数得到的参数是从<span class="parameter" style="color:#2EACF9">subject</span>       中匹配到的结果。回调函数返回真正参与替换的字符串。这是该回调函数的签名：       </p>       <p class="para">        <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">         <span class="type" style="color:#EAB766">string</span> <span class="methodname" style="color:#CC7832"><span class="replaceable">handler</span></span>          ( <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">$matches</span></span>         )</div>        </p>       <p class="para">       你可能经常会需要<span class="parameter" style="color:#2EACF9">callback</span>函数而       仅用于<span class="function"><strong style="color:#CC7832">preg_replace_callback()</strong></span>一个地方的调用。在这种情况下，你可以       使用<a href="http://php.net/manual/zh/functions.anonymous.php" class="link">匿名函数</a>来定义一个匿名函数作       为<span class="function"><strong style="color:#CC7832">preg_replace_callback()</strong></span>调用时的回调。 这样做你可以保留所有       调用信息在同一个位置并且不会因为一个不在任何其他地方使用的回调函数名称而污染函数名称空间。       </p>       <p class="para">        <div class="example" id="example-5864">         <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">preg_replace_callback()</strong></span> 和          匿名函数</strong></p>         <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">//&nbsp;一个unix样式的命令行过滤器，用于将段落开始部分的大写字母转换为小写。&nbsp;<br /></span><span style="color: #9876AA">$fp&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">fopen</span><span style="color: #007700">(</span><span style="color: #DD0000">"php://stdin"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"r"</span><span style="color: #007700">)&nbsp;or&nbsp;die(</span><span style="color: #DD0000">"can't&nbsp;read&nbsp;stdin"</span><span style="color: #007700">);<br />while&nbsp;(!</span><span style="color: #9876AA">feof</span><span style="color: #007700">(</span><span style="color: #9876AA">$fp</span><span style="color: #007700">))&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$line&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">fgets</span><span style="color: #007700">(</span><span style="color: #9876AA">$fp</span><span style="color: #007700">);<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$line&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">preg_replace_callback</span><span style="color: #007700">(<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #DD0000">'|&lt;p&gt;\s*\w|'</span><span style="color: #007700">,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;(</span><span style="color: #9876AA">$matches</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;</span><span style="color: #9876AA">strtolower</span><span style="color: #007700">(</span><span style="color: #9876AA">$matches</span><span style="color: #007700">[</span><span style="color: #9876AA">0</span><span style="color: #007700">]);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$line<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #007700">);<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #9876AA">$line</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">fclose</span><span style="color: #007700">(</span><span style="color: #9876AA">$fp</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>         </div>         </div>       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">subject</span></dt>       <dd>        <p class="para">        要搜索替换的目标字符串或字符串数组。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">limit</span></dt>       <dd>        <p class="para">       对于每个模式用于每个 <span class="parameter" style="color:#2EACF9">subject</span> 字符串的最大可替换次数。       默认是<em>-1</em>（无限制）。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">count</span></dt>       <dd>        <p class="para">       如果指定，这个变量将被填充为替换执行的次数。       </p>      </dd>          </dl>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.preg-replace-callback-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">   如果<span class="parameter" style="color:#2EACF9">subject</span>是一个数组，   <span class="function"><strong style="color:#CC7832">preg_replace_callback()</strong></span>返回一个数组，其他情况返回字符串。   错误发生时返回 <strong><span>NULL</span></strong>。   </p>   <p class="para">   如果查找到了匹配，返回替换后的目标字符串（或字符串数组）， 其他情况<span class="parameter" style="color:#2EACF9">subject</span>   将会无变化返回。    </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.preg-replace-callback-changelog">   <h3 class="title">更新日志</h3>   <span>    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>5.1.0</td>        <td>         增加了参数<span class="parameter" style="color:#2EACF9">count</span>。        </td>       </tr>       </tbody>         </table>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.preg-replace-callback-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-5865">     <p><strong>Example #2 <span class="function"><strong style="color:#CC7832">preg_replace_callback()</strong></span>示例</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">//&nbsp;将文本中的年份增加一年.<br /></span><span style="color: #9876AA">$text&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">"April&nbsp;fools&nbsp;day&nbsp;is&nbsp;04/01/2002\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$text</span><span style="color: #007700">.=&nbsp;</span><span style="color: #DD0000">"Last&nbsp;christmas&nbsp;was&nbsp;12/24/2001\n"</span><span style="color: #007700">;<br /></span><span style="color: #FF8000">//&nbsp;回调函数<br /></span><span style="color: #007700">function&nbsp;</span><span style="color: #9876AA">next_year</span><span style="color: #007700">(</span><span style="color: #9876AA">$matches</span><span style="color: #007700">)<br />{<br />&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;通常:&nbsp;$matches[0]是完成的匹配<br />&nbsp;&nbsp;//&nbsp;$matches[1]是第一个捕获子组的匹配<br />&nbsp;&nbsp;//&nbsp;以此类推<br />&nbsp;&nbsp;</span><span style="color: #007700">return&nbsp;</span><span style="color: #9876AA">$matches</span><span style="color: #007700">[</span><span style="color: #9876AA">1</span><span style="color: #007700">].(</span><span style="color: #9876AA">$matches</span><span style="color: #007700">[</span><span style="color: #9876AA">2</span><span style="color: #007700">]+</span><span style="color: #9876AA">1</span><span style="color: #007700">);<br />}<br />echo&nbsp;</span><span style="color: #9876AA">preg_replace_callback</span><span style="color: #007700">(<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #DD0000">"|(\d{2}/\d{2}/)(\d{4})|"</span><span style="color: #007700">,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #DD0000">"next_year"</span><span style="color: #007700">,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$text</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> April fools day is 04/01/2003 Last christmas was 12/24/2002 </span></div>     </div>    </div>   </span>   <p class="para">    <div class="example" id="example-5866">     <p><strong>Example #3 <span class="function"><strong style="color:#CC7832">preg_replace_callback()</strong></span>使用递归构造处理BB码的封装</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$input&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">"plain&nbsp;[indent]&nbsp;deep&nbsp;[indent]&nbsp;deeper&nbsp;[/indent]&nbsp;deep&nbsp;[/indent]&nbsp;plain"</span><span style="color: #007700">;<br /><br />function&nbsp;</span><span style="color: #9876AA">parseTagsRecursive</span><span style="color: #007700">(</span><span style="color: #9876AA">$input</span><span style="color: #007700">)<br />{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;译注:&nbsp;对此正则表达式分段分析<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;首尾两个#是正则分隔符<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;\[indent]&nbsp;匹配一个原文的[indent]<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;((?:[^[]|\[(?!/?indent])|(?R))+)分析:<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;(?:[^[]|\[(?!/?indent])分析:<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;首先它是一个非捕获子组<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;两个可选路径,&nbsp;一个是非[字符,&nbsp;另一个是[字符但后面紧跟着不是/indent或indent.<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;(?R)&nbsp;正则表达式递归<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\[/indent]&nbsp;匹配结束的[/indent]<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;/<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;$regex&nbsp;=&nbsp;'#\[indent]((?:[^[]|\[(?!/?indent])|(?R))+)\[/indent]#';<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(is_array($input))&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$input&nbsp;=&nbsp;'&lt;div&nbsp;style="margin-left:&nbsp;10px"&gt;'.$input[1].'&lt;/div&gt;';<br />&nbsp;&nbsp;&nbsp;&nbsp;}<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;preg_replace_callback($regex,&nbsp;'parseTagsRecursive',&nbsp;$input);<br />}<br /><br />$output&nbsp;=&nbsp;parseTagsRecursive($input);<br /><br />echo&nbsp;$output;<br />?&gt;</span> </span> </span></div>     </div>     </div>   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.preg-replace-callback-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><a href="http://php.net/manual/zh/pcre.pattern.php" class="link">PCRE 模式</a></li>     <li class="member"><span class="function">{@link preg_replace_callback_array()} - Perform a regular expression search and replace using callbacks</span></li>     <li class="member"><span class="function">{@link preg_quote()} - 转义正则表达式字符</span></li>     <li class="member"><span class="function">{@link preg_replace()} - 执行一个正则表达式的搜索和替换</span></li>     <li class="member"><span class="function">{@link preg_last_error()} - 返回最后一个PCRE正则执行产生的错误代码</span></li>     <li class="member"><a href="http://php.net/manual/zh/functions.anonymous.php" class="link">匿名函数</a></li>     <li class="member"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.callback" class="link">callback</a> 类型的信息</li>    </ul>   </span>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.pcre.php">PCRE 函数</a></div></div>
 * @return string|string[]|null <b>preg_replace_callback</b> returns an array if the*/
function preg_replace_callback ($pattern, callable $callback, $subject, $limit = -1, &$count = null) {}

/**
*<div id="function.preg-replace-callback-array" class="refentry">  <div class="refnamediv">   <h1 class="refname">preg_replace_callback_array</h1>   <p class="verinfo">(PHP 7)</p><p class="refpurpose"><span class="refname">preg_replace_callback_array</span> &mdash; <span class="dc-title">Perform a regular expression search and replace using callbacks</span></p>   </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.preg-replace-callback-array-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="methodname" style="color:#CC7832"><strong>preg_replace_callback_array</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">$patterns_and_callbacks</span></span>    , <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#2EACF9">$subject</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#2EACF9">$limit</span><span class="initializer"> = -1</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#2EACF9">&$count</span></span>   ]] )</div>    <p class="para rdfs-comment">    The behavior of this function is similar to    <span class="function">{@link preg_replace_callback()}</span>, except that callbacks are    executed on a per-pattern basis.   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.preg-replace-callback-array-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">patterns_and_callbacks</span></dt>       <dd>        <p class="para">        An associative array mapping patterns (keys) to callbacks (values).       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">subject</span></dt>       <dd>        <p class="para">        The string or an array with strings to search and replace.       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">limit</span></dt>       <dd>        <p class="para">        The maximum possible replacements for each pattern in each        <span class="parameter" style="color:#2EACF9">subject</span> string. Defaults to        <em>-1</em> (no limit).       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">count</span></dt>       <dd>        <p class="para">        If specified, this variable will be filled with the number of        replacements done.       </p>      </dd>          </dl>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.preg-replace-callback-array-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    <span class="function"><strong style="color:#CC7832">preg_replace_callback_array()</strong></span> returns an array if the    <span class="parameter" style="color:#2EACF9">subject</span> parameter is an array, or a string    otherwise. On errors the return value is <strong><span>NULL</span></strong>   </p>   <p class="para">    If matches are found, the new subject will be returned, otherwise    <span class="parameter" style="color:#2EACF9">subject</span> will be returned unchanged.    </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.preg-replace-callback-array-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-5863">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">preg_replace_callback_array()</strong></span> example</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$subject&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'Aaaaaa&nbsp;Bbb'</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">preg_replace_callback_array</span><span style="color: #007700">(<br />&nbsp;&nbsp;&nbsp;&nbsp;[<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #DD0000">'~[a]+~i'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;function&nbsp;(</span><span style="color: #9876AA">$match</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #9876AA">strlen</span><span style="color: #007700">(</span><span style="color: #9876AA">$match</span><span style="color: #007700">[</span><span style="color: #9876AA">0</span><span style="color: #007700">]),&nbsp;</span><span style="color: #DD0000">'&nbsp;matches&nbsp;for&nbsp;"a"&nbsp;found'</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #DD0000">'~[b]+~i'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;function&nbsp;(</span><span style="color: #9876AA">$match</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #9876AA">strlen</span><span style="color: #007700">(</span><span style="color: #9876AA">$match</span><span style="color: #007700">[</span><span style="color: #9876AA">0</span><span style="color: #007700">]),&nbsp;</span><span style="color: #DD0000">'&nbsp;matches&nbsp;for&nbsp;"b"&nbsp;found'</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />&nbsp;&nbsp;&nbsp;&nbsp;],<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$subject<br /></span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> 6 matches for &quot;a&quot; found 3 matches for &quot;b&quot; found </span></div>     </div>    </div>   </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.preg-replace-callback-array-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><a href="http://php.net/manual/zh/pcre.pattern.php" class="link">PCRE Patterns</a></li>     <li class="member"><span class="function">{@link preg_replace_callback()} - 执行一个正则表达式搜索并且使用一个回调进行替换</span></li>     <li class="member"><span class="function">{@link preg_quote()} - 转义正则表达式字符</span></li>     <li class="member"><span class="function">{@link preg_replace()} - 执行一个正则表达式的搜索和替换</span></li>     <li class="member"><span class="function">{@link preg_last_error()} - 返回最后一个PCRE正则执行产生的错误代码</span></li>     <li class="member"><a href="http://php.net/manual/zh/functions.anonymous.php" class="link">Anonymous functions</a></li>     <li class="member"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.callback" class="link">callback</a> 类型的信息</li>    </ul>   </span>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.pcre.php">PCRE 函数</a></div></div>
 * @return string|string[]|null  <p>preg_replace_callback_array() returns an array if the subject parameter is an array, or a string otherwise. On errors the return value is NULL</p>*/
function preg_replace_callback_array ($patterns_and_callbacks, $subject , $limit = -1, &$count ) {}

/**
*<div id="function.preg-filter" class="refentry">  <div class="refnamediv">   <h1 class="refname">preg_filter</h1>   <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7)</p><p class="refpurpose"><span class="refname">preg_filter</span> &mdash; <span class="dc-title">执行一个正则表达式搜索和替换</span></p>   </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.preg-filter-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="methodname" style="color:#CC7832"><strong>preg_filter</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#2EACF9">$pattern</span></span>    , <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#2EACF9">$replacement</span></span>    , <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#2EACF9">$subject</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#2EACF9">$limit</span><span class="initializer"> = -1</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#2EACF9">&$count</span></span>   ]] )</div>    <p class="para rdfs-comment">    <span class="function"><strong style="color:#CC7832">preg_filter()</strong></span>等价于<span class="function">{@link preg_replace()}</span>    除了它仅仅返回(可能经过转化)与目标匹配的结果. 这个函数怎样工作的更详细信息请阅读    <span class="function">{@link preg_replace()}</span>文档.   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.preg-filter-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">   如果<span class="parameter" style="color:#2EACF9">subject</span>是一个<span class="type" style="color:#EAB766"><span class="type 数组" style="color:#EAB766">数组</span></span>，返回一个<span class="type" style="color:#EAB766"><span class="type 数组" style="color:#EAB766">数组</span></span>，   其他情况返回一个<span class="type" style="color:#EAB766"><span class="type 字符串" style="color:#EAB766">字符串</span></span>。   </p>   <p class="para">   如果没有找到匹配或者发生了错误，当<span class="parameter" style="color:#2EACF9">subject</span>是<span class="type" style="color:#EAB766"><span class="type 数组" style="color:#EAB766">数组</span></span>   时返回一个空<span class="type" style="color:#EAB766"><span class="type 数组" style="color:#EAB766">数组</span></span>，其他情况返回<strong><span>NULL</span></strong>。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.preg-filter-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-5851">     <p><strong>Example #1       比较<span class="function"><strong style="color:#CC7832">preg_filter()</strong></span>       和<span class="function">{@link preg_replace()}</span>的示例     </strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$subject&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">'1'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'a'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'2'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'b'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'3'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'A'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'B'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'4'</span><span style="color: #007700">);&nbsp;<br /></span><span style="color: #9876AA">$pattern&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">'/\d/'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'/[a-z]/'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'/[1a]/'</span><span style="color: #007700">);&nbsp;<br /></span><span style="color: #9876AA">$replace&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">'A:$0'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'B:$0'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'C:$0'</span><span style="color: #007700">);&nbsp;<br /><br />echo&nbsp;</span><span style="color: #DD0000">"preg_filter&nbsp;returns\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">preg_filter</span><span style="color: #007700">(</span><span style="color: #9876AA">$pattern</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$replace</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$subject</span><span style="color: #007700">));&nbsp;<br /><br />echo&nbsp;</span><span style="color: #DD0000">"preg_replace&nbsp;returns\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">preg_replace</span><span style="color: #007700">(</span><span style="color: #9876AA">$pattern</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$replace</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$subject</span><span style="color: #007700">));&nbsp;<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> preg_filter returns Array (     [0] =&gt; A:C:1     [1] =&gt; B:C:a     [2] =&gt; A:2     [3] =&gt; B:b     [4] =&gt; A:3     [7] =&gt; A:4 ) preg_replace returns Array (     [0] =&gt; A:C:1     [1] =&gt; B:C:a     [2] =&gt; A:2     [3] =&gt; B:b     [4] =&gt; A:3     [5] =&gt; A     [6] =&gt; B     [7] =&gt; A:4 ) </span></div>     </div>    </div>   </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.preg-filter-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><a href="http://php.net/manual/zh/pcre.pattern.php" class="link">PCRE 模式</a></li>     <li class="member"><span class="function">{@link preg_quote()} - 转义正则表达式字符</span></li>     <li class="member"><span class="function">{@link preg_replace()} - 执行一个正则表达式的搜索和替换</span></li>     <li class="member"><span class="function">{@link preg_replace_callback()} - 执行一个正则表达式搜索并且使用一个回调进行替换</span></li>     <li class="member"><span class="function">{@link preg_grep()} - 返回匹配模式的数组条目</span></li>     <li class="member"><span class="function">{@link preg_last_error()} - 返回最后一个PCRE正则执行产生的错误代码</span></li>    </ul>   </span>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.pcre.php">PCRE 函数</a></div></div>
 * @return string|string[]|null an array if the <i>subject</i>*/
function preg_filter ($pattern, $replacement, $subject, $limit = -1, &$count = null) {}

/**
*<div id="function.preg-split" class="refentry">  <div class="refnamediv">   <h1 class="refname">preg_split</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">preg_split</span> &mdash; <span class="dc-title">通过一个正则表达式分隔字符串</span></p>   </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.preg-split-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">array</span> <span class="methodname" style="color:#CC7832"><strong>preg_split</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#2EACF9">$pattern</span></span>    , <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#2EACF9">$subject</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#2EACF9">$limit</span><span class="initializer"> = -1</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#2EACF9">$flags</span><span class="initializer"> = 0</span></span>   ]] )</div>    <p class="para rdfs-comment">   通过一个正则表达式分隔给定字符串.   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.preg-split-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">pattern</span></dt>       <dd>        <p class="para">        用于搜索的模式，字符串形式。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">subject</span></dt>       <dd>        <p class="para">        输入字符串       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">limit</span></dt>       <dd>        <p class="para">       如果指定，将限制分隔得到的子串最多只有<span class="parameter" style="color:#2EACF9">limit</span>个，返回的最后一个       子串将包含所有剩余部分。<span class="parameter" style="color:#2EACF9">limit</span>值为-1， 0或null时都代表&quot;不限制&quot;，       作为php的标准，你可以使用null跳过对<span class="parameter" style="color:#2EACF9">flags</span>的设置。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">flags</span></dt>       <dd>        <p class="para">        <span class="parameter" style="color:#2EACF9">flags </span>可以是任何下面标记的组合(以位或运算 <em>|</em> 组合)：        <dl>                    <dt> <strong><span>PREG_SPLIT_NO_EMPTY</span></strong></dt>           <dd>            <span class="simpara">           如果这个标记被设置， <span class="function"><strong style="color:#CC7832">preg_split()</strong></span> 将仅返回分隔后的非空部分。           </span>          </dd>                             <dt> <strong><span>PREG_SPLIT_DELIM_CAPTURE</span></strong></dt>           <dd>            <span class="simpara">           如果这个标记设置了，用于分隔的模式中的括号表达式将被捕获并返回。           </span>          </dd>                             <dt> <strong><span>PREG_SPLIT_OFFSET_CAPTURE</span></strong></dt>           <dd>            <p class="para">           如果这个标记被设置, 对于每一个出现的匹配返回时将会附加字符串偏移量.            注意：这将会改变返回数组中的每一个元素, 使其每个元素成为一个由第<em>0</em>           个元素为分隔后的子串，第<em>1</em>个元素为该子串在<span class="parameter" style="color:#2EACF9">subject</span>           中的偏移量组成的数组。           </p>          </dd>                  </dl>        </p>      </dd>          </dl>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.preg-split-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">   返回一个使用 <span class="parameter" style="color:#2EACF9">pattern</span> 边界分隔 <span class="parameter" style="color:#2EACF9">subject</span> 后得到   的子串组成的数组， 或者在失败时返回 <strong><span>FALSE</span></strong>。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.preg-split-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-5872">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">preg_split()</strong></span>示例：获取搜索字符串的部分</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">//使用逗号或空格(包含"&nbsp;",&nbsp;\r,&nbsp;\t,&nbsp;\n,&nbsp;\f)分隔短语<br /></span><span style="color: #9876AA">$keywords&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">preg_split</span><span style="color: #007700">(</span><span style="color: #DD0000">"/[\s,]+/"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"hypertext&nbsp;language,&nbsp;programming"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$keywords</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>      <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Array (     [0] =&gt; hypertext     [1] =&gt; language     [2] =&gt; programming ) </span></div>     </div>    </div>   </span>   <p class="para">    <div class="example" id="example-5873">     <p><strong>Example #2 将一个字符串分隔为组成它的字符</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$str&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'string'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$chars&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">preg_split</span><span style="color: #007700">(</span><span style="color: #DD0000">'//'</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$str</span><span style="color: #007700">,&nbsp;-</span><span style="color: #9876AA">1</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">PREG_SPLIT_NO_EMPTY</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$chars</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Array (     [0] =&gt; s     [1] =&gt; t     [2] =&gt; r     [3] =&gt; i     [4] =&gt; n     [5] =&gt; g ) </span></div>     </div>    </div>   </p>   <p class="para">    <div class="example" id="example-5874">     <p><strong>Example #3 分隔一个字符串并获取每部分的偏移量</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$str&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'hypertext&nbsp;language&nbsp;programming'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$chars&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">preg_split</span><span style="color: #007700">(</span><span style="color: #DD0000">'/&nbsp;/'</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$str</span><span style="color: #007700">,&nbsp;-</span><span style="color: #9876AA">1</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">PREG_SPLIT_OFFSET_CAPTURE</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$chars</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Array (     [0] =&gt; Array         (             [0] =&gt; hypertext             [1] =&gt; 0         )      [1] =&gt; Array         (             [0] =&gt; language             [1] =&gt; 10         )      [2] =&gt; Array         (             [0] =&gt; programming             [1] =&gt; 19         )  ) </span></div>     </div>    </div>   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.preg-split-notes">   <h3 class="title">注释</h3>   <div class="tip"><strong class="tip">Tip</strong>    <p class="para">    如果你不需要正则表达式功能，可以有更快(并且更简单)的选择比如 <span class="function">{@link explode()}</span>     或 <span class="function">{@link str_split()}</span>。    </p>   </div>   <div class="tip"><strong class="tip">Tip</strong>    <p class="para">     如果没有成功匹配，将会返回一个数组，包含了单个元素，即输入的字符串。    </p>   </div>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.preg-split-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><a href="http://php.net/manual/zh/pcre.pattern.php" class="link">PCRE 模式</a></li>     <li class="member"><span class="function">{@link preg_quote()} - 转义正则表达式字符</span></li>     <li class="member"><span class="function">{@link implode()} - 将一个一维数组的值转化为字符串</span></li>     <li class="member"><span class="function">{@link preg_match()} - 执行匹配正则表达式</span></li>     <li class="member"><span class="function">{@link preg_match_all()} - 执行一个全局正则表达式匹配</span></li>     <li class="member"><span class="function">{@link preg_replace()} - 执行一个正则表达式的搜索和替换</span></li>     <li class="member"><span class="function">{@link preg_last_error()} - 返回最后一个PCRE正则执行产生的错误代码</span></li>    </ul>   </span>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.pcre.php">PCRE 函数</a></div></div>
 * @return string[]|array[]|false an array containing substrings of <i>subject</i>*/
function preg_split ($pattern, $subject, $limit = -1, $flags = 0) {}

/**
*<div id="function.preg-quote" class="refentry">  <div class="refnamediv">   <h1 class="refname">preg_quote</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">preg_quote</span> &mdash; <span class="dc-title">转义正则表达式字符</span></p>   </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.preg-quote-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">string</span> <span class="methodname" style="color:#CC7832"><strong>preg_quote</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#2EACF9">$str</span></span>   [, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#2EACF9">$delimiter</span><span class="initializer"> = <strong><span>NULL</span></strong></span></span>   ] )</div>    <p class="para rdfs-comment">   <span class="function"><strong style="color:#CC7832">preg_quote()</strong></span>需要参数 <span class="parameter" style="color:#2EACF9">str</span> 并向其中   每个正则表达式语法中的字符前增加一个反斜线。 这通常用于你有一些运行时字符串   需要作为正则表达式进行匹配的时候。   </p>   <p class="para">    正则表达式特殊字符有：    <em>. \ + * ? [ ^ ] $ ( ) { } = ! &lt; &gt; | : -</em>   </p>   <p class="para">    注意 <em>/</em> 不是正则表达式特殊字符。   </p>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>:     <p class="para">     注意：<span class="function"><strong style="color:#CC7832">preg_quote()</strong></span> 的应用场景不是用于 <span class="function">{@link preg_replace()}</span> 的 $replacement  字符串参数。    </p>   </p></blockquote>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.preg-quote-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">str</span></dt>       <dd>        <p class="para">        输入字符串       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">delimiter</span></dt>       <dd>        <p class="para">       如果指定了可选参数 <span class="parameter" style="color:#2EACF9">delimiter</span>，它也会被转义。这通常用于       转义PCRE函数使用的分隔符。 <em>/</em> 是最常见的分隔符。       </p>      </dd>          </dl>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.preg-quote-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回转义后的字符串。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.preg-quote-changelog">   <h3 class="title">更新日志</h3>   <span>    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>5.3.0</td>        <td>         字符 <em>-</em> 被增加为需要转义的。        </td>       </tr>       </tbody>         </table>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.preg-quote-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-5861">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">preg_quote()</strong></span>示例</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$keywords&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'$40&nbsp;for&nbsp;a&nbsp;g3/400'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$keywords&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">preg_quote</span><span style="color: #007700">(</span><span style="color: #9876AA">$keywords</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'/'</span><span style="color: #007700">);<br />echo&nbsp;</span><span style="color: #9876AA">$keywords</span><span style="color: #007700">;&nbsp;</span><span style="color: #FF8000">//&nbsp;返回&nbsp;\$40&nbsp;for&nbsp;a&nbsp;g3\/400<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>     </div>   </span>   <p class="para">    <div class="example" id="example-5862">     <p><strong>Example #2 将文本中的单词替换为斜体</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">//在这个例子中，preg_quote($word)&nbsp;用于保持星号原文涵义，使其不使用正则表达式中的特殊语义。<br /><br /></span><span style="color: #9876AA">$textbody&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">"This&nbsp;book&nbsp;is&nbsp;*very*&nbsp;difficult&nbsp;to&nbsp;find."</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$word&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">"*very*"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$textbody&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">preg_replace&nbsp;</span><span style="color: #007700">(</span><span style="color: #DD0000">"/"&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #9876AA">preg_quote</span><span style="color: #007700">(</span><span style="color: #9876AA">$word</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'/'</span><span style="color: #007700">)&nbsp;.&nbsp;</span><span style="color: #DD0000">"/"</span><span style="color: #007700">,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #DD0000">"&lt;i&gt;"&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #9876AA">$word&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #DD0000">"&lt;/i&gt;"</span><span style="color: #007700">,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$textbody</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>     </div>   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.preg-quote-notes">   <h3 class="title">注释</h3>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>: <span class="simpara">此函数可安全用于二进制对象。</span></p></blockquote>  </div>     <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.preg-quote-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><a href="http://php.net/manual/zh/pcre.pattern.php" class="link">PCRE 模式</a></li>     <li class="member"><span class="function">{@link escapeshellcmd()} - shell 元字符转义</span></li>    </ul>   </span>  </div>    <div class="up"><a href="http://php.net/manual/zh/ref.pcre.php">PCRE 函数</a></div></div>
 * @return string the quoted (escaped) string.*/
function preg_quote ($str, $delimiter = null) {}

/**
*<div id="function.preg-grep" class="refentry">  <div class="refnamediv">   <h1 class="refname">preg_grep</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">preg_grep</span> &mdash; <span class="dc-title">返回匹配模式的数组条目</span></p>   </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.preg-grep-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">array</span> <span class="methodname" style="color:#CC7832"><strong>preg_grep</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#2EACF9">$pattern</span></span>    , <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">$input</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#2EACF9">$flags</span><span class="initializer"> = 0</span></span>   ] )</div>    <p class="para rdfs-comment">   返回给定数组<span class="parameter" style="color:#2EACF9">input</span>中与模式<span class="parameter" style="color:#2EACF9">pattern</span>   匹配的元素组成的数组.   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.preg-grep-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">pattern</span></dt>       <dd>        <p class="para">        要搜索的模式, 字符串形式.       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">input</span></dt>       <dd>        <p class="para">        输入数组.       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">flags</span></dt>       <dd>        <p class="para">       如果设置为<strong><span>PREG_GREP_INVERT</span></strong>, 这个函数返回输入数组中与       给定模式<span class="parameter" style="color:#2EACF9">pattern</span><em class="emphasis">不</em>匹配的元素组成的数组.       </p>      </dd>          </dl>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.preg-grep-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">   返回使用<span class="parameter" style="color:#2EACF9">input</span>中key做索引的数组.   </p>  </div>     <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.preg-grep-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-5852">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">preg_grep()</strong></span> 示例</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">//&nbsp;返回所有包含浮点数的元素<br /></span><span style="color: #9876AA">$fl_array&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">preg_grep</span><span style="color: #007700">(</span><span style="color: #DD0000">"/^(\d+)?\.\d+$/"</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$array</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>     </div>   </span>  </div>     <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.preg-grep-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><a href="http://php.net/manual/zh/pcre.pattern.php" class="link">PCRE 模式</a></li>     <li class="member"><span class="function">{@link preg_quote()} - 转义正则表达式字符</span></li>     <li class="member"><span class="function">{@link preg_match_all()} - 执行一个全局正则表达式匹配</span></li>     <li class="member"><span class="function">{@link preg_filter()} - 执行一个正则表达式搜索和替换</span></li>     <li class="member"><span class="function">{@link preg_last_error()} - 返回最后一个PCRE正则执行产生的错误代码</span></li>    </ul>   </span>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.pcre.php">PCRE 函数</a></div></div>
 * @return array an array indexed using the keys from the*/
function preg_grep ($pattern, array $input, $flags = 0) {}

/**
*<div id="function.preg-last-error" class="refentry">  <div class="refnamediv">   <h1 class="refname">preg_last_error</h1>   <p class="verinfo">(PHP 5 &gt;= 5.2.0, PHP 7)</p><p class="refpurpose"><span class="refname">preg_last_error</span> &mdash; <span class="dc-title">返回最后一个PCRE正则执行产生的错误代码</span></p>   </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.preg-last-error-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">int</span> <span class="methodname" style="color:#CC7832"><strong>preg_last_error</strong></span>     ( <span class="methodparam">void</span>    )</div>    <p class="para rdfs-comment">    返回最后一次PCRE正则执行的错误代码。   </p>   <p class="para">    <div class="example" id="example-5853">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">preg_last_error()</strong></span> 示例</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /><br />preg_match</span><span style="color: #007700">(</span><span style="color: #DD0000">'/(?:\D+|&lt;\d+&gt;)*[!?]/'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'foobar&nbsp;foobar&nbsp;foobar'</span><span style="color: #007700">);<br /><br />if&nbsp;(</span><span style="color: #9876AA">preg_last_error</span><span style="color: #007700">()&nbsp;==&nbsp;</span><span style="color: #9876AA">PREG_BACKTRACK_LIMIT_ERROR</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;print&nbsp;</span><span style="color: #DD0000">'Backtrack&nbsp;limit&nbsp;was&nbsp;exhausted!'</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Backtrack limit was exhausted! </span></div>     </div>    </div>   </p>  </div>      <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.preg-last-error-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回下面常量中的一个(<a href="http://php.net/manual/zh/pcre.constants.php" class="link">查看它们自身的解释</a>):    <ul class="simplelist">     <li class="member"><strong><span>PREG_NO_ERROR</span></strong></li>     <li class="member"><strong><span>PREG_INTERNAL_ERROR</span></strong></li>     <li class="member"><strong><span>PREG_BACKTRACK_LIMIT_ERROR</span></strong> （参见 <a href="http://php.net/manual/zh/pcre.configuration.php#ini.pcre.backtrack-limit" class="link">pcre.backtrack_limit</a>）</li>     <li class="member"><strong><span>PREG_RECURSION_LIMIT_ERROR</span></strong> （参见 <a href="http://php.net/manual/zh/pcre.configuration.php#ini.pcre.recursion-limit" class="link">pcre.recursion_limit</a>）</li>     <li class="member"><strong><span>PREG_BAD_UTF8_ERROR</span></strong></li>     <li class="member"><strong><span>PREG_BAD_UTF8_OFFSET_ERROR</span></strong> （自 PHP 5.3.0 起）</li>         <li class="member"><strong><span>PREG_JIT_STACKLIMIT_ERROR</span></strong> (自 PHP 7.0.0 起)</li>    </ul>   </p>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.pcre.php">PCRE 函数</a></div></div>
 * @return int one of the following constants (explained on their own page):*/
function preg_last_error () {}


/**
*{@link preg_match_all()}
*/
define ('PREG_PATTERN_ORDER', 1);

/**
*{@link preg_last_error()}
*/
define ('PREG_JIT_STACKLIMIT_ERROR', 6);
/**
*{@link preg_match_all()}
*/
define ('PREG_SET_ORDER', 2);

/**
*<code>PREG_SPLIT_OFFSET_CAPTURE</code>
*/
define ('PREG_OFFSET_CAPTURE', 256);

/**
*{@link preg_split()}
*/
define ('PREG_SPLIT_NO_EMPTY', 1);

/**
*{@link preg_split()}
*/
define ('PREG_SPLIT_DELIM_CAPTURE', 2);

/**
*{@link preg_split()}
*/
define ('PREG_SPLIT_OFFSET_CAPTURE', 4);
define ('PREG_GREP_INVERT', 1);

/**
*{@link preg_last_error()}
*/
define ('PREG_NO_ERROR', 0);

/**
*{@link preg_last_error()}
*/
define ('PREG_INTERNAL_ERROR', 1);

/**
*回溯限制
*/
define ('PREG_BACKTRACK_LIMIT_ERROR', 2);

/**
*递归限制
*/
define ('PREG_RECURSION_LIMIT_ERROR', 3);

/**
*UTF-8 模式
*/
define ('PREG_BAD_UTF8_ERROR', 4);

/**
*UTF-8 模式
*/
define ('PREG_BAD_UTF8_OFFSET_ERROR', 5);

define ('PREG_UNMATCHED_AS_NULL', 512);
/**
*7.0 18-Dec-2006
*/
define ('PCRE_VERSION', "8.31 2012-07-06");

// End of pcre v.
?>
