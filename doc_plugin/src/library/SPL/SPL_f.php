<?php

// Start of SPL v.0.2


/**
*<div id="function.spl-classes" class="refentry">  <div class="refnamediv">   <h1 class="refname">spl_classes</h1>   <p class="verinfo">(PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">spl_classes</span> &mdash; <span class="dc-title">返回所有可用的SPL类</span></p>   </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.spl-classes-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">array</span> <span class="methodname" style="color:#CC7832"><strong>spl_classes</strong></span>     ( <span class="methodparam">void</span>    )</div>    <p class="para rdfs-comment">    本函数返回当前所有可用的 SPL 类的数组。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.spl-classes-parameters">   <h3 class="title">参数</h3>   <span>此函数没有参数。</span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.spl-classes-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    Returns an <span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span> containing the currently available SPL classes.   </p>  </div>     <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.spl-classes-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="regexiterator.setmode.example.basic">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">spl_classes()</strong></span> example</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /><br />print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">spl_classes</span><span style="color: #007700">());<br /><br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程的输出类似于：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Array (     [ArrayObject] =&gt; ArrayObject     [ArrayIterator] =&gt; ArrayIterator     [CachingIterator] =&gt; CachingIterator     [RecursiveCachingIterator] =&gt; RecursiveCachingIterator     [DirectoryIterator] =&gt; DirectoryIterator     [FilterIterator] =&gt; FilterIterator     [LimitIterator] =&gt; LimitIterator     [ParentIterator] =&gt; ParentIterator     [RecursiveDirectoryIterator] =&gt; RecursiveDirectoryIterator     [RecursiveIterator] =&gt; RecursiveIterator     [RecursiveIteratorIterator] =&gt; RecursiveIteratorIterator     [SeekableIterator] =&gt; SeekableIterator     [SimpleXMLIterator] =&gt; SimpleXMLIterator ) </span></div>     </div>    </div>   </span>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.spl.php">SPL 函数</a></div></div>
 * @return array */
function spl_classes () {}

/**
*<div id="function.spl-autoload" class="refentry">  <div class="refnamediv">   <h1 class="refname">spl_autoload</h1>   <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7)</p><p class="refpurpose"><span class="refname">spl_autoload</span> &mdash; <span class="dc-title">__autoload()函数的默认实现</span></p>   </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.spl-autoload-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span> <span class="methodname" style="color:#CC7832"><strong>spl_autoload</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#2EACF9">$class_name</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#2EACF9">$file_extensions</span></span>   ] )</div>    <p class="para rdfs-comment">   本函数提供了__autoload()的一个默认实现。如果不使用任何参数调用 spl_autoload_register()    函数，则以后在进行 __autoload() 调用时会自动使用此函数。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.spl-autoload-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">class_name</span></dt>       <dd>        <p class="para">               </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">file_extensions</span></dt>       <dd>        <p class="para">       在默认情况下，本函数先将类名转换成小写，再在小写的类名后加上 .inc       或 .php 的扩展名作为文件名，然后在所有的包含路径(include paths)中检查是否存在该文件。       </p>      </dd>          </dl>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.spl-autoload-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    没有返回值。   </p>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.spl.php">SPL 函数</a></div></div>
 * @return void*/
function spl_autoload ($class_name, $file_extensions = null) {}

/**
*<div id="function.spl-autoload-extensions" class="refentry">  <div class="refnamediv">   <h1 class="refname">spl_autoload_extensions</h1>   <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7)</p><p class="refpurpose"><span class="refname">spl_autoload_extensions</span> &mdash; <span class="dc-title">注册并返回spl_autoload函数使用的默认文件扩展名。</span></p>   </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.spl-autoload-extensions-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">string</span> <span class="methodname" style="color:#CC7832"><strong>spl_autoload_extensions</strong></span>     ([ <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#2EACF9">$file_extensions</span></span>   ] )</div>    <p class="para rdfs-comment">    本函数用来修改和检查 <span class="function">{@link __autoload()}</span> 函数内置的默认实现函数    <span class="function">{@link spl_autoload()}</span>     所使用的扩展名。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.spl-autoload-extensions-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">file_extensions</span></dt>       <dd>        <p class="para">        当不使用任何参数调用此函数时，它返回当前的文件扩展名的列表，不同的扩展名用逗号分隔。要修改文件扩展名列表，用一个逗号分隔的新的扩展名列表字符串来调用本函数即可。中文注：默认的spl_autoload函数使用的扩展名是&quot;.inc,.php&quot;。       </p>      </dd>          </dl>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.spl-autoload-extensions-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    逗号分隔的<span class="function">{@link spl_autoload()}</span>函数的默认文件扩展名。   </p>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.spl.php">SPL 函数</a></div></div>
 * @return string A comma delimited list of default file extensions for*/
function spl_autoload_extensions ($file_extensions = null) {}

/**
*<div id="function.spl-autoload-register" class="refentry">  <div class="refnamediv">  <h1 class="refname">spl_autoload_register</h1>   <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7)</p><p class="refpurpose"><span class="refname">spl_autoload_register</span> &mdash; <span class="dc-title">注册给定的函数作为 __autoload 的实现</span></p>   </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.spl-autoload-register-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">bool</span> <span class="methodname" style="color:#CC7832"><strong>spl_autoload_register</strong></span>     ([ <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#2EACF9">$autoload_function</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#2EACF9">$throw</span><span class="initializer"> = true</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#2EACF9">$prepend</span><span class="initializer"> = false</span></span>   ]]] )</div>    <p class="para rdfs-comment">   将函数注册到SPL __autoload函数队列中。如果该队列中的函数尚未激活，则激活它们。   </p>   <p class="para">    如果在你的程序中已经实现了<span class="function">{@link __autoload()}</span>函数，它必须显式注册到<span class="function">{@link __autoload()}</span>队列中。因为   <span class="function"><strong style="color:#CC7832">spl_autoload_register()</strong></span>函数会将Zend Engine中的<span class="function">{@link __autoload()}</span>函数取代为<span class="function">{@link spl_autoload()}</span>或<span class="function">{@link spl_autoload_call()}</span>。   </p>   <p class="para">    如果需要多条 autoload 函数，<span class="function"><strong style="color:#CC7832">spl_autoload_register()</strong></span>      满足了此类需求。    它实际上创建了 autoload 函数的队列，按定义时的顺序逐个执行。相比之下，    <span class="function">{@link __autoload()}</span> 只可以定义一次。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.spl-autoload-register-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">autoload_function</span></dt>       <dd>        <p class="para">        欲注册的自动装载函数。如果没有提供任何参数，则自动注册 autoload 的默认实现函数<span class="function">{@link spl_autoload()}</span>。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">throw</span></dt>       <dd>        <p class="para">        此参数设置了 <span class="parameter" style="color:#2EACF9">autoload_function</span> 无法成功注册时，        <span class="function"><strong style="color:#CC7832">spl_autoload_register()</strong></span>是否抛出异常。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">prepend</span></dt>       <dd>        <p class="para">        如果是 true，<span class="function"><strong style="color:#CC7832">spl_autoload_register()</strong></span> 会添加函数到队列之首，而不是队列尾部。       </p>      </dd>          </dl>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.spl-autoload-register-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    成功时返回 <strong><span>TRUE</span></strong>， 或者在失败时返回 <strong><span>FALSE</span></strong>。   </p>  </div>     <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.spl-autoload-register-changelog">   <h3 class="title">更新日志</h3>   <span>    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>5.3.0</td>        <td>         引入了命名空间的支持。        </td>       </tr>        <tr>        <td>5.3.0</td>        <td>         添加了 <span class="parameter" style="color:#2EACF9">prepend</span> 参数。        </td>       </tr>       </tbody>         </table>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.spl-autoload-register-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="regexiterator.getpregflags.example.basic">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">spl_autoload_register()</strong></span> 作为 <span class="function">{@link __autoload()}</span> 函数的替代</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /><br /></span><span style="color: #FF8000">//&nbsp;function&nbsp;__autoload($class)&nbsp;{<br />//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;include&nbsp;'classes/'&nbsp;.&nbsp;$class&nbsp;.&nbsp;'.class.php';<br />//&nbsp;}<br /><br /></span><span style="color: #007700">function&nbsp;</span><span style="color: #9876AA">my_autoloader</span><span style="color: #007700">(</span><span style="color: #9876AA">$class</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;include&nbsp;</span><span style="color: #DD0000">'classes/'&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #9876AA">$class&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #DD0000">'.class.php'</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">spl_autoload_register</span><span style="color: #007700">(</span><span style="color: #DD0000">'my_autoloader'</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">//&nbsp;或者，自&nbsp;PHP&nbsp;5.3.0&nbsp;起可以使用一个匿名函数<br /></span><span style="color: #9876AA">spl_autoload_register</span><span style="color: #007700">(function&nbsp;(</span><span style="color: #9876AA">$class</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;include&nbsp;</span><span style="color: #DD0000">'classes/'&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #9876AA">$class&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #DD0000">'.class.php'</span><span style="color: #007700">;<br />});<br /><br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>     </div>    <div class="example" id="regexiterator.setflags.example.basic">     <p><strong>Example #2 class 未能加载的 <span class="function"><strong style="color:#CC7832">spl_autoload_register()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /><br /></span><span style="color: #007700">namespace&nbsp;</span><span style="color: #9876AA">Foobar</span><span style="color: #007700">;<br /><br />class&nbsp;</span><span style="color: #9876AA">Foo&nbsp;</span><span style="color: #007700">{<br />&nbsp;&nbsp;&nbsp;&nbsp;static&nbsp;public&nbsp;function&nbsp;</span><span style="color: #9876AA">test</span><span style="color: #007700">(</span><span style="color: #9876AA">$name</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print&nbsp;</span><span style="color: #DD0000">'[['</span><span style="color: #007700">.&nbsp;</span><span style="color: #9876AA">$name&nbsp;</span><span style="color: #007700">.</span><span style="color: #DD0000">']]'</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;}<br />}<br /><br /></span><span style="color: #9876AA">spl_autoload_register</span><span style="color: #007700">(</span><span style="color: #9876AA">__NAMESPACE__&nbsp;</span><span style="color: #007700">.</span><span style="color: #DD0000">'\Foo::test'</span><span style="color: #007700">);&nbsp;</span><span style="color: #FF8000">//&nbsp;自&nbsp;PHP&nbsp;5.3.0&nbsp;起<br /><br /></span><span style="color: #007700">new&nbsp;</span><span style="color: #9876AA">InexistentClass</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程的输出类似于：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> [[Foobar\InexistentClass]] Fatal error: Class &#039;Foobar\InexistentClass&#039; not found in ... </span></div>     </div>    </div>   </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.spl-autoload-register-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link __autoload()} - 尝试加载未定义的类</span></li>    </ul>   </span>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.spl.php">SPL 函数</a></div></div>
 * @return bool true on success or false on failure.*/
function spl_autoload_register ($autoload_function = null, $throw = true, $prepend = false) {}

/**
*<div id="function.spl-autoload-unregister" class="refentry">  <div class="refnamediv">   <h1 class="refname">spl_autoload_unregister</h1>   <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7)</p><p class="refpurpose"><span class="refname">spl_autoload_unregister</span> &mdash; <span class="dc-title">注销已注册的__autoload()函数</span></p>   </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.spl-autoload-unregister-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">bool</span> <span class="methodname" style="color:#CC7832"><strong>spl_autoload_unregister</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#2EACF9">$autoload_function</span></span>    )</div>    <p class="para rdfs-comment">    从spl提供的自动装载函数队列中注销某一函数。如果该函数队列处于激活状态，并且在给定函数注销后该队列变为空，则该函数队列将会变为无效。   </p>   <p class="para">    如果该函数注销后使得自动装载函数队列无效，即使存在有__autoload函数它也不会自动激活。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.spl-autoload-unregister-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">autoload_function</span></dt>       <dd>        <p class="para">        要注销的自动装载函数。       </p>      </dd>          </dl>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.spl-autoload-unregister-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    成功时返回 <strong><span>TRUE</span></strong>， 或者在失败时返回 <strong><span>FALSE</span></strong>。   </p>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.spl.php">SPL 函数</a></div></div>
 * @return bool true on success or false on failure.*/
function spl_autoload_unregister ($autoload_function) {}

/**
*<div id="function.spl-autoload-functions" class="refentry">  <div class="refnamediv">   <h1 class="refname">spl_autoload_functions</h1>   <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7)</p><p class="refpurpose"><span class="refname">spl_autoload_functions</span> &mdash; <span class="dc-title">返回所有已注册的__autoload()函数。</span></p>   </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.spl-autoload-functions-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">array</span> <span class="methodname" style="color:#CC7832"><strong>spl_autoload_functions</strong></span>     ( <span class="methodparam">void</span>    )</div>    <p class="para rdfs-comment">    获取所有已注册的 __autoload() 函数。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.spl-autoload-functions-parameters">   <h3 class="title">参数</h3>   <span>此函数没有参数。</span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.spl-autoload-functions-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    包含所有已注册的__autoload函数的数组（<span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span>）。如果自动装载函数队列未激活，则返回<strong><span>FALSE</span></strong>。如果没有已注册的函数，则返回一个空数组。   </p>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.spl.php">SPL 函数</a></div></div>
 * @return array An array of all registered __autoload functions.*/
function spl_autoload_functions () {}

/**
*<div id="function.spl-autoload-call" class="refentry">  <div class="refnamediv">   <h1 class="refname">spl_autoload_call</h1>   <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7)</p><p class="refpurpose"><span class="refname">spl_autoload_call</span> &mdash; <span class="dc-title">尝试调用所有已注册的__autoload()函数来装载请求类</span></p>   </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.spl-autoload-call-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span> <span class="methodname" style="color:#CC7832"><strong>spl_autoload_call</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#2EACF9">$class_name</span></span>    )</div>    <p class="para rdfs-comment">    可以直接在程序中手动调用此函数来使用所有已注册的__autoload函数装载类或接口。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.spl-autoload-call-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">class_name</span></dt>       <dd>        <p class="para">        搜索的类名。       </p>      </dd>          </dl>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.spl-autoload-call-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    没有返回值。   </p>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.spl.php">SPL 函数</a></div></div>
 * @return void*/
function spl_autoload_call ($class_name) {}

/**
*<div id="function.class-parents" class="refentry">  <div class="refnamediv">   <h1 class="refname">class_parents</h1>   <p class="verinfo">(PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">class_parents</span> &mdash; <span class="dc-title">    返回指定类的父类。   </span></p>   </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.class-parents-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">array</span> <span class="methodname" style="color:#CC7832"><strong>class_parents</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#2EACF9">$class</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#2EACF9">$autoload</span></span>   ] )</div>    <p class="para rdfs-comment">    本函数返回一个包含了指定类<span class="parameter" style="color:#2EACF9">class</span>父类名称的数组。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.class-parents-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">class</span></dt>       <dd>        <p class="para">        对象（类实例）或字符串（类名称）。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">autoload</span></dt>       <dd>        <p class="para">       是否允许使用<a href="http://php.net/manual/zh/language.oop5.autoload.php" class="link">__autoload</a>       魔术函数来自动装载该类。默认值为<strong><span>TRUE</span></strong>。           </p>      </dd>          </dl>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.class-parents-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    调用成功则返回一个数组，否则返回<strong><span>FALSE</span></strong>。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.class-parents-changelog">   <h3 class="title">更新日志</h3>   <span>    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>5.1.0</td>        <td>         增加了允许参数<span class="parameter" style="color:#2EACF9">class</span>为字符串的选项。增加了<span class="parameter" style="color:#2EACF9">autoload</span>参数。        </td>       </tr>       </tbody>         </table>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.class-parents-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-4709">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">class_parents()</strong></span> example</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /><br /></span><span style="color: #007700">class&nbsp;</span><span style="color: #9876AA">foo&nbsp;</span><span style="color: #007700">{&nbsp;}<br />class&nbsp;</span><span style="color: #9876AA">bar&nbsp;</span><span style="color: #007700">extends&nbsp;</span><span style="color: #9876AA">foo&nbsp;</span><span style="color: #007700">{}<br /><br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">class_parents</span><span style="color: #007700">(new&nbsp;</span><span style="color: #9876AA">bar</span><span style="color: #007700">));<br /><br /></span><span style="color: #FF8000">//&nbsp;since&nbsp;PHP&nbsp;5.1.0&nbsp;you&nbsp;may&nbsp;also&nbsp;specify&nbsp;the&nbsp;parameter&nbsp;as&nbsp;a&nbsp;string<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">class_parents</span><span style="color: #007700">(</span><span style="color: #DD0000">'bar'</span><span style="color: #007700">));<br /><br /><br />function&nbsp;</span><span style="color: #9876AA">__autoload</span><span style="color: #007700">(</span><span style="color: #9876AA">$class_name</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;require_once&nbsp;</span><span style="color: #9876AA">$class_name&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #DD0000">'.php'</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #FF8000">//&nbsp;use&nbsp;__autoload&nbsp;to&nbsp;load&nbsp;the&nbsp;'not_loaded'&nbsp;class<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">class_parents</span><span style="color: #007700">(</span><span style="color: #DD0000">'not_loaded'</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">true</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程的输出类似于：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Array (     [foo] =&gt; foo )  Array (     [parent_of_not_loaded] =&gt; parent_of_not_loaded ) </span></div>     </div>    </div>   </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.class-parents-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link class_implements()} - 返回指定的类实现的所有接口。</span></li>    </ul>   </span>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.spl.php">SPL 函数</a></div></div>
 * @return array An array on success, or false on error.*/
function class_parents ($class, $autoload = null) {}

/**
*<div id="function.class-implements" class="refentry">  <div class="refnamediv">   <h1 class="refname">class_implements</h1>   <p class="verinfo">(PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">class_implements</span> &mdash; <span class="dc-title">    返回指定的类实现的所有接口。   </span></p>   </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.class-implements-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">array</span> <span class="methodname" style="color:#CC7832"><strong>class_implements</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#2EACF9">$class</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#2EACF9">$autoload</span></span>   ] )</div>    <p class="para rdfs-comment">    本函数返回一个数组，该数组中包含了指定类<span class="parameter" style="color:#2EACF9">class</span>及其父类所实现的所有接口的名称。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.class-implements-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">class</span></dt>       <dd>        <p class="para">         对象（类实例）或字符串（类名称）。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">autoload</span></dt>       <dd>        <p class="para">       是否允许使用<a href="http://php.net/manual/zh/language.oop5.autoload.php" class="link">__autoload</a>       魔术函数来自动装载该类。默认值为<strong><span>TRUE</span></strong>。       </p>      </dd>          </dl>    </span>  </div>     <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.class-implements-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    调用成功则返回一个数组，否则返回<strong><span>FALSE</span></strong>。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.class-implements-changelog">   <h3 class="title">更新日志</h3>   <span>    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>5.1.0</td>        <td>         增加了允许参数<span class="parameter" style="color:#2EACF9">class</span>为字符串的选项。增加了<span class="parameter" style="color:#2EACF9">autoload</span>参数。        </td>       </tr>       </tbody>         </table>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.class-implements-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-4708">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">class_implements()</strong></span> example</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /><br /></span><span style="color: #007700">interface&nbsp;</span><span style="color: #9876AA">foo&nbsp;</span><span style="color: #007700">{&nbsp;}<br />class&nbsp;</span><span style="color: #9876AA">bar&nbsp;</span><span style="color: #007700">implements&nbsp;</span><span style="color: #9876AA">foo&nbsp;</span><span style="color: #007700">{}<br /><br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">class_implements</span><span style="color: #007700">(new&nbsp;</span><span style="color: #9876AA">bar</span><span style="color: #007700">));<br /><br /></span><span style="color: #FF8000">//&nbsp;since&nbsp;PHP&nbsp;5.1.0&nbsp;you&nbsp;may&nbsp;also&nbsp;specify&nbsp;the&nbsp;parameter&nbsp;as&nbsp;a&nbsp;string<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">class_implements</span><span style="color: #007700">(</span><span style="color: #DD0000">'bar'</span><span style="color: #007700">));<br /><br /><br />function&nbsp;</span><span style="color: #9876AA">__autoload</span><span style="color: #007700">(</span><span style="color: #9876AA">$class_name</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;require_once&nbsp;</span><span style="color: #9876AA">$class_name&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #DD0000">'.php'</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #FF8000">//&nbsp;use&nbsp;__autoload&nbsp;to&nbsp;load&nbsp;the&nbsp;'not_loaded'&nbsp;class<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">class_implements</span><span style="color: #007700">(</span><span style="color: #DD0000">'not_loaded'</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">true</span><span style="color: #007700">));<br /><br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程的输出类似于：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Array (     [foo] =&gt; foo )  Array (     [interface_of_not_loaded] =&gt; interface_of_not_loaded ) </span></div>     </div>    </div>   </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.class-implements-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link class_parents()} - 返回指定类的父类。</span></li>     <li class="member"><span class="function">{@link get_declared_interfaces()} - 返回一个数组包含所有已声明的接口</span></li>    </ul>   </span>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.spl.php">SPL 函数</a></div></div>
 * @return array An array on success, or false on error.*/
function class_implements ($class, $autoload = null) {}

/**
*<div id="function.spl-object-hash" class="refentry">  <div class="refnamediv">   <h1 class="refname">spl_object_hash</h1>   <p class="verinfo">(PHP 5 &gt;= 5.2.0, PHP 7)</p><p class="refpurpose"><span class="refname">spl_object_hash</span> &mdash; <span class="dc-title">    返回指定对象的hash id   </span></p>   </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.spl-object-hash-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">string</span> <span class="methodname" style="color:#CC7832"><strong>spl_object_hash</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">object</span> <span class="parameter" style="color:#2EACF9">$obj</span></span>    )</div>    <p class="para rdfs-comment">    本函数为指定对象返回一个唯一标识符。这个标识符可用于作为保存对象或区分不同对象的hash key。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.spl-object-hash-parameters">    <h3 class="title">参数</h3>    <span>     <dl>              <dt> <span class="parameter" style="color:#2EACF9">object</span></dt>        <dd>         <p class="para">         Any object.         </p>       </dd>            </dl>     </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.spl-object-hash-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    字符串，对于每个对象它都是唯一的，并且对同一个对象它总是相同。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.spl-object-hash-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="regexiterator.setpregflags.example.basic">     <p><strong>Example #1 A <span class="function"><strong style="color:#CC7832">spl_object_hash()</strong></span> example</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$id&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">spl_object_hash</span><span style="color: #007700">(</span><span style="color: #9876AA">$object</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$storage</span><span style="color: #007700">[</span><span style="color: #9876AA">$id</span><span style="color: #007700">]&nbsp;=&nbsp;</span><span style="color: #9876AA">$object</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>     </div>   </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.spl-object-hash-notes">   <h3 class="title">注释</h3>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>:     <p class="para">     When an object is destroyed, its hash may be reused for other objects.    </p>   </p></blockquote>  </div>    <div class="up"><a href="http://php.net/manual/zh/ref.spl.php">SPL 函数</a></div></div>
 * @return string A string that is unique for each object and is always the same for*/
function spl_object_hash ($obj) {}

/**
*<div id="function.iterator-to-array" class="refentry">  <div class="refnamediv">   <h1 class="refname">iterator_to_array</h1>   <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7)</p><p class="refpurpose"><span class="refname">iterator_to_array</span> &mdash; <span class="dc-title">将迭代器中的元素拷贝到数组</span></p>   </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.iterator-to-array-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">array</span> <span class="methodname" style="color:#CC7832"><strong>iterator_to_array</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/class.traversable.php" class="type Traversable" style="color:#EAB766">Traversable</a></span> <span class="parameter" style="color:#2EACF9">$iterator</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#2EACF9">$use_keys</span><span class="initializer"> = true</span></span>   ] )</div>    <p class="para rdfs-comment">    将迭代器中的元素拷贝到数组。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.iterator-to-array-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">iterator</span></dt>       <dd>        <p class="para">        被拷贝的迭代器。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">use_keys</span></dt>       <dd>        <p class="para">        是否使用迭代器元素键作为索引。       </p>      </dd>          </dl>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.iterator-to-array-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    一个数组，包含迭代器中的元素。   </p>  </div>     <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.iterator-to-array-changelog">   <h3 class="title">更新日志</h3>   <span>    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>5.2.1</td>        <td>         添加了 <span class="parameter" style="color:#2EACF9">use_keys</span> 参数。        </td>       </tr>       </tbody>         </table>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.iterator-to-array-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="regexiterator.getmode.example.basic">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">iterator_to_array()</strong></span> example</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$iterator&nbsp;</span><span style="color: #007700">=&nbsp;new&nbsp;</span><span style="color: #9876AA">ArrayIterator</span><span style="color: #007700">(array(</span><span style="color: #DD0000">'recipe'</span><span style="color: #007700">=&gt;</span><span style="color: #DD0000">'pancakes'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'egg'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'milk'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'flour'</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">iterator_to_array</span><span style="color: #007700">(</span><span style="color: #9876AA">$iterator</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">true</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">iterator_to_array</span><span style="color: #007700">(</span><span style="color: #9876AA">$iterator</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">false</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> array(4) {   [&quot;recipe&quot;]=&gt;   string(8) &quot;pancakes&quot;   [0]=&gt;   string(3) &quot;egg&quot;   [1]=&gt;   string(4) &quot;milk&quot;   [2]=&gt;   string(5) &quot;flour&quot; } array(4) {   [0]=&gt;   string(8) &quot;pancakes&quot;   [1]=&gt;   string(3) &quot;egg&quot;   [2]=&gt;   string(4) &quot;milk&quot;   [3]=&gt;   string(5) &quot;flour&quot; } </span></div>      </div>    </div>   </span>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.spl.php">SPL 函数</a></div></div>
 * @return array An array containing the elements of the iterator.*/
function iterator_to_array ($iterator, $use_keys = true) {}

/**
*<div id="function.iterator-count" class="refentry">  <div class="refnamediv">   <h1 class="refname">iterator_count</h1>   <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7)</p><p class="refpurpose"><span class="refname">iterator_count</span> &mdash; <span class="dc-title">计算迭代器中元素的个数</span></p>   </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.iterator-count-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">int</span> <span class="methodname" style="color:#CC7832"><strong>iterator_count</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/class.traversable.php" class="type Traversable" style="color:#EAB766">Traversable</a></span> <span class="parameter" style="color:#2EACF9">$iterator</span></span>    )</div>    <p class="para rdfs-comment">    计算迭代器中的元素个数。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.iterator-count-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">iterator</span></dt>       <dd>        <p class="para">        要计数的迭代器。       </p>      </dd>          </dl>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.iterator-count-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    迭代器<span class="parameter" style="color:#2EACF9">iterator</span>中的元素个数。   </p>  </div>     <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.iterator-count-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="regexiterator.getflags.example.basic">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">iterator_count()</strong></span> example</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$iterator&nbsp;</span><span style="color: #007700">=&nbsp;new&nbsp;</span><span style="color: #9876AA">ArrayIterator</span><span style="color: #007700">(array(</span><span style="color: #DD0000">'recipe'</span><span style="color: #007700">=&gt;</span><span style="color: #DD0000">'pancakes'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'egg'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'milk'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'flour'</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">iterator_count</span><span style="color: #007700">(</span><span style="color: #9876AA">$iterator</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> int(4) </span></div>     </div>    </div>   </span>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.spl.php">SPL 函数</a></div></div>
 * @return int The number of elements in iterator.*/
function iterator_count ($iterator) {}

/**
*<div id="function.iterator-apply" class="refentry">  <div class="refnamediv">   <h1 class="refname">iterator_apply</h1>   <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7)</p><p class="refpurpose"><span class="refname">iterator_apply</span> &mdash; <span class="dc-title">为迭代器中每个元素调用一个用户自定义函数</span></p>   </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.iterator-apply-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">int</span> <span class="methodname" style="color:#CC7832"><strong>iterator_apply</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/class.traversable.php" class="type Traversable" style="color:#EAB766">Traversable</a></span> <span class="parameter" style="color:#2EACF9">$iterator</span></span>    , <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#2EACF9">$function</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">$args</span></span>   ] )</div>    <p class="para rdfs-comment">    循环迭代每个元素时调用某一回调函数。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.iterator-apply-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">iterator</span></dt>       <dd>        <p class="para">        需要循环迭代的类对象。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">function</span></dt>       <dd>        <p class="para">        迭代到每个元素时的调用的回调函数。        <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>:          <span class="simpara">          为了遍历 <span class="parameter" style="color:#2EACF9">iterator</span> 这个函数必须返回 <strong><span>TRUE</span></strong>。         </span>        </p></blockquote>       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">args</span></dt>       <dd>        <p class="para">        传递到回调函数的参数。       </p>      </dd>          </dl>    </span>   </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.iterator-apply-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回已迭代的元素个数。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.iterator-apply-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-4711">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">iterator_apply()</strong></span> example</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function&nbsp;</span><span style="color: #9876AA">print_caps</span><span style="color: #007700">(</span><span style="color: #9876AA">Iterator&nbsp;$iterator</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #9876AA">strtoupper</span><span style="color: #007700">(</span><span style="color: #9876AA">$iterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">current</span><span style="color: #007700">())&nbsp;.&nbsp;</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;</span><span style="color: #9876AA">TRUE</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">$it&nbsp;</span><span style="color: #007700">=&nbsp;new&nbsp;</span><span style="color: #9876AA">ArrayIterator</span><span style="color: #007700">(array(</span><span style="color: #DD0000">"Apples"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"Bananas"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"Cherries"</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">iterator_apply</span><span style="color: #007700">(</span><span style="color: #9876AA">$it</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"print_caps"</span><span style="color: #007700">,&nbsp;array(</span><span style="color: #9876AA">$it</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> APPLES BANANAS CHERRIES </span></div>     </div>    </div>   </span>  </div>      <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.iterator-apply-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link array_walk()} - 使用用户自定义函数对数组中的每个元素做回调处理</span></li>    </ul>   </span>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.spl.php">SPL 函数</a></div></div>
 * @return int the iteration count.*/
function iterator_apply ($iterator, $function, array $args = null) {}

// End of SPL v.0.2

/**
*<div id="function.class-uses" class="refentry">  <div class="refnamediv">   <h1 class="refname">class_uses</h1>   <p class="verinfo">(PHP 5 &gt;= 5.4.0, PHP 7)</p><p class="refpurpose"><span class="refname">class_uses</span> &mdash; <span class="dc-title">    Return the traits used by the given class   </span></p>   </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.class-uses-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">array</span> <span class="methodname" style="color:#CC7832"><strong>class_uses</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#2EACF9">$class</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#2EACF9">$autoload</span><span class="initializer"> = <strong><span>TRUE</span></strong></span></span>   ] )</div>    <p class="para rdfs-comment">    This function returns an array with the names of the traits that the    given <span class="parameter" style="color:#2EACF9">class</span> uses. This does however not include    any traits used by a parent class.   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.class-uses-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">class</span></dt>       <dd>        <p class="para">        An object (class instance) or a string (class name).       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">autoload</span></dt>       <dd>        <p class="para">        Whether to allow this function to load the class automatically through        the <span class="function">{@link __autoload()}</span> magic method.       </p>      </dd>          </dl>    </span>  </div>     <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.class-uses-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    An array on success, or <strong><span>FALSE</span></strong> on error.   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.class-uses-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="regexiterator.accept.example.basic">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">class_uses()</strong></span> example</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /><br /></span><span style="color: #007700">trait&nbsp;</span><span style="color: #9876AA">foo&nbsp;</span><span style="color: #007700">{&nbsp;}<br />class&nbsp;</span><span style="color: #9876AA">bar&nbsp;</span><span style="color: #007700">{<br />&nbsp;&nbsp;use&nbsp;</span><span style="color: #9876AA">foo</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">class_uses</span><span style="color: #007700">(new&nbsp;</span><span style="color: #9876AA">bar</span><span style="color: #007700">));<br /><br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">class_uses</span><span style="color: #007700">(</span><span style="color: #DD0000">'bar'</span><span style="color: #007700">));<br /><br />function&nbsp;</span><span style="color: #9876AA">__autoload</span><span style="color: #007700">(</span><span style="color: #9876AA">$class_name</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;require_once&nbsp;</span><span style="color: #9876AA">$class_name&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #DD0000">'.php'</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #FF8000">//&nbsp;use&nbsp;__autoload&nbsp;to&nbsp;load&nbsp;the&nbsp;'not_loaded'&nbsp;class<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">class_uses</span><span style="color: #007700">(</span><span style="color: #DD0000">'not_loaded'</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">true</span><span style="color: #007700">));<br /><br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程的输出类似于：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Array (     [foo] =&gt; foo )  Array (     [foo] =&gt; foo )  Array (     [trait_of_not_loaded] =&gt; trait_of_not_loaded ) </span></div>     </div>    </div>   </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.class-uses-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link class_parents()} - 返回指定类的父类。</span></li>     <li class="member"><span class="function">{@link get_declared_traits()} - 返回所有已定义的 traits 的数组</span></li>    </ul>   </span>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.spl.php">SPL 函数</a></div></div>
 * @return array Array on success, or FALSE on error.*/
function class_uses($class, bool $autoload = true ) {}

/**
*<div id="function.spl-object-id" class="refentry">  <div class="refnamediv">   <h1 class="refname">spl_object_id</h1>   <p class="verinfo">(PHP 7 &gt;= 7.2.0)</p><p class="refpurpose"><span class="refname">spl_object_id</span> &mdash; <span class="dc-title">    Return the integer object handle for given object   </span></p>   </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.spl-object-id-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">int</span> <span class="methodname" style="color:#CC7832"><strong>spl_object_id</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">object</span> <span class="parameter" style="color:#2EACF9">$obj</span></span>    )</div>    <p class="para rdfs-comment">    This function returns a unique identifier for the object. The object id is    unique for the lifetime of the object. Once the object is destroyed, its id    may be reused for other objects. This behavior is similar to    <span class="function">{@link spl_object_hash()}</span>.   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.spl-object-id-parameters">    <h3 class="title">参数</h3>    <span>     <dl>              <dt> <span class="parameter" style="color:#2EACF9">object</span></dt>        <dd>         <p class="para">         Any object.         </p>       </dd>            </dl>     </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.spl-object-id-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    An integer identifier that is unique for each currently existing object and    is always the same for each object.   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.spl-object-id-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-4718">     <p><strong>Example #1 A <span class="function"><strong style="color:#CC7832">spl_object_id()</strong></span> example</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$id&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">spl_object_id</span><span style="color: #007700">(</span><span style="color: #9876AA">$object</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$storage</span><span style="color: #007700">[</span><span style="color: #9876AA">$id</span><span style="color: #007700">]&nbsp;=&nbsp;</span><span style="color: #9876AA">$object</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>     </div>   </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.spl-object-id-notes">   <h3 class="title">注释</h3>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>:     <p class="para">     When an object is destroyed, its id may be reused for other objects.    </p>   </p></blockquote>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.spl.php">SPL 函数</a></div></div>
 * @return int*/
function spl_object_id($obj) {}

?>
