<?php

/**
*<div id="function.nl-langinfo" class="refentry">  <div class="refnamediv">   <h1 class="refname">nl_langinfo</h1>   <p class="verinfo">(PHP 4 &gt;= 4.1.0, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">nl_langinfo</span> &mdash; <span class="dc-title">Query language and locale information</span></p>   </div>    <div class="refsect1 description" id="refsect1-function.nl-langinfo-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">string</span> <span class="methodname"><strong>nl_langinfo</strong></span>     ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$item</code></span>    )</div>    <p class="para rdfs-comment">    <span class="function"><strong>nl_langinfo()</strong></span> is used to access individual elements of    the locale categories.  Unlike <span class="function">{@link localeconv()}</span>, which    returns all of the elements, <span class="function"><strong>nl_langinfo()</strong></span> allows you    to select any specific element.   </p>  </div>    <div class="refsect1 parameters" id="refsect1-function.nl-langinfo-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">item</code></dt>       <dd>        <p class="para">        <code class="parameter">item</code> may be an integer value of the element or the        constant name of the element. The following is a list of constant names        for <code class="parameter">item</code> that may be used and their description.        Some of these constants may not be defined or hold no value for certain        locales.        <table class="doctable table">         <caption><strong>nl_langinfo Constants</strong></caption>                   <col />          <col />          <thead>           <tr>            <th>Constant</th>            <th>Description</th>           </tr>           </thead>           <tbody class="tbody">           <tr>            <td colspan="2" style="text-align: center;"><em class="emphasis">LC_TIME Category Constants</em></td>           </tr>            <tr>            <td><strong><code>ABDAY_(1-7)</code></strong></td>            <td>Abbreviated name of n-th day of the week.</td>           </tr>            <tr>            <td><strong><code>DAY_(1-7)</code></strong></td>            <td>Name of the n-th day of the week (DAY_1 = Sunday).</td>           </tr>            <tr>            <td><strong><code>ABMON_(1-12)</code></strong></td>            <td>Abbreviated name of the n-th month of the year.</td>           </tr>            <tr>            <td><strong><code>MON_(1-12)</code></strong></td>            <td>Name of the n-th month of the year.</td>           </tr>            <tr>            <td><strong><code>AM_STR</code></strong></td>            <td>String for Ante meridian.</td>           </tr>            <tr>            <td><strong><code>PM_STR</code></strong></td>            <td>String for Post meridian.</td>           </tr>            <tr>            <td><strong><code>D_T_FMT</code></strong></td>            <td>String that can be used as the format string for <span class="function">{@link strftime()}</span> to represent time and date.</td>           </tr>            <tr>            <td><strong><code>D_FMT</code></strong></td>            <td>String that can be used as the format string for <span class="function">{@link strftime()}</span> to represent date.</td>           </tr>            <tr>            <td><strong><code>T_FMT</code></strong></td>            <td>String that can be used as the format string for <span class="function">{@link strftime()}</span> to represent time.</td>           </tr>            <tr>            <td><strong><code>T_FMT_AMPM</code></strong></td>            <td>String that can be used as the format string for <span class="function">{@link strftime()}</span> to represent time in 12-hour format with ante/post meridian.</td>           </tr>            <tr>            <td><strong><code>ERA</code></strong></td>            <td>Alternate era.</td>           </tr>            <tr>            <td><strong><code>ERA_YEAR</code></strong></td>            <td>Year in alternate era format.</td>           </tr>            <tr>            <td><strong><code>ERA_D_T_FMT</code></strong></td>            <td>Date and time in alternate era format (string can be used in <span class="function">{@link strftime()}</span>).</td>           </tr>            <tr>            <td><strong><code>ERA_D_FMT</code></strong></td>            <td>Date in alternate era format (string can be used in <span class="function">{@link strftime()}</span>).</td>           </tr>            <tr>            <td><strong><code>ERA_T_FMT</code></strong></td>            <td>Time in alternate era format (string can be used in <span class="function">{@link strftime()}</span>).</td>           </tr>            <tr>            <td colspan="2" style="text-align: center;"><em class="emphasis">LC_MONETARY Category Constants</em></td>           </tr>            <tr>            <td><strong><code>INT_CURR_SYMBOL</code></strong></td>            <td>International currency symbol.</td>           </tr>            <tr>            <td><strong><code>CURRENCY_SYMBOL</code></strong></td>            <td>Local currency symbol.</td>           </tr>            <tr>            <td><strong><code>CRNCYSTR</code></strong></td>            <td>Same value as <strong><code>CURRENCY_SYMBOL</code></strong>.</td>           </tr>            <tr>            <td><strong><code>MON_DECIMAL_POINT</code></strong></td>            <td>Decimal point character.</td>           </tr>            <tr>            <td><strong><code>MON_THOUSANDS_SEP</code></strong></td>            <td>Thousands separator (groups of three digits).</td>           </tr>            <tr>            <td><strong><code>MON_GROUPING</code></strong></td>            <td>Like <em>&quot;grouping&quot;</em> element.</td>           </tr>            <tr>            <td><strong><code>POSITIVE_SIGN</code></strong></td>            <td>Sign for positive values.</td>           </tr>            <tr>            <td><strong><code>NEGATIVE_SIGN</code></strong></td>            <td>Sign for negative values.</td>           </tr>            <tr>            <td><strong><code>INT_FRAC_DIGITS</code></strong></td>            <td>International fractional digits.</td>           </tr>            <tr>            <td><strong><code>FRAC_DIGITS</code></strong></td>            <td>Local fractional digits.</td>           </tr>            <tr>            <td><strong><code>P_CS_PRECEDES</code></strong></td>            <td>Returns 1 if <strong><code>CURRENCY_SYMBOL</code></strong> precedes a positive value.</td>           </tr>            <tr>            <td><strong><code>P_SEP_BY_SPACE</code></strong></td>            <td>Returns 1 if a space separates <strong><code>CURRENCY_SYMBOL</code></strong> from a positive value.</td>           </tr>            <tr>            <td><strong><code>N_CS_PRECEDES</code></strong></td>            <td>Returns 1 if <strong><code>CURRENCY_SYMBOL</code></strong> precedes a negative value.</td>           </tr>            <tr>            <td><strong><code>N_SEP_BY_SPACE</code></strong></td>            <td>Returns 1 if a space separates <strong><code>CURRENCY_SYMBOL</code></strong> from a negative value.</td>           </tr>            <tr>            <td><strong><code>P_SIGN_POSN</code></strong></td>            <td rowspan="2" style="vertical-align: middle;">             <ul class="itemizedlist">              <li class="listitem">               <span class="simpara">                 Returns 0 if parentheses surround the quantity and <strong><code>CURRENCY_SYMBOL</code></strong>.               </span>              </li>              <li class="listitem">               <span class="simpara">                Returns 1 if the sign string precedes the quantity and <strong><code>CURRENCY_SYMBOL</code></strong>.               </span>              </li>              <li class="listitem">               <span class="simpara">                Returns 2 if the sign string follows the quantity and <strong><code>CURRENCY_SYMBOL</code></strong>.               </span>              </li>              <li class="listitem">               <span class="simpara">                Returns 3 if the sign string immediately precedes the <strong><code>CURRENCY_SYMBOL</code></strong>.               </span>              </li>              <li class="listitem">               <span class="simpara">                Returns 4 if the sign string immediately follows the <strong><code>CURRENCY_SYMBOL</code></strong>.               </span>              </li>             </ul>            </td>           </tr>            <tr>            <td><strong><code>N_SIGN_POSN</code></strong></td>           </tr>            <tr>            <td colspan="2" style="text-align: center;"><em class="emphasis">LC_NUMERIC Category Constants</em></td>           </tr>            <tr>            <td><strong><code>DECIMAL_POINT</code></strong></td>            <td>Decimal point character.</td>           </tr>            <tr>            <td><strong><code>RADIXCHAR</code></strong></td>            <td>Same value as <strong><code>DECIMAL_POINT</code></strong>.</td>           </tr>            <tr>            <td><strong><code>THOUSANDS_SEP</code></strong></td>            <td>Separator character for thousands (groups of three digits).</td>           </tr>            <tr>            <td><strong><code>THOUSEP</code></strong></td>            <td>Same value as <strong><code>THOUSANDS_SEP</code></strong>.</td>           </tr>            <tr>            <td><strong><code>GROUPING</code></strong></td>            <td class="empty">&nbsp;</td>           </tr>            <tr>            <td colspan="2" style="text-align: center;"><em class="emphasis">LC_MESSAGES Category Constants</em></td>           </tr>            <tr>            <td><strong><code>YESEXPR</code></strong></td>            <td>Regex string for matching <em>&quot;yes&quot;</em> input.</td>           </tr>            <tr>            <td><strong><code>NOEXPR</code></strong></td>            <td>Regex string for matching <em>&quot;no&quot;</em> input.</td>           </tr>            <tr>            <td><strong><code>YESSTR</code></strong></td>            <td>Output string for <em>&quot;yes&quot;</em>.</td>           </tr>            <tr>            <td><strong><code>NOSTR</code></strong></td>            <td>Output string for <em>&quot;no&quot;</em>.</td>           </tr>            <tr>            <td colspan="2" style="text-align: center;"><em class="emphasis">LC_CTYPE Category Constants</em></td>           </tr>            <tr>            <td><strong><code>CODESET</code></strong></td>            <td>Return a string with the name of the character encoding.</td>           </tr>           </tbody>                 </table>        </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.nl-langinfo-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    Returns the element as a string, or <strong><code>FALSE</code></strong> if <code class="parameter">item</code>    is not valid.   </p>  </div>    <div class="refsect1 notes" id="refsect1-function.nl-langinfo-notes">   <h3 class="title">注释</h3>   <blockquote class="note"><p><strong class="note">Note</strong>: <span class="simpara">此函数未在 Windows 平台下实现。</span></p></blockquote>  </div>    <div class="refsect1 seealso" id="refsect1-function.nl-langinfo-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link setlocale()} - 设置地区信息</span></li>     <li class="member"><span class="function">{@link localeconv()} - Get numeric formatting information</span></li>    </ul>   </p>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.strings.php">字符串 函数</a></div></div>
 * @return string the element as a string, or false if item*/
function nl_langinfo ($item) {}

/**
*<div id="function.soundex" class="refentry">  <div class="refnamediv">   <h1 class="refname">soundex</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">soundex</span> &mdash; <span class="dc-title">Calculate the soundex key of a string</span></p>   </div>    <div class="refsect1 description" id="refsect1-function.soundex-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">string</span> <span class="methodname"><strong>soundex</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>    )</div>    <p class="para rdfs-comment">    Calculates the soundex key of <code class="parameter">str</code>.   </p>   <p class="para">    Soundex keys have the property that words pronounced similarly    produce the same soundex key, and can thus be used to simplify    searches in databases where you know the pronunciation but not    the spelling. This soundex function returns a string 4 characters    long, starting with a letter.   </p>   <p class="para">    This particular soundex function is one described by Donald Knuth    in &quot;The Art Of Computer Programming, vol. 3: Sorting And    Searching&quot;, Addison-Wesley (1973), pp. 391-392.   </p>  </div>    <div class="refsect1 parameters" id="refsect1-function.soundex-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">str</code></dt>       <dd>        <p class="para">        The input string.       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.soundex-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    Returns the soundex key as a string.   </p>  </div>    <div class="refsect1 examples" id="refsect1-function.soundex-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-5934">     <p><strong>Example #1 Soundex Examples</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />soundex</span><span style="color: #007700">(</span><span style="color: #DD0000">"Euler"</span><span style="color: #007700">)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;==&nbsp;</span><span style="color: #9876AA">soundex</span><span style="color: #007700">(</span><span style="color: #DD0000">"Ellery"</span><span style="color: #007700">);&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;E460<br /></span><span style="color: #9876AA">soundex</span><span style="color: #007700">(</span><span style="color: #DD0000">"Gauss"</span><span style="color: #007700">)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;==&nbsp;</span><span style="color: #9876AA">soundex</span><span style="color: #007700">(</span><span style="color: #DD0000">"Ghosh"</span><span style="color: #007700">);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;G200<br /></span><span style="color: #9876AA">soundex</span><span style="color: #007700">(</span><span style="color: #DD0000">"Hilbert"</span><span style="color: #007700">)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;==&nbsp;</span><span style="color: #9876AA">soundex</span><span style="color: #007700">(</span><span style="color: #DD0000">"Heilbronn"</span><span style="color: #007700">);&nbsp;</span><span style="color: #FF8000">//&nbsp;H416<br /></span><span style="color: #9876AA">soundex</span><span style="color: #007700">(</span><span style="color: #DD0000">"Knuth"</span><span style="color: #007700">)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;==&nbsp;</span><span style="color: #9876AA">soundex</span><span style="color: #007700">(</span><span style="color: #DD0000">"Kant"</span><span style="color: #007700">);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;K530<br /></span><span style="color: #9876AA">soundex</span><span style="color: #007700">(</span><span style="color: #DD0000">"Lloyd"</span><span style="color: #007700">)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;==&nbsp;</span><span style="color: #9876AA">soundex</span><span style="color: #007700">(</span><span style="color: #DD0000">"Ladd"</span><span style="color: #007700">);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;L300<br /></span><span style="color: #9876AA">soundex</span><span style="color: #007700">(</span><span style="color: #DD0000">"Lukasiewicz"</span><span style="color: #007700">)&nbsp;==&nbsp;</span><span style="color: #9876AA">soundex</span><span style="color: #007700">(</span><span style="color: #DD0000">"Lissajous"</span><span style="color: #007700">);&nbsp;</span><span style="color: #FF8000">//&nbsp;L222<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>     </div>   </p>  </div>    <div class="refsect1 seealso" id="refsect1-function.soundex-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link levenshtein()} - 计算两个字符串之间的编辑距离</span></li>     <li class="member"><span class="function">{@link metaphone()} - Calculate the metaphone key of a string</span></li>     <li class="member"><span class="function">{@link similar_text()} - 计算两个字符串的相似度</span></li>    </ul>   </p>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.strings.php">字符串 函数</a></div></div>
 * @return string the soundex key as a string.*/
function soundex ($str) {}

/**
*<div id="function.levenshtein" class="refentry">  <div class="refnamediv">   <h1 class="refname">levenshtein</h1>   <p class="verinfo">(PHP 4 &gt;= 4.0.1, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">levenshtein</span> &mdash; <span class="dc-title">计算两个字符串之间的编辑距离</span></p>   </div>    <div class="refsect1 description" id="refsect1-function.levenshtein-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">int</span> <span class="methodname"><strong>levenshtein</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str1</code></span>    , <span class="methodparam"><span class="type">string</span> <code class="parameter">$str2</code></span>    )</div>    <div class="methodsynopsis dc-description">    <span class="type">int</span> <span class="methodname"><strong>levenshtein</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str1</code></span>    , <span class="methodparam"><span class="type">string</span> <code class="parameter">$str2</code></span>    , <span class="methodparam"><span class="type">int</span> <code class="parameter">$cost_ins</code></span>    , <span class="methodparam"><span class="type">int</span> <code class="parameter">$cost_rep</code></span>    , <span class="methodparam"><span class="type">int</span> <code class="parameter">$cost_del</code></span>    )</div>    <p class="para rdfs-comment">    编辑距离，是指两个字串之间，通过替换、插入、删除等操作将字符串<code class="parameter">str1</code>转换成<code class="parameter">str2</code>所需要操作的最少字符数量。    该算法的复杂度是 <em>O(m*n)</em>，其中 <em>n</em> 和 <em>m</em> 分别是<code class="parameter">str1</code> 和<code class="parameter">str2</code>的长度 （当和算法复杂度为O(max(n,m)**3)的<span class="function">{@link similar_text()}</span>相比时，此函数还是相当不错的，尽管仍然很耗时。）。   </p>   <p class="para">    在最简单的形式中，该函数只以两个字符串作为参数，并计算通过插入、替换和删除等操作将<code class="parameter">str1</code>转换成<code class="parameter">str2</code>所需要的操作次数。   </p>   <p class="para">    第二种变体将采用三个额外的参数来定义插入、替换和删除操作的次数。此变体比第一种更加通用和适应，但效率不高。   </p>  </div>   <div class="refsect1 parameters" id="refsect1-function.levenshtein-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">str1</code></dt>       <dd>        <p class="para">        求编辑距离中的其中一个字符串       </p>      </dd>                 <dt> <code class="parameter">str2</code></dt>       <dd>        <p class="para">        求编辑距离中的另一个字符串       </p>      </dd>                 <dt> <code class="parameter">cost_ins</code></dt>       <dd>        <p class="para">        定义插入次数       </p>      </dd>                 <dt> <code class="parameter">cost_rep</code></dt>       <dd>        <p class="para">        定义替换次数       </p>      </dd>                 <dt> <code class="parameter">cost_del</code></dt>       <dd>        <p class="para">        定义删除次数       </p>      </dd>          </dl>    </p>  </div>     <div class="refsect1 returnvalues" id="refsect1-function.levenshtein-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    此函数返回两个字符串参数之间的编辑距离，如果其中一个字符串参数长度大于限制的255个字符时，返回-1。   </p>  </div>     <div class="refsect1 examples" id="refsect1-function.levenshtein-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-5912">     <p><strong>Example #1 <span class="function"><strong>levenshtein()</strong></span> 例子：</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">//&nbsp;输入拼写错误的单词<br /></span><span style="color: #9876AA">$input&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'carrrot'</span><span style="color: #007700">;<br /><br /></span><span style="color: #FF8000">//&nbsp;要检查的单词数组<br /></span><span style="color: #9876AA">$words&nbsp;&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">'apple'</span><span style="color: #007700">,</span><span style="color: #DD0000">'pineapple'</span><span style="color: #007700">,</span><span style="color: #DD0000">'banana'</span><span style="color: #007700">,</span><span style="color: #DD0000">'orange'</span><span style="color: #007700">,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #DD0000">'radish'</span><span style="color: #007700">,</span><span style="color: #DD0000">'carrot'</span><span style="color: #007700">,</span><span style="color: #DD0000">'pea'</span><span style="color: #007700">,</span><span style="color: #DD0000">'bean'</span><span style="color: #007700">,</span><span style="color: #DD0000">'potato'</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">//&nbsp;目前没有找到最短距离<br /></span><span style="color: #9876AA">$shortest&nbsp;</span><span style="color: #007700">=&nbsp;-</span><span style="color: #9876AA">1</span><span style="color: #007700">;<br /><br /></span><span style="color: #FF8000">//&nbsp;遍历单词来找到最接近的<br /></span><span style="color: #007700">foreach&nbsp;(</span><span style="color: #9876AA">$words&nbsp;</span><span style="color: #007700">as&nbsp;</span><span style="color: #9876AA">$word</span><span style="color: #007700">)&nbsp;{<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;计算输入单词与当前单词的距离<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$lev&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">levenshtein</span><span style="color: #007700">(</span><span style="color: #9876AA">$input</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$word</span><span style="color: #007700">);<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;检查完全的匹配<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #007700">if&nbsp;(</span><span style="color: #9876AA">$lev&nbsp;</span><span style="color: #007700">==&nbsp;</span><span style="color: #9876AA">0</span><span style="color: #007700">)&nbsp;{<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;最接近的单词是这个（完全匹配）<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$closest&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">$word</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$shortest&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">0</span><span style="color: #007700">;<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;退出循环；我们已经找到一个完全的匹配<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #007700">break;<br />&nbsp;&nbsp;&nbsp;&nbsp;}<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;如果此次距离比上次找到的要短<br />&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;或者还没找到接近的单词<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #007700">if&nbsp;(</span><span style="color: #9876AA">$lev&nbsp;</span><span style="color: #007700">&lt;=&nbsp;</span><span style="color: #9876AA">$shortest&nbsp;</span><span style="color: #007700">||&nbsp;</span><span style="color: #9876AA">$shortest&nbsp;</span><span style="color: #007700">&lt;&nbsp;</span><span style="color: #9876AA">0</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;设置最接近的匹配以及它的最短距离<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$closest&nbsp;&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">$word</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$shortest&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">$lev</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;}<br />}<br /><br />echo&nbsp;</span><span style="color: #DD0000">"Input&nbsp;word:&nbsp;</span><span style="color: #9876AA">$input</span><span style="color: #DD0000">\n"</span><span style="color: #007700">;<br />if&nbsp;(</span><span style="color: #9876AA">$shortest&nbsp;</span><span style="color: #007700">==&nbsp;</span><span style="color: #9876AA">0</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"Exact&nbsp;match&nbsp;found:&nbsp;</span><span style="color: #9876AA">$closest</span><span style="color: #DD0000">\n"</span><span style="color: #007700">;<br />}&nbsp;else&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"Did&nbsp;you&nbsp;mean:&nbsp;</span><span style="color: #9876AA">$closest</span><span style="color: #DD0000">?\n"</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen"> <div class="cdata"><pre> Input word: carrrot Did you mean: carrot? </pre></div>     </div>    </div>   </p>  </div>    <div class="refsect1 seealso" id="refsect1-function.levenshtein-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link soundex()} - Calculate the soundex key of a string</span></li>     <li class="member"><span class="function">{@link similar_text()} - 计算两个字符串的相似度</span></li>     <li class="member"><span class="function">{@link metaphone()} - Calculate the metaphone key of a string</span></li>    </ul>   </p>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.strings.php">字符串 函数</a></div></div>
 * @return int This function returns the Levenshtein-Distance between the*/
function levenshtein ($str1, $str2, $cost_ins = null, $cost_rep = null, $cost_del = null) {}

/**
*<div id="function.chr" class="refentry">  <div class="refnamediv">   <h1 class="refname">chr</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">chr</span> &mdash; <span class="dc-title">返回指定的字符</span></p>   </div>  <div class="refsect1 description" id="refsect1-function.chr-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">string</span> <span class="methodname"><strong>chr</strong></span>     ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$ascii</code></span>    )</div>    <p class="para rdfs-comment">    返回相对应于 <code class="parameter">ascii</code>    所指定的单个字符。   </p>   <p class="para">    此函数与 <span class="function">{@link ord()}</span> 是互补的。   </p>  </div>    <div class="refsect1 parameters" id="refsect1-function.chr-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">ascii</code></dt>       <dd>        <p class="para">        Ascii 码。       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.chr-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回规定的字符。   </p>  </div>    <div class="refsect1 examples" id="refsect1-function.chr-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-5888">     <p><strong>Example #1 <span class="function"><strong>chr()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$str&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">"The&nbsp;string&nbsp;ends&nbsp;in&nbsp;escape:&nbsp;"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$str&nbsp;</span><span style="color: #007700">.=&nbsp;</span><span style="color: #9876AA">chr</span><span style="color: #007700">(</span><span style="color: #9876AA">27</span><span style="color: #007700">);&nbsp;</span><span style="color: #FF8000">//&nbsp;在&nbsp;$str&nbsp;后边增加换码符&nbsp;<br /><br />//&nbsp;通常这样更有用&nbsp;<br /><br /></span><span style="color: #9876AA">$str&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">sprintf</span><span style="color: #007700">(</span><span style="color: #DD0000">"The&nbsp;string&nbsp;ends&nbsp;in&nbsp;escape:&nbsp;%c"</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">27</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>     </div>   </p>  </div>    <div class="refsect1 seealso" id="refsect1-function.chr-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link sprintf()} - Return a formatted string</span> 如何使用格式字符串 <em>%c</em>。</li>     <li class="member"><span class="function">{@link ord()}</span></li>     <li class="member">可以在此处找到 ASCII 码表：<a href="http://www.asciitable.com" class="link external">&raquo;&nbsp;http://www.asciitable.com</a>。</li>    </ul>   </p>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.strings.php">字符串 函数</a></div></div>
 * @return string the specified character.*/
function chr ($ascii) {}

/**
*<div id="function.ord" class="refentry">  <div class="refnamediv">   <h1 class="refname">ord</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">ord</span> &mdash; <span class="dc-title">转换字符串第一个字节为 0-255 之间的值</span></p>   </div>    <div class="refsect1 description" id="refsect1-function.ord-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">int</span> <span class="methodname"><strong>ord</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$string</code></span>    )</div>    <p class="para rdfs-comment">    解析 <code class="parameter">string</code> 二进制值第一个字节为 0 到 255 范围的无符号整型类型。   </p>   <p class="para">    如果字符串是 ASCII、 ISO-8859、Windows 1252之类单字节编码，就等于返回该字符在字符集编码表中的位置。    但请注意，本函数不会去检测字符串的编码，尤其是不会识别类似 UTF-8 或 UTF-16 这种多字节字符的 Unicode 代码点（code point）。   </p>   <p class="para">    该函数是 <span class="function">{@link chr()}</span> 的互补函数。   </p>  </div>    <div class="refsect1 parameters" id="refsect1-function.ord-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">string</code></dt>       <dd>        <p class="para">        一个字符。       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.ord-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回 0 - 255 的整型值。   </p>  </div>    <div class="refsect1 examples" id="refsect1-function.ord-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-5924">     <p><strong>Example #1 <span class="function"><strong>ord()</strong></span> 范例</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$str&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />if&nbsp;(</span><span style="color: #9876AA">ord</span><span style="color: #007700">(</span><span style="color: #9876AA">$str</span><span style="color: #007700">)&nbsp;==&nbsp;</span><span style="color: #9876AA">10</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"The&nbsp;first&nbsp;character&nbsp;of&nbsp;\$str&nbsp;is&nbsp;a&nbsp;line&nbsp;feed.\n"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>     </div>  </p>  <p class="para">     <div class="example" id="example-5925">     <p><strong>Example #2 检查 UTF-8 字符串的每一个字节</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">declare(</span><span style="color: #9876AA">encoding</span><span style="color: #007700">=</span><span style="color: #DD0000">'UTF-8'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$str&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">"🐘"</span><span style="color: #007700">;<br />for&nbsp;(&nbsp;</span><span style="color: #9876AA">$pos</span><span style="color: #007700">=</span><span style="color: #9876AA">0</span><span style="color: #007700">;&nbsp;</span><span style="color: #9876AA">$pos&nbsp;</span><span style="color: #007700">&lt;&nbsp;</span><span style="color: #9876AA">strlen</span><span style="color: #007700">(</span><span style="color: #9876AA">$str</span><span style="color: #007700">);&nbsp;</span><span style="color: #9876AA">$pos&nbsp;</span><span style="color: #007700">++&nbsp;)&nbsp;{<br />&nbsp;</span><span style="color: #9876AA">$byte&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">substr</span><span style="color: #007700">(</span><span style="color: #9876AA">$str</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$pos</span><span style="color: #007700">);<br />&nbsp;echo&nbsp;</span><span style="color: #DD0000">'Byte&nbsp;'&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #9876AA">$pos&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #DD0000">'&nbsp;of&nbsp;$str&nbsp;has&nbsp;value&nbsp;'&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #9876AA">ord</span><span style="color: #007700">(</span><span style="color: #9876AA">$byte</span><span style="color: #007700">)&nbsp;.&nbsp;</span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen"><br /> Byte 0 of $str has value 240<br /> Byte 1 of $str has value 159<br /> Byte 2 of $str has value 144<br /> Byte 3 of $str has value 152<br />     </div>    </div>   </p>  </div>    <div class="refsect1 seealso" id="refsect1-function.ord-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link chr()} - 返回指定的字符</span></li>     <li class="member"><a href="http://www.asciitable.com" class="link external">&raquo;&nbsp;ASCII 码表</a></li>    </ul>   </p>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.strings.php">字符串 函数</a></div></div>
 * @return int the ASCII value as an integer.*/
function ord ($string) {}

/**
*<div id="function.parse-str" class="refentry">  <div class="refnamediv">   <h1 class="refname">parse_str</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">parse_str</span> &mdash; <span class="dc-title">将字符串解析成多个变量</span></p>   </div>    <div class="refsect1 description" id="refsect1-function.parse-str-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>parse_str</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoded_string</code></span>    [, <span class="methodparam"><span class="type">array</span> <code class="parameter reference">&$result</code></span>   ] )</div>    <p class="para rdfs-comment">    如果 <code class="parameter">encoded_string</code> 是 URL 传递入的查询字符串（query string），则将它解析为变量并设置到当前作用域（如果提供了 <code class="parameter">result</code> 则会设置到该数组里 ）。   </p>  </div>    <div class="refsect1 parameters" id="refsect1-function.parse-str-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">encoded_string</code></dt>       <dd>        <p class="para">        输入的字符串。       </p>      </dd>                 <dt> <code class="parameter">result</code></dt>       <dd>        <p class="para">        如果设置了第二个变量 <code class="parameter">result</code>，        变量将会以数组元素的形式存入到这个数组，作为替代。       </p>        <div class="warning"><strong class="warning">Warning</strong>        <p class="para">         极度<em class="emphasis">不建议</em> 在没有 <code class="parameter">result</code> 参数的情况下使用此函数，并且在  PHP 7.2 中将<em class="emphasis">废弃</em>不设置参数的行为。        </p>        <p class="para">         在函数中动态设置变量会和 <a href="http://php.net/manual/zh/ini.core.php#ini.register-globals" class="link">register_globals</a> 有同样的问题。        </p>        <p class="para">         阅读「安全」中 <a href="http://php.net/manual/zh/security.globals.php" class="link">使用 Register Globals</a> 的章节，解释了它为什么是危险的。        </p>       </div>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.parse-str-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    没有返回值。   </p>  </div>    <div class="refsect1 changelog" id="refsect1-function.parse-str-changelog">   <h3 class="title">更新日志</h3>   <p class="para">    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>7.2.0</td>        <td>         不带第二个参数的情况下使用 <span class="function"><strong>parse_str()</strong></span> 会产生          <strong><code>E_DEPRECATED</code></strong> 警告。        </td>       </tr>       </tbody>         </table>    </p>  </div>    <div class="refsect1 examples" id="refsect1-function.parse-str-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-5926">     <p><strong>Example #1 <span class="function"><strong>parse_str()</strong></span> 的使用</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$str&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">"first=value&amp;arr[]=foo+bar&amp;arr[]=baz"</span><span style="color: #007700">;<br /><br /></span><span style="color: #FF8000">//&nbsp;推荐用法<br /></span><span style="color: #9876AA">parse_str</span><span style="color: #007700">(</span><span style="color: #9876AA">$str</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$output</span><span style="color: #007700">);<br />echo&nbsp;</span><span style="color: #9876AA">$output</span><span style="color: #007700">[</span><span style="color: #DD0000">'first'</span><span style="color: #007700">];&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;value<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #9876AA">$output</span><span style="color: #007700">[</span><span style="color: #DD0000">'arr'</span><span style="color: #007700">][</span><span style="color: #9876AA">0</span><span style="color: #007700">];&nbsp;</span><span style="color: #FF8000">//&nbsp;foo&nbsp;bar<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #9876AA">$output</span><span style="color: #007700">[</span><span style="color: #DD0000">'arr'</span><span style="color: #007700">][</span><span style="color: #9876AA">1</span><span style="color: #007700">];&nbsp;</span><span style="color: #FF8000">//&nbsp;baz<br /><br />//&nbsp;不建议这么用<br /></span><span style="color: #9876AA">parse_str</span><span style="color: #007700">(</span><span style="color: #9876AA">$str</span><span style="color: #007700">);<br />echo&nbsp;</span><span style="color: #9876AA">$first</span><span style="color: #007700">;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;value<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #9876AA">$arr</span><span style="color: #007700">[</span><span style="color: #9876AA">0</span><span style="color: #007700">];&nbsp;</span><span style="color: #FF8000">//&nbsp;foo&nbsp;bar<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #9876AA">$arr</span><span style="color: #007700">[</span><span style="color: #9876AA">1</span><span style="color: #007700">];&nbsp;</span><span style="color: #FF8000">//&nbsp;baz<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>     </div>   </p>   <p class="para">    由于 PHP 的变量名不能带「点」和「空格」，所以它们会被转化成下划线。    用本函数带 <code class="parameter">result</code> 参数，也会应用同样规则到数组的键名。    <div class="example" id="example-5927">     <p><strong>Example #2 <span class="function"><strong>parse_str()</strong></span> 名称改写</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />parse_str</span><span style="color: #007700">(</span><span style="color: #DD0000">"My&nbsp;Value=Something"</span><span style="color: #007700">);<br />echo&nbsp;</span><span style="color: #9876AA">$My_Value</span><span style="color: #007700">;&nbsp;</span><span style="color: #FF8000">//&nbsp;Something<br /><br /></span><span style="color: #9876AA">parse_str</span><span style="color: #007700">(</span><span style="color: #DD0000">"My&nbsp;Value=Something"</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$output</span><span style="color: #007700">);<br />echo&nbsp;</span><span style="color: #9876AA">$output</span><span style="color: #007700">[</span><span style="color: #DD0000">'My_Value'</span><span style="color: #007700">];&nbsp;</span><span style="color: #FF8000">//&nbsp;Something<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>     </div>   </p>   </div>     <div class="refsect1 notes" id="refsect1-function.parse-str-notes">   <h3 class="title">注释</h3>    <blockquote class="note"><p><strong class="note">Note</strong>:     <p class="para">     所有创建的变量(或者在设置第二个参数的情况下，返回数组里的值)，     都已经 <span class="function">{@link urldecode()}</span> 了。    </p>   </p></blockquote>   <blockquote class="note"><p><strong class="note">Note</strong>:     <p class="para">     要获取当前的 <em>QUERY_STRING</em>，可以使用     <var class="varname"><var class="varname"><a href="http://php.net/manual/zh/reserved.variables.server.php" class="classname">$_SERVER['QUERY_STRING']</a></var></var> 变量。     所以你可能想要阅读     <a href="http://php.net/manual/zh/language.variables.external.php" class="link">来自 PHP 之外的变量</a>这个章节。    </p>   </p></blockquote>   <blockquote class="note"><p><strong class="note">Note</strong>:     <p class="para">     本函数受 <a href="http://php.net/manual/zh/info.configuration.php#ini.magic-quotes-gpc" class="link">magic_quotes_gpc</a> 设置的影响，     和 <var class="varname"><var class="varname"><a href="http://php.net/manual/zh/reserved.variables.get.php" class="classname">$_GET</a></var></var>、     <var class="varname"><var class="varname"><a href="http://php.net/manual/zh/reserved.variables.post.php" class="classname">$_POST</a></var></var> 在 PHP 中填充变量相似， <span class="function"><strong>parse_str()</strong></span> 也使用了同样的机制。    </p>   </p></blockquote>  </div>    <div class="refsect1 seealso" id="refsect1-function.parse-str-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link parse_url()} - 解析 URL，返回其组成部分</span></li>     <li class="member"><span class="function">{@link pathinfo()} - 返回文件路径的信息</span></li>     <li class="member"><span class="function">{@link http_build_query()} - 生成 URL-encode 之后的请求字符串</span></li>     <li class="member"><span class="function">{@link urldecode()} - 解码已编码的 URL 字符串</span></li>    </ul>   </p>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.strings.php">字符串 函数</a></div></div>
 * @return void */
function parse_str ($str, array &$arr = null) {}

/**
*<div id="function.str-getcsv" class="refentry">  <div class="refnamediv">   <h1 class="refname">str_getcsv</h1>   <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7)</p><p class="refpurpose"><span class="refname">str_getcsv</span> &mdash; <span class="dc-title">    解析 CSV 字符串为一个数组   </span></p>   </div>   <div class="refsect1 description" id="refsect1-function.str-getcsv-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">array</span> <span class="methodname"><strong>str_getcsv</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$input</code></span>    [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$delimiter</code><span class="initializer"> = &quot;,&quot;</span></span>    [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$enclosure</code><span class="initializer"> = &#039;&quot;&#039;</span></span>    [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$escape</code><span class="initializer"> = &quot;\\&quot;</span></span>   ]]] )</div>    <p class="para rdfs-comment">    以 <acronym title="Comma Separated Value">CSV</acronym> 字段格式解析字符串输入，并返回包含读取字段的数组。   </p>  </div>    <div class="refsect1 parameters" id="refsect1-function.str-getcsv-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">input</code></dt>       <dd>        <p class="para">        待解析的字符串。       </p>      </dd>                 <dt> <code class="parameter">delimiter</code></dt>       <dd>        <p class="para">        设定字段界定符（仅单个字符）。       </p>      </dd>                 <dt> <code class="parameter">enclosure</code></dt>       <dd>        <p class="para">        设定字段包裹字符（仅单个字符）。       </p>      </dd>                 <dt> <code class="parameter">escape</code></dt>       <dd>        <p class="para">        设置转义字符（仅单个字符）。默认为反斜线（<em>\</em>）。       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.str-getcsv-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回一个包含读取到的字段的索引数组。   </p>  </div>    <div class="refsect1 seealso" id="refsect1-function.str-getcsv-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link fgetcsv()} - 从文件指针中读入一行并解析 CSV 字段</span></li>    </ul>   </p>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.strings.php">字符串 函数</a></div></div>
 * @return array an indexed array containing the fields read.*/
function str_getcsv ($input, $delimiter = ",", $enclosure = '"', $escape = "\\") {}

/**
*<div id="function.str-pad" class="refentry">  <div class="refnamediv">   <h1 class="refname">str_pad</h1>   <p class="verinfo">(PHP 4 &gt;= 4.0.1, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">str_pad</span> &mdash; <span class="dc-title">使用另一个字符串填充字符串为指定长度</span></p>   </div>    <div class="refsect1 description" id="refsect1-function.str-pad-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">string</span> <span class="methodname"><strong>str_pad</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$input</code></span>    , <span class="methodparam"><span class="type">int</span> <code class="parameter">$pad_length</code></span>    [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$pad_string</code><span class="initializer"> = &quot; &quot;</span></span>    [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$pad_type</code><span class="initializer"> = STR_PAD_RIGHT</span></span>   ]] )</div>    <p class="para rdfs-comment">    该函数返回 <code class="parameter">input</code> 被从左端、右端或者同时两端被填充到制定长度后的结果。如果可选的 <code class="parameter">pad_string</code> 参数没有被指定，<code class="parameter">input</code> 将被空格字符填充，否则它将被 <code class="parameter">pad_string</code> 填充到指定长度。   </p>  </div>    <div class="refsect1 parameters" id="refsect1-function.str-pad-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">input</code></dt>       <dd>        <p class="para">        输入字符串。       </p>      </dd>                 <dt> <code class="parameter">pad_length</code></dt>       <dd>        <p class="para">        如果 <code class="parameter">pad_length</code> 的值是负数，小于或者等于输入字符串的长度，不会发生任何填充，并会返回 <code class="parameter">input</code> 。       </p>      </dd>                 <dt> <code class="parameter">pad_string</code></dt>       <dd>        <blockquote class="note"><p><strong class="note">Note</strong>:         <p class="para">         如果填充字符的长度不能被 <code class="parameter">pad_string</code> 整除，那么 <code class="parameter">pad_string</code> 可能会被缩短。        </p>       </p></blockquote>      </dd>                 <dt> <code class="parameter">pad_type</code></dt>       <dd>        <p class="para">        可选的 <code class="parameter">pad_type</code> 参数的可能值为 <strong><code>STR_PAD_RIGHT</code></strong>，<strong><code>STR_PAD_LEFT</code></strong> 或 <strong><code>STR_PAD_BOTH</code></strong>。如果没有指定 <code class="parameter">pad_type</code>，则假定它是 <strong><code>STR_PAD_RIGHT</code></strong>。       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.str-pad-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回填充后的字符串。   </p>  </div>     <div class="refsect1 examples" id="refsect1-function.str-pad-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-5949">     <p><strong>Example #1 <span class="function"><strong>str_pad()</strong></span> 范例</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$input&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">"Alien"</span><span style="color: #007700">;<br />echo&nbsp;</span><span style="color: #9876AA">str_pad</span><span style="color: #007700">(</span><span style="color: #9876AA">$input</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">10</span><span style="color: #007700">);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;输出&nbsp;"Alien&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #9876AA">str_pad</span><span style="color: #007700">(</span><span style="color: #9876AA">$input</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">10</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"-="</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">STR_PAD_LEFT</span><span style="color: #007700">);&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;输出&nbsp;"-=-=-Alien"<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #9876AA">str_pad</span><span style="color: #007700">(</span><span style="color: #9876AA">$input</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">10</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"_"</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">STR_PAD_BOTH</span><span style="color: #007700">);&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;输出&nbsp;"__Alien___"<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #9876AA">str_pad</span><span style="color: #007700">(</span><span style="color: #9876AA">$input</span><span style="color: #007700">,&nbsp;&nbsp;</span><span style="color: #9876AA">6</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"___"</span><span style="color: #007700">);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;输出&nbsp;"Alien_"<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #9876AA">str_pad</span><span style="color: #007700">(</span><span style="color: #9876AA">$input</span><span style="color: #007700">,&nbsp;&nbsp;</span><span style="color: #9876AA">3</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"*"</span><span style="color: #007700">);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;输出&nbsp;"Alien"<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>     </div>   </p>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.strings.php">字符串 函数</a></div></div>
 * @return string the padded string.*/
function str_pad ($input, $pad_length, $pad_string = " ", $pad_type = STR_PAD_RIGHT) {}

/**
*<div id="function.chop" class="refentry">  <div class="refnamediv">   <h1 class="refname">chop</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">chop</span> &mdash; <span class="dc-title"><span class="function">{@link rtrim()}</span> 的别名</span></p>   </div>  <div class="refsect1 description" id="refsect1-function.chop-description">   <h3 class="title">说明</h3>   <p class="simpara">    此函数是该函数的别名：<span class="function">{@link rtrim()}</span>。   </p>  </div>    <div class="refsect1 notes" id="refsect1-function.chop-notes">   <h3 class="title">注释</h3>   <blockquote class="note"><p><strong class="note">Note</strong>:     <p class="para">     <span class="function"><strong>chop()</strong></span> 与 Perl 的     <em>chop()</em> 函数有所不同，它会删除字符串的最后一个字符。    </p>   </p></blockquote>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.strings.php">字符串 函数</a></div></div>
 * @return string the modified string.*/
function chop ($str, $character_mask) {}

/**
*<div id="function.strchr" class="refentry">  <div class="refnamediv">   <h1 class="refname">strchr</h1>    <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">strchr</span> &mdash; <span class="dc-title">别名 <span class="function">{@link strstr()}</span></span></p>   </div>   <div class="refsect1 description" id="refsect1-function.strchr-description">   <h3 class="title">说明</h3>   <p class="simpara">    此函数是该函数的别名：    <span class="function">{@link strstr()}</span>.   </p>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.strings.php">字符串 函数</a></div></div>
 * @return string Returns the portion of string, or FALSE if needle is not found.*/
function strchr ($haystack, $needle, $part) {}

/**
*<div id="function.sprintf" class="refentry">  <div class="refnamediv">   <h1 class="refname">sprintf</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">sprintf</span> &mdash; <span class="dc-title">Return a formatted string</span></p>   </div>    <div class="refsect1 description" id="refsect1-function.sprintf-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">string</span> <span class="methodname"><strong>sprintf</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$format</code></span>    [, <span class="methodparam"><span class="type"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$...</code></span>   ] )</div>    <p class="para rdfs-comment">    Returns a string produced according to the formatting string    <code class="parameter">format</code>.   </p>  </div>    <div class="refsect1 parameters" id="refsect1-function.sprintf-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">format</code></dt>       <dd>        <p class="para">        The format string is composed of zero or more directives:        ordinary characters (excluding <em>%</em>) that are        copied directly to the result and <em class="emphasis">conversion        specifications</em>, each of which results in fetching its        own parameter.  This applies to both <span class="function"><strong>sprintf()</strong></span>        and <span class="function">{@link printf()}</span>.       </p>       <p class="para">        Each conversion specification consists of a percent sign        (<em>%</em>), followed by one or more of these        elements, in order:        <ol type="1">         <li class="listitem">          <span class="simpara">           An optional <em class="emphasis">sign specifier</em> that forces a sign           (- or +) to be used on a number. By default, only the - sign is used           on a number if it&#039;s negative. This specifier forces positive numbers           to have the + sign attached as well.          </span>         </li>         <li class="listitem">          <span class="simpara">           An optional <em class="emphasis">padding specifier</em> that says           what character will be used for padding the results to the           right string size.  This may be a space character or a           <em>0</em> (zero character).  The default is to pad           with spaces.  An alternate padding character can be specified           by prefixing it with a single quote (<em>&#039;</em>).           See the examples below.          </span>         </li>         <li class="listitem">          <span class="simpara">           An optional <em class="emphasis">alignment specifier</em> that says           if the result should be left-justified or right-justified.           The default is right-justified; a <em>-</em>           character here will make it left-justified.          </span>         </li>         <li class="listitem">          <span class="simpara">           An optional number, a <em class="emphasis">width specifier</em>           that says how many characters (minimum) this conversion should           result in.          </span>         </li>         <li class="listitem">          <span class="simpara">           An optional <em class="emphasis">precision specifier</em> in the form           of a period (<em>.</em>) followed by an optional decimal digit string           that says how many decimal digits should be displayed for           floating-point numbers. When using this specifier on a string,           it acts as a cutoff point, setting a maximum character limit to           the string. Additionally, the character to use when padding a           number may optionally be specified between the period and the           digit.          </span>         </li>         <li class="listitem">          <p class="para">           A <em class="emphasis">type specifier</em> that says what type the           argument data should be treated as.  Possible types:           <ul class="simplelist">            <li class="member">             <em>%</em> - a literal percent character. No             argument is required.            </li>            <li class="member">             <em>b</em> - the argument is treated as an             integer and presented as a binary number.            </li>            <li class="member">             <em>c</em> - the argument is treated as an             integer and presented as the character with that ASCII             value.            </li>            <li class="member">             <em>d</em> - the argument is treated as an             integer and presented as a (signed) decimal number.            </li>            <li class="member">             <em>e</em> - the argument is treated as scientific             notation (e.g. 1.2e+2).             The precision specifier stands for the number of digits after the             decimal point since PHP 5.2.1. In earlier versions, it was taken as             number of significant digits (one less).            </li>            <li class="member">             <em>E</em> - like <em>%e</em> but uses             uppercase letter (e.g. 1.2E+2).            </li>            <li class="member">             <em>f</em> - the argument is treated as a             float and presented as a floating-point number (locale aware).            </li>            <li class="member">             <em>F</em> - the argument is treated as a             float and presented as a floating-point number (non-locale aware).             Available since PHP 5.0.3.            </li>            <li class="member">             <em>g</em> - shorter of <em>%e</em> and             <em>%f</em>.            </li>            <li class="member">             <em>G</em> - shorter of <em>%E</em> and             <em>%f</em>.            </li>            <li class="member">             <em>o</em> - the argument is treated as an             integer and presented as an octal number.            </li>            <li class="member">             <em>s</em> - the argument is treated as and             presented as a string.            </li>            <li class="member">             <em>u</em> - the argument is treated as an             integer and presented as an unsigned decimal number.            </li>            <li class="member">             <em>x</em> - the argument is treated as an integer             and presented as a hexadecimal number (with lowercase             letters).            </li>            <li class="member">             <em>X</em> - the argument is treated as an integer             and presented as a hexadecimal number (with uppercase             letters).            </li>           </ul>          </p>         </li>        </ol>       </p>       <p class="para">        Variables will be co-erced to a suitable type for the specifier:        <table id="sprintf.coercion" class="doctable table">         <caption><strong>Type Handling</strong></caption>                   <thead>           <tr>            <th>Type</th>            <th>Specifiers</th>           </tr>           </thead>           <tbody class="tbody">           <tr>            <td><em>string</em></td>            <td><em>s</em></td>           </tr>            <tr>            <td><em>integer</em></td>            <td>             <em>d</em>,              <em>u</em>,              <em>c</em>,             <em>o</em>,             <em>x</em>,             <em>X</em>,             <em>b</em>            </td>           </tr>            <tr>            <td><em>double</em></td>            <td>             <em>g</em>,             <em>G</em>,             <em>e</em>,             <em>E</em>,             <em>f</em>,             <em>F</em>            </td>           </tr>           </tbody>                 </table>        </p>       <div class="warning"><strong class="warning">Warning</strong>        <p class="para">         Attempting to use a combination of the string and width specifiers with character sets that require more than one byte per character may result in unexpected results        </p>       </div>       <p class="para">        The format string supports argument numbering/swapping.  Here is an        example:        <div class="example" id="example-5935">         <p><strong>Example #1 Argument swapping</strong></p>         <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$num&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">5</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$location&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'tree'</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">$format&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'There&nbsp;are&nbsp;%d&nbsp;monkeys&nbsp;in&nbsp;the&nbsp;%s'</span><span style="color: #007700">;<br />echo&nbsp;</span><span style="color: #9876AA">sprintf</span><span style="color: #007700">(</span><span style="color: #9876AA">$format</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$num</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$location</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>         </div>         </div>        This will output &quot;There are 5 monkeys in the tree&quot;.  But        imagine we are creating a format string in a separate file,        commonly because we would like to internationalize it and we        rewrite it as:        <div class="example" id="example-5936">         <p><strong>Example #2 Argument swapping</strong></p>         <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$format&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'The&nbsp;%s&nbsp;contains&nbsp;%d&nbsp;monkeys'</span><span style="color: #007700">;<br />echo&nbsp;</span><span style="color: #9876AA">sprintf</span><span style="color: #007700">(</span><span style="color: #9876AA">$format</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$num</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$location</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>         </div>         </div>        We now have a problem.  The order of the placeholders in the        format string does not match the order of the arguments in the        code.  We would like to leave the code as is and simply indicate        in the format string which arguments the placeholders refer to.        We would write the format string like this instead:        <div class="example" id="example-5937">         <p><strong>Example #3 Argument swapping</strong></p>         <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$format&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'The&nbsp;%2$s&nbsp;contains&nbsp;%1$d&nbsp;monkeys'</span><span style="color: #007700">;<br />echo&nbsp;</span><span style="color: #9876AA">sprintf</span><span style="color: #007700">(</span><span style="color: #9876AA">$format</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$num</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$location</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>         </div>         </div>        An added benefit here is that you can repeat the placeholders without        adding more arguments in the code.  For example:        <div class="example" id="example-5938">         <p><strong>Example #4 Argument swapping</strong></p>         <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$format&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'The&nbsp;%2$s&nbsp;contains&nbsp;%1$d&nbsp;monkeys.<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;That\'s&nbsp;a&nbsp;nice&nbsp;%2$s&nbsp;full&nbsp;of&nbsp;%1$d&nbsp;monkeys.'</span><span style="color: #007700">;<br />echo&nbsp;</span><span style="color: #9876AA">sprintf</span><span style="color: #007700">(</span><span style="color: #9876AA">$format</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$num</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$location</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>         </div>         </div>        When using argument swapping, the <em>n$</em>        <em class="emphasis">position specifier</em> must come immediately        after the percent sign (<em>%</em>), before any other        specifiers, as shown in the example below.        <div class="example" id="example-5939">         <p><strong>Example #5 Specifying padding character</strong></p>         <div class="example-contents">          <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #9876AA">sprintf</span><span style="color: #007700">(</span><span style="color: #DD0000">"%'.9d\n"</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">123</span><span style="color: #007700">);<br />echo&nbsp;</span><span style="color: #9876AA">sprintf</span><span style="color: #007700">(</span><span style="color: #DD0000">"%'.09d\n"</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">123</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>         </div>          <div class="example-contents"><p>以上例程会输出：</p></div>         <div class="example-contents screen">          <div class="cdata"><pre> ......123 000000123 </pre></div>         </div>        </div>        <div class="example" id="example-5940">         <p><strong>Example #6 Position specifier with other specifiers</strong></p>         <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$format&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'The&nbsp;%2$s&nbsp;contains&nbsp;%1$04d&nbsp;monkeys'</span><span style="color: #007700">;<br />echo&nbsp;</span><span style="color: #9876AA">sprintf</span><span style="color: #007700">(</span><span style="color: #9876AA">$format</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$num</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$location</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>         </div>          <div class="example-contents"><p>以上例程会输出：</p></div>         <div class="example-contents screen"> <div class="cdata"><pre> The tree contains 0005 monkeys </pre></div>         </div>        </div>       </p>       <blockquote class="note"><p><strong class="note">Note</strong>:         <p class="para">         Attempting to use a position specifier greater than         <strong><code>PHP_INT_MAX</code></strong> will result in         <span class="function"><strong>sprintf()</strong></span> generating warnings.        </p>       </p></blockquote>       <div class="warning"><strong class="warning">Warning</strong>        <p class="para">         The <em>c</em> type specifier ignores padding and width        </p>       </div>      </dd>                 <dt> <code class="parameter">...</code></dt>       <dd>        <p class="para">       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.sprintf-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    Returns a string produced according to the formatting string    <code class="parameter">format</code>,  或者在失败时返回 <strong><code>FALSE</code></strong>.   </p>  </div>    <div class="refsect1 examples" id="refsect1-function.sprintf-examples">   <h3 class="title">范例</h3>   <div class="example" id="example-5941">    <p><strong>Example #7 <span class="function">{@link printf()}</span>: various examples</strong></p>    <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$n&nbsp;</span><span style="color: #007700">=&nbsp;&nbsp;</span><span style="color: #9876AA">43951789</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$u&nbsp;</span><span style="color: #007700">=&nbsp;-</span><span style="color: #9876AA">43951789</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$c&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">65</span><span style="color: #007700">;&nbsp;</span><span style="color: #FF8000">//&nbsp;ASCII&nbsp;65&nbsp;is&nbsp;'A'<br /><br />//&nbsp;notice&nbsp;the&nbsp;double&nbsp;%%,&nbsp;this&nbsp;prints&nbsp;a&nbsp;literal&nbsp;'%'&nbsp;character<br /></span><span style="color: #9876AA">printf</span><span style="color: #007700">(</span><span style="color: #DD0000">"%%b&nbsp;=&nbsp;'%b'\n"</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$n</span><span style="color: #007700">);&nbsp;</span><span style="color: #FF8000">//&nbsp;binary&nbsp;representation<br /></span><span style="color: #9876AA">printf</span><span style="color: #007700">(</span><span style="color: #DD0000">"%%c&nbsp;=&nbsp;'%c'\n"</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$c</span><span style="color: #007700">);&nbsp;</span><span style="color: #FF8000">//&nbsp;print&nbsp;the&nbsp;ascii&nbsp;character,&nbsp;same&nbsp;as&nbsp;chr()&nbsp;function<br /></span><span style="color: #9876AA">printf</span><span style="color: #007700">(</span><span style="color: #DD0000">"%%d&nbsp;=&nbsp;'%d'\n"</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$n</span><span style="color: #007700">);&nbsp;</span><span style="color: #FF8000">//&nbsp;standard&nbsp;integer&nbsp;representation<br /></span><span style="color: #9876AA">printf</span><span style="color: #007700">(</span><span style="color: #DD0000">"%%e&nbsp;=&nbsp;'%e'\n"</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$n</span><span style="color: #007700">);&nbsp;</span><span style="color: #FF8000">//&nbsp;scientific&nbsp;notation<br /></span><span style="color: #9876AA">printf</span><span style="color: #007700">(</span><span style="color: #DD0000">"%%u&nbsp;=&nbsp;'%u'\n"</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$n</span><span style="color: #007700">);&nbsp;</span><span style="color: #FF8000">//&nbsp;unsigned&nbsp;integer&nbsp;representation&nbsp;of&nbsp;a&nbsp;positive&nbsp;integer<br /></span><span style="color: #9876AA">printf</span><span style="color: #007700">(</span><span style="color: #DD0000">"%%u&nbsp;=&nbsp;'%u'\n"</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$u</span><span style="color: #007700">);&nbsp;</span><span style="color: #FF8000">//&nbsp;unsigned&nbsp;integer&nbsp;representation&nbsp;of&nbsp;a&nbsp;negative&nbsp;integer<br /></span><span style="color: #9876AA">printf</span><span style="color: #007700">(</span><span style="color: #DD0000">"%%f&nbsp;=&nbsp;'%f'\n"</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$n</span><span style="color: #007700">);&nbsp;</span><span style="color: #FF8000">//&nbsp;floating&nbsp;point&nbsp;representation<br /></span><span style="color: #9876AA">printf</span><span style="color: #007700">(</span><span style="color: #DD0000">"%%o&nbsp;=&nbsp;'%o'\n"</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$n</span><span style="color: #007700">);&nbsp;</span><span style="color: #FF8000">//&nbsp;octal&nbsp;representation<br /></span><span style="color: #9876AA">printf</span><span style="color: #007700">(</span><span style="color: #DD0000">"%%s&nbsp;=&nbsp;'%s'\n"</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$n</span><span style="color: #007700">);&nbsp;</span><span style="color: #FF8000">//&nbsp;string&nbsp;representation<br /></span><span style="color: #9876AA">printf</span><span style="color: #007700">(</span><span style="color: #DD0000">"%%x&nbsp;=&nbsp;'%x'\n"</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$n</span><span style="color: #007700">);&nbsp;</span><span style="color: #FF8000">//&nbsp;hexadecimal&nbsp;representation&nbsp;(lower-case)<br /></span><span style="color: #9876AA">printf</span><span style="color: #007700">(</span><span style="color: #DD0000">"%%X&nbsp;=&nbsp;'%X'\n"</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$n</span><span style="color: #007700">);&nbsp;</span><span style="color: #FF8000">//&nbsp;hexadecimal&nbsp;representation&nbsp;(upper-case)<br /><br /></span><span style="color: #9876AA">printf</span><span style="color: #007700">(</span><span style="color: #DD0000">"%%+d&nbsp;=&nbsp;'%+d'\n"</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$n</span><span style="color: #007700">);&nbsp;</span><span style="color: #FF8000">//&nbsp;sign&nbsp;specifier&nbsp;on&nbsp;a&nbsp;positive&nbsp;integer<br /></span><span style="color: #9876AA">printf</span><span style="color: #007700">(</span><span style="color: #DD0000">"%%+d&nbsp;=&nbsp;'%+d'\n"</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$u</span><span style="color: #007700">);&nbsp;</span><span style="color: #FF8000">//&nbsp;sign&nbsp;specifier&nbsp;on&nbsp;a&nbsp;negative&nbsp;integer<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>    </div>     <div class="example-contents"><p>以上例程会输出：</p></div>    <div class="example-contents screen"> <div class="cdata"><pre> %b = &#039;10100111101010011010101101&#039; %c = &#039;A&#039; %d = &#039;43951789&#039; %e = &#039;4.39518e+7&#039; %u = &#039;43951789&#039; %u = &#039;4251015507&#039; %f = &#039;43951789.000000&#039; %o = &#039;247523255&#039; %s = &#039;43951789&#039; %x = &#039;29ea6ad&#039; %X = &#039;29EA6AD&#039; %+d = &#039;+43951789&#039; %+d = &#039;-43951789&#039; </pre></div>    </div>   </div>   <div class="example" id="example-5942">    <p><strong>Example #8 <span class="function">{@link printf()}</span>: string specifiers</strong></p>    <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$s&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'monkey'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$t&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'many&nbsp;monkeys'</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">printf</span><span style="color: #007700">(</span><span style="color: #DD0000">"[%s]\n"</span><span style="color: #007700">,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$s</span><span style="color: #007700">);&nbsp;</span><span style="color: #FF8000">//&nbsp;standard&nbsp;string&nbsp;output<br /></span><span style="color: #9876AA">printf</span><span style="color: #007700">(</span><span style="color: #DD0000">"[%10s]\n"</span><span style="color: #007700">,&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$s</span><span style="color: #007700">);&nbsp;</span><span style="color: #FF8000">//&nbsp;right-justification&nbsp;with&nbsp;spaces<br /></span><span style="color: #9876AA">printf</span><span style="color: #007700">(</span><span style="color: #DD0000">"[%-10s]\n"</span><span style="color: #007700">,&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$s</span><span style="color: #007700">);&nbsp;</span><span style="color: #FF8000">//&nbsp;left-justification&nbsp;with&nbsp;spaces<br /></span><span style="color: #9876AA">printf</span><span style="color: #007700">(</span><span style="color: #DD0000">"[%010s]\n"</span><span style="color: #007700">,&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$s</span><span style="color: #007700">);&nbsp;</span><span style="color: #FF8000">//&nbsp;zero-padding&nbsp;works&nbsp;on&nbsp;strings&nbsp;too<br /></span><span style="color: #9876AA">printf</span><span style="color: #007700">(</span><span style="color: #DD0000">"[%'#10s]\n"</span><span style="color: #007700">,&nbsp;&nbsp;</span><span style="color: #9876AA">$s</span><span style="color: #007700">);&nbsp;</span><span style="color: #FF8000">//&nbsp;use&nbsp;the&nbsp;custom&nbsp;padding&nbsp;character&nbsp;'#'<br /></span><span style="color: #9876AA">printf</span><span style="color: #007700">(</span><span style="color: #DD0000">"[%10.10s]\n"</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$t</span><span style="color: #007700">);&nbsp;</span><span style="color: #FF8000">//&nbsp;left-justification&nbsp;but&nbsp;with&nbsp;a&nbsp;cutoff&nbsp;of&nbsp;10&nbsp;characters<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>    </div>     <div class="example-contents"><p>以上例程会输出：</p></div>    <div class="example-contents screen"> <div class="cdata"><pre> [monkey] [    monkey] [monkey    ] [0000monkey] [####monkey] [many monke] </pre></div>    </div>   </div>   <div class="example" id="example-5943">    <p><strong>Example #9 <span class="function"><strong>sprintf()</strong></span>: zero-padded integers</strong></p>    <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$isodate&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">sprintf</span><span style="color: #007700">(</span><span style="color: #DD0000">"%04d-%02d-%02d"</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$year</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$month</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$day</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>    </div>    </div>   <div class="example" id="example-5944">    <p><strong>Example #10 <span class="function"><strong>sprintf()</strong></span>: formatting currency</strong></p>    <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$money1&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">68.75</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$money2&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">54.35</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$money&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">$money1&nbsp;</span><span style="color: #007700">+&nbsp;</span><span style="color: #9876AA">$money2</span><span style="color: #007700">;<br /></span><span style="color: #FF8000">//&nbsp;echo&nbsp;$money&nbsp;will&nbsp;output&nbsp;"123.1";<br /></span><span style="color: #9876AA">$formatted&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">sprintf</span><span style="color: #007700">(</span><span style="color: #DD0000">"%01.2f"</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$money</span><span style="color: #007700">);<br /></span><span style="color: #FF8000">//&nbsp;echo&nbsp;$formatted&nbsp;will&nbsp;output&nbsp;"123.10"<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>    </div>    </div>   <div class="example" id="example-5945">    <p><strong>Example #11 <span class="function"><strong>sprintf()</strong></span>: scientific notation</strong></p>    <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$number&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">362525200</span><span style="color: #007700">;<br /><br />echo&nbsp;</span><span style="color: #9876AA">sprintf</span><span style="color: #007700">(</span><span style="color: #DD0000">"%.3e"</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$number</span><span style="color: #007700">);&nbsp;</span><span style="color: #FF8000">//&nbsp;outputs&nbsp;3.625e+8<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>    </div>    </div>  </div>    <div class="refsect1 seealso" id="refsect1-function.sprintf-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link printf()} - 输出格式化字符串</span></li>     <li class="member"><span class="function">{@link sscanf()} - 根据指定格式解析输入的字符</span></li>     <li class="member"><span class="function">{@link fscanf()} - 从文件中格式化输入</span></li>     <li class="member"><span class="function">{@link vsprintf()} - 返回格式化字符串</span></li>     <li class="member"><span class="function">{@link number_format()} - 以千位分隔符方式格式化一个数字</span></li>     <li class="member"><span class="function">{@link date()} - 格式化一个本地时间／日期</span></li>    </ul>   </p>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.strings.php">字符串 函数</a></div></div>
 * @return string a string produced according to the formatting string*/
function sprintf ($format, $args = null, $_ = null) {}

/**
*<div id="function.printf" class="refentry">  <div class="refnamediv">   <h1 class="refname">printf</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">printf</span> &mdash; <span class="dc-title">输出格式化字符串</span></p>   </div>    <div class="refsect1 description" id="refsect1-function.printf-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">int</span> <span class="methodname"><strong>printf</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$format</code></span>    [, <span class="methodparam"><span class="type"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$args</code></span>    [, <span class="methodparam"><span class="type"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$...</code></span>   ]] )</div>    <p class="simpara">    依据 <code class="parameter">format</code> 格式参数产生输出。   </p>  </div>    <div class="refsect1 parameters" id="refsect1-function.printf-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">format</code></dt>       <dd>        <p class="para">        <code class="parameter">format</code> 描述信息，请参见 <span class="function">{@link sprintf()}</span>。       </p>      </dd>                 <dt> <code class="parameter">args</code></dt>       <dd>        <p class="para">       </p>      </dd>                 <dt> <code class="parameter">...</code></dt>       <dd>        <p class="para">       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.printf-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回输出字符串的长度。   </p>  </div>    <div class="refsect1 seealso" id="refsect1-function.printf-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link print} - 输出字符串</span></li>     <li class="member"><span class="function">{@link sprintf()} - Return a formatted string</span></li>     <li class="member"><span class="function">{@link vprintf()} - 输出格式化字符串</span></li>     <li class="member"><span class="function">{@link sscanf()} - 根据指定格式解析输入的字符</span></li>     <li class="member"><span class="function">{@link fscanf()} - 从文件中格式化输入</span></li>     <li class="member"><span class="function">{@link flush()} - 刷新输出缓冲</span></li>    </ul>   </p>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.strings.php">字符串 函数</a></div></div>
 * @return int the length of the outputted string.*/
function printf ($format, $args = null, $_ = null) {}

/**
*<div id="function.vprintf" class="refentry">  <div class="refnamediv">   <h1 class="refname">vprintf</h1>   <p class="verinfo">(PHP 4 &gt;= 4.1.0, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">vprintf</span> &mdash; <span class="dc-title">输出格式化字符串</span></p>   </div>    <div class="refsect1 description" id="refsect1-function.vprintf-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">int</span> <span class="methodname"><strong>vprintf</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$format</code></span>    , <span class="methodparam"><span class="type">array</span> <code class="parameter">$args</code></span>    )</div>    <p class="para rdfs-comment">    根据 <code class="parameter">format</code> （<span class="function">{@link sprintf()}</span> 函数文档中有相关描述）参数指定的格式，在一个格式化字符串中显示多个值。   </p>   <p class="para">    作用与 <span class="function">{@link printf()}</span> 函数类似，但是接收一个数组参数，而不是一系列可变数量的参数。   </p>  </div>    <div class="refsect1 parameters" id="refsect1-function.vprintf-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">format</code></dt>       <dd>        <p class="para">        关于 <code class="parameter">format</code> 的描述，参见 <span class="function">{@link sprintf()}</span>。       </p>      </dd>                 <dt> <code class="parameter">args</code></dt>       <dd>        <p class="para">       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.vprintf-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回输出字符串的长度。   </p>  </div>     <div class="refsect1 examples" id="refsect1-function.vprintf-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-6001">     <p><strong>Example #1 <span class="function"><strong>vprintf()</strong></span>: 前导 0 的整数</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />vprintf</span><span style="color: #007700">(</span><span style="color: #DD0000">"%04d-%02d-%02d"</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">explode</span><span style="color: #007700">(</span><span style="color: #DD0000">'-'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'1988-8-1'</span><span style="color: #007700">));&nbsp;</span><span style="color: #FF8000">//&nbsp;1988-08-01<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>     </div>   </p>  </div>    <div class="refsect1 seealso" id="refsect1-function.vprintf-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link printf()} - 输出格式化字符串</span></li>     <li class="member"><span class="function">{@link sprintf()} - Return a formatted string</span></li>     <li class="member"><span class="function">{@link vsprintf()} - 返回格式化字符串</span></li>    </ul>   </p>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.strings.php">字符串 函数</a></div></div>
 * @return int the length of the outputted string.*/
function vprintf ($format, array $args) {}

/**
*<div id="function.vsprintf" class="refentry">  <div class="refnamediv">   <h1 class="refname">vsprintf</h1>   <p class="verinfo">(PHP 4 &gt;= 4.1.0, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">vsprintf</span> &mdash; <span class="dc-title">返回格式化字符串</span></p>   </div>    <div class="refsect1 description" id="refsect1-function.vsprintf-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">string</span> <span class="methodname"><strong>vsprintf</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$format</code></span>    , <span class="methodparam"><span class="type">array</span> <code class="parameter">$args</code></span>    )</div>    <p class="para rdfs-comment">    作用与 <span class="function">{@link sprintf()}</span> 函数类似，但是接收一个数组参数，而不是一系列可变数量的参数。   </p>  </div>    <div class="refsect1 parameters" id="refsect1-function.vsprintf-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">format</code></dt>       <dd>        <p class="para">        关于 <code class="parameter">format</code> 的描述，参见 <span class="function">{@link sprintf()}</span>。       </p>      </dd>                 <dt> <code class="parameter">args</code></dt>       <dd>        <p class="para">       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.vsprintf-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    根据 <code class="parameter">format</code> （<span class="function">{@link sprintf()}</span> 函数文档中有相关描述）参数指定的格式，在一个字符串中返回一系列值。   </p>  </div>     <div class="refsect1 examples" id="refsect1-function.vsprintf-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-6002">     <p><strong>Example #1 <span class="function"><strong>vsprintf()</strong></span>: 前导 0 的整数</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">print&nbsp;</span><span style="color: #9876AA">vsprintf</span><span style="color: #007700">(</span><span style="color: #DD0000">"%04d-%02d-%02d"</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">explode</span><span style="color: #007700">(</span><span style="color: #DD0000">'-'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'1988-8-1'</span><span style="color: #007700">));&nbsp;</span><span style="color: #FF8000">//&nbsp;1988-08-01<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>     </div>   </p>  </div>    <div class="refsect1 seealso" id="refsect1-function.vsprintf-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link sprintf()} - Return a formatted string</span></li>     <li class="member"><span class="function">{@link vprintf()} - 输出格式化字符串</span></li>    </ul>   </p>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.strings.php">字符串 函数</a></div></div>
 * @return string Return array values as a formatted string according to*/
function vsprintf ($format, array $args) {}

/**
*<div id="function.fprintf" class="refentry">  <div class="refnamediv">   <h1 class="refname">fprintf</h1>   <p class="verinfo">(PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">fprintf</span> &mdash; <span class="dc-title">将格式化后的字符串写入到流</span></p>   </div>    <div class="refsect1 description" id="refsect1-function.fprintf-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">int</span> <span class="methodname"><strong>fprintf</strong></span>     ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$handle</code></span>    , <span class="methodparam"><span class="type">string</span> <code class="parameter">$format</code></span>    [, <span class="methodparam"><span class="type"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$args</code></span>    [, <span class="methodparam"><span class="type"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$...</code></span>   ]] )</div>    <p class="para rdfs-comment">    写入一个根据 <code class="parameter">format</code> 格式化后的字符串到    由 <code class="parameter">handle</code> 句柄打开的流中。   </p>  </div>    <div class="refsect1 parameters" id="refsect1-function.fprintf-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">handle</code></dt>       <dd>        <p class="para">文件系统指针，是典型地由 <span class="function">{@link fopen()}</span> 创建的 <span class="type"><a href="http://php.net/manual/zh/language.types.resource.php" class="type resource">resource</a></span>(资源)。</p>      </dd>                 <dt> <code class="parameter">format</code></dt>       <dd>        <p class="para">        参见 <span class="function">{@link sprintf()}</span> 中对         <code class="parameter">format</code> 的描述。       </p>      </dd>                 <dt> <code class="parameter">args</code></dt>       <dd>        <p class="para">       </p>      </dd>                 <dt> <code class="parameter">...</code></dt>       <dd>        <p class="para">       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.fprintf-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回写入的字符串长度。   </p>  </div>    <div class="refsect1 examples" id="refsect1-function.fprintf-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-5901">     <p><strong>Example #1 <span class="function"><strong>fprintf()</strong></span>: zero-padded integers</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">if&nbsp;(!(</span><span style="color: #9876AA">$fp&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">fopen</span><span style="color: #007700">(</span><span style="color: #DD0000">'date.txt'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'w'</span><span style="color: #007700">)))&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;return;<br />}<br /><br /></span><span style="color: #9876AA">fprintf</span><span style="color: #007700">(</span><span style="color: #9876AA">$fp</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"%04d-%02d-%02d"</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$year</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$month</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$day</span><span style="color: #007700">);<br /></span><span style="color: #FF8000">//&nbsp;will&nbsp;write&nbsp;the&nbsp;formatted&nbsp;ISO&nbsp;date&nbsp;to&nbsp;date.txt<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>     </div>    <div class="example" id="example-5902">     <p><strong>Example #2 <span class="function"><strong>fprintf()</strong></span>: formatting currency</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">if&nbsp;(!(</span><span style="color: #9876AA">$fp&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">fopen</span><span style="color: #007700">(</span><span style="color: #DD0000">'currency.txt'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'w'</span><span style="color: #007700">)))&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;return;<br />}<br /><br /></span><span style="color: #9876AA">$money1&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">68.75</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$money2&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">54.35</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$money&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">$money1&nbsp;</span><span style="color: #007700">+&nbsp;</span><span style="color: #9876AA">$money2</span><span style="color: #007700">;<br /></span><span style="color: #FF8000">//&nbsp;echo&nbsp;$money&nbsp;will&nbsp;output&nbsp;"123.1";<br /></span><span style="color: #9876AA">$len&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">fprintf</span><span style="color: #007700">(</span><span style="color: #9876AA">$fp</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'%01.2f'</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$money</span><span style="color: #007700">);<br /></span><span style="color: #FF8000">//&nbsp;will&nbsp;write&nbsp;"123.10"&nbsp;to&nbsp;currency.txt<br /><br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #DD0000">"wrote&nbsp;</span><span style="color: #9876AA">$len</span><span style="color: #DD0000">&nbsp;bytes&nbsp;to&nbsp;currency.txt"</span><span style="color: #007700">;<br /></span><span style="color: #FF8000">//&nbsp;use&nbsp;the&nbsp;return&nbsp;value&nbsp;of&nbsp;fprintf&nbsp;to&nbsp;determine&nbsp;how&nbsp;many&nbsp;bytes&nbsp;we&nbsp;wrote<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>     </div>   </p>  </div>     <div class="refsect1 seealso" id="refsect1-function.fprintf-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link printf()} - 输出格式化字符串</span></li>     <li class="member"><span class="function">{@link sprintf()} - Return a formatted string</span></li>     <li class="member"><span class="function">{@link sscanf()} - 根据指定格式解析输入的字符</span></li>     <li class="member"><span class="function">{@link fscanf()} - 从文件中格式化输入</span></li>     <li class="member"><span class="function">{@link vsprintf()} - 返回格式化字符串</span></li>     <li class="member"><span class="function">{@link number_format()} - 以千位分隔符方式格式化一个数字</span></li>    </ul>   </p>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.strings.php">字符串 函数</a></div></div>
 * @return int the length of the string written.*/
function fprintf ($handle, $format, $args = null, $_ = null) {}

/**
*<div id="function.vfprintf" class="refentry">  <div class="refnamediv">   <h1 class="refname">vfprintf</h1>   <p class="verinfo">(PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">vfprintf</span> &mdash; <span class="dc-title">将格式化字符串写入流</span></p>   </div>    <div class="refsect1 description" id="refsect1-function.vfprintf-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">int</span> <span class="methodname"><strong>vfprintf</strong></span>     ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$handle</code></span>    , <span class="methodparam"><span class="type">string</span> <code class="parameter">$format</code></span>    , <span class="methodparam"><span class="type">array</span> <code class="parameter">$args</code></span>    )</div>    <p class="para rdfs-comment">    向由 <code class="parameter">handle</code> 指定的流资源句柄中写入根据 <code class="parameter">format</code> 格式化后的字符串。   </p>   <p class="para">    作用与 <span class="function">{@link fprintf()}</span> 函数类似，但是接收一个数组参数，而不是一系列可变数量的参数。   </p>  </div>    <div class="refsect1 parameters" id="refsect1-function.vfprintf-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">handle</code></dt>       <dd>        <p class="para">       </p>      </dd>                 <dt> <code class="parameter">format</code></dt>       <dd>        <p class="para">        关于 <code class="parameter">format</code> 的描述，参见 <span class="function">{@link sprintf()}</span>。       </p>      </dd>                 <dt> <code class="parameter">args</code></dt>       <dd>        <p class="para">       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.vfprintf-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回输出字符串的长度。   </p>  </div>    <div class="refsect1 examples" id="refsect1-function.vfprintf-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-6000">     <p><strong>Example #1 <span class="function"><strong>vfprintf()</strong></span>: 前导 0 的整数</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">if&nbsp;(!(</span><span style="color: #9876AA">$fp&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">fopen</span><span style="color: #007700">(</span><span style="color: #DD0000">'date.txt'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'w'</span><span style="color: #007700">)))<br />&nbsp;&nbsp;&nbsp;&nbsp;return;<br /><br /></span><span style="color: #9876AA">vfprintf</span><span style="color: #007700">(</span><span style="color: #9876AA">$fp</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"%04d-%02d-%02d"</span><span style="color: #007700">,&nbsp;array(</span><span style="color: #9876AA">$year</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$month</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$day</span><span style="color: #007700">));<br /></span><span style="color: #FF8000">//&nbsp;将向&nbsp;date.txt&nbsp;写入格式化的&nbsp;ISO&nbsp;标准日期<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>     </div>   </p>  </div>    <div class="refsect1 seealso" id="refsect1-function.vfprintf-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link printf()} - 输出格式化字符串</span></li>     <li class="member"><span class="function">{@link sprintf()} - Return a formatted string</span></li>     <li class="member"><span class="function">{@link sscanf()} - 根据指定格式解析输入的字符</span></li>     <li class="member"><span class="function">{@link fscanf()} - 从文件中格式化输入</span></li>     <li class="member"><span class="function">{@link vsprintf()} - 返回格式化字符串</span></li>     <li class="member"><span class="function">{@link number_format()} - 以千位分隔符方式格式化一个数字</span></li>    </ul>   </p>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.strings.php">字符串 函数</a></div></div>
 * @return int the length of the outputted string.*/
function vfprintf ($handle, $format, array $args) {}

/**
*<div id="function.sscanf" class="refentry">  <div class="refnamediv">   <h1 class="refname">sscanf</h1>   <p class="verinfo">(PHP 4 &gt;= 4.0.1, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">sscanf</span> &mdash; <span class="dc-title">根据指定格式解析输入的字符</span></p>   </div>    <div class="refsect1 description" id="refsect1-function.sscanf-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>sscanf</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>    , <span class="methodparam"><span class="type">string</span> <code class="parameter">$format</code></span>    [, <span class="methodparam"><span class="type"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter reference">&$...</code></span>   ] )</div>    <p class="para rdfs-comment">    这个函数 <span class="function"><strong>sscanf()</strong></span> 输入类似    <span class="function">{@link printf()}</span>。 <span class="function"><strong>sscanf()</strong></span>    读取字符串<code class="parameter">str</code> 然后根据指定格式<code class="parameter">format</code>解析, 格式的描述文档见 <span class="function">{@link sprintf()}</span>。   </p>   <p class="para">    指定的格式字符串中的任意空白匹配输入字符串的任意空白.也就是说即使是格式字符串中的一个制表符 \t 也能匹配输入    字符串中的一个单一空格字符   </p>  </div>    <div class="refsect1 parameters" id="refsect1-function.sscanf-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">str</code></dt>       <dd>        <p class="para">        将要被解析的 <span class="type"><span class="type 字符串">字符串</span></span>.       </p>      </dd>                 <dt> <code class="parameter">format</code></dt>       <dd>        <p class="para">        The interpreted format for 解析<code class="parameter">str</code>的格式, 除了以下不同外，其余的见        <span class="function">{@link sprintf()}</span>的描述文档:        <ul class="simplelist">         <li class="member">          函数不区分语言地区         </li>         <li class="member">          <em>F</em>, <em>g</em>, <em>G</em> 和          <em>b</em> 不被支持.         </li>         <li class="member">          <em>D</em> 表示十进制数字.         </li>         <li class="member">          <em>i</em> stands for integer with base detection.         </li>         <li class="member">          <em>n</em> 代表目前已经处理的字符数。         </li>         <li class="member">          <em>s</em> 遇到任意空格字符时停止读取。         </li>        </ul>       </p>      </dd>                 <dt> <code class="parameter">...</code></dt>       <dd>        <p class="para">        可以选参数将以引用方式传入，它们的值将被设置为解析匹配的值       </p>      </dd>          </dl>    </p>  </div>     <div class="refsect1 returnvalues" id="refsect1-function.sscanf-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    如果仅传入了两个参数给这个函数，解析后将返回一个数组，否则，如果可选参数被传入，这个函数将返回被设置了值的个数   </p>   <p class="para">    如果<code class="parameter">format</code>存在的子字符串比    <code class="parameter">str</code>内可用的多,    <em>-1</em> 将被返回.   </p>  </div>    <div class="refsect1 examples" id="refsect1-function.sscanf-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-5946">     <p><strong>Example #1 <span class="function"><strong>sscanf()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">//&nbsp;getting&nbsp;the&nbsp;serial&nbsp;number<br /></span><span style="color: #007700">list(</span><span style="color: #9876AA">$serial</span><span style="color: #007700">)&nbsp;=&nbsp;</span><span style="color: #9876AA">sscanf</span><span style="color: #007700">(</span><span style="color: #DD0000">"SN/2350001"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"SN/%d"</span><span style="color: #007700">);<br /></span><span style="color: #FF8000">//&nbsp;and&nbsp;the&nbsp;date&nbsp;of&nbsp;manufacturing<br /></span><span style="color: #9876AA">$mandate&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">"January&nbsp;01&nbsp;2000"</span><span style="color: #007700">;<br />list(</span><span style="color: #9876AA">$month</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$day</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$year</span><span style="color: #007700">)&nbsp;=&nbsp;</span><span style="color: #9876AA">sscanf</span><span style="color: #007700">(</span><span style="color: #9876AA">$mandate</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"%s&nbsp;%d&nbsp;%d"</span><span style="color: #007700">);<br />echo&nbsp;</span><span style="color: #DD0000">"Item&nbsp;</span><span style="color: #9876AA">$serial</span><span style="color: #DD0000">&nbsp;was&nbsp;manufactured&nbsp;on:&nbsp;</span><span style="color: #9876AA">$year</span><span style="color: #DD0000">-"&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #9876AA">substr</span><span style="color: #007700">(</span><span style="color: #9876AA">$month</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">0</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">3</span><span style="color: #007700">)&nbsp;.&nbsp;</span><span style="color: #DD0000">"-</span><span style="color: #9876AA">$day</span><span style="color: #DD0000">\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>     </div>   </p>   <p class="para">    If optional parameters are passed, the function will return the    number of assigned values.   </p>   <p class="para">    <div class="example" id="example-5947">     <p><strong>Example #2 <span class="function"><strong>sscanf()</strong></span> - using optional parameters</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">//&nbsp;get&nbsp;author&nbsp;info&nbsp;and&nbsp;generate&nbsp;DocBook&nbsp;entry<br /></span><span style="color: #9876AA">$auth&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">"24\tLewis&nbsp;Carroll"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$n&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">sscanf</span><span style="color: #007700">(</span><span style="color: #9876AA">$auth</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"%d\t%s&nbsp;%s"</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$id</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$first</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$last</span><span style="color: #007700">);<br />echo&nbsp;</span><span style="color: #DD0000">"&lt;author&nbsp;id='</span><span style="color: #9876AA">$id</span><span style="color: #DD0000">'&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&lt;firstname&gt;</span><span style="color: #9876AA">$first</span><span style="color: #DD0000">&lt;/firstname&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&lt;surname&gt;</span><span style="color: #9876AA">$last</span><span style="color: #DD0000">&lt;/surname&gt;<br />&lt;/author&gt;\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>     </div>   </p>  </div>    <div class="refsect1 seealso" id="refsect1-function.sscanf-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link fscanf()} - 从文件中格式化输入</span></li>     <li class="member"><span class="function">{@link printf()} - 输出格式化字符串</span></li>     <li class="member"><span class="function">{@link sprintf()} - Return a formatted string</span></li>    </ul>   </p>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.strings.php">字符串 函数</a></div></div>
 * @return mixed If only*/
function sscanf ($str, $format, &$_ = null) {}

/**
*<div id="function.fscanf" class="refentry">  <div class="refnamediv">   <h1 class="refname">fscanf</h1>   <p class="verinfo">(PHP 4 &gt;= 4.0.1, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">fscanf</span> &mdash; <span class="dc-title">从文件中格式化输入</span></p>   </div>     <div class="refsect1 description" id="refsect1-function.fscanf-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>fscanf</strong></span>     ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$handle</code></span>    , <span class="methodparam"><span class="type">string</span> <code class="parameter">$format</code></span>    [, <span class="methodparam"><span class="type"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter reference">&$...</code></span>   ] )</div>    <p class="para rdfs-comment">    <span class="function"><strong>fscanf()</strong></span> 函数和    <span class="function">{@link sscanf()}</span> 相似，但是它从与    <code class="parameter">handle</code> 关联的文件中接受输入并根据指定的    <code class="parameter">format</code>（定义于 <span class="function">{@link sprintf()}</span>    的文档中）来解释输入。   </p>   <p class="para">    格式字符串中的任何空白会与输入流中的任何空白匹配。这意味着甚至格式字符串中的制表符    <em>\t</em> 也会与输入流中的一个空格字符匹配。   </p>   <p class="para">    每次调用 <span class="function"><strong>fscanf()</strong></span> 都会从文件中读取一行。   </p>  </div>     <div class="refsect1 parameters" id="refsect1-function.fscanf-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">handle</code></dt>       <dd>        <p class="para">文件系统指针，是典型地由 <span class="function">{@link fopen()}</span> 创建的 <span class="type"><a href="http://php.net/manual/zh/language.types.resource.php" class="type resource">resource</a></span>(资源)。</p>      </dd>                 <dt> <code class="parameter">format</code></dt>       <dd>        <p class="para">        参数格式是 <span class="function">{@link sprintf()}</span> 文档中所描述的格式。       </p>      </dd>                 <dt> <code class="parameter">...</code></dt>       <dd>        <p class="para">        The optional assigned values.       </p>      </dd>          </dl>    </p>  </div>      <div class="refsect1 returnvalues" id="refsect1-function.fscanf-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    如果只给此函数传递了两个参数，解析后的值会被作为数组返回。否则，如果提供了可选参数，此函数将返回被赋值的数目。    可选参数必须用引用传递。   </p>  </div>     <div class="refsect1 changelog" id="refsect1-function.fscanf-changelog">   <h3 class="title">更新日志</h3>   <p class="para">    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>4.3.0</td>        <td>         在 PHP 4.3.0 之前，从文件中读入的最大字符数是     512（或者第一个 \n，看先碰到哪种情况）。从     PHP 4.3.0 起可以读取任意长的行。        </td>       </tr>       </tbody>         </table>    </p>  </div>     <div class="refsect1 examples" id="refsect1-function.fscanf-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-2800">     <p><strong>Example #1 <span class="function"><strong>fscanf()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$handle&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">fopen</span><span style="color: #007700">(</span><span style="color: #DD0000">"users.txt"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"r"</span><span style="color: #007700">);<br />while&nbsp;(</span><span style="color: #9876AA">$userinfo&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">fscanf</span><span style="color: #007700">(</span><span style="color: #9876AA">$handle</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"%s\t%s\t%s\n"</span><span style="color: #007700">))&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;list&nbsp;(</span><span style="color: #9876AA">$name</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$profession</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$countrycode</span><span style="color: #007700">)&nbsp;=&nbsp;</span><span style="color: #9876AA">$userinfo</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//...&nbsp;do&nbsp;something&nbsp;with&nbsp;the&nbsp;values<br /></span><span style="color: #007700">}<br /></span><span style="color: #9876AA">fclose</span><span style="color: #007700">(</span><span style="color: #9876AA">$handle</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>     </div>   </p>   <p class="para">    <div class="example" id="example-2801">     <p><strong>Example #2 users.txt 的内容</strong></p>     <div class="example-contents"> <div class="txtcode"><pre class="txtcode">javier  argonaut        pe hiroshi sculptor        jp robert  slacker us luigi   florist it</pre> </div>     </div>     </div>   </p>  </div>    <div class="refsect1 seealso" id="refsect1-function.fscanf-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link fread()} - 读取文件（可安全用于二进制文件）</span></li>     <li class="member"><span class="function">{@link fgets()} - 从文件指针中读取一行</span></li>     <li class="member"><span class="function">{@link fgetss()} - 从文件指针中读取一行并过滤掉 HTML 标记</span></li>     <li class="member"><span class="function">{@link sscanf()} - 根据指定格式解析输入的字符</span></li>     <li class="member"><span class="function">{@link printf()} - 输出格式化字符串</span></li>     <li class="member"><span class="function">{@link sprintf()} - Return a formatted string</span></li>    </ul>   </p>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.filesystem.php">文件系统函数</a></div></div>
 * @return mixed If only two parameters were passed to this function, the values parsed will be*/
function fscanf ($handle, $format, &$_ = null) {}

/**
*<div id="function.parse-url" class="refentry">  <div class="refnamediv">   <h1 class="refname">parse_url</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">parse_url</span> &mdash; <span class="dc-title">解析 URL，返回其组成部分</span></p>   </div>    <div class="refsect1 description" id="refsect1-function.parse-url-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>parse_url</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$url</code></span>    [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$component</code><span class="initializer"> = -1</span></span>   ] )</div>    <p class="para rdfs-comment">    本函数解析一个 URL 并返回一个关联数组，包含在 URL 中出现的各种组成部分。   </p>   <p class="para">    本函数<em class="emphasis">不是</em>用来验证给定 URL    的合法性的，只是将其分解为下面列出的部分。不完整的 URL    也被接受，<span class="function"><strong>parse_url()</strong></span> 会尝试尽量正确地将其解析。   </p>  </div>    <div class="refsect1 parameters" id="refsect1-function.parse-url-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">url</code></dt>       <dd>        <p class="para">        要解析的 URL。无效字符将使用        <em>_</em> 来替换。       </p>      </dd>          </dl>     <dl>            <dt> <code class="parameter">component</code></dt>       <dd>        <p class="para">        指定 <strong><code>PHP_URL_SCHEME</code></strong>、        <strong><code>PHP_URL_HOST</code></strong>、 <strong><code>PHP_URL_PORT</code></strong>、        <strong><code>PHP_URL_USER</code></strong>、 <strong><code>PHP_URL_PASS</code></strong>、        <strong><code>PHP_URL_PATH</code></strong>、 <strong><code>PHP_URL_QUERY</code></strong>        或 <strong><code>PHP_URL_FRAGMENT</code></strong> 的其中一个来获取 URL 中指定的部分的 <span class="type"><a href="http://php.net/manual/zh/language.types.string.php" class="type string">string</a></span>。 （除了指定为 <strong><code>PHP_URL_PORT</code></strong> 后，将返回一个 <span class="type"><a href="http://php.net/manual/zh/language.types.integer.php" class="type integer">integer</a></span> 的值）。       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.parse-url-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    对严重不合格的 URL，<span class="function"><strong>parse_url()</strong></span> 可能会返回    <strong><code>FALSE</code></strong>。    </p>      <p class="para">     如果省略了 <code class="parameter">component</code> 参数，将返回一个关联数组 <span class="type"><a href="http://php.net/manual/zh/language.types.array.php" class="type array">array</a></span>，在目前至少会有一个元素在该数组中。数组中可能的键有以下几种：    <ul class="itemizedlist">     <li class="listitem">      <span class="simpara">       <var class="varname"><var class="varname">scheme</var></var> - 如 http      </span>     </li>     <li class="listitem">      <span class="simpara">       <var class="varname"><var class="varname">host</var></var>       </span>     </li>     <li class="listitem">      <span class="simpara">       <var class="varname"><var class="varname">port</var></var>      </span>     </li>     <li class="listitem">      <span class="simpara">       <var class="varname"><var class="varname">user</var></var>      </span>     </li>     <li class="listitem">      <span class="simpara">       <var class="varname"><var class="varname">pass</var></var>      </span>     </li>     <li class="listitem">      <span class="simpara">       <var class="varname"><var class="varname">path</var></var>      </span>     </li>     <li class="listitem">      <span class="simpara">       <var class="varname"><var class="varname">query</var></var>  - 在问号 <em>?</em> 之后      </span>     </li>     <li class="listitem">      <span class="simpara">       <var class="varname"><var class="varname">fragment</var></var> -  在散列符号 <em>#</em> 之后      </span>     </li>    </ul>   </p>   <p class="para">    如果指定了 <code class="parameter">component</code> 参数，    <span class="function"><strong>parse_url()</strong></span> 返回一个 <span class="type"><a href="http://php.net/manual/zh/language.types.string.php" class="type string">string</a></span> （或在指定为 <strong><code>PHP_URL_PORT</code></strong> 时返回一个 <span class="type"><a href="http://php.net/manual/zh/language.types.integer.php" class="type integer">integer</a></span>）而不是 <span class="type"><a href="http://php.net/manual/zh/language.types.array.php" class="type array">array</a></span>。如果 URL 中指定的组成部分不存在，将会返回 <strong><code>NULL</code></strong>。   </p>  </div>     <div class="refsect1 changelog" id="refsect1-function.parse-url-changelog">   <h3 class="title">更新日志</h3>   <p class="para">    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>5.4.7</td>        <td>         修复了 <em class="emphasis">host</em> 在 <em class="emphasis">协议</em> 省略时的识别。        </td>       </tr>        <tr>        <td>5.3.3</td>        <td>         在 URL 解析失败时将不会产生 <strong><code>E_WARNING</code></strong> 级别的错误。        </td>       </tr>        <tr>        <td>5.1.2</td>        <td>增加了参数 <code class="parameter">component</code>。</td>       </tr>       </tbody>         </table>    </p>  </div>    <div class="refsect1 examples" id="refsect1-function.parse-url-examples">   <h3 class="title">范例</h3>   <p class="para">   <div class="example" id="example-4886">    <p><strong>Example #1 <span class="function"><strong>parse_url()</strong></span> 例子</strong></p>    <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$url&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'http://username:password@hostname/path?arg=value#anchor'</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">parse_url</span><span style="color: #007700">(</span><span style="color: #9876AA">$url</span><span style="color: #007700">));<br /><br />echo&nbsp;</span><span style="color: #9876AA">parse_url</span><span style="color: #007700">(</span><span style="color: #9876AA">$url</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">PHP_URL_PATH</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>    <div class="example-contents screen"> <div class="cdata"><pre> Array (     [scheme] =&gt; http     [host] =&gt; hostname     [user] =&gt; username     [pass] =&gt; password     [path] =&gt; /path     [query] =&gt; arg=value     [fragment] =&gt; anchor ) /path </pre></div>    </div>   </div>  </p>    <p class="para">    <div class="example" id="example-4887">     <p><strong>Example #2 <span class="function"><strong>parse_url()</strong></span> 解析丢失协议的例子</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$url&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'//www.example.com/path?googleguy=googley'</span><span style="color: #007700">;<br /><br /></span><span style="color: #FF8000">//&nbsp;在&nbsp;5.4.7&nbsp;之前这会输出路径&nbsp;"//www.example.com/path"<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">parse_url</span><span style="color: #007700">(</span><span style="color: #9876AA">$url</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen"> <div class="cdata"><pre> array(3) {   [&quot;host&quot;]=&gt;   string(15) &quot;www.example.com&quot;   [&quot;path&quot;]=&gt;   string(5) &quot;/path&quot;   [&quot;query&quot;]=&gt;   string(17) &quot;googleguy=googley&quot; } </pre></div>     </div>    </div>   </p>  </div>    <div class="refsect1 notes" id="refsect1-function.parse-url-notes">   <h3 class="title">注释</h3>   <blockquote class="note"><p><strong class="note">Note</strong>:     <p class="para">     本函数不能用于相对 URL。    </p>   </p></blockquote>   <blockquote class="note"><p><strong class="note">Note</strong>:     <p class="para">     <span class="function"><strong>parse_url()</strong></span> 是专门用来解析 URL 而不是 URI 的。不过为遵从 PHP     向后兼容的需要有个例外，对 file:// 协议允许三个斜线（file:///...）。其它任何协议都不能这样。    </p>   </p></blockquote>  </div>    <div class="refsect1 seealso" id="refsect1-function.parse-url-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link pathinfo()} - 返回文件路径的信息</span></li>     <li class="member"><span class="function">{@link parse_str()} - 将字符串解析成多个变量</span></li>     <li class="member"><span class="function">{@link http_build_query()} - 生成 URL-encode 之后的请求字符串</span></li>     <li class="member"><span class="function"><strong>http_build_url()</strong></span></li>     <li class="member"><span class="function">{@link dirname()} - 返回路径中的目录部分</span></li>     <li class="member"><span class="function">{@link basename()} - 返回路径中的文件名部分</span></li>     <li class="member"><a href="http://www.faqs.org/rfcs/rfc3986" class="link external">&raquo;&nbsp;RFC 3986</a></li>    </ul>   </p>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.url.php">URL 函数</a></div></div>
 * @return mixed On seriously malformed URLs, parse_url() may return FALSE.*/
function parse_url ($url, $component = -1) {}

/**
*<div id="function.urlencode" class="refentry">  <div class="refnamediv">   <h1 class="refname">urlencode</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">urlencode</span> &mdash; <span class="dc-title">编码 URL 字符串</span></p>   </div>  <div class="refsect1 description" id="refsect1-function.urlencode-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">string</span> <span class="methodname"><strong>urlencode</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>    )</div>      <p class="para rdfs-comment">      此函数便于将字符串编码并将其用于 URL 的请求部分，同时它还便于将变量传递给下一页。     </p>  </div>    <div class="refsect1 parameters" id="refsect1-function.urlencode-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">str</code></dt>       <dd>        <p class="para">        要编码的字符串。       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.urlencode-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">     返回字符串，此字符串中除了    <em>-_.</em>     之外的所有非字母数字字符都将被替换成百分号（<em>%</em>）后跟两位十六进制数，空格则编码为加号（<em>+</em>）。此编码与 WWW    表单 POST 数据的编码方式是一样的，同时与    <em>application/x-www-form-urlencoded</em>    的媒体类型编码方式一样。由于历史原因，此编码在将空格编码为加号（+）方面与    <a href="http://www.faqs.org/rfcs/rfc3986" class="link external">&raquo;&nbsp;RFC3986</a> 编码（参见    <span class="function">{@link rawurlencode()}</span>）不同。   </p>  </div>    <div class="refsect1 examples" id="refsect1-function.urlencode-examples">   <h3 class="title">范例</h3>    <p class="para">      <div class="example" id="example-4892">     <p><strong>Example #1 <span class="function"><strong>urlencode()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #DD0000">'&lt;a&nbsp;href="mycgi?foo='</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">urlencode</span><span style="color: #007700">(</span><span style="color: #9876AA">$userinput</span><span style="color: #007700">),&nbsp;</span><span style="color: #DD0000">'"&gt;'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>     </div>   </p>   <p class="para">    <div class="example" id="example-4893">     <p><strong>Example #2 <span class="function"><strong>urlencode()</strong></span> 与 <span class="function">{@link htmlentities()}</span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$query_string&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'foo='&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #9876AA">urlencode</span><span style="color: #007700">(</span><span style="color: #9876AA">$foo</span><span style="color: #007700">)&nbsp;.&nbsp;</span><span style="color: #DD0000">'&amp;bar='&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #9876AA">urlencode</span><span style="color: #007700">(</span><span style="color: #9876AA">$bar</span><span style="color: #007700">);<br />echo&nbsp;</span><span style="color: #DD0000">'&lt;a&nbsp;href="mycgi?'&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #9876AA">htmlentities</span><span style="color: #007700">(</span><span style="color: #9876AA">$query_string</span><span style="color: #007700">)&nbsp;.&nbsp;</span><span style="color: #DD0000">'"&gt;'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>     </div>   </p>  </div>    <div class="refsect1 notes" id="refsect1-function.urlencode-notes">   <h3 class="title">注释</h3>   <blockquote class="note"><p><strong class="note">Note</strong>:     <p class="para">        注意：小心与 HTML 实体相匹配的变量。像    &amp;amp、&amp;copy 和 &amp;pound     都将被浏览器解析，并使用实际实体替代所期待的变量名。这是明显的混乱，W3C    已经告诫人们好几年了。参考地址：<a href="http://www.w3.org/TR/html4/appendix/notes.html#h-B.2.2" class="link external">&raquo;&nbsp;http://www.w3.org/TR/html4/appendix/notes.html#h-B.2.2</a>。    </p>    <p class="para">     PHP    通过 arg_separator.ini 指令，支持将参数分割符变成 W3C     所建议的分号。不幸的是大多数用户代理并不发送分号分隔符格式的表单数据。较为简单的解决办法是使用    &amp;amp; 代替 &amp; 作为分隔符。你不需要为此修改 PHP    的 arg_separator。让它仍为 &amp;，而仅使用 <span class="function">{@link htmlentities()}</span>    或 <span class="function">{@link htmlspecialchars()}</span> 对你的 URL 进行编码。    </p>   </p></blockquote>  </div>    <div class="refsect1 seealso" id="refsect1-function.urlencode-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link urldecode()} - 解码已编码的 URL 字符串</span></li>     <li class="member"><span class="function">{@link htmlentities()} - 将字符转换为 HTML 转义字符</span></li>     <li class="member"><span class="function">{@link rawurlencode()} - 按照 RFC 3986 对 URL 进行编码</span></li>     <li class="member"><span class="function">{@link rawurldecode()} - 对已编码的 URL 字符串进行解码</span></li>     <li class="member"><a href="http://www.faqs.org/rfcs/rfc3986" class="link external">&raquo;&nbsp;RFC 3986</a></li>    </ul>   </p>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.url.php">URL 函数</a></div></div>
 * @return string a string in which all non-alphanumeric characters except*/
function urlencode ($str) {}

/**
*<div id="function.urldecode" class="refentry">  <div class="refnamediv">   <h1 class="refname">urldecode</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">urldecode</span> &mdash; <span class="dc-title">解码已编码的 URL 字符串</span></p>   </div>   <div class="refsect1 description" id="refsect1-function.urldecode-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">string</span> <span class="methodname"><strong>urldecode</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>    )</div>    <p class="para rdfs-comment">    解码给出的已编码字符串中的任何    <em>%<span class="replaceable">##</span></em>。    加号（&#039;<em>+</em>&#039;）被解码成一个空格字符。       </p>  </div>     <div class="refsect1 parameters" id="refsect1-function.urldecode-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">str</code></dt>       <dd>        <p class="para">        要解码的字符串。       </p>      </dd>          </dl>    </p>  </div>     <div class="refsect1 returnvalues" id="refsect1-function.urldecode-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回解码后的字符串。   </p>  </div>    <div class="refsect1 examples" id="refsect1-function.urldecode-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-4891">     <p><strong>Example #1 <span class="function"><strong>urldecode()</strong></span> 示例</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$query&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">"my=apples&amp;are=green+and+red"</span><span style="color: #007700">;<br /><br />foreach&nbsp;(</span><span style="color: #9876AA">explode</span><span style="color: #007700">(</span><span style="color: #DD0000">'&amp;'</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$query</span><span style="color: #007700">)&nbsp;as&nbsp;</span><span style="color: #9876AA">$chunk</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$param&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">explode</span><span style="color: #007700">(</span><span style="color: #DD0000">"="</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$chunk</span><span style="color: #007700">);<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(</span><span style="color: #9876AA">$param</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">printf</span><span style="color: #007700">(</span><span style="color: #DD0000">"Value&nbsp;for&nbsp;parameter&nbsp;\"%s\"&nbsp;is&nbsp;\"%s\"&lt;br/&gt;\n"</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">urldecode</span><span style="color: #007700">(</span><span style="color: #9876AA">$param</span><span style="color: #007700">[</span><span style="color: #9876AA">0</span><span style="color: #007700">]),&nbsp;</span><span style="color: #9876AA">urldecode</span><span style="color: #007700">(</span><span style="color: #9876AA">$param</span><span style="color: #007700">[</span><span style="color: #9876AA">1</span><span style="color: #007700">]));<br />&nbsp;&nbsp;&nbsp;&nbsp;}<br />}<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>     </div>   </p>  </div>    <div class="refsect1 notes" id="refsect1-function.urldecode-notes">   <h3 class="title">注释</h3>   <div class="warning"><strong class="warning">Warning</strong>    <p class="para">     超全局变量  <var class="varname"><var class="varname"><a href="http://php.net/manual/zh/reserved.variables.get.php" class="classname">$_GET</a></var></var> 和 <var class="varname"><var class="varname"><a href="http://php.net/manual/zh/reserved.variables.request.php" class="classname">$_REQUEST</a></var></var> 已经被解码了。对 <var class="varname"><var class="varname"><a href="http://php.net/manual/zh/reserved.variables.get.php" class="classname">$_GET</a></var></var> 或   <var class="varname"><var class="varname"><a href="http://php.net/manual/zh/reserved.variables.request.php" class="classname">$_REQUEST</a></var></var> 里的元素使用 <span class="function"><strong>urldecode()</strong></span> 将会导致不可预计和危险的结果。    </p>   </div>  </div>    <div class="refsect1 seealso" id="refsect1-function.urldecode-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link urlencode()} - 编码 URL 字符串</span></li>     <li class="member"><span class="function">{@link rawurlencode()} - 按照 RFC 3986 对 URL 进行编码</span></li>     <li class="member"><span class="function">{@link rawurldecode()} - 对已编码的 URL 字符串进行解码</span></li>     <li class="member"><a href="http://www.faqs.org/rfcs/rfc3986" class="link external">&raquo;&nbsp;RFC 3986</a></li>    </ul>   </p>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.url.php">URL 函数</a></div></div>
 * @return string the decoded string.*/
function urldecode ($str) {}

/**
*<div id="function.rawurlencode" class="refentry">  <div class="refnamediv">   <h1 class="refname">rawurlencode</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">rawurlencode</span> &mdash; <span class="dc-title">按照 RFC 3986 对 URL 进行编码</span></p>   </div>  <div class="refsect1 description" id="refsect1-function.rawurlencode-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">string</span> <span class="methodname"><strong>rawurlencode</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>    )</div>    <p class="para rdfs-comment">    根据 <a href="http://www.faqs.org/rfcs/rfc3986" class="link external">&raquo;&nbsp;RFC 3986</a> 编码指定的字符。   </p>  </div>    <div class="refsect1 parameters" id="refsect1-function.rawurlencode-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">str</code></dt>       <dd>        <p class="para">        要编码的 URL。       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.rawurlencode-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回字符串，此字符串中除了    <em>-_.</em>     之外的所有非字母数字字符都将被替换成百分号（<em>%</em>）后跟两位十六进制数。这是在    <a href="http://www.faqs.org/rfcs/rfc3986" class="link external">&raquo;&nbsp;RFC 3986</a> 中描述的编码，是为了保护原义字符以免其被解释为特殊的     URL 定界符，同时保护 URL     格式以免其被传输媒体（像一些邮件系统）使用字符转换时弄乱。    <blockquote class="note"><p><strong class="note">Note</strong>:      <p class="para">      在 PHP 5.3.0 之前，rawurlencode 根据 <a href="http://www.faqs.org/rfcs/rfc1738" class="link external">&raquo;&nbsp;RFC 1738</a> 来编码波浪线（<em>~</em>）。     </p>    </p></blockquote>   </p>  </div>     <div class="refsect1 changelog" id="refsect1-function.rawurlencode-changelog">   <h3 class="title">更新日志</h3>   <p class="para">    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>5.3.4</td>        <td>         因为 <span class="function"><strong>rawurlencode()</strong></span> 使用了  EBCDIC，所以波浪线字符不会再被编码。        </td>       </tr>        <tr>        <td>5.3.0</td>        <td>         现在符合了<a href="http://www.faqs.org/rfcs/rfc3986" class="link external">&raquo;&nbsp;RFC 3986</a>。        </td>       </tr>       </tbody>         </table>    </p>  </div>    <div class="refsect1 examples" id="refsect1-function.rawurlencode-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-4889">     <p><strong>Example #1 在 FTP URL 里包含一个密码</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #DD0000">'&lt;a&nbsp;href="ftp://user:'</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">rawurlencode</span><span style="color: #007700">(</span><span style="color: #DD0000">'foo&nbsp;@+%/'</span><span style="color: #007700">),<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #DD0000">'@ftp.example.com/x.txt"&gt;'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen"> <div class="cdata"><pre> &lt;a href=&quot;ftp://user:foo%20%40%2B%25%2F@ftp.example.com/x.txt&quot;&gt; </pre></div>     </div>    </div>   </p>   <p class="para">    或者，如果你想通过 URL 的 PATH_INFO 构成部分去传递信息：   </p>   <p class="para">    <div class="example" id="example-4890">     <p><strong>Example #2 <span class="function"><strong>rawurlencode()</strong></span> 示例 2</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #DD0000">'&lt;a&nbsp;href="http://example.com/department_list_script/'</span><span style="color: #007700">,<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">rawurlencode</span><span style="color: #007700">(</span><span style="color: #DD0000">'sales&nbsp;and&nbsp;marketing/Miami'</span><span style="color: #007700">),&nbsp;</span><span style="color: #DD0000">'"&gt;'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen"> <div class="cdata"><pre> &lt;a href=&quot;http://example.com/department_list_script/sales%20and%20marketing%2FMiami&quot;&gt; </pre></div>     </div>    </div>   </p>  </div>    <div class="refsect1 seealso" id="refsect1-function.rawurlencode-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link rawurldecode()} - 对已编码的 URL 字符串进行解码</span></li>     <li class="member"><span class="function">{@link urldecode()} - 解码已编码的 URL 字符串</span></li>     <li class="member"><span class="function">{@link urlencode()} - 编码 URL 字符串</span></li>     <li class="member"><a href="http://www.faqs.org/rfcs/rfc3986" class="link external">&raquo;&nbsp;RFC 3986</a></li>    </ul>   </p>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.url.php">URL 函数</a></div></div>
 * @return string a string in which all non-alphanumeric characters except*/
function rawurlencode ($str) {}

/**
*<div id="function.rawurldecode" class="refentry">  <div class="refnamediv">   <h1 class="refname">rawurldecode</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">rawurldecode</span> &mdash; <span class="dc-title">对已编码的 URL 字符串进行解码</span></p>   </div>     <div class="refsect1 description" id="refsect1-function.rawurldecode-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">string</span> <span class="methodname"><strong>rawurldecode</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>    )</div>    <p class="para rdfs-comment">    返回字符串，此字符串中百分号（<em>%</em>）后跟两位十六进制数的序列都将被替换成原义字符。   </p>  </div>      <div class="refsect1 parameters" id="refsect1-function.rawurldecode-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">str</code></dt>       <dd>        <p class="para">        要解码的 URL。       </p>      </dd>          </dl>    </p>  </div>     <div class="refsect1 returnvalues" id="refsect1-function.rawurldecode-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回解码后的 URL 字符串。   </p>  </div>     <div class="refsect1 examples" id="refsect1-function.rawurldecode-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-4888">     <p><strong>Example #1 <span class="function"><strong>rawurldecode()</strong></span> 示例</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /><br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #9876AA">rawurldecode</span><span style="color: #007700">(</span><span style="color: #DD0000">'foo%20bar%40baz'</span><span style="color: #007700">);&nbsp;</span><span style="color: #FF8000">//&nbsp;foo&nbsp;bar@baz<br /><br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>     </div>   </p>  </div>    <div class="refsect1 notes" id="refsect1-function.rawurldecode-notes">   <h3 class="title">注释</h3>   <blockquote class="note"><p><strong class="note">Note</strong>:     <p class="para">    <span class="function"><strong>rawurldecode()</strong></span> 不会把加号（&#039;+&#039;）解码为空格，而     <span class="function">{@link urldecode()}</span> 可以。    </p>   </p></blockquote>  </div>    <div class="refsect1 seealso" id="refsect1-function.rawurldecode-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link rawurlencode()} - 按照 RFC 3986 对 URL 进行编码</span></li>     <li class="member"><span class="function">{@link urldecode()} - 解码已编码的 URL 字符串</span></li>     <li class="member"><span class="function">{@link urlencode()} - 编码 URL 字符串</span></li>     <li class="member"><a href="http://www.faqs.org/rfcs/rfc3986" class="link external">&raquo;&nbsp;RFC 3986</a></li>    </ul>   </p>  </div>    <div class="up"><a href="http://php.net/manual/zh/ref.url.php">URL 函数</a></div></div>
 * @return string the decoded URL, as a string.*/
function rawurldecode ($str) {}

/**
*<div id="function.http-build-query" class="refentry">  <div class="refnamediv">   <h1 class="refname">http_build_query</h1>   <p class="verinfo">(PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">http_build_query</span> &mdash; <span class="dc-title">生成 URL-encode 之后的请求字符串</span></p>   </div>    <div class="refsect1 description" id="refsect1-function.http-build-query-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">string</span> <span class="methodname"><strong>http_build_query</strong></span>     ( <span class="methodparam"><span class="type"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$query_data</code></span>    [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$numeric_prefix</code></span>    [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$arg_separator</code></span>    [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$enc_type</code><span class="initializer"> = <strong><code>PHP_QUERY_RFC1738</code></strong></span></span>   ]]] )</div>    <p class="para rdfs-comment">    使用给出的关联（或下标）数组生成一个经过    URL-encode 的请求字符串。   </p>  </div>      <div class="refsect1 parameters" id="refsect1-function.http-build-query-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">query_data</code></dt>       <dd>        <p class="para">        可以是数组或包含属性的对象。       </p>       <p class="para">        一个    <code class="parameter">query_data</code>     数组可以是简单的一维结构，也可以是由数组组成的数组（其依次可以包含其它数组）。       </p>       <p class="para">        如果 <code class="parameter">query_data</code> 是一个对象，只有 public 的属性会加入结果。       </p>      </dd>                 <dt> <code class="parameter">numeric_prefix</code></dt>       <dd>        <p class="para">        如果在基础数组中使用了数字下标同时给出了该参数，此参数值将会作为基础数组中的数字下标元素的前缀。       </p>       <p class="para">        这是为了让    PHP 或其它 CGI    程序在稍后对数据进行解码时获取合法的变量名。       </p>      </dd>                 <dt> <code class="parameter">arg_separator</code></dt>       <dd>        <p class="para">        除非指定并使用了这个参数，否则会用 <a href="http://php.net/manual/zh/ini.core.php#ini.arg-separator.output" class="link">arg_separator.output</a> 来分隔参数。       </p>      </dd>                 <dt> <code class="parameter">enc_type</code></dt>       <dd>        <p class="para">        默认使用 <strong><code>PHP_QUERY_RFC1738</code></strong>。       </p>       <p class="para">        如果 <code class="parameter">enc_type</code> 是        <strong><code>PHP_QUERY_RFC1738</code></strong>，则编码将会以 <a href="http://www.faqs.org/rfcs/rfc1738" class="link external">&raquo;&nbsp;RFC 1738</a> 标准和 <em>application/x-www-form-urlencoded</em> 媒体类型进行编码，空格会被编码成加号（<em>+</em>）。       </p>       <p class="para">        如果 <code class="parameter">enc_type</code> 是        <strong><code>PHP_QUERY_RFC3986</code></strong>，将根据 <a href="http://www.faqs.org/rfcs/rfc3986" class="link external">&raquo;&nbsp;RFC 3986</a> 编码，空格会被百分号编码（<em>%20</em>）。       </p>      </dd>          </dl>    </p>  </div>      <div class="refsect1 returnvalues" id="refsect1-function.http-build-query-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回一个 URL 编码后的字符串。   </p>  </div>     <div class="refsect1 changelog" id="refsect1-function.http-build-query-changelog">   <h3 class="title">更新日志</h3>   <p class="para">    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>5.4.0</td>        <td>         加入了 <code class="parameter">enc_type</code> 参数。        </td>       </tr>        <tr>        <td>5.1.3</td>        <td>         方括号也会被转义。        </td>       </tr>        <tr>        <td>5.1.2</td>        <td>         加入了参数 <code class="parameter">arg_separator</code>。        </td>       </tr>       </tbody>         </table>    </p>  </div>     <div class="refsect1 examples" id="refsect1-function.http-build-query-examples">   <h3 class="title">范例</h3>   <div class="example" id="example-4882">    <p><strong>Example #1 <span class="function"><strong>http_build_query()</strong></span> 使用示例</strong></p>    <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$data&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">'foo'</span><span style="color: #007700">=&gt;</span><span style="color: #DD0000">'bar'</span><span style="color: #007700">,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #DD0000">'baz'</span><span style="color: #007700">=&gt;</span><span style="color: #DD0000">'boom'</span><span style="color: #007700">,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #DD0000">'cow'</span><span style="color: #007700">=&gt;</span><span style="color: #DD0000">'milk'</span><span style="color: #007700">,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #DD0000">'php'</span><span style="color: #007700">=&gt;</span><span style="color: #DD0000">'hypertext&nbsp;processor'</span><span style="color: #007700">);<br /><br />echo&nbsp;</span><span style="color: #9876AA">http_build_query</span><span style="color: #007700">(</span><span style="color: #9876AA">$data</span><span style="color: #007700">)&nbsp;.&nbsp;</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />echo&nbsp;</span><span style="color: #9876AA">http_build_query</span><span style="color: #007700">(</span><span style="color: #9876AA">$data</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">''</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'&amp;amp;'</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>    </div>     <div class="example-contents"><p>以上例程会输出：</p></div>    <div class="example-contents screen"> <div class="cdata"><pre> foo=bar&amp;baz=boom&amp;cow=milk&amp;php=hypertext+processor foo=bar&amp;amp;baz=boom&amp;amp;cow=milk&amp;amp;php=hypertext+processor </pre></div>    </div>   </div>    <div class="example" id="example-4883">    <p><strong>Example #2 <span class="function"><strong>http_build_query()</strong></span> 使用数字下标的元素</strong></p>    <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$data&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">'foo'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'bar'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'baz'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'boom'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'cow'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">'milk'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'php'&nbsp;</span><span style="color: #007700">=&gt;</span><span style="color: #DD0000">'hypertext&nbsp;processor'</span><span style="color: #007700">);<br /><br />echo&nbsp;</span><span style="color: #9876AA">http_build_query</span><span style="color: #007700">(</span><span style="color: #9876AA">$data</span><span style="color: #007700">)&nbsp;.&nbsp;</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />echo&nbsp;</span><span style="color: #9876AA">http_build_query</span><span style="color: #007700">(</span><span style="color: #9876AA">$data</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'myvar_'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>    </div>     <div class="example-contents"><p>以上例程会输出：</p></div>    <div class="example-contents screen"> <div class="cdata"><pre> 0=foo&amp;1=bar&amp;2=baz&amp;3=boom&amp;cow=milk&amp;php=hypertext+processor myvar_0=foo&amp;myvar_1=bar&amp;myvar_2=baz&amp;myvar_3=boom&amp;cow=milk&amp;php=hypertext+processor </pre></div>    </div>   </div>   <div class="example" id="example-4884">    <p><strong>Example #3 <span class="function"><strong>http_build_query()</strong></span> 使用复杂的数组</strong></p>    <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$data&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">'user'</span><span style="color: #007700">=&gt;array(</span><span style="color: #DD0000">'name'</span><span style="color: #007700">=&gt;</span><span style="color: #DD0000">'Bob&nbsp;Smith'</span><span style="color: #007700">,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #DD0000">'age'</span><span style="color: #007700">=&gt;</span><span style="color: #9876AA">47</span><span style="color: #007700">,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #DD0000">'sex'</span><span style="color: #007700">=&gt;</span><span style="color: #DD0000">'M'</span><span style="color: #007700">,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #DD0000">'dob'</span><span style="color: #007700">=&gt;</span><span style="color: #DD0000">'5/12/1956'</span><span style="color: #007700">),<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #DD0000">'pastimes'</span><span style="color: #007700">=&gt;array(</span><span style="color: #DD0000">'golf'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'opera'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'poker'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'rap'</span><span style="color: #007700">),<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #DD0000">'children'</span><span style="color: #007700">=&gt;array(</span><span style="color: #DD0000">'bobby'</span><span style="color: #007700">=&gt;array(</span><span style="color: #DD0000">'age'</span><span style="color: #007700">=&gt;</span><span style="color: #9876AA">12</span><span style="color: #007700">,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #DD0000">'sex'</span><span style="color: #007700">=&gt;</span><span style="color: #DD0000">'M'</span><span style="color: #007700">),<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #DD0000">'sally'</span><span style="color: #007700">=&gt;array(</span><span style="color: #DD0000">'age'</span><span style="color: #007700">=&gt;</span><span style="color: #9876AA">8</span><span style="color: #007700">,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #DD0000">'sex'</span><span style="color: #007700">=&gt;</span><span style="color: #DD0000">'F'</span><span style="color: #007700">)),<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #DD0000">'CEO'</span><span style="color: #007700">);<br /><br />echo&nbsp;</span><span style="color: #9876AA">http_build_query</span><span style="color: #007700">(</span><span style="color: #9876AA">$data</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'flags_'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>    </div>     <div class="example-contents"><p>     这会输出：（为了可读性，字已经换行了）    </p></div>    <div class="example-contents screen"> <div class="cdata"><pre> user%5Bname%5D=Bob+Smith&amp;user%5Bage%5D=47&amp;user%5Bsex%5D=M&amp; user%5Bdob%5D=5%2F12%2F1956&amp;pastimes%5B0%5D=golf&amp;pastimes%5B1%5D=opera&amp; pastimes%5B2%5D=poker&amp;pastimes%5B3%5D=rap&amp;children%5Bbobby%5D%5Bage%5D=12&amp; children%5Bbobby%5D%5Bsex%5D=M&amp;children%5Bsally%5D%5Bage%5D=8&amp; children%5Bsally%5D%5Bsex%5D=F&amp;flags_0=CEO </pre></div>    </div>    <div class="example-contents"><p>     <blockquote class="note"><p><strong class="note">Note</strong>:       <p class="para">       只有基础数组中的数字下标元素“CEO”才获取了前缀，其它数字下标元素（如       pastimes 下的元素）则不需要为了合法的变量名而加上前缀。      </p>     </p></blockquote>    </p></div>   </div>    <div class="example" id="example-4885">    <p><strong>Example #4 <span class="function"><strong>http_build_query()</strong></span> 使用对象</strong></p>    <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">class&nbsp;</span><span style="color: #9876AA">parentClass&nbsp;</span><span style="color: #007700">{<br />&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$pub&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'publicParent'</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;protected&nbsp;</span><span style="color: #9876AA">$prot&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'protectedParent'</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$priv&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'privateParent'</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$pub_bar&nbsp;&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">Null</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;protected&nbsp;</span><span style="color: #9876AA">$prot_bar&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">Null</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$priv_bar&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">Null</span><span style="color: #007700">;<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;function&nbsp;</span><span style="color: #9876AA">__construct</span><span style="color: #007700">(){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">pub_bar&nbsp;&nbsp;</span><span style="color: #007700">=&nbsp;new&nbsp;</span><span style="color: #9876AA">childClass</span><span style="color: #007700">();<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">prot_bar&nbsp;</span><span style="color: #007700">=&nbsp;new&nbsp;</span><span style="color: #9876AA">childClass</span><span style="color: #007700">();<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">priv_bar&nbsp;</span><span style="color: #007700">=&nbsp;new&nbsp;</span><span style="color: #9876AA">childClass</span><span style="color: #007700">();<br />&nbsp;&nbsp;&nbsp;&nbsp;}<br />}<br /><br />class&nbsp;</span><span style="color: #9876AA">childClass&nbsp;</span><span style="color: #007700">{<br />&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$pub&nbsp;&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'publicChild'</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;protected&nbsp;</span><span style="color: #9876AA">$prot&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'protectedChild'</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$priv&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'privateChild'</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">$parent&nbsp;</span><span style="color: #007700">=&nbsp;new&nbsp;</span><span style="color: #9876AA">parentClass</span><span style="color: #007700">();<br /><br />echo&nbsp;</span><span style="color: #9876AA">http_build_query</span><span style="color: #007700">(</span><span style="color: #9876AA">$parent</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>    </div>     <div class="example-contents"><p>以上例程会输出：</p></div>    <div class="example-contents screen"> <div class="cdata"><pre> pub=publicParent&amp;pub_bar%5Bpub%5D=publicChild </pre></div>    </div>   </div>  </div>    <div class="refsect1 seealso" id="refsect1-function.http-build-query-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link parse_str()} - 将字符串解析成多个变量</span></li>     <li class="member"><span class="function">{@link parse_url()} - 解析 URL，返回其组成部分</span></li>     <li class="member"><span class="function">{@link urlencode()} - 编码 URL 字符串</span></li>     <li class="member"><span class="function">{@link array_walk()} - 使用用户自定义函数对数组中的每个元素做回调处理</span></li>    </ul>   </p>  </div>    <div class="up"><a href="http://php.net/manual/zh/ref.url.php">URL 函数</a></div></div>
 * @return string a URL-encoded string.*/
function http_build_query ($query_data, $numeric_prefix = null, $arg_separator = null, $enc_type = PHP_QUERY_RFC1738){}

/**
*<div id="function.readlink" class="refentry">  <div class="refnamediv">   <h1 class="refname">readlink</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">readlink</span> &mdash; <span class="dc-title">返回符号连接指向的目标</span></p>   </div>  <div class="refsect1 description" id="refsect1-function.readlink-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">string</span> <span class="methodname"><strong>readlink</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$path</code></span>    )</div>    <p class="para rdfs-comment">   <span class="function"><strong>readlink()</strong></span> 和同名的 C   函数做同样的事，返回符号连接的内容。   </p>  </div>    <div class="refsect1 parameters" id="refsect1-function.readlink-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">path</code></dt>       <dd>        <p class="para">        链接符号的路径。       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 changelog" id="refsect1-function.readlink-changelog">   <h3 class="title">更新日志</h3>   <p class="para">    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>5.3.0</td>        <td>         此函数在 Windows 平台下可用（Vista、Server          2008 或更高版本）。        </td>       </tr>       </tbody>         </table>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.readlink-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回链接的路径内容，出错则返回 <strong><code>FALSE</code></strong>。   </p>  </div>    <div class="refsect1 examples" id="refsect1-function.readlink-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-2832">     <p><strong>Example #1 <span class="function"><strong>readlink()</strong></span> 例</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /><br /></span><span style="color: #FF8000">//&nbsp;output&nbsp;e.g.&nbsp;/boot/vmlinux-2.4.20-xfs<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #9876AA">readlink</span><span style="color: #007700">(</span><span style="color: #DD0000">'/vmlinuz'</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>     </div>   </p>  </div>    <div class="refsect1 seealso" id="refsect1-function.readlink-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link is_link()} - 判断给定文件名是否为一个符号连接</span></li>     <li class="member"><span class="function">{@link symlink()} - 建立符号连接</span></li>     <li class="member"><span class="function">{@link linkinfo()} - 获取一个连接的信息</span></li>    </ul>   </p>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.filesystem.php">文件系统函数</a></div></div>
 * @return string the contents of the symbolic link path or false on error.*/
function readlink ($path) {}

/**
*<div id="function.linkinfo" class="refentry">  <div class="refnamediv">   <h1 class="refname">linkinfo</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">linkinfo</span> &mdash; <span class="dc-title">获取一个连接的信息</span></p>   </div>  <div class="refsect1 description" id="refsect1-function.linkinfo-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">int</span> <span class="methodname"><strong>linkinfo</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$path</code></span>    )</div>    <p class="para rdfs-comment">    获取一个连接的信息。   </p>   <p class="para">    本函数用来验证一个连接（由 <code class="parameter">path</code>    所指向的）是否确实存在（使用  <var class="filename">stat.h</var> 中的 S_ISLNK    宏同样的方法）。   </p>  </div>    <div class="refsect1 parameters" id="refsect1-function.linkinfo-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">path</code></dt>       <dd>        <p class="para">        连接的路径。       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.linkinfo-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">     <span class="function"><strong>linkinfo()</strong></span> 返回 <em>lstat</em>    系统调用所返回的 UNIX C stat 结构中的 <em>st_dev</em>    字段。 如果出错则返回 0 或 <strong><code>FALSE</code></strong>。   </p>  </div>    <div class="refsect1 changelog" id="refsect1-function.linkinfo-changelog">   <h3 class="title">更新日志</h3>   <p class="para">    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>5.3.0</td>        <td>         Windows 平台上开始可用（Vista、Server 2008 或更高版本）。        </td>       </tr>       </tbody>         </table>    </p>  </div>    <div class="refsect1 examples" id="refsect1-function.linkinfo-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-2818">     <p><strong>Example #1 <span class="function"><strong>linkinfo()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /><br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #9876AA">linkinfo</span><span style="color: #007700">(</span><span style="color: #DD0000">'/vmlinuz'</span><span style="color: #007700">);&nbsp;</span><span style="color: #FF8000">//&nbsp;835<br /><br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>     </div>   </p>  </div>    <div class="refsect1 seealso" id="refsect1-function.linkinfo-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link symlink()} - 建立符号连接</span></li>     <li class="member"><span class="function">{@link link()} - 建立一个硬连接</span></li>     <li class="member"><span class="function">{@link readlink()} - 返回符号连接指向的目标</span></li>    </ul>   </p>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.filesystem.php">文件系统函数</a></div></div>
 * @return int linkinfo returns the st_dev field*/
function linkinfo ($path) {}

/**
*<div id="function.symlink" class="refentry">  <div class="refnamediv">   <h1 class="refname">symlink</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">symlink</span> &mdash; <span class="dc-title">建立符号连接</span></p>   </div>  <div class="refsect1 description" id="refsect1-function.symlink-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">bool</span> <span class="methodname"><strong>symlink</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$target</code></span>    , <span class="methodparam"><span class="type">string</span> <code class="parameter">$link</code></span>    )</div>    <p class="para rdfs-comment">    <span class="function"><strong>symlink()</strong></span> 对于已有的    <code class="parameter">target</code> 建立一个名为    <code class="parameter">link</code> 的符号连接。   </p>  </div>    <div class="refsect1 parameters" id="refsect1-function.symlink-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">target</code></dt>       <dd>        <p class="para">        连接的目标。       </p>      </dd>                 <dt> <code class="parameter">link</code></dt>       <dd>        <p class="para">        连接的名称。       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.symlink-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    成功时返回 <strong><code>TRUE</code></strong>， 或者在失败时返回 <strong><code>FALSE</code></strong>。   </p>  </div>    <div class="refsect1 changelog" id="refsect1-function.symlink-changelog">   <h3 class="title">更新日志</h3>   <p class="para">    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>5.3.0</td>        <td>         此函数在 Windows 平台上可用（Vista、Server          2008 或更高版本）。        </td>       </tr>       </tbody>         </table>    </p>  </div>    <div class="refsect1 examples" id="refsect1-function.symlink-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-2842">     <p><strong>Example #1 创建一个符号连接</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$target&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'uploads.php'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$link&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'uploads'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">symlink</span><span style="color: #007700">(</span><span style="color: #9876AA">$target</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$link</span><span style="color: #007700">);<br /><br />echo&nbsp;</span><span style="color: #9876AA">readlink</span><span style="color: #007700">(</span><span style="color: #9876AA">$link</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>     </div>   </p>  </div>    <div class="refsect1 notes" id="refsect1-function.symlink-notes">   <h3 class="title">注释</h3>   <blockquote class="note"><p><strong class="note">Note</strong>:     <span class="simpara">     仅针对 Windows：运行 PHP 于Vista、Server          2008 或更高版本才能正常使用。     之前版本的 Windows 不支持符号连接。    </span>   </p></blockquote>  </div>    <div class="refsect1 seealso" id="refsect1-function.symlink-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link link()} - 建立一个硬连接</span></li>     <li class="member"><span class="function">{@link readlink()} - 返回符号连接指向的目标</span></li>     <li class="member"><span class="function">{@link linkinfo()} - 获取一个连接的信息</span></li>    </ul>   </p>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.filesystem.php">文件系统函数</a></div></div>
 * @return bool true on success or false on failure.*/
function symlink ($target, $link) {}

/**
*<div id="function.link" class="refentry">  <div class="refnamediv">   <h1 class="refname">link</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">link</span> &mdash; <span class="dc-title">建立一个硬连接</span></p>   </div>  <div class="refsect1 description" id="refsect1-function.link-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">bool</span> <span class="methodname"><strong>link</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$target</code></span>    , <span class="methodparam"><span class="type">string</span> <code class="parameter">$link</code></span>    )</div>    <p class="para rdfs-comment">    <span class="function"><strong>link()</strong></span> 建立一个硬连接。   </p>  </div>    <div class="refsect1 parameters" id="refsect1-function.link-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">target</code></dt>       <dd>        <p class="para">        要链接的目标。       </p>      </dd>                 <dt> <code class="parameter">link</code></dt>       <dd>        <p class="para">        链接的名称。       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.link-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    成功时返回 <strong><code>TRUE</code></strong>， 或者在失败时返回 <strong><code>FALSE</code></strong>。   </p>  </div>    <div class="refsect1 notes" id="refsect1-function.link-notes">   <h3 class="title">注释</h3>   <blockquote class="note"><p><strong class="note">Note</strong>:     <span class="simpara">     Windows下：该功能需要以 elevated 模式运行，或者关闭 UAC。    </span>   </p></blockquote>  </div>    <div class="refsect1 changelog" id="refsect1-function.link-changelog">   <h3 class="title">更新日志</h3>   <p class="para">    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>5.3.0</td>        <td>         该功能在 Windows 平台下开始有效（Vista、 Server 2008 或更高版本）。        </td>       </tr>       </tbody>         </table>    </p>  </div>    <div class="refsect1 examples" id="refsect1-function.link-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-2817">     <p><strong>Example #1 Creating a simple hard link</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$target&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'source.ext'</span><span style="color: #007700">;&nbsp;</span><span style="color: #FF8000">//&nbsp;This&nbsp;is&nbsp;the&nbsp;file&nbsp;that&nbsp;already&nbsp;exists<br /></span><span style="color: #9876AA">$link&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'newfile.ext'</span><span style="color: #007700">;&nbsp;</span><span style="color: #FF8000">//&nbsp;This&nbsp;the&nbsp;filename&nbsp;that&nbsp;you&nbsp;want&nbsp;to&nbsp;link&nbsp;it&nbsp;to<br /><br /></span><span style="color: #9876AA">link</span><span style="color: #007700">(</span><span style="color: #9876AA">$target</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$link</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>     </div>   </p>  </div>    <div class="refsect1 notes" id="refsect1-function.link-notes">   <h3 class="title">注释</h3>   <blockquote class="note"><p><strong class="note">Note</strong>: <span class="simpara">此函数不能作用于<a href="http://php.net/manual/zh/features.remote-files.php" class="link">远程文件</a>，被检查的文件必须是可通过服务器的文件系统访问的。</span></p></blockquote>  </div>    <div class="refsect1 seealso" id="refsect1-function.link-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link symlink()} - 建立符号连接</span></li>     <li class="member"><span class="function">{@link readlink()} - 返回符号连接指向的目标</span></li>     <li class="member"><span class="function">{@link linkinfo()} - 获取一个连接的信息</span></li>    </ul>   </p>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.filesystem.php">文件系统函数</a></div></div>
 * @return bool true on success or false on failure.*/
function link (string $target , string $link):bool {}

/**
*<div id="function.unlink" class="refentry">  <div class="refnamediv">   <h1 class="refname">unlink</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">unlink</span> &mdash; <span class="dc-title">删除文件</span></p>   </div>  <div class="refsect1 description" id="refsect1-function.unlink-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">bool</span> <span class="methodname"><strong>unlink</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>    [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$context</code></span>   ] )</div>    <p class="para rdfs-comment">    删除 <code class="parameter">filename</code>。和 Unix C 的    unlink() 函数相似。    发生错误时会产生一个 <strong><code>E_WARNING</code></strong> 级别的错误。   </p>  </div>    <div class="refsect1 parameters" id="refsect1-function.unlink-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">filename</code></dt>       <dd>        <p class="para">        文件的路径。       </p>      </dd>                 <dt> <code class="parameter">context</code></dt>       <dd>        <blockquote class="note"><p><strong class="note">Note</strong>: <span class="simpara">在 PHP 5.0.0 中增加了对上下文（Context）的支持。有关<em>上下文（Context）</em>的说明参见 <a href="http://php.net/manual/zh/book.stream.php" class="xref">Streams</a>。</span></p></blockquote>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.unlink-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    成功时返回 <strong><code>TRUE</code></strong>， 或者在失败时返回 <strong><code>FALSE</code></strong>。   </p>  </div>    <div class="refsect1 changelog" id="refsect1-function.unlink-changelog">   <h3 class="title">更新日志</h3>   <p class="para">    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>5.0.0</td>        <td>          自 PHP 5.0.0 起     <span class="function"><strong>unlink()</strong></span> 也可以用于<em class="emphasis">某些</em>     URL 封装协议。参考<a href="http://php.net/manual/zh/wrappers.php" class="xref">支持的协议和封装协议</a> 中的列表看哪些封装协议支持     <span class="function"><strong>unlink()</strong></span>。        </td>       </tr>       </tbody>         </table>    </p>  </div>    <div class="refsect1 examples" id="refsect1-function.unlink-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-2848">     <p><strong>Example #1 基本的 <span class="function"><strong>unlink()</strong></span> 用法</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$fh&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">fopen</span><span style="color: #007700">(</span><span style="color: #DD0000">'test.html'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'a'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">fwrite</span><span style="color: #007700">(</span><span style="color: #9876AA">$fh</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'&lt;h1&gt;Hello&nbsp;world!&lt;/h1&gt;'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">fclose</span><span style="color: #007700">(</span><span style="color: #9876AA">$fh</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">unlink</span><span style="color: #007700">(</span><span style="color: #DD0000">'test.html'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>     </div>   </p>  </div>    <div class="refsect1 seealso" id="refsect1-function.unlink-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link rmdir()} - 删除目录</span></li>    </ul>   </p>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.filesystem.php">文件系统函数</a></div></div>
 * @return bool true on success or false on failure.*/
function unlink ($filename, $context = null) {}

/**
*<div id="function.exec" class="refentry">  <div class="refnamediv">   <h1 class="refname">exec</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">exec</span> &mdash; <span class="dc-title">执行一个外部程序</span></p>   </div>   <div class="refsect1 description" id="refsect1-function.exec-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">string</span> <span class="methodname"><strong>exec</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$command</code></span>    [, <span class="methodparam"><span class="type">array</span> <code class="parameter reference">&$output</code></span>    [, <span class="methodparam"><span class="type">int</span> <code class="parameter reference">&$return_var</code></span>   ]] )</div>    <p class="para rdfs-comment">    <span class="function"><strong>exec()</strong></span> 执行    <code class="parameter">command</code> 参数所指定的命令。   </p>  </div>    <div class="refsect1 parameters" id="refsect1-function.exec-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">command</code></dt>       <dd>        <p class="para">        要执行的命令。       </p>      </dd>                 <dt> <code class="parameter">output</code></dt>       <dd>        <p class="para">         如果提供了 <code class="parameter">output</code> 参数，         那么会用命令执行的输出填充此数组，         每行输出填充数组中的一个元素。         数组中的数据不包含行尾的空白字符，例如 <em>\n</em> 字符。         请注意，如果数组中已经包含了部分元素，<span class="function"><strong>exec()</strong></span>         函数会在数组末尾追加内容。如果你不想在数组末尾进行追加，         请在传入 <span class="function"><strong>exec()</strong></span> 函数之前         对数组使用 <span class="function">{@link unset()}</span> 函数进行重置。       </p>      </dd>                 <dt> <code class="parameter">return_var</code></dt>       <dd>        <p class="para">         如果同时提供          <code class="parameter">output</code>  和          <code class="parameter">return_var</code> 参数，         命令执行后的返回状态会被写入到此变量。       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.exec-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">     命令执行结果的最后一行内容。     如果你需要获取未经处理的全部输出数据，     请使用 <span class="function">{@link passthru()}</span> 函数。   </p>   <p class="para">     如果想要获取命令的输出内容，     请确保使用 <code class="parameter">output</code> 参数。   </p>  </div>    <div class="refsect1 examples" id="refsect1-function.exec-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-4355">     <p><strong>Example #1 <span class="function"><strong>exec()</strong></span> 例程</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">//&nbsp;输出运行中的&nbsp;php/httpd&nbsp;进程的创建者用户名<br />//&nbsp;（在可以执行&nbsp;"whoami"&nbsp;命令的系统上）<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #9876AA">exec</span><span style="color: #007700">(</span><span style="color: #DD0000">'whoami'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>     </div>   </p>  </div>    <div class="refsect1 notes" id="refsect1-function.exec-notes">   <h3 class="title">注释</h3>   <div class="warning"><strong class="warning">Warning</strong><p class="para">当用户提供的数据传入此函数，使用 <span class="function">{@link escapeshellarg()}</span> 或 <span class="function">{@link escapeshellcmd()}</span> 来确保用户欺骗系统从而执行任意命令。</p></div>   <blockquote class="note"><p><strong class="note">Note</strong>: <p class="para">如何程序使用此函数启动，为了能保持在后台运行，此程序必须将输出重定向到文件或其它输出流。否则会导致 PHP 挂起，直至程序执行结束。</p></p></blockquote>   <blockquote class="note"><p><strong class="note">Note</strong>: <p class="para">On Windows <span class="function"><strong>exec()</strong></span> will first start cmd.exe to launch the command. If you want to start an external program without starting cmd.exe use <span class="function">{@link proc_open()}</span> with the <code class="parameter">bypass_shell</code> option set.</p></p></blockquote>   <blockquote class="note"><p><strong class="note">Note</strong>: <span class="simpara"><a href="http://php.net/manual/zh/features.safe-mode.php" class="link">安全模式</a> 启用时，可仅可用 <a href="http://php.net/manual/zh/ini.sect.safe-mode.php#ini.safe-mode-exec-dir" class="link">safe_mode_exec_dir</a> 执行文件。实际上，现在不允许在到可执行的路径中存在 <em>..</em> 组件。</span></p></blockquote>   <div class="warning"><strong class="warning">Warning</strong><p class="simpara"><a href="http://php.net/manual/zh/features.safe-mode.php" class="link">安全模式</a> 启用时，命令字符串会被 <span class="function">{@link escapeshellcmd()}</span> 转换。因此，<em>echo y | echo x</em> 会变成 <em>echo y \| echo x</em>。</p></div>  </div>    <div class="refsect1 seealso" id="refsect1-function.exec-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link system()} - 执行外部程序，并且显示输出</span></li>     <li class="member"><span class="function">{@link passthru()} - 执行外部程序并且显示原始输出</span></li>     <li class="member"><span class="function">{@link escapeshellcmd()} - shell 元字符转义</span></li>     <li class="member"><span class="function">{@link pcntl_exec()} - 在当前进程空间执行指定程序</span></li>     <li class="member"><a href="http://php.net/manual/zh/language.operators.execution.php" class="link">执行运算符</a></li>    </ul>   </p>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.exec.php">程序执行函数</a></div></div>
 * @return string The last line from the result of the command. If you need to execute a */
function exec ($command, array &$output = null, &$return_var = null) {}

/**
*<div id="function.system" class="refentry">  <div class="refnamediv">   <h1 class="refname">system</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">system</span> &mdash; <span class="dc-title">执行外部程序，并且显示输出</span></p>   </div>   <div class="refsect1 description" id="refsect1-function.system-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">string</span> <span class="methodname"><strong>system</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$command</code></span>    [, <span class="methodparam"><span class="type">int</span> <code class="parameter reference">&$return_var</code></span>   ] )</div>    <p class="para rdfs-comment">     同 C 版本的 <span class="function"><strong>system()</strong></span> 函数一样，     本函数执行 <code class="parameter">command</code> 参数所指定的命令，     并且输出执行结果。   </p>   <p class="para">     如果 PHP 运行在服务器模块中，     <span class="function"><strong>system()</strong></span> 函数还会尝试在每行输出完毕之后，     自动刷新 web 服务器的输出缓存。   </p>   <p class="para">     如果要获取一个命令未经任何处理的     原始输出，     请使用 <span class="function">{@link passthru()}</span> 函数。   </p>  </div>    <div class="refsect1 parameters" id="refsect1-function.system-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">command</code></dt>       <dd>        <p class="para">        要执行的命令。       </p>      </dd>                 <dt> <code class="parameter">return_var</code></dt>       <dd>        <p class="para">         如果提供 <code class="parameter">return_var</code> 参数，         则外部命令执行后的返回状态将会被设置到此变量中。       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.system-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">     成功则返回命令输出的最后一行，     失败则返回 <strong><code>FALSE</code></strong>   </p>  </div>    <div class="refsect1 examples" id="refsect1-function.system-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-4359">     <p><strong>Example #1 <span class="function"><strong>system()</strong></span> 例程</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #DD0000">'&lt;pre&gt;'</span><span style="color: #007700">;<br /><br /></span><span style="color: #FF8000">//&nbsp;输出&nbsp;shell&nbsp;命令&nbsp;"ls"&nbsp;的返回结果<br />//&nbsp;并且将输出的最后一样内容返回到&nbsp;$last_line。<br />//&nbsp;将命令的返回值保存到&nbsp;$retval。<br /></span><span style="color: #9876AA">$last_line&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">system</span><span style="color: #007700">(</span><span style="color: #DD0000">'ls'</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$retval</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">//&nbsp;打印更多信息<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #DD0000">'<br />&lt;/pre&gt;<br />&lt;hr&nbsp;/&gt;Last&nbsp;line&nbsp;of&nbsp;the&nbsp;output:&nbsp;'&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #9876AA">$last_line&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #DD0000">'<br />&lt;hr&nbsp;/&gt;Return&nbsp;value:&nbsp;'&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #9876AA">$retval</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>     </div>   </p>  </div>    <div class="refsect1 notes" id="refsect1-function.system-notes">   <h3 class="title">注释</h3>   <div class="warning"><strong class="warning">Warning</strong><p class="para">当用户提供的数据传入此函数，使用 <span class="function">{@link escapeshellarg()}</span> 或 <span class="function">{@link escapeshellcmd()}</span> 来确保用户欺骗系统从而执行任意命令。</p></div>   <blockquote class="note"><p><strong class="note">Note</strong>: <p class="para">如何程序使用此函数启动，为了能保持在后台运行，此程序必须将输出重定向到文件或其它输出流。否则会导致 PHP 挂起，直至程序执行结束。</p></p></blockquote>   <blockquote class="note"><p><strong class="note">Note</strong>: <span class="simpara"><a href="http://php.net/manual/zh/features.safe-mode.php" class="link">安全模式</a> 启用时，可仅可用 <a href="http://php.net/manual/zh/ini.sect.safe-mode.php#ini.safe-mode-exec-dir" class="link">safe_mode_exec_dir</a> 执行文件。实际上，现在不允许在到可执行的路径中存在 <em>..</em> 组件。</span></p></blockquote>   <div class="warning"><strong class="warning">Warning</strong><p class="simpara"><a href="http://php.net/manual/zh/features.safe-mode.php" class="link">安全模式</a> 启用时，命令字符串会被 <span class="function">{@link escapeshellcmd()}</span> 转换。因此，<em>echo y | echo x</em> 会变成 <em>echo y \| echo x</em>。</p></div>  </div>    <div class="refsect1 seealso" id="refsect1-function.system-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link exec()} - 执行一个外部程序</span></li>     <li class="member"><span class="function">{@link passthru()} - 执行外部程序并且显示原始输出</span></li>     <li class="member"><span class="function">{@link popen()} - 打开进程文件指针</span></li>     <li class="member"><span class="function">{@link escapeshellcmd()} - shell 元字符转义</span></li>     <li class="member"><span class="function">{@link pcntl_exec()} - 在当前进程空间执行指定程序</span></li>     <li class="member"><a href="http://php.net/manual/zh/language.operators.execution.php" class="link">执行操作符</a></li>    </ul>   </p>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.exec.php">程序执行函数</a></div></div>
 * @return string|bool the last line of the command output on success, and false*/
function system ($command, &$return_var = null) {}

/**
*<div id="function.escapeshellcmd" class="refentry">  <div class="refnamediv">   <h1 class="refname">escapeshellcmd</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">escapeshellcmd</span> &mdash; <span class="dc-title">shell 元字符转义</span></p>   </div>   <div class="refsect1 description" id="refsect1-function.escapeshellcmd-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">string</span> <span class="methodname"><strong>escapeshellcmd</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$command</code></span>    )</div>    <p class="para rdfs-comment">    <span class="function"><strong>escapeshellcmd()</strong></span> 对字符串中可能会欺骗     shell 命令执行任意命令的字符进行转义。    此函数保证用户输入的数据在传送到     <span class="function">{@link exec()}</span> 或    <span class="function">{@link system()}</span> 函数，或者 <a href="http://php.net/manual/zh/language.operators.execution.php" class="link">执行操作符</a> 之前进行转义。   </p>   <p class="para">     反斜线（\）会在以下字符之前插入：    <em>&amp;#;`|*?~&lt;&gt;^()[]{}$\</em>, <em>\x0A</em>    和 <em>\xFF</em>。 <em>&#039;</em> 和 <em>&quot;</em>    仅在不配对儿的时候被转义。    在 Windows 平台上，所有这些字符以及 <em>%</em> 和 <em>!</em> 字符都会被空格代替。   </p>  </div>    <div class="refsect1 parameters" id="refsect1-function.escapeshellcmd-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">command</code></dt>       <dd>        <p class="para">         要转义的命令。       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.escapeshellcmd-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    转义后的字符串。   </p>  </div>    <div class="refsect1 examples" id="refsect1-function.escapeshellcmd-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-4354">     <p><strong>Example #1 <span class="function"><strong>escapeshellcmd()</strong></span> example</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">//&nbsp;我们故意允许任意数量的参数<br /></span><span style="color: #9876AA">$command&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'./configure&nbsp;'</span><span style="color: #007700">.</span><span style="color: #9876AA">$_POST</span><span style="color: #007700">[</span><span style="color: #DD0000">'configure_options'</span><span style="color: #007700">];<br /><br /></span><span style="color: #9876AA">$escaped_command&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">escapeshellcmd</span><span style="color: #007700">(</span><span style="color: #9876AA">$command</span><span style="color: #007700">);<br />&nbsp;<br /></span><span style="color: #9876AA">system</span><span style="color: #007700">(</span><span style="color: #9876AA">$escaped_command</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>     </div>   </p>  </div>    <div class="refsect1 notes" id="refsect1-function.escapeshellcmd-notes">    <div class="warning"><strong class="warning">Warning</strong>     <p class="para">      <span class="function"><strong>escapeshellcmd()</strong></span> 应被用在完整的命令字符串上。      即使如此，攻击者还是可以传入任意数量的参数。      请使用 <span class="function">{@link escapeshellarg()}</span> 函数      对单个参数进行转义。     </p>    </div>  </div>     <div class="refsect1 changelog" id="refsect1-function.escapeshellcmd-changelog">   <h3 class="title">更新日志</h3>   <p class="para">    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>5.4.43, 5.5.27, 5.6.11</td>        <td>         感叹号会被空格所替换。        </td>       </tr>       </tbody>         </table>    </p>  </div>     <div class="refsect1 seealso" id="refsect1-function.escapeshellcmd-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link escapeshellarg()} - 把字符串转码为可以在 shell 命令里使用的参数</span></li>     <li class="member"><span class="function">{@link exec()} - 执行一个外部程序</span></li>     <li class="member"><span class="function">{@link popen()} - 打开进程文件指针</span></li>     <li class="member"><span class="function">{@link system()} - 执行外部程序，并且显示输出</span></li>     <li class="member"><a href="http://php.net/manual/zh/language.operators.execution.php" class="link">执行运算符</a></li>    </ul>   </p>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.exec.php">程序执行函数</a></div></div>
 * @return string The escaped string.*/
function escapeshellcmd ($command) {}

/**
*<div id="function.escapeshellarg" class="refentry">  <div class="refnamediv">   <h1 class="refname">escapeshellarg</h1>   <p class="verinfo">(PHP 4 &gt;= 4.0.3, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">escapeshellarg</span> &mdash; <span class="dc-title">把字符串转码为可以在 shell 命令里使用的参数</span></p>   </div>   <div class="refsect1 description" id="refsect1-function.escapeshellarg-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">string</span> <span class="methodname"><strong>escapeshellarg</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$arg</code></span>    )</div>    <p class="para rdfs-comment">    <span class="function"><strong>escapeshellarg()</strong></span> 将给字符串增加一个单引号并且能引用或者转码任何已经存在的单引号，这样以确保能够直接将一个字符串传入 shell 函数，并且还是确保安全的。对于用户输入的部分参数就应该使用这个函数。shell 函数包含  <span class="function">{@link exec()}</span>, <span class="function">{@link system()}</span>     <a href="http://php.net/manual/zh/language.operators.execution.php" class="link">执行运算符</a> 。   </p>  </div>    <div class="refsect1 parameters" id="refsect1-function.escapeshellarg-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">arg</code></dt>       <dd>        <p class="para">        需要被转码的参数。       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.escapeshellarg-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    转换之后字符串。   </p>  </div>    <div class="refsect1 examples" id="refsect1-function.escapeshellarg-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-4353">     <p><strong>Example #1 <span class="function"><strong>escapeshellarg()</strong></span> 的例子</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />system</span><span style="color: #007700">(</span><span style="color: #DD0000">'ls&nbsp;'</span><span style="color: #007700">.</span><span style="color: #9876AA">escapeshellarg</span><span style="color: #007700">(</span><span style="color: #9876AA">$dir</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>     </div>   </p>  </div>    <div class="refsect1 seealso" id="refsect1-function.escapeshellarg-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link escapeshellcmd()} - shell 元字符转义</span></li>     <li class="member"><span class="function">{@link exec()} - 执行一个外部程序</span></li>     <li class="member"><span class="function">{@link popen()} - 打开进程文件指针</span></li>     <li class="member"><span class="function">{@link system()} - 执行外部程序，并且显示输出</span></li>     <li class="member"><a href="http://php.net/manual/zh/language.operators.execution.php" class="link">执行运算符</a></li>    </ul>   </p>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.exec.php">程序执行函数</a></div></div>
 * @return string The escaped string.*/
function escapeshellarg ($arg) {}

/**
*<div id="function.passthru" class="refentry">  <div class="refnamediv">   <h1 class="refname">passthru</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">passthru</span> &mdash; <span class="dc-title">执行外部程序并且显示原始输出</span></p>   </div>   <div class="refsect1 description" id="refsect1-function.passthru-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>passthru</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$command</code></span>    [, <span class="methodparam"><span class="type">int</span> <code class="parameter reference">&$return_var</code></span>   ] )</div>    <p class="para rdfs-comment">     同 <span class="function">{@link exec()}</span> 函数类似，     <span class="function"><strong>passthru()</strong></span> 函数     也是用来执行外部命令（<code class="parameter">command</code>）的。     当所执行的 Unix 命令输出二进制数据，     并且需要直接传送到浏览器的时候，     需要用此函数来替代 <span class="function">{@link exec()}</span>      或 <span class="function">{@link system()}</span> 函数。     常用来执行诸如 pbmplus 之类的可以直接输出图像流的命令。     通过设置 Content-type 为 <em>image/gif</em>，     然后调用 pbmplus 程序输出 gif 文件，     就可以从 PHP 脚本中直接输出图像到浏览器。   </p>  </div>    <div class="refsect1 parameters" id="refsect1-function.passthru-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">command</code></dt>       <dd>        <p class="para">        要执行的命令。       </p>      </dd>                 <dt> <code class="parameter">return_var</code></dt>       <dd>        <p class="para">         如果提供  <code class="parameter">return_var</code> 参数，         Unix 命令的返回状态会被记录到此参数。       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.passthru-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    没有返回值。   </p>  </div>    <div class="refsect1 notes" id="refsect1-function.passthru-notes">   <h3 class="title">注释</h3>   <div class="warning"><strong class="warning">Warning</strong><p class="para">当用户提供的数据传入此函数，使用 <span class="function">{@link escapeshellarg()}</span> 或 <span class="function">{@link escapeshellcmd()}</span> 来确保用户欺骗系统从而执行任意命令。</p></div>   <blockquote class="note"><p><strong class="note">Note</strong>: <p class="para">如何程序使用此函数启动，为了能保持在后台运行，此程序必须将输出重定向到文件或其它输出流。否则会导致 PHP 挂起，直至程序执行结束。</p></p></blockquote>   <blockquote class="note"><p><strong class="note">Note</strong>: <span class="simpara"><a href="http://php.net/manual/zh/features.safe-mode.php" class="link">安全模式</a> 启用时，可仅可用 <a href="http://php.net/manual/zh/ini.sect.safe-mode.php#ini.safe-mode-exec-dir" class="link">safe_mode_exec_dir</a> 执行文件。实际上，现在不允许在到可执行的路径中存在 <em>..</em> 组件。</span></p></blockquote>   <div class="warning"><strong class="warning">Warning</strong><p class="simpara"><a href="http://php.net/manual/zh/features.safe-mode.php" class="link">安全模式</a> 启用时，命令字符串会被 <span class="function">{@link escapeshellcmd()}</span> 转换。因此，<em>echo y | echo x</em> 会变成 <em>echo y \| echo x</em>。</p></div>  </div>    <div class="refsect1 seealso" id="refsect1-function.passthru-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link exec()} - 执行一个外部程序</span></li>     <li class="member"><span class="function">{@link system()} - 执行外部程序，并且显示输出</span></li>     <li class="member"><span class="function">{@link popen()} - 打开进程文件指针</span></li>     <li class="member"><span class="function">{@link escapeshellcmd()} - shell 元字符转义</span></li>     <li class="member"><a href="http://php.net/manual/zh/language.operators.execution.php" class="link">执行运算符</a></li>    </ul>   </p>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.exec.php">程序执行函数</a></div></div>
 * @return void */
function passthru ($command, &$return_var = null) {}

/**
*<div id="function.shell-exec" class="refentry">  <div class="refnamediv">   <h1 class="refname">shell_exec</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">shell_exec</span> &mdash; <span class="dc-title">通过 shell 环境执行命令，并且将完整的输出以字符串的方式返回。</span></p>   </div>   <div class="refsect1 description" id="refsect1-function.shell-exec-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">string</span> <span class="methodname"><strong>shell_exec</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$cmd</code></span>    )</div>    <p class="para rdfs-comment">    本函数同 <a href="http://php.net/manual/zh/language.operators.execution.php" class="link">执行操作符</a>。   </p>  </div>    <div class="refsect1 parameters" id="refsect1-function.shell-exec-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">cmd</code></dt>       <dd>        <p class="para">        要执行的命令。       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.shell-exec-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">     命令执行的输出。     如果执行过程中发生错误或者进程不产生输出，则返回 <strong><code>NULL</code></strong>。   </p>   <blockquote class="note"><p><strong class="note">Note</strong>:     <p class="para">     当进程执行过程中发生错误，或者进程不产生输出的情况下，都会返回 <strong><code>NULL</code></strong>，     所以，使用本函数无法通过返回值检测进程是否成功执行。     如果需要检查进程执行的退出码，请使用 <span class="function">{@link exec()}</span> 函数。    </p>   </p></blockquote>  </div>    <div class="refsect1 examples" id="refsect1-function.shell-exec-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-4358">     <p><strong>Example #1 <span class="function"><strong>shell_exec()</strong></span> 例程</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$output&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">shell_exec</span><span style="color: #007700">(</span><span style="color: #DD0000">'ls&nbsp;-lart'</span><span style="color: #007700">);<br />echo&nbsp;</span><span style="color: #DD0000">"&lt;pre&gt;</span><span style="color: #9876AA">$output</span><span style="color: #DD0000">&lt;/pre&gt;"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>     </div>   </p>  </div>    <div class="refsect1 notes" id="refsect1-function.shell-exec-notes">   <h3 class="title">注释</h3>   <blockquote class="note"><p><strong class="note">Note</strong>:     <p class="para">     当 PHP 运行在 <a href="http://php.net/manual/zh/features.safe-mode.php" class="link">安全模式</a> 时，不能使用此函数。    </p>   </p></blockquote>  </div>    <div class="refsect1 seealso" id="refsect1-function.shell-exec-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link exec()} - 执行一个外部程序</span></li>     <li class="member"><span class="function">{@link escapeshellcmd()} - shell 元字符转义</span></li>    </ul>   </p>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.exec.php">程序执行函数</a></div></div>
 * @return string The output from the executed command.*/
function shell_exec ($cmd) {}

/**
*<div id="function.proc-open" class="refentry">    <div class="refnamediv">     <h1 class="refname">proc_open</h1>     <p class="verinfo">(PHP 4 &gt;= 4.3.0, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">proc_open</span> &mdash; <span class="dc-title">      执行一个命令，并且打开用来输入/输出的文件指针。     </span></p>     </div>    <div class="refsect1 description" id="refsect1-function.proc-open-description">     <h3 class="title">说明</h3>      <div class="methodsynopsis dc-description">       <span class="type">resource</span> <span class="methodname"><strong>proc_open</strong></span>        ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$cmd</code></span>       , <span class="methodparam"><span class="type">array</span> <code class="parameter">$descriptorspec</code></span>       , <span class="methodparam"><span class="type">array</span> <code class="parameter reference">&$pipes</code></span>       [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$cwd</code></span>       [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$env</code></span>       [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$other_options</code></span>      ]]] )</div>      <p class="para rdfs-comment">      类似 <span class="function">{@link popen()}</span> 函数，      但是 <span class="function"><strong>proc_open()</strong></span> 提供了更加强大的控制程序执行的能力。     </p>       </div>    <div class="refsect1 parameters" id="refsect1-function.proc-open-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">cmd</code></dt>       <dd>        <p class="para">        要执行的命令       </p>      </dd>                 <dt> <code class="parameter">descriptorspec</code></dt>       <dd>        <p class="para">         一个索引数组。         数组的键表示描述符，数组元素值表示 PHP 如何将这些描述符传送至子进程。         0 表示标准输入（stdin），1 表示标准输出（stdout），2 表示标准错误（stderr）。       </p>       <p class="para">        数组中的元素可以是：        <ul class="simplelist">         <li class="member">           包含了要传送至进程的管道的描述信息。           第一个元素为描述符类型，           第二个元素是针对该描述符的选项。           有效的类型有：<em>pipe</em>            （第二个元素可以是： <em>r</em> 向进程传送该管道的读取端，<em>w</em> 向进程传送该管道的写入端），           以及 <em>file</em>（第二个元素为文件名）。         </li>         <li class="member">           表达一个真实文件描述符的流资源类型           （例如：已打开的文件，一个 socket 端口，<strong><code>STDIN</code></strong>）。         </li>        </ul>       </p>       <p class="para">         文件描述符的值不限于 0，1 和 2，你可以使用任何有效的文件描述符         并将其传送至子进程。         这使得你的脚本可以和其他脚本交互操作。         例如，可以通过指定文件描述符将密码以更加安全的方式         传送至诸如 PGP，GPG 和 openssl 程序，         同时也可以很方便的获取这些程序的状态信息。       </p>      </dd>                 <dt> <code class="parameter">pipes</code></dt>       <dd>        <p class="para">         将被置为索引数组，         其中的元素是被执行程序创建的管道对应到 PHP 这一端的文件指针。       </p>      </dd>                 <dt> <code class="parameter">cwd</code></dt>       <dd>        <p class="para">         要执行命令的初始工作目录。         必须是 <em class="emphasis">绝对</em> 路径，         设置此参数为 <strong><code>NULL</code></strong>          表示使用默认值（当前 PHP 进程的工作目录）。       </p>      </dd>                 <dt> <code class="parameter">env</code></dt>       <dd>        <p class="para">         要执行的命令所使用的环境变量。         设置此参数为 <strong><code>NULL</code></strong> 表示使用和当前 PHP 进程相同的环境变量。       </p>      </dd>                 <dt> <code class="parameter">other_options</code></dt>       <dd>        <p class="para">         你还可以指定一些附加选项。         目前支持的选项包括：        <ul class="simplelist">         <li class="member">          <em>suppress_errors</em> （仅用于 Windows 平台）：          设置为 <strong><code>TRUE</code></strong> 表示抑制本函数产生的错误。         </li>         <li class="member">          <em>bypass_shell</em> （仅用于 Windows 平台）：          设置为 <strong><code>TRUE</code></strong> 表示绕过 <em>cmd.exe</em> shell。         </li>        </ul>       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.proc-open-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">     返回表示进程的资源类型，     当使用完毕之后，请调用 <span class="function">{@link proc_close()}</span> 函数来关闭此资源。     如果失败，返回 <strong><code>FALSE</code></strong>。   </p>  </div>    <div class="refsect1 changelog" id="refsect1-function.proc-open-changelog">   <h3 class="title">更新日志</h3>   <p class="para">    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>5.2.1</td>        <td>         为 <code class="parameter">other_options</code> 参数增加 <em>bypass_shell</em> 选项。        </td>       </tr>       </tbody>         </table>    </p>  </div>    <div class="refsect1 examples" id="refsect1-function.proc-open-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-4357">     <p><strong>Example #1 <span class="function"><strong>proc_open()</strong></span> 例程</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$descriptorspec&nbsp;</span><span style="color: #007700">=&nbsp;array(<br />&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">0&nbsp;</span><span style="color: #007700">=&gt;&nbsp;array(</span><span style="color: #DD0000">"pipe"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"r"</span><span style="color: #007700">),&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;标准输入，子进程从此管道中读取数据<br />&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">1&nbsp;</span><span style="color: #007700">=&gt;&nbsp;array(</span><span style="color: #DD0000">"pipe"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"w"</span><span style="color: #007700">),&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;标准输出，子进程向此管道中写入数据<br />&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">2&nbsp;</span><span style="color: #007700">=&gt;&nbsp;array(</span><span style="color: #DD0000">"file"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"/tmp/error-output.txt"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"a"</span><span style="color: #007700">)&nbsp;</span><span style="color: #FF8000">//&nbsp;标准错误，写入到一个文件<br /></span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$cwd&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'/tmp'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$env&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">'some_option'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">'aeiou'</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$process&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">proc_open</span><span style="color: #007700">(</span><span style="color: #DD0000">'php'</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$descriptorspec</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$pipes</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$cwd</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$env</span><span style="color: #007700">);<br /><br />if&nbsp;(</span><span style="color: #9876AA">is_resource</span><span style="color: #007700">(</span><span style="color: #9876AA">$process</span><span style="color: #007700">))&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;$pipes&nbsp;现在看起来是这样的：<br />&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;0&nbsp;=&gt;&nbsp;可以向子进程标准输入写入的句柄<br />&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;1&nbsp;=&gt;&nbsp;可以从子进程标准输出读取的句柄<br />&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;错误输出将被追加到文件&nbsp;/tmp/error-output.txt<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">fwrite</span><span style="color: #007700">(</span><span style="color: #9876AA">$pipes</span><span style="color: #007700">[</span><span style="color: #9876AA">0</span><span style="color: #007700">],&nbsp;</span><span style="color: #DD0000">'&lt;?php&nbsp;print_r($_ENV);&nbsp;?&gt;'</span><span style="color: #007700">);<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">fclose</span><span style="color: #007700">(</span><span style="color: #9876AA">$pipes</span><span style="color: #007700">[</span><span style="color: #9876AA">0</span><span style="color: #007700">]);<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #9876AA">stream_get_contents</span><span style="color: #007700">(</span><span style="color: #9876AA">$pipes</span><span style="color: #007700">[</span><span style="color: #9876AA">1</span><span style="color: #007700">]);<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">fclose</span><span style="color: #007700">(</span><span style="color: #9876AA">$pipes</span><span style="color: #007700">[</span><span style="color: #9876AA">1</span><span style="color: #007700">]);<br />&nbsp;&nbsp;&nbsp;&nbsp;<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;切记：在调用&nbsp;proc_close&nbsp;之前关闭所有的管道以避免死锁。<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$return_value&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">proc_close</span><span style="color: #007700">(</span><span style="color: #9876AA">$process</span><span style="color: #007700">);<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"command&nbsp;returned&nbsp;</span><span style="color: #9876AA">$return_value</span><span style="color: #DD0000">\n"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>      <div class="example-contents"><p>以上例程的输出类似于：</p></div>     <div class="example-contents screen"> <div class="cdata"><pre> Array (     [some_option] =&gt; aeiou     [PWD] =&gt; /tmp     [SHLVL] =&gt; 1     [_] =&gt; /usr/local/bin/php ) command returned 0 </pre></div>     </div>    </div>   </p>     </div>    <div class="refsect1 notes" id="refsect1-function.proc-open-notes">   <h3 class="title">注释</h3>   <blockquote class="note"><p><strong class="note">Note</strong>:     <p class="para">     Windows 兼容性：超过 2 的描述符也可以作为可继承的句柄传送到子进程。     但是，由于 Windows 的架构并不将文件描述符和底层句柄进行关联，     所以，子进程无法访问这样的句柄。     标准输入，标准输出和标注错误会按照预期工作。    </p>   </p></blockquote>   <blockquote class="note"><p><strong class="note">Note</strong>:     <p class="para">     如果你只需要单向的进程管道，     使用 <span class="function">{@link popen()}</span> 函数会更加简单。    </p>   </p></blockquote>  </div>     <div class="refsect1 seealso" id="refsect1-function.proc-open-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link popen()} - 打开进程文件指针</span></li>     <li class="member"><span class="function">{@link exec()} - 执行一个外部程序</span></li>     <li class="member"><span class="function">{@link system()} - 执行外部程序，并且显示输出</span></li>     <li class="member"><span class="function">{@link passthru()} - 执行外部程序并且显示原始输出</span></li>     <li class="member"><span class="function">{@link stream_select()} - Runs the equivalent of the select() system call on the given    arrays of streams with a timeout specified by tv_sec and tv_usec</span></li>     <li class="member">The <a href="http://php.net/manual/zh/language.operators.execution.php" class="link">执行操作符</a></li>    </ul>   </p>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.exec.php">程序执行函数</a></div></div>
 * @return resource|bool a resource representing the process, which should be freed using*/
function proc_open ($cmd, array $descriptorspec, array &$pipes, $cwd = null, array $env = null, array $other_options = null) {}

/**
*<div id="function.proc-close" class="refentry">  <div class="refnamediv">   <h1 class="refname">proc_close</h1>   <p class="verinfo">(PHP 4 &gt;= 4.3.0, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">proc_close</span> &mdash; <span class="dc-title">关闭由 <span class="function">{@link proc_open()}</span> 打开的进程并且返回进程退出码</span></p>   </div>   <div class="refsect1 description" id="refsect1-function.proc-close-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">int</span> <span class="methodname"><strong>proc_close</strong></span>     ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$process</code></span>    )</div>    <p class="para rdfs-comment">     <span class="function"><strong>proc_close()</strong></span> 同 <span class="function">{@link pclose()}</span> 函数类似，     只是 <span class="function"><strong>proc_close()</strong></span>      只能用来关闭由 <span class="function">{@link proc_open()}</span> 函数打开的进程。     <span class="function"><strong>proc_close()</strong></span> 函数会等待进程终止，     并且返回进程的返回值。     如果有连接到进程的已经打开的管道，     那么需要在调用此函数之前调用 <span class="function">{@link fclose()}</span> 函数来关闭管道，     否则会引发死锁 - 在管道处于打开状态时，子进程将不能退出。   </p>  </div>    <div class="refsect1 parameters" id="refsect1-function.proc-close-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">process</code></dt>       <dd>        <p class="para">        要关闭的由 <span class="function">{@link proc_open()}</span> 打开的 <span class="type"><a href="http://php.net/manual/zh/language.types.resource.php" class="type resource">resource</a></span> 。       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.proc-close-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">     返回进程的终止状态码。     如果发生错误，将返回  <em>-1</em>。   </p>   <blockquote class="note"><p><strong class="note">Note</strong>:   <p class="para">   If PHP has been compiled with --enable-sigchild, the return value of this function is undefined.  </p> </p></blockquote>   </div>   <div class="up"><a href="http://php.net/manual/zh/ref.exec.php">程序执行函数</a></div></div>
 * @return int the termination status of the process that was run.*/
function proc_close ($process) {}

/**
*<div id="function.proc-terminate" class="refentry">  <div class="refnamediv">   <h1 class="refname">proc_terminate</h1>   <p class="verinfo">(PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">proc_terminate</span> &mdash; <span class="dc-title">杀除由 proc_open 打开的进程</span></p>   </div>   <div class="refsect1 description" id="refsect1-function.proc-terminate-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">bool</span> <span class="methodname"><strong>proc_terminate</strong></span>     ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$process</code></span>    [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$signal</code><span class="initializer"> = 15</span></span>   ] )</div>    <p class="para rdfs-comment">     向 <code class="parameter">process</code> （由 <span class="function">{@link proc_open()}</span> 函数创建）     发送信号通知其终止。     <span class="function"><strong>proc_terminate()</strong></span> 调用之后将会立即返回，     而不会等待进程终止。   </p>   <p class="para">    可以使用 <span class="function"><strong>proc_terminate()</strong></span> 终止进程    并且继续其他的任务。    可以使用 <span class="function">{@link proc_get_status()}</span> 函数来检查进程是否已经终止。   </p>  </div>    <div class="refsect1 parameters" id="refsect1-function.proc-terminate-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">process</code></dt>       <dd>        <p class="para">        由 <span class="function">{@link proc_open()}</span> 打开的 <span class="type"><a href="http://php.net/manual/zh/language.types.resource.php" class="type resource">resource</a></span>。       </p>      </dd>                 <dt> <code class="parameter">signal</code></dt>       <dd>        <p class="para">         可选参数，仅用于 <acronym title="Portable Operating System Interface">POSIX</acronym> 操作系统。         表示调用系统命令 <em>kill(2)</em> 来向进程发送的信号。         默认值为 <em>SIGTERM</em>。       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.proc-terminate-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回进程的终止状态。   </p>  </div>    <div class="refsect1 changelog" id="refsect1-function.proc-terminate-changelog">   <h3 class="title">更新日志</h3>   <p class="para">    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>5.2.2</td>        <td>         之前的版本被用来销毁进程         <code class="parameter">resource</code>。        </td>       </tr>       </tbody>         </table>    </p>  </div>    <div class="refsect1 seealso" id="refsect1-function.proc-terminate-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link proc_open()} - 执行一个命令，并且打开用来输入/输出的文件指针。</span></li>     <li class="member"><span class="function">{@link proc_close()} - 关闭由 proc_open 打开的进程并且返回进程退出码</span></li>     <li class="member"><span class="function">{@link proc_get_status()} - 获取由 proc_open 函数打开的进程的信息</span></li>    </ul>   </p>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.exec.php">程序执行函数</a></div></div>
 * @return bool the termination status of the process that was run.*/
function proc_terminate ($process, $signal = 15) {}

/**
*<div id="function.proc-get-status" class="refentry">  <div class="refnamediv">   <h1 class="refname">proc_get_status</h1>   <p class="verinfo">(PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">proc_get_status</span> &mdash; <span class="dc-title">获取由 <span class="function">{@link proc_open()}</span> 函数打开的进程的信息</span></p>   </div>   <div class="refsect1 description" id="refsect1-function.proc-get-status-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">array</span> <span class="methodname"><strong>proc_get_status</strong></span>     ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$process</code></span>    )</div>    <p class="para rdfs-comment">    <span class="function"><strong>proc_get_status()</strong></span> 函数可以获取由    <span class="function">{@link proc_open()}</span> 函数打开的进程的信息。   </p>  </div>     <div class="refsect1 parameters" id="refsect1-function.proc-get-status-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">process</code></dt>       <dd>        <p class="para">        要检查的由 <span class="function">{@link proc_open()}</span> 打开的进程 <span class="type"><a href="http://php.net/manual/zh/language.types.resource.php" class="type resource">resource</a></span>。       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.proc-get-status-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">     如果调用成功，则返回一个包含了进程信息的 <span class="type"><a href="http://php.net/manual/zh/language.types.array.php" class="type array">array</a></span>，如果发生错误，返回 <strong><code>FALSE</code></strong>。     返回的数组包含下列元素：   </p>   <p class="para">   <table class="doctable informaltable">         <thead>      <tr><th>元素</th><th>类型</th><th>描述</th></tr>      </thead>      <tbody class="tbody">      <tr>       <td>command</td>       <td><span class="type"><a href="http://php.net/manual/zh/language.types.string.php" class="type string">string</a></span></td>       <td>        传入 <span class="function">{@link proc_open()}</span> 函数的命令行字符串。       </td>      </tr>       <tr>       <td>pid</td>       <td><span class="type"><a href="http://php.net/manual/zh/language.types.integer.php" class="type int">int</a></span></td>       <td>进程 ID</td>      </tr>       <tr>       <td>running</td>       <td><span class="type"><a href="http://php.net/manual/zh/language.types.boolean.php" class="type bool">bool</a></span></td>       <td>        <strong><code>TRUE</code></strong> 表示进程还在运行中， <strong><code>FALSE</code></strong> 表示进程已经终止       </td>      </tr>       <tr>       <td>signaled</td>       <td><span class="type"><a href="http://php.net/manual/zh/language.types.boolean.php" class="type bool">bool</a></span></td>       <td>        <strong><code>TRUE</code></strong> 表示子进程被未捕获的信号所终止。        在 Windows 平台永远为 <strong><code>FALSE</code></strong>。       </td>      </tr>       <tr>       <td>stopped</td>       <td><span class="type"><a href="http://php.net/manual/zh/language.types.boolean.php" class="type bool">bool</a></span></td>       <td>         <strong><code>TRUE</code></strong> 表示子进程被信号停止。         在 Windows 平台永远为 <strong><code>FALSE</code></strong>。       </td>      </tr>       <tr>       <td>exitcode</td>       <td><span class="type"><a href="http://php.net/manual/zh/language.types.integer.php" class="type int">int</a></span></td>       <td>         进程的退出码（仅在 <em>running</em> 为 <strong><code>FALSE</code></strong> 时有意义）。         仅在第一次调用此函数时会返回实际的值，         后续的调用将返回 <em>-1</em>。       </td>      </tr>       <tr>       <td>termsig</td>       <td><span class="type"><a href="http://php.net/manual/zh/language.types.integer.php" class="type int">int</a></span></td>       <td>         导致子进程终止执行的信号值         （仅在 <em>signaled</em> 为 <strong><code>TRUE</code></strong> 时有意义）。       </td>      </tr>       <tr>       <td>stopsig</td>       <td><span class="type"><a href="http://php.net/manual/zh/language.types.integer.php" class="type int">int</a></span></td>       <td>         导致子进程停止执行的信号值         （仅在 <em>stopped</em> 为 <strong><code>TRUE</code></strong> 时有意义）。       </td>      </tr>      </tbody>       </table>    </p>  </div>    <div class="refsect1 seealso" id="refsect1-function.proc-get-status-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link proc_open()} - 执行一个命令，并且打开用来输入/输出的文件指针。</span></li>    </ul>   </p>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.exec.php">程序执行函数</a></div></div>
 * @return array|bool An array of collected information on success, and false*/
function proc_get_status ($process) {}

/**
*<div id="function.proc-nice" class="refentry">  <div class="refnamediv">   <h1 class="refname">proc_nice</h1>   <p class="verinfo">(PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">proc_nice</span> &mdash; <span class="dc-title">修改当前进程的优先级</span></p>   </div>   <div class="refsect1 description" id="refsect1-function.proc-nice-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">bool</span> <span class="methodname"><strong>proc_nice</strong></span>     ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$increment</code></span>    )</div>    <p class="para rdfs-comment">    <span class="function"><strong>proc_nice()</strong></span> 修改当前进程的优先级，    修改量由 <code class="parameter">increment</code> 参数指定。    <code class="parameter">increment</code> 为正数会降低当前进程优先级，    反之，为负数会提高优先级。   </p>   <p class="para">    <span class="function"><strong>proc_nice()</strong></span> 和    <span class="function">{@link proc_open()}</span> 函数以及和 <span class="function">{@link proc_open()}</span> 相关的函数并无什么关系。   </p>  </div>    <div class="refsect1 parameters" id="refsect1-function.proc-nice-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">increment</code></dt>       <dd>        <p class="para">        新的优先级值，具体的设定取决于所运行的平台。       </p>       <p class="para">        在 Unix 系统上，较小的值表示较高的优先级，例如：<em>-20</em>，        而正数值表示更低的优先级。       </p>       <p class="para">        在 Windows 平台上，<code class="parameter">increment</code> 参数        的含义如下：       </p>       <table class="doctable informaltable">                 <thead>          <tr>           <th>优先级</th>           <th>可能的值</th>          </tr>          </thead>          <tbody class="tbody">          <tr>           <td style="vertical-align: top;">高优先级</td>           <td style="vertical-align: top;">            <code class="parameter">increment</code> <em>&lt; -9</em>           </td>          </tr>           <tr>           <td style="vertical-align: top;">较高优先级</td>           <td style="vertical-align: top;">            <code class="parameter">increment</code> <em>&lt; -4</em>           </td>          </tr>           <tr>           <td style="vertical-align: top;">正常优先级</td>           <td style="vertical-align: top;">            <code class="parameter">increment</code> <em>&lt; 5</em> &amp;             <code class="parameter">increment</code> <em>&gt; -5</em>           </td>          </tr>           <tr>           <td style="vertical-align: top;">较低优先级</td>           <td style="vertical-align: top;">            <code class="parameter">increment</code> <em>&gt; 5</em>           </td>          </tr>           <tr>           <td style="vertical-align: top;">低优先级</td>           <td style="vertical-align: top;">            <code class="parameter">increment</code> <em>&gt; 9</em>           </td>          </tr>          </tbody>               </table>       </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.proc-nice-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    成功时返回 <strong><code>TRUE</code></strong>， 或者在失败时返回 <strong><code>FALSE</code></strong>。。    如果发生错误，例如用户无权修改当前进程的优先级，    会生成 <strong><code>E_WARNING</code></strong> 级别的错误。   </p>  </div>    <div class="refsect1 examples" id="refsect1-function.proc-nice-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-4356">     <p><strong>Example #1 使用 <span class="function">{@link proc_open()}</span> 函数将进程设置为高优先级</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">//&nbsp;Highest&nbsp;priority<br /></span><span style="color: #9876AA">proc_nice</span><span style="color: #007700">(-</span><span style="color: #9876AA">20</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>     </div>   </p>   </div>    <div class="refsect1 changelog" id="refsect1-function.proc-nice-changelog">   <h3 class="title">更新日志</h3>   <p class="para">    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>7.2.0</td>        <td>         在 Windows 平台上可用。        </td>       </tr>       </tbody>         </table>    </p>  </div>     <div class="refsect1 notes" id="refsect1-function.proc-nice-notes">   <h3 class="title">注释</h3>   <blockquote class="note"><p><strong class="note">Note</strong>:     <strong>可用性</strong><br />    <p class="para">     仅在具有 &#039;nice&#039; 能力的系统上才可以使用 <span class="function"><strong>proc_nice()</strong></span> 函数。     下列系统含有 &#039;nice&#039;：SVr4, SVID EXT, AT&amp;T, X/OPEN, BSD 4.3。    </p>   </p></blockquote>   <blockquote class="note"><p><strong class="note">Note</strong>:     <strong>Windows 平台</strong><br />    <p class="para">     <span class="function"><strong>proc_nice()</strong></span> 函数会改变 <em class="emphasis">当前</em>      进程优先级，即使 PHP 是使用线程安全模式编译的。    </p>   </p></blockquote>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.exec.php">程序执行函数</a></div></div>
 * @return bool true on success or false on failure.*/
function proc_nice ($increment) {}

/**
*<div id="function.rand" class="refentry">    <div class="refnamediv">     <h1 class="refname">rand</h1>     <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">rand</span> &mdash; <span class="dc-title">产生一个随机整数</span></p>     </div>  <div class="refsect1 description" id="refsect1-function.rand-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">int</span> <span class="methodname"><strong>rand</strong></span>     ( <span class="methodparam">void</span>    )</div>    <div class="methodsynopsis dc-description">    <span class="type">int</span> <span class="methodname"><strong>rand</strong></span>     ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$min</code></span>    , <span class="methodparam"><span class="type">int</span> <code class="parameter">$max</code></span>    )</div>      <p class="simpara">      如果没有提供可选参数 <code class="parameter">min</code> 和      <code class="parameter">max</code>，<span class="function"><strong>rand()</strong></span>      返回 0 到 <span class="function">{@link getrandmax()}</span>      之间的伪随机整数。例如想要 5 到 15（包括 5 和 15）之间的随机数，用      <em>rand(5, 15)</em>。     </p>     <blockquote class="note"><p><strong class="note">Note</strong>:       <span class="simpara">       在某些平台下（例如 Windows）<span class="function">{@link getrandmax()}</span>       只有 32767。如果需要的范围大于 32767，那么指定 <code class="parameter">min</code>       和 <code class="parameter">max</code> 参数就可以生成更大的数了，或者考虑用       <span class="function">{@link mt_rand()}</span> 来替代之。      </span>     </p></blockquote>    </div>   <div class="refsect1 parameters" id="refsect1-function.rand-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">min</code></dt>       <dd>        <p class="para">        返回的最低值（默认：0）       </p>      </dd>                 <dt> <code class="parameter">max</code></dt>       <dd>        <p class="para">        返回的最高值（默认：<span class="function">{@link getrandmax()}</span>）       </p>      </dd>          </dl>    </p>  </div>   <div class="refsect1 returnvalues" id="refsect1-function.rand-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    A pseudo random value between <code class="parameter">min</code>    (or 0) and <code class="parameter">max</code> (or <span class="function">{@link getrandmax()}</span>, inclusive).   </p>  </div>   <div class="refsect1 changelog" id="refsect1-function.rand-changelog">   <h3 class="title">更新日志</h3>   <p class="para">    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr><td>4.2.0</td><td>随机数发生器自动进行播种。</td></tr>       </tbody>         </table>    </p>  </div>   <div class="refsect1 examples" id="refsect1-function.rand-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-4137">     <p><strong>Example #1 <span class="function"><strong>rand()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #9876AA">rand</span><span style="color: #007700">()&nbsp;.&nbsp;</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />echo&nbsp;</span><span style="color: #9876AA">rand</span><span style="color: #007700">()&nbsp;.&nbsp;</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /><br />echo&nbsp;</span><span style="color: #9876AA">rand</span><span style="color: #007700">(</span><span style="color: #9876AA">5</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">15</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>      <div class="example-contents"><p>以上例程的输出类似于：</p></div>     <div class="example-contents screen"> <div class="cdata"><pre> 7771 22264 11 </pre></div>     </div>    </div>   </p>  </div>   <div class="refsect1 seealso" id="refsect1-function.rand-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link srand()} - 播下随机数发生器种子</span></li>     <li class="member"><span class="function">{@link getrandmax()} - 显示随机数最大的可能值</span></li>     <li class="member"><span class="function">{@link mt_rand()} - 生成更好的随机数</span></li>    </ul>   </p>  </div>    <div class="up"><a href="http://php.net/manual/zh/ref.math.php">Math 函数</a></div></div>
 * @return int A pseudo random value between min*/
function rand ($min, $max) {}

/**
*<div id="function.srand" class="refentry">    <div class="refnamediv">     <h1 class="refname">srand</h1>     <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">srand</span> &mdash; <span class="dc-title">播下随机数发生器种子</span></p>     </div>  <div class="refsect1 description" id="refsect1-function.srand-description">   <h3 class="title">说明</h3>    <div class="methodsynopsis dc-description">     <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>srand</strong></span>      ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$seed</code></span>    ] )</div>      <p class="para rdfs-comment">      用 <code class="parameter">seed</code> 播下随机数发生器种子。<code class="parameter">seed</code> 参数没有给出时，会被设为随时数。     </p>      <blockquote class="note"><p><strong class="note">Note</strong>: <span class="simpara">自 PHP 4.2.0 起，不再需要用 <span class="function"><strong>srand()</strong></span> 或 <span class="function">{@link mt_srand()}</span> 给随机数发生器播种 ，因为现在是由系统自动完成的。</span></p></blockquote>       </div>   <div class="refsect1 parameters" id="refsect1-function.srand-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">seed</code></dt>       <dd>        <p class="para">        可选的种子值       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.srand-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    没有返回值。   </p>  </div>    <div class="refsect1 changelog" id="refsect1-function.srand-changelog">   <h3 class="title">更新日志</h3>   <p class="para">    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>Since 4.2.0</td>        <td>         <code class="parameter">seed</code>  成为可选，省略时会默认使用随机值。        </td>       </tr>       </tbody>         </table>    </p>  </div>   <div class="refsect1 examples" id="refsect1-function.srand-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-4142">     <p><strong>Example #1 <span class="function"><strong>srand()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">//&nbsp;seed&nbsp;with&nbsp;microseconds<br /></span><span style="color: #007700">function&nbsp;</span><span style="color: #9876AA">make_seed</span><span style="color: #007700">()<br />{<br />&nbsp;&nbsp;list(</span><span style="color: #9876AA">$usec</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$sec</span><span style="color: #007700">)&nbsp;=&nbsp;</span><span style="color: #9876AA">explode</span><span style="color: #007700">(</span><span style="color: #DD0000">'&nbsp;'</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">microtime</span><span style="color: #007700">());<br />&nbsp;&nbsp;return&nbsp;(float)&nbsp;</span><span style="color: #9876AA">$sec&nbsp;</span><span style="color: #007700">+&nbsp;((float)&nbsp;</span><span style="color: #9876AA">$usec&nbsp;</span><span style="color: #007700">*&nbsp;</span><span style="color: #9876AA">100000</span><span style="color: #007700">);<br />}<br /></span><span style="color: #9876AA">srand</span><span style="color: #007700">(</span><span style="color: #9876AA">make_seed</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">$randval&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">rand</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>     </div>   </p>  </div>   <div class="refsect1 seealso" id="refsect1-function.srand-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link rand()} - 产生一个随机整数</span></li>     <li class="member"><span class="function">{@link getrandmax()} - 显示随机数最大的可能值</span></li>     <li class="member"><span class="function">{@link mt_srand()} - 播下一个更好的随机数发生器种子</span></li>    </ul>   </p>  </div>    <div class="up"><a href="http://php.net/manual/zh/ref.math.php">Math 函数</a></div></div>
 * @return void */
function srand ($seed = null, $mode = MT_RAND_MT19937) {}

/**
*<div id="function.getrandmax" class="refentry">    <div class="refnamediv">     <h1 class="refname">getrandmax</h1>     <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">getrandmax</span> &mdash; <span class="dc-title">显示随机数最大的可能值</span></p>     </div>  <div class="refsect1 description" id="refsect1-function.getrandmax-description">   <h3 class="title">说明</h3>    <div class="methodsynopsis dc-description">     <span class="type">int</span> <span class="methodname"><strong>getrandmax</strong></span>      ( <span class="methodparam">void</span>     )</div>      <p class="simpara">      返回调用      <span class="function">{@link rand()}</span> 可能返回的最大值。     </p>    </div>     <div class="refsect1 returnvalues" id="refsect1-function.getrandmax-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">     <span class="function">{@link rand()}</span> 返回       随机数可能返回的最大值   </p>  </div>   <div class="refsect1 seealso" id="refsect1-function.getrandmax-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link rand()} - 产生一个随机整数</span></li>     <li class="member"><span class="function">{@link srand()} - 播下随机数发生器种子</span></li>     <li class="member"><span class="function">{@link mt_getrandmax()} - 显示随机数的最大可能值</span></li>    </ul>   </p>  </div>    <div class="up"><a href="http://php.net/manual/zh/ref.math.php">Math 函数</a></div></div>
 * @return int The largest possible random value returned by rand*/
function getrandmax () {}

/**
*<div id="function.mt-rand" class="refentry">    <div class="refnamediv">     <h1 class="refname">mt_rand</h1>     <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">mt_rand</span> &mdash; <span class="dc-title">生成更好的随机数</span></p>     </div>  <div class="refsect1 description" id="refsect1-function.mt-rand-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">int</span> <span class="methodname"><strong>mt_rand</strong></span>     ( <span class="methodparam">void</span>    )</div>    <div class="methodsynopsis dc-description">    <span class="type">int</span> <span class="methodname"><strong>mt_rand</strong></span>     ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$min</code></span>    , <span class="methodparam"><span class="type">int</span> <code class="parameter">$max</code></span>    )</div>      <p class="simpara">      很多老的 libc      的随机数发生器具有一些不确定和未知的特性而且很慢。PHP      的 <span class="function">{@link rand()}</span> 函数默认使用      libc 随机数发生器。<span class="function"><strong>mt_rand()</strong></span>      函数是非正式用来替换它的。该函数用了      <a href="http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html" class="link external">&raquo;&nbsp;Mersenne Twister</a>      中已知的特性作为随机数发生器，它可以产生随机数值的平均速度比      libc 提供的 rand() 快四倍。     </p>     <p class="simpara">      如果没有提供可选参数 <code class="parameter">min</code> 和      <code class="parameter">max</code>，<span class="function"><strong>mt_rand()</strong></span>      返回 0 到 <span class="function">{@link mt_getrandmax()}</span>      之间的伪随机数。例如想要 5 到 15（包括 5 和 15）之间的随机数，用      <em>mt_rand(5, 15)</em>。     </p>    </div>   <div class="refsect1 parameters" id="refsect1-function.mt-rand-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">min</code></dt>       <dd>        <p class="para">        可选的、返回的最小值（默认：0）       </p>      </dd>                 <dt> <code class="parameter">max</code></dt>       <dd>        <p class="para">        可选的、返回的最大值（默认：<span class="function">{@link mt_getrandmax()}</span>）       </p>      </dd>          </dl>    </p>  </div>   <div class="refsect1 returnvalues" id="refsect1-function.mt-rand-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回 <code class="parameter">min</code> （或者 0） 到 <code class="parameter">max</code> （或者是到  <span class="function">{@link mt_getrandmax()}</span>      ，包含这个值）之间的随机整数。   </p>  </div>   <div class="refsect1 changelog" id="refsect1-function.mt-rand-changelog">   <h3 class="title">更新日志</h3>   <p class="para">    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr><td>4.2.0</td><td>随机数发生器自动进行播种。</td></tr>       </tbody>         </table>    </p>  </div>   <div class="refsect1 examples" id="refsect1-function.mt-rand-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-4131">     <p><strong>Example #1 <span class="function"><strong>mt_rand()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #9876AA">mt_rand</span><span style="color: #007700">()&nbsp;.&nbsp;</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />echo&nbsp;</span><span style="color: #9876AA">mt_rand</span><span style="color: #007700">()&nbsp;.&nbsp;</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /><br />echo&nbsp;</span><span style="color: #9876AA">mt_rand</span><span style="color: #007700">(</span><span style="color: #9876AA">5</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">15</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>      <div class="example-contents"><p>以上例程的输出类似于：</p></div>     <div class="example-contents screen"> <div class="cdata"><pre> 1604716014 1478613278 6 </pre></div>     </div>    </div>   </p>  </div>   <div class="refsect1 notes" id="refsect1-function.mt-rand-notes">   <h3 class="title">注释</h3>   <div class="caution"><strong class="caution">Caution</strong>    <p class="para">     The distribution of <span class="function"><strong>mt_rand()</strong></span> return values is biased     towards even numbers on 64-bit builds of PHP when     <code class="parameter">max</code> is beyond <em>2^32</em>.    </p>   </div>  </div>   <div class="refsect1 seealso" id="refsect1-function.mt-rand-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link mt_srand()} - 播下一个更好的随机数发生器种子</span></li>     <li class="member"><span class="function">{@link mt_getrandmax()} - 显示随机数的最大可能值</span></li>     <li class="member"><span class="function">{@link rand()} - 产生一个随机整数</span></li>    </ul>   </p>  </div>    <div class="up"><a href="http://php.net/manual/zh/ref.math.php">Math 函数</a></div></div>
 * @return int A random integer value between min (or 0)*/
function mt_rand ($min, $max) {}

/**
*<div id="function.mt-srand" class="refentry">    <div class="refnamediv">     <h1 class="refname">mt_srand</h1>     <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">mt_srand</span> &mdash; <span class="dc-title">播下一个更好的随机数发生器种子</span></p>     </div>  <div class="refsect1 description" id="refsect1-function.mt-srand-description">   <h3 class="title">说明</h3>    <div class="methodsynopsis dc-description">     <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>mt_srand</strong></span>      ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$seed</code></span>    ] )</div>      <p class="para rdfs-comment">      用      <code class="parameter">seed</code> 来给随机数发生器播种。 没有设定 <code class="parameter">seed</code> 参数时，会被设为随时数。     </p>      <blockquote class="note"><p><strong class="note">Note</strong>: <span class="simpara">自 PHP 4.2.0 起，不再需要用 <span class="function">{@link srand()}</span> 或 <span class="function"><strong>mt_srand()</strong></span> 给随机数发生器播种 ，因为现在是由系统自动完成的。</span></p></blockquote>       </div>   <div class="refsect1 parameters" id="refsect1-function.mt-srand-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">seed</code></dt>       <dd>        <p class="para">        可选的种子值       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.mt-srand-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    没有返回值。   </p>  </div>    <div class="refsect1 changelog" id="refsect1-function.mt-srand-changelog">   <h3 class="title">更新日志</h3>   <p class="para">    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>4.2.0</td>        <td>         The <code class="parameter">seed</code> becomes optional          and defaults to a random value if omitted.        </td>       </tr>        <tr>        <td>5.2.1</td>        <td>         The Mersenne Twister implementation in PHP now uses a new seeding         algorithm by Richard Wagner. Identical seeds no longer produce the same         sequence of values they did in previous versions. This behavior is not         expected to change again, but it is considered unsafe to rely upon it         nonetheless.        </td>       </tr>       </tbody>         </table>    </p>  </div>   <div class="refsect1 examples" id="refsect1-function.mt-srand-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-4132">     <p><strong>Example #1 <span class="function"><strong>mt_srand()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">//&nbsp;seed&nbsp;with&nbsp;microseconds<br /></span><span style="color: #007700">function&nbsp;</span><span style="color: #9876AA">make_seed</span><span style="color: #007700">()<br />{<br />&nbsp;&nbsp;list(</span><span style="color: #9876AA">$usec</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$sec</span><span style="color: #007700">)&nbsp;=&nbsp;</span><span style="color: #9876AA">explode</span><span style="color: #007700">(</span><span style="color: #DD0000">'&nbsp;'</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">microtime</span><span style="color: #007700">());<br />&nbsp;&nbsp;return&nbsp;(float)&nbsp;</span><span style="color: #9876AA">$sec&nbsp;</span><span style="color: #007700">+&nbsp;((float)&nbsp;</span><span style="color: #9876AA">$usec&nbsp;</span><span style="color: #007700">*&nbsp;</span><span style="color: #9876AA">100000</span><span style="color: #007700">);<br />}<br /></span><span style="color: #9876AA">mt_srand</span><span style="color: #007700">(</span><span style="color: #9876AA">make_seed</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">$randval&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">mt_rand</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>     </div>   </p>  </div>   <div class="refsect1 seealso" id="refsect1-function.mt-srand-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link mt_rand()} - 生成更好的随机数</span></li>     <li class="member"><span class="function">{@link mt_getrandmax()} - 显示随机数的最大可能值</span></li>     <li class="member"><span class="function">{@link srand()} - 播下随机数发生器种子</span></li>    </ul>   </p>  </div>    <div class="up"><a href="http://php.net/manual/zh/ref.math.php">Math 函数</a></div></div>
 * @return void */
function mt_srand ($seed = null, $mode = MT_RAND_MT19937) {}

/**
*<div id="function.mt-getrandmax" class="refentry">    <div class="refnamediv">     <h1 class="refname">mt_getrandmax</h1>     <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">mt_getrandmax</span> &mdash; <span class="dc-title">显示随机数的最大可能值</span></p>     </div>  <div class="refsect1 description" id="refsect1-function.mt-getrandmax-description">   <h3 class="title">说明</h3>    <div class="methodsynopsis dc-description">     <span class="type">int</span> <span class="methodname"><strong>mt_getrandmax</strong></span>      ( <span class="methodparam">void</span>     )</div>      <p class="simpara">      返回调用      <span class="function">{@link mt_rand()}</span> 所能返回的最大的随机数。     </p>    </div>      <div class="refsect1 returnvalues" id="refsect1-function.mt-getrandmax-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回调用      <span class="function">{@link mt_rand()}</span> 所能返回的最大的随机数。   </p>  </div>   <div class="refsect1 examples" id="refsect1-function.mt-getrandmax-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-4130"><p><strong>Example #1 计算一个随机浮点数</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function&nbsp;</span><span style="color: #9876AA">randomFloat</span><span style="color: #007700">(</span><span style="color: #9876AA">$min&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">0</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$max&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">1</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;</span><span style="color: #9876AA">$min&nbsp;</span><span style="color: #007700">+&nbsp;</span><span style="color: #9876AA">mt_rand</span><span style="color: #007700">()&nbsp;/&nbsp;</span><span style="color: #9876AA">mt_getrandmax</span><span style="color: #007700">()&nbsp;*&nbsp;(</span><span style="color: #9876AA">$max&nbsp;</span><span style="color: #007700">-&nbsp;</span><span style="color: #9876AA">$min</span><span style="color: #007700">);<br />}<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">randomFloat</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">randomFloat</span><span style="color: #007700">(</span><span style="color: #9876AA">2</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">20</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>      <div class="example-contents"><p>以上例程的输出类似于：</p></div>     <div class="example-contents screen"> <div class="cdata"><pre> float(0.91601131712832) float(16.511210331931) </pre></div>     </div>    </div>   </p>  </div>   <div class="refsect1 seealso" id="refsect1-function.mt-getrandmax-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link mt_rand()} - 生成更好的随机数</span></li>     <li class="member"><span class="function">{@link mt_srand()} - 播下一个更好的随机数发生器种子</span></li>     <li class="member"><span class="function">{@link getrandmax()} - 显示随机数最大的可能值</span></li>    </ul>   </p>  </div>    <div class="up"><a href="http://php.net/manual/zh/ref.math.php">Math 函数</a></div></div>
 * @return int the maximum random value returned by mt_rand*/
function mt_getrandmax () {}

/**
*<div id="function.getservbyname" class="refentry">  <div class="refnamediv">   <h1 class="refname">getservbyname</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">getservbyname</span> &mdash; <span class="dc-title">获取互联网服务协议对应的端口</span></p>   </div>    <div class="refsect1 description" id="refsect1-function.getservbyname-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">int</span> <span class="methodname"><strong>getservbyname</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$service</code></span>    , <span class="methodparam"><span class="type">string</span> <code class="parameter">$protocol</code></span>    )</div>    <p class="para rdfs-comment">    <span class="function"><strong>getservbyname()</strong></span>     返回互联网服务 <code class="parameter">service</code> 指定的协议 <code class="parameter">protocol</code> 中对应的端口，    依据 <var class="filename">/etc/services</var>。   </p>  </div>    <div class="refsect1 parameters" id="refsect1-function.getservbyname-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">service</code></dt>       <dd>        <p class="para">        互联网服务名称的字符串。       </p>      </dd>                 <dt> <code class="parameter">protocol</code></dt>       <dd>        <p class="para">        <code class="parameter">protocol</code> 既可以是 <em>&quot;tcp&quot;</em>        也可以是 <em>&quot;udp&quot;</em> (小写)。       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.getservbyname-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回端口号，如果 <code class="parameter">service</code> 或 <code class="parameter">protocol</code> 未找到返回 <strong><code>FALSE</code></strong>。   </p>  </div>    <div class="refsect1 examples" id="refsect1-function.getservbyname-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-5484">     <p><strong>Example #1 <span class="function"><strong>getservbyname()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$services&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">'http'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'ftp'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'ssh'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'telnet'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'imap'</span><span style="color: #007700">,<br /></span><span style="color: #DD0000">'smtp'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'nicname'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'gopher'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'finger'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'pop3'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'www'</span><span style="color: #007700">);<br /><br />foreach&nbsp;(</span><span style="color: #9876AA">$services&nbsp;</span><span style="color: #007700">as&nbsp;</span><span style="color: #9876AA">$service</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$port&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">getservbyname</span><span style="color: #007700">(</span><span style="color: #9876AA">$service</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'tcp'</span><span style="color: #007700">);<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #9876AA">$service&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #DD0000">":&nbsp;"&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #9876AA">$port&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #DD0000">"&lt;br&nbsp;/&gt;\n"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>     </div>   </p>  </div>    <div class="refsect1 seealso" id="refsect1-function.getservbyname-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link getservbyport()} - Get Internet service which corresponds to port and protocol</span></li>     <li class="member">      <a href="http://www.iana.org/assignments/port-numbers" class="link external">&raquo;&nbsp;http://www.iana.org/assignments/port-numbers</a>      端口号的完整列表     </li>    </ul>   </p>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.network.php">网络 函数</a></div></div>
 * @return int the port number, or false if service or*/
function getservbyname ($service, $protocol) {}

/**
*<div id="function.getservbyport" class="refentry">  <div class="refnamediv">   <h1 class="refname">getservbyport</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">getservbyport</span> &mdash; <span class="dc-title">Get Internet service which corresponds to port and protocol</span></p>   </div>    <div class="refsect1 description" id="refsect1-function.getservbyport-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">string</span> <span class="methodname"><strong>getservbyport</strong></span>     ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$port</code></span>    , <span class="methodparam"><span class="type">string</span> <code class="parameter">$protocol</code></span>    )</div>    <p class="para rdfs-comment">    <span class="function"><strong>getservbyport()</strong></span> returns the Internet service    associated with <code class="parameter">port</code> for the specified    <code class="parameter">protocol</code> as per <var class="filename">/etc/services</var>.   </p>  </div>    <div class="refsect1 parameters" id="refsect1-function.getservbyport-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">port</code></dt>       <dd>        <p class="para">        The port number.       </p>      </dd>                 <dt> <code class="parameter">protocol</code></dt>       <dd>        <p class="para">        <code class="parameter">protocol</code> is either <em>&quot;tcp&quot;</em>        or <em>&quot;udp&quot;</em> (in lowercase).       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.getservbyport-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    Returns the Internet service name as a string.   </p>  </div>    <div class="refsect1 seealso" id="refsect1-function.getservbyport-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link getservbyname()} - 获取互联网服务协议对应的端口</span></li>    </ul>   </p>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.network.php">网络 函数</a></div></div>
 * @return string the Internet service name as a string.*/
function getservbyport ($port, $protocol) {}

/**
*<div id="function.getprotobyname" class="refentry">  <div class="refnamediv">   <h1 class="refname">getprotobyname</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">getprotobyname</span> &mdash; <span class="dc-title">Get protocol number associated with protocol name</span></p>   </div>    <div class="refsect1 description" id="refsect1-function.getprotobyname-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">int</span> <span class="methodname"><strong>getprotobyname</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$name</code></span>    )</div>    <p class="para rdfs-comment">    <span class="function"><strong>getprotobyname()</strong></span> returns the protocol number    associated with the protocol <code class="parameter">name</code> as per    <var class="filename">/etc/protocols</var>.   </p>  </div>    <div class="refsect1 parameters" id="refsect1-function.getprotobyname-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">name</code></dt>       <dd>        <p class="para">        The protocol name.       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.getprotobyname-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    Returns the protocol number,  或者在失败时返回 <strong><code>FALSE</code></strong>.   </p>  </div>    <div class="refsect1 examples" id="refsect1-function.getprotobyname-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-5483">     <p><strong>Example #1 <span class="function"><strong>getprotobyname()</strong></span> example</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$protocol&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'tcp'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$get_prot&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">getprotobyname</span><span style="color: #007700">(</span><span style="color: #9876AA">$protocol</span><span style="color: #007700">);<br />if&nbsp;(</span><span style="color: #9876AA">$get_prot&nbsp;</span><span style="color: #007700">===&nbsp;</span><span style="color: #9876AA">FALSE</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">'Invalid&nbsp;Protocol'</span><span style="color: #007700">;<br />}&nbsp;else&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">'Protocol&nbsp;#'&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #9876AA">$get_prot</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>     </div>   </p>  </div>    <div class="refsect1 seealso" id="refsect1-function.getprotobyname-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link getprotobynumber()} - Get protocol name associated with protocol number</span></li>    </ul>   </p>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.network.php">网络 函数</a></div></div>
 * @return int the protocol number or -1 if the protocol is not found.*/
function getprotobyname ($name) {}

/**
*<div id="function.getprotobynumber" class="refentry">  <div class="refnamediv">   <h1 class="refname">getprotobynumber</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">getprotobynumber</span> &mdash; <span class="dc-title">Get protocol name associated with protocol number</span></p>   </div>    <div class="refsect1 description" id="refsect1-function.getprotobynumber-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">string</span> <span class="methodname"><strong>getprotobynumber</strong></span>     ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$number</code></span>    )</div>    <p class="para rdfs-comment">    <span class="function"><strong>getprotobynumber()</strong></span> returns the protocol name    associated with protocol <code class="parameter">number</code> as per    <var class="filename">/etc/protocols</var>.   </p>  </div>    <div class="refsect1 parameters" id="refsect1-function.getprotobynumber-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">number</code></dt>       <dd>        <p class="para">        The protocol number.       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.getprotobynumber-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    Returns the protocol name as a string,  或者在失败时返回 <strong><code>FALSE</code></strong>.   </p>  </div>    <div class="refsect1 seealso" id="refsect1-function.getprotobynumber-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link getprotobyname()} - Get protocol number associated with protocol name</span></li>    </ul>   </p>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.network.php">网络 函数</a></div></div>
 * @return string the protocol name as a string.*/
function getprotobynumber ($number) {}

/**
*<div id="function.getmyuid" class="refentry">  <div class="refnamediv">   <h1 class="refname">getmyuid</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">getmyuid</span> &mdash; <span class="dc-title">获取 PHP 脚本所有者的 UID</span></p>   </div>    <div class="refsect1 description" id="refsect1-function.getmyuid-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">int</span> <span class="methodname"><strong>getmyuid</strong></span>     ( <span class="methodparam">void</span>    )</div>    <p class="simpara">    获取当前脚本的用户 ID。   </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.getmyuid-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回当前脚本的用户 ID，或在错误时返回 <strong><code>FALSE</code></strong>。   </p>  </div>    <div class="refsect1 seealso" id="refsect1-function.getmyuid-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link getmygid()} - 获取当前 PHP 脚本拥有者的 GID</span></li>     <li class="member"><span class="function">{@link getmypid()} - 获取 PHP 进程的 ID</span></li>     <li class="member"><span class="function">{@link get_current_user()} - 获取当前 PHP 脚本所有者名称</span></li>     <li class="member"><span class="function">{@link getmyinode()} - 获取当前脚本的索引节点（inode）</span></li>     <li class="member"><span class="function">{@link getlastmod()} - 获取页面最后修改的时间</span></li>    </ul>   </p>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.info.php">PHP 选项/信息 函数</a></div></div>
 * @return int the user ID of the current script, or false on error.*/
function getmyuid () {}

/**
*<div id="function.getmygid" class="refentry">  <div class="refnamediv">   <h1 class="refname">getmygid</h1>   <p class="verinfo">(PHP 4 &gt;= 4.1.0, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">getmygid</span> &mdash; <span class="dc-title">获取当前 PHP 脚本拥有者的 GID</span></p>   </div>    <div class="refsect1 description" id="refsect1-function.getmygid-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">int</span> <span class="methodname"><strong>getmygid</strong></span>     ( <span class="methodparam">void</span>    )</div>    <p class="simpara">    获取当前 PHP 脚本拥有者的用户组 ID。   </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.getmygid-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回当前 PHP 脚本拥有者的用户组 ID，或在错误时返回 <strong><code>FALSE</code></strong>。   </p>  </div>    <div class="refsect1 seealso" id="refsect1-function.getmygid-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link getmyuid()} - 获取 PHP 脚本所有者的 UID</span></li>     <li class="member"><span class="function">{@link getmypid()} - 获取 PHP 进程的 ID</span></li>     <li class="member"><span class="function">{@link get_current_user()} - 获取当前 PHP 脚本所有者名称</span></li>     <li class="member"><span class="function">{@link getmyinode()} - 获取当前脚本的索引节点（inode）</span></li>     <li class="member"><span class="function">{@link getlastmod()} - 获取页面最后修改的时间</span></li>    </ul>   </p>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.info.php">PHP 选项/信息 函数</a></div></div>
 * @return int the group ID of the current script, or false on error.*/
function getmygid () {}

/**
*<div id="function.getmypid" class="refentry">  <div class="refnamediv">   <h1 class="refname">getmypid</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">getmypid</span> &mdash; <span class="dc-title">获取 PHP 进程的 ID</span></p>   </div>    <div class="refsect1 description" id="refsect1-function.getmypid-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">int</span> <span class="methodname"><strong>getmypid</strong></span>     ( <span class="methodparam">void</span>    )</div>    <p class="para rdfs-comment">    获取当前 PHP 进程 ID。   </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.getmypid-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回当前 PHP 进程 ID，或在错误时返回 <strong><code>FALSE</code></strong>。   </p>  </div>    <div class="refsect1 notes" id="refsect1-function.getmypid-notes">   <h3 class="title">注释</h3>   <div class="warning"><strong class="warning">Warning</strong>    <p class="para">     进程 ID 并不是唯一的，所以他们是一个弱熵源。     对安全性有依赖的上下文中我们不推荐依赖于 pid。    </p>   </div>  </div>    <div class="refsect1 seealso" id="refsect1-function.getmypid-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link getmygid()} - 获取当前 PHP 脚本拥有者的 GID</span></li>     <li class="member"><span class="function">{@link getmyuid()} - 获取 PHP 脚本所有者的 UID</span></li>     <li class="member"><span class="function">{@link get_current_user()} - 获取当前 PHP 脚本所有者名称</span></li>     <li class="member"><span class="function">{@link getmyinode()} - 获取当前脚本的索引节点（inode）</span></li>     <li class="member"><span class="function">{@link getlastmod()} - 获取页面最后修改的时间</span></li>    </ul>   </p>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.info.php">PHP 选项/信息 函数</a></div></div>
 * @return int the current PHP process ID, or false on error.*/
function getmypid () {}

/**
*<div id="function.getmyinode" class="refentry">  <div class="refnamediv">   <h1 class="refname">getmyinode</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">getmyinode</span> &mdash; <span class="dc-title">获取当前脚本的索引节点（inode）</span></p>   </div>    <div class="refsect1 description" id="refsect1-function.getmyinode-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">int</span> <span class="methodname"><strong>getmyinode</strong></span>     ( <span class="methodparam">void</span>    )</div>    <p class="para rdfs-comment">    获取当前脚本的索引节点（inode）。   </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.getmyinode-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    以整型返回当前脚本的索引节点（inode），或在错误时返回 <strong><code>FALSE</code></strong>。   </p>  </div>    <div class="refsect1 seealso" id="refsect1-function.getmyinode-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link getmygid()} - 获取当前 PHP 脚本拥有者的 GID</span></li>     <li class="member"><span class="function">{@link getmyuid()} - 获取 PHP 脚本所有者的 UID</span></li>     <li class="member"><span class="function">{@link getmypid()} - 获取 PHP 进程的 ID</span></li>     <li class="member"><span class="function">{@link get_current_user()} - 获取当前 PHP 脚本所有者名称</span></li>     <li class="member"><span class="function">{@link getlastmod()} - 获取页面最后修改的时间</span></li>    </ul>   </p>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.info.php">PHP 选项/信息 函数</a></div></div>
 * @return int the current script's inode as an integer, or false on error.*/
function getmyinode () {}
