<?php


define ("ARRAY_FILTER_USE_BOTH", 1);
define ("ARRAY_FILTER_USE_KEY", 2);


/**
*<div id="function.array-merge-recursive" class="refentry">    <div class="refnamediv">     <h1 class="refname">array_merge_recursive</h1>     <p class="verinfo">(PHP 4 &gt;= 4.0.1, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">array_merge_recursive</span> &mdash; <span class="dc-title">递归地合并一个或多个数组</span></p>     </div>      <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-merge-recursive-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">array</span> <span class="methodname" style="color:#CC7832"><strong>array_merge_recursive</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">$array1</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">$...</span></span>   ] )</div>      <p class="para rdfs-comment">      <span class="function"><strong style="color:#CC7832">array_merge_recursive()</strong></span> 将一个或多个数组的单元合并起来，一个数组中的值附加在前一个数组的后面。返回作为结果的数组。     </p>     <p class="para">      如果输入的数组中有相同的字符串键名，则这些值会被合并到一个数组中去，这将递归下去，因此如果一个值本身是一个数组，本函数将按照相应的条目把它合并为另一个数组。需要注意的是，如果数组具有相同的数值键名，后一个值将不会覆盖原来的值，而是附加到后面。     </p>    </div>          <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-merge-recursive-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">array1</span></dt>       <dd>        <p class="para">        要合并的初始数组。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">...</span></dt>       <dd>        <p class="para">        数组变量列表，进行递归合并。       </p>      </dd>          </dl>    </span>  </div>          <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-merge-recursive-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    一个结果数组，其中的值合并自附加的参数。   </p>  </div>          <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-merge-recursive-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-6041">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">array_merge_recursive()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$ar1&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">"color"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;array(</span><span style="color: #DD0000">"favorite"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"red"</span><span style="color: #007700">),&nbsp;</span><span style="color: #9876AA">5</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$ar2&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #9876AA">10</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"color"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;array(</span><span style="color: #DD0000">"favorite"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"green"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"blue"</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">$result&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">array_merge_recursive</span><span style="color: #007700">(</span><span style="color: #9876AA">$ar1</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$ar2</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$result</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Array (     [color] =&gt; Array         (             [favorite] =&gt; Array                 (                     [0] =&gt; red                     [1] =&gt; green                 )              [0] =&gt; blue         )      [0] =&gt; 5     [1] =&gt; 10 ) </span></div>     </div>    </div>   </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-merge-recursive-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link array_merge()} - 合并一个或多个数组</span></li>     <li class="member"><span class="function">{@link array_replace_recursive()} - 使用传递的数组递归替换第一个数组的元素</span></li>    </ul>   </span>  </div>        <div class="up"><a href="http://php.net/manual/zh/ref.array.php">数组 函数</a></div></div>
 * @return array An array of values resulted from merging the arguments together.*/
function array_merge_recursive(array $array1, array $_ = null) { }

/**
*<div id="function.array-replace" class="refentry">  <div class="refnamediv">   <h1 class="refname">array_replace</h1>   <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7)</p><p class="refpurpose"><span class="refname">array_replace</span> &mdash; <span class="dc-title">使用传递的数组替换第一个数组的元素</span></p>   </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-replace-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">array</span> <span class="methodname" style="color:#CC7832"><strong>array_replace</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">$array1</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">$...</span></span>   ] )</div>    <p class="para rdfs-comment">    <span class="function"><strong style="color:#CC7832">array_replace()</strong></span> 函数使用后面数组元素相同 key 的值替换 <span class="parameter" style="color:#2EACF9">array1</span> 数组的值。如果一个键存在于第一个数组同时也存在于第二个数组，它的值将被第二个数组中的值替换。如果一个键存在于第二个数组，但是不存在于第一个数组，则会在第一个数组中创建这个元素。如果一个键仅存在于第一个数组，它将保持不变。如果传递了多个替换数组，它们将被按顺序依次处理，后面的数组将覆盖之前的值。   </p>   <p class="para">    <span class="function"><strong style="color:#CC7832">array_replace()</strong></span> 是非递归的：它将第一个数组的值进行替换而不管第二个数组中是什么类型。   </p>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-replace-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">array1</span></dt>       <dd>        <p class="para">        替换该数组的值。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">...</span></dt>       <dd>        <p class="para">        包含要提取元素的数组。        后面的数组里的值会覆盖前面的值。       </p>      </dd>          </dl>    </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-replace-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回一个<span class="type" style="color:#EAB766"><span class="type 数组" style="color:#EAB766">数组</span></span>。如果发生错误，将返回 <strong><span>NULL</span></strong>。   </p>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-replace-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-6057">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">array_replace()</strong></span> 范例</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$base&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">"orange"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"banana"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"apple"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"raspberry"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$replacements&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #9876AA">0&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"pineapple"</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">4&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"cherry"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$replacements2&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #9876AA">0&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"grape"</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$basket&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">array_replace</span><span style="color: #007700">(</span><span style="color: #9876AA">$base</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$replacements</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$replacements2</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$basket</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Array (     [0] =&gt; grape     [1] =&gt; banana     [2] =&gt; apple     [3] =&gt; raspberry     [4] =&gt; cherry ) </span></div>     </div>    </div>   </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-replace-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link array_replace_recursive()} - 使用传递的数组递归替换第一个数组的元素</span></li>     <li class="member"><span class="function">{@link array_merge()} - 合并一个或多个数组</span></li>    </ul>   </span>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.array.php">数组 函数</a></div></div>
 * @return array or null if an error occurs.*/
function array_replace(array $array, array $array1, array $array2 = null, array $_ = null) { }

/**
*<div id="function.array-replace-recursive" class="refentry">  <div class="refnamediv">   <h1 class="refname">array_replace_recursive</h1>   <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7)</p><p class="refpurpose"><span class="refname">array_replace_recursive</span> &mdash; <span class="dc-title">使用传递的数组递归替换第一个数组的元素</span></p>   </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-replace-recursive-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">array</span> <span class="methodname" style="color:#CC7832"><strong>array_replace_recursive</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">$array1</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">$...</span></span>   ] )</div>    <p class="para rdfs-comment">    <span class="function"><strong style="color:#CC7832">array_replace_recursive()</strong></span> 使用后面数组元素的值替换数组 <span class="parameter" style="color:#2EACF9">array1</span> 的值。    如果一个键存在于第一个数组同时也存在于第二个数组，它的值将被第二个数组中的值替换。    如果一个键存在于第二个数组，但是不存在于第一个数组，则会在第一个数组中创建这个元素。    如果一个键仅存在于第一个数组，它将保持不变。   如果传递了多个替换数组，它们将被按顺序依次处理，后面的数组将覆盖之前的值。   </p>   <p class="para"> <span class="function"><strong style="color:#CC7832">array_replace_recursive()</strong></span> 是递归的：它将遍历数组并将相同的处理应用到数组的内部值。   </p>   <p class="para">    如果第一个数组中的值是标量，它的值将被第二个数组中的值替换，它可能是一个标量或者数组。如果第一个数组和第二个数组中的值都是数组，<span class="function"><strong style="color:#CC7832">array_replace_recursive()</strong></span> 函数将递归地替换它们各自的值。   </p>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-replace-recursive-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">array1</span></dt>       <dd>        <p class="para">        替换该数组的值。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">...</span></dt>       <dd>        <p class="para">        可选项。包含要提取元素的数组。       </p>      </dd>          </dl>    </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-replace-recursive-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回一个<span class="type" style="color:#EAB766"><span class="type 数组" style="color:#EAB766">数组</span></span>。如果发生错误，将返回 <strong><span>NULL</span></strong>。   </p>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-replace-recursive-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-6055">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">array_replace_recursive()</strong></span> 范例</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$base&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">'citrus'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;array(&nbsp;</span><span style="color: #DD0000">"orange"</span><span style="color: #007700">)&nbsp;,&nbsp;</span><span style="color: #DD0000">'berries'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;array(</span><span style="color: #DD0000">"blackberry"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"raspberry"</span><span style="color: #007700">),&nbsp;);<br /></span><span style="color: #9876AA">$replacements&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">'citrus'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;array(</span><span style="color: #DD0000">'pineapple'</span><span style="color: #007700">),&nbsp;</span><span style="color: #DD0000">'berries'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;array(</span><span style="color: #DD0000">'blueberry'</span><span style="color: #007700">));<br /><br /></span><span style="color: #9876AA">$basket&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">array_replace_recursive</span><span style="color: #007700">(</span><span style="color: #9876AA">$base</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$replacements</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$basket</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$basket&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">array_replace</span><span style="color: #007700">(</span><span style="color: #9876AA">$base</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$replacements</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$basket</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Array (     [citrus] =&gt; Array         (             [0] =&gt; pineapple         )      [berries] =&gt; Array         (             [0] =&gt; blueberry             [1] =&gt; raspberry         )  ) Array (     [citrus] =&gt; Array         (             [0] =&gt; pineapple         )      [berries] =&gt; Array         (             [0] =&gt; blueberry         )  )  </span></div>     </div>    </div>    <div class="example" id="example-6056">     <p><strong>Example #2 <span class="function"><strong style="color:#CC7832">array_replace_recursive()</strong></span> 及其递归表现</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$base&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">'citrus'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;array(</span><span style="color: #DD0000">"orange"</span><span style="color: #007700">)&nbsp;,&nbsp;</span><span style="color: #DD0000">'berries'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;array(</span><span style="color: #DD0000">"blackberry"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"raspberry"</span><span style="color: #007700">),&nbsp;</span><span style="color: #DD0000">'others'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">'banana'&nbsp;</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$replacements&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">'citrus'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">'pineapple'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'berries'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;array(</span><span style="color: #DD0000">'blueberry'</span><span style="color: #007700">),&nbsp;</span><span style="color: #DD0000">'others'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;array(</span><span style="color: #DD0000">'litchis'</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">$replacements2&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">'citrus'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;array(</span><span style="color: #DD0000">'pineapple'</span><span style="color: #007700">),&nbsp;</span><span style="color: #DD0000">'berries'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;array(</span><span style="color: #DD0000">'blueberry'</span><span style="color: #007700">),&nbsp;</span><span style="color: #DD0000">'others'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">'litchis'</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$basket&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">array_replace_recursive</span><span style="color: #007700">(</span><span style="color: #9876AA">$base</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$replacements</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$replacements2</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$basket</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Array (     [citrus] =&gt; Array         (             [0] =&gt; pineapple         )      [berries] =&gt; Array         (             [0] =&gt; blueberry             [1] =&gt; raspberry         )      [others] =&gt; litchis ) </span></div>     </div>    </div>   </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-replace-recursive-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link array_replace()} - 使用传递的数组替换第一个数组的元素</span></li>     <li class="member"><span class="function">{@link array_merge_recursive()} - 递归地合并一个或多个数组</span></li>    </ul>   </span>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.array.php">数组 函数</a></div></div>
 * @return array an array, or &null; if an error occurs.*/
function array_replace_recursive(array $array, array $array1, array $array2 = null, array $_ = null) { }

/**
*<div id="function.array-keys" class="refentry">    <div class="refnamediv">     <h1 class="refname">array_keys</h1>     <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">array_keys</span> &mdash; <span class="dc-title">返回数组中部分的或所有的键名</span></p>     </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-keys-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">array</span> <span class="methodname" style="color:#CC7832"><strong>array_keys</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">$array</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#2EACF9">$search_value</span><span class="initializer"> = null</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#2EACF9">$strict</span><span class="initializer"> = false</span></span>   ]] )</div>      <p class="para rdfs-comment">      <span class="function"><strong style="color:#CC7832">array_keys()</strong></span> 返回 <span class="parameter" style="color:#2EACF9">input</span>      数组中的数字或者字符串的键名。     </p>     <p class="para">      如果指定了可选参数 <span class="parameter" style="color:#2EACF9">search_value</span>，则只返回该值的键名。否则      <span class="parameter" style="color:#2EACF9">input</span> 数组中的所有键名都会被返回。     </p>    </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-keys-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">input</span></dt>       <dd>        <p class="para">        一个数组，包含了要返回的键。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">search_value</span></dt>       <dd>        <p class="para">        如果指定了这个参数，只有包含这些值的键才会返回。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">strict</span></dt>       <dd>        <p class="para">        判断在搜索的时候是否该使用严格的比较（===）。       </p>      </dd>          </dl>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-keys-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回 <span class="parameter" style="color:#2EACF9">input</span> 里的所有键。  </p>  </div>     <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-keys-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-6035">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">array_keys()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$array&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #9876AA">0&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">100</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"color"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"red"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">array_keys</span><span style="color: #007700">(</span><span style="color: #9876AA">$array</span><span style="color: #007700">));<br /><br /></span><span style="color: #9876AA">$array&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">"blue"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"red"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"green"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"blue"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"blue"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">array_keys</span><span style="color: #007700">(</span><span style="color: #9876AA">$array</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"blue"</span><span style="color: #007700">));<br /><br /></span><span style="color: #9876AA">$array&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">"color"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;array(</span><span style="color: #DD0000">"blue"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"red"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"green"</span><span style="color: #007700">),<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #DD0000">"size"&nbsp;&nbsp;</span><span style="color: #007700">=&gt;&nbsp;array(</span><span style="color: #DD0000">"small"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"medium"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"large"</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">array_keys</span><span style="color: #007700">(</span><span style="color: #9876AA">$array</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Array (     [0] =&gt; 0     [1] =&gt; color ) Array (     [0] =&gt; 0     [1] =&gt; 3     [2] =&gt; 4 ) Array (     [0] =&gt; color     [1] =&gt; size ) </span></div>     </div>    </div>   </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-keys-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link array_values()} - 返回数组中所有的值</span></li>     <li class="member"><span class="function">{@link array_combine()} - 创建一个数组，用一个数组的值作为其键名，另一个数组的值作为其值</span></li>     <li class="member"><span class="function">{@link array_key_exists()} - 检查数组里是否有指定的键名或索引</span></li>     <li class="member"><span class="function">{@link array_search()} - 在数组中搜索给定的值，如果成功则返回首个相应的键名</span></li>    </ul>   </span>  </div>    <div class="up"><a href="http://php.net/manual/zh/ref.array.php">数组 函数</a></div></div>
 * @return array an array of all the keys in input.*/
function array_keys(array $input, $search_value = null, $strict = null) { }

/**
*<div id="function.array-values" class="refentry">    <div class="refnamediv">     <h1 class="refname">array_values</h1>     <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">array_values</span> &mdash; <span class="dc-title">返回数组中所有的值</span></p>     </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-values-description">   <h3 class="title">说明</h3>      <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">       <span class="type" style="color:#EAB766">array</span> <span class="methodname" style="color:#CC7832"><strong>array_values</strong></span>    ( <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">$array</span></span>       )</div>      <p class="para rdfs-comment">      <span class="function"><strong style="color:#CC7832">array_values()</strong></span> 返回      <span class="parameter" style="color:#2EACF9">input</span> 数组中所有的值并给其建立数字索引。     </p>    </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-values-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">array</span></dt>       <dd>        <p class="para">        数组。       </p>      </dd>          </dl>    </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-values-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回含所有值的索引数组。   </p>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-values-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-6075">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">array_values()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$array&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">"size"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"XL"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"color"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"gold"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">array_values</span><span style="color: #007700">(</span><span style="color: #9876AA">$array</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Array (     [0] =&gt; XL     [1] =&gt; gold ) </span></div>     </div>    </div>   </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-values-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link array_keys()} - 返回数组中部分的或所有的键名</span></li>     <li class="member"><span class="function">{@link array_combine()} - 创建一个数组，用一个数组的值作为其键名，另一个数组的值作为其值</span></li>    </ul>   </span>  </div>    <div class="up"><a href="http://php.net/manual/zh/ref.array.php">数组 函数</a></div></div>
 * @return array an indexed array of values.*/
function array_values(array $input) { }

/**
*<div id="function.array-count-values" class="refentry">    <div class="refnamediv">     <h1 class="refname">array_count_values</h1>     <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">array_count_values</span> &mdash; <span class="dc-title">统计数组中所有的值</span></p>     </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-count-values-description">   <h3 class="title">说明</h3>    <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">array</span> <span class="methodname" style="color:#CC7832"><strong>array_count_values</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">$array</span>    </span>  )</div>      <p class="para rdfs-comment">      <span class="function"><strong style="color:#CC7832">array_count_values()</strong></span> 返回一个数组：      数组的键是 <span class="parameter" style="color:#2EACF9">array</span> 里单元的值；      数组的值是 <span class="parameter" style="color:#2EACF9">array</span> 单元的值出现的次数。     </p>    </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-count-values-parameters">   <h3 class="title">参数</h3>   <span>    <dl>             <dt> <span class="parameter" style="color:#2EACF9">input</span></dt>       <dd>        <p class="para">        统计这个数组的值       </p>      </dd>           </dl>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-count-values-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">     返回一个关联数组，用 <span class="parameter" style="color:#2EACF9">array</span>      数组中的值作为键名，该值在数组中出现的次数作为值。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-function.array-count-values-errors">   <h3 class="title">错误／异常</h3>   <p class="para">    对数组里面的每个不是 <span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> 和 <span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.types.integer.php" class="type integer" style="color:#EAB766">integer</a></span> 类型的元素抛出一个警告错误（<strong><span>E_WARNING</span></strong>）。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-count-values-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-6013">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">array_count_values()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$array&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #9876AA">1</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"hello"</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">1</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"world"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"hello"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">array_count_values</span><span style="color: #007700">(</span><span style="color: #9876AA">$array</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Array (     [1] =&gt; 2     [hello] =&gt; 2     [world] =&gt; 1 ) </span></div>     </div>    </div>   </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-count-values-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link count()} - 计算数组中的单元数目，或对象中的属性个数</span></li>     <li class="member"><span class="function">{@link array_unique()} - 移除数组中重复的值</span></li>     <li class="member"><span class="function">{@link array_values()} - 返回数组中所有的值</span></li>     <li class="member"><span class="function">{@link count_chars()} - 返回字符串所用字符的信息</span></li>    </ul>   </span>  </div>    <div class="up"><a href="http://php.net/manual/zh/ref.array.php">数组 函数</a></div></div>
 * @return array an associative array of values from input as*/
function array_count_values(array $input) { }

/**
*<div id="function.array-column" class="refentry">  <div class="refnamediv">   <h1 class="refname">array_column</h1>   <p class="verinfo">(PHP 5 &gt;= 5.5.0, PHP 7)</p><p class="refpurpose"><span class="refname">array_column</span> &mdash; <span class="dc-title">返回数组中指定的一列</span></p>   </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-column-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">array</span> <span class="methodname" style="color:#CC7832"><strong>array_column</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">$input</span></span>    , <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#2EACF9">$column_key</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#2EACF9">$index_key</span><span class="initializer"> = null</span></span>   ] )</div>    <p class="para rdfs-comment">    <span class="function"><strong style="color:#CC7832">array_column()</strong></span>    返回<span class="parameter" style="color:#2EACF9">input</span>数组中键值为<span class="parameter" style="color:#2EACF9">column_key</span>的列，    如果指定了可选参数<span class="parameter" style="color:#2EACF9">index_key</span>，那么<span class="parameter" style="color:#2EACF9">input</span>数组中的这一列的值将作为返回数组中对应值的键。   </p>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-column-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">input</span></dt>       <dd>        <p class="para">        需要取出数组列的多维数组。        如果提供的是包含一组对象的数组，只有 public 属性会被直接取出。        为了也能取出 private 和 protected 属性，类必须实现        <span class="function"><strong style="color:#CC7832">__get()</strong></span> 和 <span class="function"><strong style="color:#CC7832">__isset()</strong></span> 魔术方法。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">column_key</span></dt>       <dd>        <p class="para">        需要返回值的列，它可以是索引数组的列索引，或者是关联数组的列的键，也可以是属性名。        也可以是<strong><span>NULL</span></strong>，此时将返回整个数组（配合<span class="parameter" style="color:#2EACF9">index_key</span>参数来重置数组键的时候，非常管用）       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">index_key</span></dt>       <dd>        <p class="para">        作为返回数组的索引/键的列，它可以是该列的整数索引，或者字符串键值。       </p>      </dd>          </dl>    </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-column-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    从多维数组中返回单列数组。   </p>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.array-column-changelog">   <h3 class="title">更新日志</h3>   <span>    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>7.0.0</td>        <td>          <span class="parameter" style="color:#2EACF9">input</span> 参数现在可以是包含对象的数组。        </td>       </tr>       </tbody>         </table>    </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-column-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-6008">     <p><strong>Example #1 从结果集中取出first names列</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">//&nbsp;Array&nbsp;representing&nbsp;a&nbsp;possible&nbsp;record&nbsp;set&nbsp;returned&nbsp;from&nbsp;a&nbsp;database<br /></span><span style="color: #9876AA">$records&nbsp;</span><span style="color: #007700">=&nbsp;array(<br />&nbsp;&nbsp;&nbsp;&nbsp;array(<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #DD0000">'id'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">2135</span><span style="color: #007700">,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #DD0000">'first_name'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">'John'</span><span style="color: #007700">,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #DD0000">'last_name'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">'Doe'</span><span style="color: #007700">,<br />&nbsp;&nbsp;&nbsp;&nbsp;),<br />&nbsp;&nbsp;&nbsp;&nbsp;array(<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #DD0000">'id'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">3245</span><span style="color: #007700">,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #DD0000">'first_name'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">'Sally'</span><span style="color: #007700">,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #DD0000">'last_name'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">'Smith'</span><span style="color: #007700">,<br />&nbsp;&nbsp;&nbsp;&nbsp;),<br />&nbsp;&nbsp;&nbsp;&nbsp;array(<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #DD0000">'id'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">5342</span><span style="color: #007700">,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #DD0000">'first_name'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">'Jane'</span><span style="color: #007700">,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #DD0000">'last_name'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">'Jones'</span><span style="color: #007700">,<br />&nbsp;&nbsp;&nbsp;&nbsp;),<br />&nbsp;&nbsp;&nbsp;&nbsp;array(<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #DD0000">'id'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">5623</span><span style="color: #007700">,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #DD0000">'first_name'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">'Peter'</span><span style="color: #007700">,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #DD0000">'last_name'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">'Doe'</span><span style="color: #007700">,<br />&nbsp;&nbsp;&nbsp;&nbsp;)<br />);<br />&nbsp;<br /></span><span style="color: #9876AA">$first_names&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">array_column</span><span style="color: #007700">(</span><span style="color: #9876AA">$records</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'first_name'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$first_names</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Array (     [0] =&gt; John     [1] =&gt; Sally     [2] =&gt; Jane     [3] =&gt; Peter ) </span></div>     </div>    </div>   </span>   <p class="para">    <div class="example" id="example-6009">     <p><strong>Example #2       从结果集中总取出last names列，用相应的id作为键值     </strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">//&nbsp;Using&nbsp;the&nbsp;$records&nbsp;array&nbsp;from&nbsp;Example&nbsp;#1<br /></span><span style="color: #9876AA">$last_names&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">array_column</span><span style="color: #007700">(</span><span style="color: #9876AA">$records</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'last_name'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'id'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$last_names</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Array (     [2135] =&gt; Doe     [3245] =&gt; Smith     [5342] =&gt; Jones     [5623] =&gt; Doe ) </span></div>     </div>    </div>   </p>   <p class="para">    <div class="example" id="example-6010">     <p><strong>Example #3       username 列是从对象获取 public 的 &quot;username&quot; 属性     </strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /><br /></span><span style="color: #007700">class&nbsp;</span><span style="color: #9876AA">User<br /></span><span style="color: #007700">{<br />&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;</span><span style="color: #9876AA">$username</span><span style="color: #007700">;<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;function&nbsp;</span><span style="color: #9876AA">__construct</span><span style="color: #007700">(</span><span style="color: #9876AA">string&nbsp;$username</span><span style="color: #007700">)<br />&nbsp;&nbsp;&nbsp;&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">username&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">$username</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;}<br />}<br /><br /></span><span style="color: #9876AA">$users&nbsp;</span><span style="color: #007700">=&nbsp;[<br />&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;</span><span style="color: #9876AA">User</span><span style="color: #007700">(</span><span style="color: #DD0000">'user&nbsp;1'</span><span style="color: #007700">),<br />&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;</span><span style="color: #9876AA">User</span><span style="color: #007700">(</span><span style="color: #DD0000">'user&nbsp;2'</span><span style="color: #007700">),<br />&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;</span><span style="color: #9876AA">User</span><span style="color: #007700">(</span><span style="color: #DD0000">'user&nbsp;3'</span><span style="color: #007700">),<br />];<br /><br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">array_column</span><span style="color: #007700">(</span><span style="color: #9876AA">$users</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'username'</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Array (     [0] =&gt; user 1     [1] =&gt; user 2     [2] =&gt; user 3 ) </span></div>     </div>    </div>   </p>   <p class="para">    <div class="example" id="example-6011">     <p><strong>Example #4       获取  username 列，从对象通过魔术方法  <span class="function"><strong style="color:#CC7832">__get()</strong></span> 获取 private 的 &quot;username&quot; 属性。     </strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /><br /></span><span style="color: #007700">class&nbsp;</span><span style="color: #9876AA">Person<br /></span><span style="color: #007700">{<br />&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;</span><span style="color: #9876AA">$name</span><span style="color: #007700">;<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;function&nbsp;</span><span style="color: #9876AA">__construct</span><span style="color: #007700">(</span><span style="color: #9876AA">string&nbsp;$name</span><span style="color: #007700">)<br />&nbsp;&nbsp;&nbsp;&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">name&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">$name</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;}<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;function&nbsp;</span><span style="color: #9876AA">__get</span><span style="color: #007700">(</span><span style="color: #9876AA">$prop</span><span style="color: #007700">)<br />&nbsp;&nbsp;&nbsp;&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;</span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">$prop</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;}<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;function&nbsp;</span><span style="color: #9876AA">__isset</span><span style="color: #007700">(</span><span style="color: #9876AA">$prop</span><span style="color: #007700">)&nbsp;:&nbsp;</span><span style="color: #9876AA">bool<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #007700">{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;isset(</span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">$prop</span><span style="color: #007700">);<br />&nbsp;&nbsp;&nbsp;&nbsp;}<br />}<br /><br /></span><span style="color: #9876AA">$people&nbsp;</span><span style="color: #007700">=&nbsp;[<br />&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;</span><span style="color: #9876AA">Person</span><span style="color: #007700">(</span><span style="color: #DD0000">'Fred'</span><span style="color: #007700">),<br />&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;</span><span style="color: #9876AA">Person</span><span style="color: #007700">(</span><span style="color: #DD0000">'Jane'</span><span style="color: #007700">),<br />&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;</span><span style="color: #9876AA">Person</span><span style="color: #007700">(</span><span style="color: #DD0000">'John'</span><span style="color: #007700">),<br />];<br /><br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">array_column</span><span style="color: #007700">(</span><span style="color: #9876AA">$people</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'name'</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Array (     [0] =&gt; Fred     [1] =&gt; Jane     [2] =&gt; John ) </span></div>     </div>    </div>    如果不提供<span class="function"><strong style="color:#CC7832">__isset()</strong></span>，会返回空数组。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-column-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member">      <a href="http://php.net/manual/zh/https://github.com/ramsey/array_column/blob/master/src/array_column.php" class="link external">&raquo;&nbsp;Recommended      userland implementation for PHP lower than 5.5</a>     </li>    </ul>   </span>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.array.php">数组 函数</a></div></div>
 * @return array Returns an array of values representing a single column from the input array.*/
function array_column(array $array, $column, $index_key = null) { }

/**
*<div id="function.array-reverse" class="refentry">    <div class="refnamediv">     <h1 class="refname">array_reverse</h1>     <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">array_reverse</span> &mdash; <span class="dc-title">      返回单元顺序相反的数组     </span></p>     </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-reverse-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">array</span> <span class="methodname" style="color:#CC7832"><strong>array_reverse</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">$array</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#2EACF9">$preserve_keys</span><span class="initializer"> = <strong><span>FALSE</span></strong></span></span>   ] )</div>      <p class="para rdfs-comment">      <span class="function"><strong style="color:#CC7832">array_reverse()</strong></span> 接受数组      <span class="parameter" style="color:#2EACF9">array</span> 作为输入并返回一个单元为相反顺序的新数组。     </p>   </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-reverse-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">array</span></dt>       <dd>        <p class="para">        输入的数组。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">preserve_keys</span></dt>       <dd>        <p class="para">        如果设置为 <strong><span>TRUE</span></strong> 会保留数字的键。        非数字的键则不受这个设置的影响，总是会被保留。       </p>      </dd>          </dl>    </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-reverse-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回反转后的数组。   </p>  </div>      <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-reverse-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-6058">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">array_reverse()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$input&nbsp;&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">"php"</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">4.0</span><span style="color: #007700">,&nbsp;array(</span><span style="color: #DD0000">"green"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"red"</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">$reversed&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">array_reverse</span><span style="color: #007700">(</span><span style="color: #9876AA">$input</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$preserved&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">array_reverse</span><span style="color: #007700">(</span><span style="color: #9876AA">$input</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">true</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$input</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$reversed</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$preserved</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Array (     [0] =&gt; php     [1] =&gt; 4     [2] =&gt; Array         (             [0] =&gt; green             [1] =&gt; red         )  ) Array (     [0] =&gt; Array         (             [0] =&gt; green             [1] =&gt; red         )      [1] =&gt; 4     [2] =&gt; php ) Array (     [2] =&gt; Array         (             [0] =&gt; green             [1] =&gt; red         )      [1] =&gt; 4     [0] =&gt; php ) </span></div>     </div>    </div>   </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-reverse-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link array_flip()} - 交换数组中的键和值</span></li>    </ul>   </span>  </div>    <div class="up"><a href="http://php.net/manual/zh/ref.array.php">数组 函数</a></div></div>
 * @return array the reversed array.*/
function array_reverse(array $array, $preserve_keys = null) { }

/**
*<div id="function.array-reduce" class="refentry">  <div class="refnamediv">   <h1 class="refname">array_reduce</h1>   <p class="verinfo">(PHP 4 &gt;= 4.0.5, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">array_reduce</span> &mdash; <span class="dc-title">用回调函数迭代地将数组简化为单一的值</span></p>   </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-reduce-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="methodname" style="color:#CC7832"><strong>array_reduce</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">$array</span></span>    , <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#2EACF9">$callback</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#2EACF9">$initial</span><span class="initializer"> = <strong><span>NULL</span></strong></span></span>   ] )</div>    <p class="para rdfs-comment">    <span class="function"><strong style="color:#CC7832">array_reduce()</strong></span> 将回调函数    <span class="parameter" style="color:#2EACF9">callback</span> 迭代地作用到    <span class="parameter" style="color:#2EACF9">array</span> 数组中的每一个单元中，从而将数组简化为单一的值。      </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-reduce-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">array</span></dt>       <dd>        <p class="para">        输入的 array。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">callback</span></dt>       <dd>        <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">        <span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="methodname" style="color:#CC7832"><span class="replaceable">callback</span></span>         ( <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#2EACF9">$carry</span></span>        , <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#2EACF9">$item</span></span>        )</div>      <dl>            <dt> <span class="parameter" style="color:#2EACF9">carry</span></dt>       <dd>        <p class="para">         携带上次迭代里的值；        如果本次迭代是第一次，那么这个值是 <span class="parameter" style="color:#2EACF9">initial</span>。       </p>      </dd>                     <dt> <span class="parameter" style="color:#2EACF9">item</span></dt>          <dd>           <p class="para">            携带了本次迭代的值。          </p>         </dd>             </dl>       </dd>                 <dt> <span class="parameter" style="color:#2EACF9">initial</span></dt>       <dd>        <p class="para">        如果指定了可选参数    <span class="parameter" style="color:#2EACF9">initial</span>，该参数将在处理开始前使用，或者当处理结束，数组为空时的最后一个结果。       </p>      </dd>          </dl>    </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-reduce-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回结果值。   </p>   <p class="para">    <span class="parameter" style="color:#2EACF9">initial</span> 参数，<span class="function"><strong style="color:#CC7832">array_reduce()</strong></span> 返回 <strong><span>NULL</span></strong>。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.array-reduce-changelog">   <h3 class="title">更新日志</h3>   <span>    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>5.3.0</td>        <td>         修改 <span class="parameter" style="color:#2EACF9">initial</span> 类型，允许传入 <span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>，之前只能是 <span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.types.integer.php" class="type integer" style="color:#EAB766">integer</a></span>。        </td>       </tr>       </tbody>         </table>    </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-reduce-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-6054">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">array_reduce()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function&nbsp;</span><span style="color: #9876AA">sum</span><span style="color: #007700">(</span><span style="color: #9876AA">$carry</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$item</span><span style="color: #007700">)<br />{<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$carry&nbsp;</span><span style="color: #007700">+=&nbsp;</span><span style="color: #9876AA">$item</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;</span><span style="color: #9876AA">$carry</span><span style="color: #007700">;<br />}<br /><br />function&nbsp;</span><span style="color: #9876AA">product</span><span style="color: #007700">(</span><span style="color: #9876AA">$carry</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$item</span><span style="color: #007700">)<br />{<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$carry&nbsp;</span><span style="color: #007700">*=&nbsp;</span><span style="color: #9876AA">$item</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;</span><span style="color: #9876AA">$carry</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">$a&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #9876AA">1</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">2</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">3</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">4</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">5</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$x&nbsp;</span><span style="color: #007700">=&nbsp;array();<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">array_reduce</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"sum"</span><span style="color: #007700">));&nbsp;</span><span style="color: #FF8000">//&nbsp;int(15)<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">array_reduce</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"product"</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">10</span><span style="color: #007700">));&nbsp;</span><span style="color: #FF8000">//&nbsp;int(1200),&nbsp;because:&nbsp;10*1*2*3*4*5<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">array_reduce</span><span style="color: #007700">(</span><span style="color: #9876AA">$x</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"sum"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"No&nbsp;data&nbsp;to&nbsp;reduce"</span><span style="color: #007700">));&nbsp;</span><span style="color: #FF8000">//&nbsp;string(17)&nbsp;"No&nbsp;data&nbsp;to&nbsp;reduce"<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>     </div>   </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-reduce-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link array_filter()} - 用回调函数过滤数组中的单元</span></li>     <li class="member"><span class="function">{@link array_map()} - 为数组的每个元素应用回调函数</span></li>     <li class="member"><span class="function">{@link array_unique()} - 移除数组中重复的值</span></li>     <li class="member"><span class="function">{@link array_count_values()} - 统计数组中所有的值</span></li>    </ul>   </span>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.array.php">数组 函数</a></div></div>
 * @return mixed the resulting value.*/
function array_reduce(array $input, $function, $initial = null) { }

/**
*<div id="function.array-pad" class="refentry">    <div class="refnamediv">     <h1 class="refname">array_pad</h1>     <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">array_pad</span> &mdash; <span class="dc-title">      以指定长度将一个值填充进数组     </span></p>     </div>      <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-pad-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">array</span> <span class="methodname" style="color:#CC7832"><strong>array_pad</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">$array</span></span>    , <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#2EACF9">$size</span></span>    , <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#2EACF9">$value</span></span>    )</div>      <p class="para rdfs-comment">      <span class="function"><strong style="color:#CC7832">array_pad()</strong></span> 返回      <span class="parameter" style="color:#2EACF9">array</span> 的一个拷贝，并用      <span class="parameter" style="color:#2EACF9">value</span> 将其填补到      <span class="parameter" style="color:#2EACF9">size</span> 指定的长度。如果      <span class="parameter" style="color:#2EACF9">size</span> 为正，则填补到数组的右侧，如果为负则从左侧开始填补。如果      <span class="parameter" style="color:#2EACF9">size</span> 的绝对值小于或等于      <span class="parameter" style="color:#2EACF9">array</span> 数组的长度则没有任何填补。有可能一次最多填补      1048576 个单元。     </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-pad-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">array</span></dt>       <dd>        <p class="para">        需要被填充的原始数组。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">size</span></dt>       <dd>        <p class="para">         新数组的长度。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">value</span></dt>       <dd>        <p class="para">        将被填充的值，只有在 <span class="parameter" style="color:#2EACF9">array</span> 的现有长度小于        <span class="parameter" style="color:#2EACF9">size</span> 的长度时才有效。       </p>      </dd>          </dl>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-pad-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回 <span class="parameter" style="color:#2EACF9">array</span> 用  <span class="parameter" style="color:#2EACF9">value</span> 填充到 <span class="parameter" style="color:#2EACF9">size</span> 指定的长度之后的一个副本。    如果 <span class="parameter" style="color:#2EACF9">size</span> 为正，则填补到数组的右侧，如果为负则从左侧开始填补。    如果 <span class="parameter" style="color:#2EACF9">size</span> 的绝对值小于或等于 <span class="parameter" style="color:#2EACF9">array</span> 数组的长度则没有任何填补。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-pad-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-6049">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">array_pad()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$input&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #9876AA">12</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">10</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">9</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$result&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">array_pad</span><span style="color: #007700">(</span><span style="color: #9876AA">$input</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">5</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">0</span><span style="color: #007700">);<br /></span><span style="color: #FF8000">//&nbsp;result&nbsp;is&nbsp;array(12,&nbsp;10,&nbsp;9,&nbsp;0,&nbsp;0)<br /><br /></span><span style="color: #9876AA">$result&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">array_pad</span><span style="color: #007700">(</span><span style="color: #9876AA">$input</span><span style="color: #007700">,&nbsp;-</span><span style="color: #9876AA">7</span><span style="color: #007700">,&nbsp;-</span><span style="color: #9876AA">1</span><span style="color: #007700">);<br /></span><span style="color: #FF8000">//&nbsp;result&nbsp;is&nbsp;array(-1,&nbsp;-1,&nbsp;-1,&nbsp;-1,&nbsp;12,&nbsp;10,&nbsp;9)<br /><br /></span><span style="color: #9876AA">$result&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">array_pad</span><span style="color: #007700">(</span><span style="color: #9876AA">$input</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">2</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"noop"</span><span style="color: #007700">);<br /></span><span style="color: #FF8000">//&nbsp;not&nbsp;padded<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>     </div>   </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-pad-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link array_fill()} - 用给定的值填充数组</span></li>     <li class="member"><span class="function">{@link range()} - 根据范围创建数组，包含指定的元素</span></li>    </ul>   </span>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.array.php">数组 函数</a></div></div>
 * @return array a copy of the input padded to size specified*/
function array_pad(array $input, $pad_size, $pad_value) { }

/**
*<div id="function.array-flip" class="refentry">    <div class="refnamediv">     <h1 class="refname">array_flip</h1>     <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">array_flip</span> &mdash; <span class="dc-title">交换数组中的键和值</span></p>     </div>      <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-flip-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">array</span> <span class="methodname" style="color:#CC7832"><strong>array_flip</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">$array</span></span>    )</div>      <p class="para rdfs-comment">      <span class="function"><strong style="color:#CC7832">array_flip()</strong></span> 返回一个反转后的 <span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span>，例如      <span class="parameter" style="color:#2EACF9">array</span> 中的键名变成了值，而      <span class="parameter" style="color:#2EACF9">array</span> 中的值成了键名。     </p>     <p class="para">      注意 <span class="parameter" style="color:#2EACF9">array</span> 中的值需要能够作为合法的键名（例如需要是      <span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.types.integer.php" class="type integer" style="color:#EAB766">integer</a></span> 或者 <span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>）。如果类型不对，将出现一个警告，并且有问题的键／值对<em class="emphasis">将不会出现在结果里</em>。     </p>     <p class="para">      如果同一个值出现多次，则最后一个键名将作为它的值，其它键会被丢弃。     </p>    </div>           <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-flip-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">array</span></dt>       <dd>        <p class="para">        要交换键/值对的数组。       </p>      </dd>          </dl>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-flip-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    成功时返回交换后的数组，如果失败返回 <strong><span>NULL</span></strong>。   </p>  </div>     <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-flip-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-6025">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">array_flip()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$input&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">"oranges"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"apples"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"pears"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$flipped&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">array_flip</span><span style="color: #007700">(</span><span style="color: #9876AA">$input</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$flipped</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Array (     [oranges] =&gt; 0     [apples] =&gt; 1     [pears] =&gt; 2 ) </span></div>     </div>    </div>   </span>   <p class="para">    <div class="example" id="example-6026">     <p><strong>Example #2 <span class="function"><strong style="color:#CC7832">array_flip()</strong></span> 例子 : 冲突</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$input&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">"a"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">1</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"b"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">1</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"c"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">2</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$flipped&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">array_flip</span><span style="color: #007700">(</span><span style="color: #9876AA">$input</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$flipped</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Array (     [1] =&gt; b     [2] =&gt; c ) </span></div>     </div>    </div>   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-flip-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link array_values()} - 返回数组中所有的值</span></li>     <li class="member"><span class="function">{@link array_keys()} - 返回数组中部分的或所有的键名</span></li>     <li class="member"><span class="function">{@link array_reverse()} - 返回单元顺序相反的数组</span></li>    </ul>   </span>  </div>    <div class="up"><a href="http://php.net/manual/zh/ref.array.php">数组 函数</a></div></div>
 * @return array|null Returns the flipped array on success and NULL on failure.*/
function array_flip(array $array) { }

/**
*<div id="function.array-change-key-case" class="refentry">    <div class="refnamediv">     <h1 class="refname">array_change_key_case</h1>     <p class="verinfo">(PHP 4 &gt;= 4.2.0, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">array_change_key_case</span> &mdash; <span class="dc-title">将数组中的所有键名修改为全大写或小写</span></p>     </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-change-key-case-description">   <h3 class="title">说明</h3>      <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">       <span class="type" style="color:#EAB766">array</span> <span class="methodname" style="color:#CC7832"><strong>array_change_key_case</strong></span>        ( <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">$array</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#2EACF9">$case</span><span class="initializer"> = CASE_LOWER</span></span>      ] )</div>      <p class="para rdfs-comment">      <span class="function"><strong style="color:#CC7832">array_change_key_case()</strong></span> 将 <span class="parameter" style="color:#2EACF9">array</span>      数组中的所有键名改为全小写或大写。本函数不改变数字索引。     </p>    </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-change-key-case-parameters">   <h3 class="title">参数</h3>   <span>    <dl>             <dt> <span class="parameter" style="color:#2EACF9">array</span></dt>       <dd>        <p class="para">        需要操作的数组。       </p>      </dd>                  <dt> <span class="parameter" style="color:#2EACF9">case</span></dt>       <dd>        <p class="para">        可以在这里用两个常量，<strong><span>CASE_UPPER</span></strong> 或      <strong><span>CASE_LOWER</span></strong>（默认值）。       </p>      </dd>           </dl>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-change-key-case-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">     返回一个键全是小写或者全是大写的数组；如果输入值（<span class="parameter" style="color:#2EACF9">array</span>）不是一个数组，那么返回<strong><span>FALSE</span></strong>   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-function.array-change-key-case-errors">   <h3 class="title">错误／异常</h3>   <p class="para">    如果输入值（<span class="parameter" style="color:#2EACF9">array</span>）不是一个数组，就会抛出一个错误警告（<strong><span>E_WARNING</span></strong>）。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-change-key-case-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-6006">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">array_change_key_case()</strong></span>例一</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$input_array&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">"FirSt"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">1</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"SecOnd"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">4</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">array_change_key_case</span><span style="color: #007700">(</span><span style="color: #9876AA">$input_array</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">CASE_UPPER</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Array (     [FIRST] =&gt; 1     [SECOND] =&gt; 4 ) </span></div>     </div>    </div>   </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.array-change-key-case-notes">   <h3 class="title">注释</h3>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>:     <p class="para">     如果一个数组中的多个键名经过本函数后变成一样的话（例如      &quot;<em>keY</em>&quot; 和 &quot;<em>kEY</em>&quot;），最后一个值将覆盖其它的值。    </p>   </p></blockquote>  </div>    <div class="up"><a href="http://php.net/manual/zh/ref.array.php">数组 函数</a></div></div>
 * @return array an array with its keys lower or uppercased, or false if*/
function array_change_key_case(array $input, $case = null) { }

/**
*<div id="function.array-rand" class="refentry">    <div class="refnamediv">     <h1 class="refname">array_rand</h1>     <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">array_rand</span> &mdash; <span class="dc-title">      从数组中随机取出一个或多个单元     </span></p>     </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-rand-description">   <h3 class="title">说明</h3>      <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">       <span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="methodname" style="color:#CC7832"><strong>array_rand</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">$array</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#2EACF9">$num</span><span class="initializer"> = 1</span></span>      ] )</div>      <p class="para rdfs-comment">      从数组中取出一个或多个随机的单元，并返回随机条目的一个或多个键。      它使用了伪随机数产生算法，所以不适合密码学场景，     </p>    </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-rand-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">array</span></dt>       <dd>        <p class="para">        输入的数组。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">num</span></dt>       <dd>        <p class="para">        指明了你想取出多少个单元。       </p>      </dd>          </dl>    </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-rand-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    如果只取出一个，<span class="function"><strong style="color:#CC7832">array_rand()</strong></span>    返回随机单元的键名。    否则就返回包含随机键名的数组。    完成后，就可以根据随机的键获取数组的随机值。    取出数量如果超过 array 的长度，就会导致 <strong><span>E_WARNING</span></strong> 错误，并返回 NULL。   </p>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.array-rand-changelog">   <h3 class="title">更新日志</h3>   <span>    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>7.1.0</td>        <td>         <a href="http://php.net/manual/zh/migration71.incompatible.php#migration71.incompatible.rand-srand-aliases" class="link">内置的随机数生成算法从 libc rand 函数改成<a href="http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html" class="link external">&raquo;&nbsp;梅森旋转</a> 伪随机数生成算法。</a>        </td>       </tr>        <tr>        <td>5.2.10</td>        <td>         The resulting array of keys is no longer shuffled.        </td>       </tr>       </tbody>         </table>    </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-rand-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-6053">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">array_rand()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$input&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">"Neo"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"Morpheus"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"Trinity"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"Cypher"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"Tank"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$rand_keys&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">array_rand</span><span style="color: #007700">(</span><span style="color: #9876AA">$input</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">2</span><span style="color: #007700">);<br />echo&nbsp;</span><span style="color: #9876AA">$input</span><span style="color: #007700">[</span><span style="color: #9876AA">$rand_keys</span><span style="color: #007700">[</span><span style="color: #9876AA">0</span><span style="color: #007700">]]&nbsp;.&nbsp;</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />echo&nbsp;</span><span style="color: #9876AA">$input</span><span style="color: #007700">[</span><span style="color: #9876AA">$rand_keys</span><span style="color: #007700">[</span><span style="color: #9876AA">1</span><span style="color: #007700">]]&nbsp;.&nbsp;</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>     </div>   </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-rand-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link shuffle()} - 打乱数组</span></li>    </ul>   </span>  </div>    <div class="up"><a href="http://php.net/manual/zh/ref.array.php">数组 函数</a></div></div>
 * @return mixed If you are picking only one entry, array_rand*/
function array_rand(array $input, $num_req = null) { }

/**
*<div id="function.array-unique" class="refentry">    <div class="refnamediv">     <h1 class="refname">array_unique</h1>     <p class="verinfo">(PHP 4 &gt;= 4.0.1, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">array_unique</span> &mdash; <span class="dc-title">移除数组中重复的值</span></p>     </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-unique-description">   <h3 class="title">说明</h3>      <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">       <span class="type" style="color:#EAB766">array</span> <span class="methodname" style="color:#CC7832"><strong>array_unique</strong></span>        ( <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">$array</span></span>     [, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#2EACF9">$sort_flags</span><span class="initializer"> = SORT_STRING</span></span>      ] )</div>      <p class="para rdfs-comment">      <span class="function"><strong style="color:#CC7832">array_unique()</strong></span> 接受      <span class="parameter" style="color:#2EACF9">array</span> 作为输入并返回没有重复值的新数组。     </p>     <p class="para">      注意键名保留不变。<span class="function"><strong style="color:#CC7832">array_unique()</strong></span>      先将值作为字符串排序，然后对每个值只保留第一个遇到的键名，接着忽略所有后面的键名。这并不意味着在未排序的      <span class="parameter" style="color:#2EACF9">array</span> 中同一个值的第一个出现的键名会被保留。     </p>     <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>:       <span class="simpara">       当且仅当       <em>(string) $elem1 === (string) $elem2</em> 时两个单元被认为相同。       例如，字符串表达一样时，会使用首个元素。      </span>     </p></blockquote>    </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-unique-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">array</span></dt>       <dd>        <p class="para">        输入的数组。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">sort_flags</span></dt>       <dd>        <p class="para">        第二个可选参数<span class="parameter" style="color:#2EACF9">sort_flags</span> 可用于修改排序行为：       </p>       <p class="para">        排序类型标记：        <ul class="itemizedlist">         <li class="listitem">          <span class="simpara"><strong><span>SORT_REGULAR</span></strong> - 按照通常方法比较（不修改类型）</span>         </li>         <li class="listitem">          <span class="simpara"><strong><span>SORT_NUMERIC</span></strong> - 按照数字形式比较</span>         </li>         <li class="listitem">          <span class="simpara"><strong><span>SORT_STRING</span></strong> - 按照字符串形式比较</span>         </li>         <li class="listitem">          <span class="simpara"><strong><span>SORT_LOCALE_STRING</span></strong> - 根据当前的本地化设置，按照字符串比较。          </span>         </li>        </ul>       </p>      </dd>          </dl>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-unique-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回过滤后的数组。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.array-unique-changelog">   <h3 class="title">更新日志</h3>   <span>    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>5.2.10</td>        <td>         修改回 <span class="parameter" style="color:#2EACF9">sort_flags</span> 的默认值为         <strong><span>SORT_STRING</span></strong>。        </td>       </tr>        <tr>        <td>5.2.9</td>        <td>         增加可选选项<span class="parameter" style="color:#2EACF9">sort_flags</span>，默认值 <strong><span>SORT_REGULAR</span></strong>。         5.2.9 之前，此函数内部使用 <strong><span>SORT_STRING</span></strong> 排序。        </td>       </tr>       </tbody>         </table>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-unique-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-6072">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">array_unique()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$input&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">"a"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"green"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"red"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"b"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"green"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"blue"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"red"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$result&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">array_unique</span><span style="color: #007700">(</span><span style="color: #9876AA">$input</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$result</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Array (     [a] =&gt; green     [0] =&gt; red     [1] =&gt; blue ) </span></div>     </div>    </div>   </span>   <p class="para">    <div class="example" id="example-6073">     <p><strong>Example #2 <span class="function"><strong style="color:#CC7832">array_unique()</strong></span> 和类型</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$input&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #9876AA">4</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"4"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"3"</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">4</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">3</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"3"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$result&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">array_unique</span><span style="color: #007700">(</span><span style="color: #9876AA">$input</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$result</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> array(2) {   [0] =&gt; int(4)   [2] =&gt; string(1) &quot;3&quot; } </span></div>     </div>    </div>   </p>  </div>     <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-unique-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link array_count_values()} - 统计数组中所有的值</span></li>    </ul>   </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.array-unique-notes">   <h3 class="title">注释</h3>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>:     <span class="simpara">     注意， <span class="function"><strong style="color:#CC7832">array_unique()</strong></span> 不能应用于多维数组。    </span>   </p></blockquote>  </div>    <div class="up"><a href="http://php.net/manual/zh/ref.array.php">数组 函数</a></div></div>
 * @return array the filtered array.*/
function array_unique(array $array, $sort_flags = SORT_STRING) { }

/**
*<div id="function.array-intersect" class="refentry">    <div class="refnamediv">     <h1 class="refname">array_intersect</h1>     <p class="verinfo">(PHP 4 &gt;= 4.0.1, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">array_intersect</span> &mdash; <span class="dc-title">计算数组的交集</span></p>     </div>      <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-intersect-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">array</span> <span class="methodname" style="color:#CC7832"><strong>array_intersect</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">$array1</span></span>    , <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">$array2</span></span> [, <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">$...</span></span>   ] )</div>      <p class="para rdfs-comment">      <span class="function"><strong style="color:#CC7832">array_intersect()</strong></span> 返回一个数组，该数组包含了所有在      <span class="parameter" style="color:#2EACF9">array1</span> 中也同时出现在所有其它参数数组中的值。注意键名保留不变。     </p>   </div>          <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-intersect-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">array1</span></dt>       <dd>        <p class="para">        要检查的数组，作为主值。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">array2</span></dt>       <dd>        <p class="para">        要被对比的数组。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">...</span></dt>       <dd>        <p class="para">        要对比的数组列表。       </p>      </dd>          </dl>    </span>  </div>        <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-intersect-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">     返回一个数组，该数组包含了所有在      <span class="parameter" style="color:#2EACF9">array1</span> 中也同时出现在所有其它参数数组中的值。   </p>  </div>           <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-intersect-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-6031">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">array_intersect()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$array1&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">"a"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"green"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"red"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"blue"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$array2&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">"b"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"green"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"yellow"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"red"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$result&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">array_intersect</span><span style="color: #007700">(</span><span style="color: #9876AA">$array1</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$array2</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$result</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Array (     [a] =&gt; green     [0] =&gt; red ) </span></div>     </div>    </div>   </span>  </div>      <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.array-intersect-notes">   <h3 class="title">注释</h3>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>:     <span class="simpara">      两个单元仅在 <em>(string) $elem1 === (string) $elem2</em>       时被认为是相同的。也就是说，当字符串的表达是一样的时候。           </span>   </p></blockquote>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-intersect-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link array_intersect_assoc()} - 带索引检查计算数组的交集</span></li>     <li class="member"><span class="function">{@link array_diff()} - 计算数组的差集</span></li>     <li class="member"><span class="function">{@link array_diff_assoc()} - 带索引检查计算数组的差集</span></li>    </ul>   </span>  </div>     <div class="up"><a href="http://php.net/manual/zh/ref.array.php">数组 函数</a></div></div>
 * @return array an array containing all of the values in*/
function array_intersect(array $array1, array $array2, array $_ = null) { }

/**
*<div id="function.array-intersect-key" class="refentry">  <div class="refnamediv">   <h1 class="refname">array_intersect_key</h1>   <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7)</p><p class="refpurpose"><span class="refname">array_intersect_key</span> &mdash; <span class="dc-title">使用键名比较计算数组的交集</span></p>   </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-intersect-key-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">array</span> <span class="methodname" style="color:#CC7832"><strong>array_intersect_key</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">$array1</span></span>    , <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">$array2</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">$...</span></span>   ] )</div>    <p class="para rdfs-comment">    <span class="function"><strong style="color:#CC7832">array_intersect_key()</strong></span> 返回一个数组，该数组包含了所有出现在    <span class="parameter" style="color:#2EACF9">array1</span> 中并同时出现在所有其它参数数组中的键名的值。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-intersect-key-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">array1</span></dt>       <dd>        <p class="para">        The array with master keys to check.       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">array2</span></dt>       <dd>        <p class="para">        An array to compare keys against.       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">...</span></dt>       <dd>        <p class="para">        A variable list of arrays to compare.       </p>      </dd>          </dl>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-intersect-key-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    Returns an associative array containing all the entries of     <span class="parameter" style="color:#2EACF9">array1</span> which have keys that are present in all    arguments.   </p>        </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-intersect-key-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-6028">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">array_intersect_key()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$array1&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">'blue'&nbsp;&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">1</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'red'&nbsp;&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">2</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'green'&nbsp;&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">3</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'purple'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">4</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$array2&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">'green'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">5</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'blue'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">6</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'yellow'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">7</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'cyan'&nbsp;&nbsp;&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">8</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">array_intersect_key</span><span style="color: #007700">(</span><span style="color: #9876AA">$array1</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$array2</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> array(2) {   [&quot;blue&quot;]=&gt;   int(1)   [&quot;green&quot;]=&gt;   int(3) } </span></div>     </div>    </div>   </span>   <p class="para">    上例中可以看到只有 <em>&#039;blue&#039;</em>    和 <em>&#039;green&#039;</em> 两个键名出现在两个数组中，因此被返回。此外注意    <em>&#039;blue&#039;</em> 和 <em>&#039;green&#039;</em>    的值在两个数组中是不同的。但因为只检查键名，因此还是匹配。返回的值只是    <span class="parameter" style="color:#2EACF9">array1</span> 中的。   </p>   <p class="para">   在 <em>key =&gt; value</em> 对中的两个键名仅在    <em>(string) $key1 === (string) $key2 </em>    时被认为相等。换句话说，执行的是严格类型检查，因此字符串的表达必须完全一样。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-intersect-key-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link array_diff()} - 计算数组的差集</span></li>     <li class="member"><span class="function">{@link array_udiff()} - 用回调函数比较数据来计算数组的差集</span></li>     <li class="member"><span class="function">{@link array_diff_assoc()} - 带索引检查计算数组的差集</span></li>     <li class="member"><span class="function">{@link array_diff_uassoc()} - 用用户提供的回调函数做索引检查来计算数组的差集</span></li>     <li class="member"><span class="function">{@link array_udiff_assoc()} - 带索引检查计算数组的差集，用回调函数比较数据</span></li>     <li class="member"><span class="function">{@link array_udiff_uassoc()} - 带索引检查计算数组的差集，用回调函数比较数据和索引</span></li>     <li class="member"><span class="function">{@link array_diff_key()} - 使用键名比较计算数组的差集</span></li>     <li class="member"><span class="function">{@link array_diff_ukey()} - 用回调函数对键名比较计算数组的差集</span></li>     <li class="member"><span class="function">{@link array_intersect()} - 计算数组的交集</span></li>     <li class="member"><span class="function">{@link array_intersect_assoc()} - 带索引检查计算数组的交集</span></li>     <li class="member"><span class="function">{@link array_intersect_uassoc()} - 带索引检查计算数组的交集，用回调函数比较索引</span></li>     <li class="member"><span class="function">{@link array_intersect_ukey()} - 用回调函数比较键名来计算数组的交集</span></li>    </ul>   </span>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.array.php">数组 函数</a></div></div>
 * @return array an associative array containing all the entries of*/
function array_intersect_key(array $array1, array $array2, array $_ = null) { }

/**
*<div id="function.array-intersect-ukey" class="refentry">  <div class="refnamediv">   <h1 class="refname">array_intersect_ukey</h1>   <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7)</p><p class="refpurpose"><span class="refname">array_intersect_ukey</span> &mdash; <span class="dc-title">用回调函数比较键名来计算数组的交集</span></p>   </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-intersect-ukey-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">array</span> <span class="methodname" style="color:#CC7832"><strong>array_intersect_ukey</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">$array1</span></span>    , <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">$array2</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">$...</span></span>    ], <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#2EACF9">$key_compare_func</span></span>    )</div>    <p class="para rdfs-comment">    <span class="function"><strong style="color:#CC7832">array_intersect_ukey()</strong></span> 返回一个数组，该数组包含了所有出现在    <span class="parameter" style="color:#2EACF9">array1</span> 中并同时出现在所有其它参数数组中的键名的值。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-intersect-ukey-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">array1</span></dt>       <dd>        <p class="para">        Initial array for comparison of the arrays.       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">array2</span></dt>       <dd>        <p class="para">        First array to compare keys against.       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">...</span></dt>       <dd>        <p class="para">        Variable list of array arguments to compare keys against.       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">key_compare_func</span></dt>       <dd>        <p class="para">        在第一个参数小于，等于或大于第二个参数时，该比较函数必须相应地返回一个小于，等于或大于 0 的整数。       </p>       <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525"><span class="type" style="color:#EAB766">int</span> <span class="methodname" style="color:#CC7832"><span class="replaceable">callback</span></span> ( <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#2EACF9">$a</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#2EACF9">$b</span></span> )</div>       </dd>          </dl>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-intersect-ukey-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    Returns the values of <span class="parameter" style="color:#2EACF9">array1</span> whose keys exist    in all the arguments.   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-intersect-ukey-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-6030">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">array_intersect_ukey()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function&nbsp;</span><span style="color: #9876AA">key_compare_func</span><span style="color: #007700">(</span><span style="color: #9876AA">$key1</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$key2</span><span style="color: #007700">)<br />{<br />&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(</span><span style="color: #9876AA">$key1&nbsp;</span><span style="color: #007700">==&nbsp;</span><span style="color: #9876AA">$key2</span><span style="color: #007700">)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;</span><span style="color: #9876AA">0</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;else&nbsp;if&nbsp;(</span><span style="color: #9876AA">$key1&nbsp;</span><span style="color: #007700">&gt;&nbsp;</span><span style="color: #9876AA">$key2</span><span style="color: #007700">)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;</span><span style="color: #9876AA">1</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;else<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;-</span><span style="color: #9876AA">1</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">$array1&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">'blue'&nbsp;&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">1</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'red'&nbsp;&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">2</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'green'&nbsp;&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">3</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'purple'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">4</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$array2&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">'green'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">5</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'blue'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">6</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'yellow'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">7</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'cyan'&nbsp;&nbsp;&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">8</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">array_intersect_ukey</span><span style="color: #007700">(</span><span style="color: #9876AA">$array1</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$array2</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'key_compare_func'</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> array(2) {   [&quot;blue&quot;]=&gt;   int(1)   [&quot;green&quot;]=&gt;   int(3) } </span></div>     </div>    </div>   </span>   <p class="para">    上例中可以看到只有 <em>&#039;blue&#039;</em>    和 <em>&#039;green&#039;</em> 两个键名出现在两个数组中，因此被返回。此外注意    <em>&#039;blue&#039;</em> 和 <em>&#039;green&#039;</em>    的值在两个数组中是不同的。但因为只检查键名，因此还是匹配。返回的值只是    <span class="parameter" style="color:#2EACF9">array1</span> 中的。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-intersect-ukey-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link array_diff()} - 计算数组的差集</span></li>     <li class="member"><span class="function">{@link array_udiff()} - 用回调函数比较数据来计算数组的差集</span></li>     <li class="member"><span class="function">{@link array_diff_assoc()} - 带索引检查计算数组的差集</span></li>     <li class="member"><span class="function">{@link array_diff_uassoc()} - 用用户提供的回调函数做索引检查来计算数组的差集</span></li>     <li class="member"><span class="function">{@link array_udiff_assoc()} - 带索引检查计算数组的差集，用回调函数比较数据</span></li>     <li class="member"><span class="function">{@link array_udiff_uassoc()} - 带索引检查计算数组的差集，用回调函数比较数据和索引</span></li>     <li class="member"><span class="function">{@link array_diff_key()} - 使用键名比较计算数组的差集</span></li>     <li class="member"><span class="function">{@link array_diff_ukey()} - 用回调函数对键名比较计算数组的差集</span></li>     <li class="member"><span class="function">{@link array_intersect()} - 计算数组的交集</span></li>     <li class="member"><span class="function">{@link array_intersect_assoc()} - 带索引检查计算数组的交集</span></li>     <li class="member"><span class="function">{@link array_intersect_uassoc()} - 带索引检查计算数组的交集，用回调函数比较索引</span></li>     <li class="member"><span class="function">{@link array_intersect_key()} - 使用键名比较计算数组的交集</span></li>    </ul>   </span>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.array.php">数组 函数</a></div></div>
 * @return array the values of array1 whose keys exist*/
function array_intersect_ukey(array $array1, array $array2, array $_ = null, $key_compare_func) { }

/**
*<div id="function.array-uintersect" class="refentry">  <div class="refnamediv">   <h1 class="refname">array_uintersect</h1>   <p class="verinfo">(PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">array_uintersect</span> &mdash; <span class="dc-title">计算数组的交集，用回调函数比较数据</span></p>   </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-uintersect-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">array</span> <span class="methodname" style="color:#CC7832"><strong>array_uintersect</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">$array1</span></span>    , <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">$array2</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">$...</span></span>    ], <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#2EACF9">$value_compare_func</span></span>    )</div>    <p class="para rdfs-comment">    <span class="function"><strong style="color:#CC7832">array_uintersect()</strong></span> 返回一个数组，该数组包含了所有在    <span class="parameter" style="color:#2EACF9">array1</span> 中也同时出现在所有其它参数数组中的值。数据比较是用回调函数进行的。    此比较是通过用户提供的回调函数来进行的。如果认为第一个参数小于，等于，或大于第二个参数时必须分别返回一个小于零，等于零，或大于零的整数。   </p>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-uintersect-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">array1</span></dt>       <dd>        <p class="para">        第一个数组。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">array2</span></dt>       <dd>        <p class="para">        第二个数组。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">value_compare_func</span></dt>       <dd>        <p class="para">        在第一个参数小于，等于或大于第二个参数时，该比较函数必须相应地返回一个小于，等于或大于 0 的整数。       </p>       <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525"><span class="type" style="color:#EAB766">int</span> <span class="methodname" style="color:#CC7832"><span class="replaceable">callback</span></span> ( <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#2EACF9">$a</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#2EACF9">$b</span></span> )</div>       </dd>          </dl>    </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-uintersect-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    Returns an array containing all the values of <span class="parameter" style="color:#2EACF9">array1</span>    that are present in all the arguments.   </p>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-uintersect-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-6071">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">array_uintersect()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$array1&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">"a"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"green"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"b"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"brown"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"c"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"blue"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"red"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$array2&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">"a"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"GREEN"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"B"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"brown"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"yellow"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"red"</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">array_uintersect</span><span style="color: #007700">(</span><span style="color: #9876AA">$array1</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$array2</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"strcasecmp"</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Array (     [a] =&gt; green     [b] =&gt; brown     [0] =&gt; red ) </span></div>     </div>    </div>   </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-uintersect-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link array_intersect()} - 计算数组的交集</span></li>     <li class="member"><span class="function">{@link array_intersect_assoc()} - 带索引检查计算数组的交集</span></li>     <li class="member"><span class="function">{@link array_uintersect_assoc()} - 带索引检查计算数组的交集，用回调函数比较数据</span></li>     <li class="member"><span class="function">{@link array_uintersect_uassoc()} - 带索引检查计算数组的交集，用单独的回调函数比较数据和索引</span></li>    </ul>   </span>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.array.php">数组 函数</a></div></div>
 * @return array an array containing all the values of array1*/
function array_uintersect(array $array1, array $array2, array $_ = null, $data_compare_func) { }

/**
*<div id="function.array-intersect-assoc" class="refentry">  <div class="refnamediv">   <h1 class="refname">array_intersect_assoc</h1>   <p class="verinfo">(PHP 4 &gt;= 4.3.0, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">array_intersect_assoc</span> &mdash; <span class="dc-title">带索引检查计算数组的交集</span></p>   </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-intersect-assoc-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">array</span> <span class="methodname" style="color:#CC7832"><strong>array_intersect_assoc</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">$array1</span></span>    , <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">$array2</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">$...</span></span>   ] )</div>    <p class="simpara">    <span class="function"><strong style="color:#CC7832">array_intersect_assoc()</strong></span> 返回一个数组，该数组包含了所有在    <span class="parameter" style="color:#2EACF9">array1</span> 中也同时出现在所有其它参数数组中的值。注意和    <span class="function">{@link array_intersect()}</span> 不同的是键名也用于比较。   </p>   </div>      <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-intersect-assoc-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">array1</span></dt>       <dd>        <p class="para">        要检查的主值。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">array2</span></dt>       <dd>        <p class="para">        要比较的数组。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">...</span></dt>       <dd>        <p class="para">        要对比的数组变量的列表。       </p>      </dd>          </dl>    </span>  </div>       <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-intersect-assoc-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">     返回数组，该数组包含了所有在    <span class="parameter" style="color:#2EACF9">array1</span> 中也同时出现在所有其它参数数组中的值。   </p>  </div>     <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-intersect-assoc-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-6027">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">array_intersect_assoc()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$array1&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">"a"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"green"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"b"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"brown"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"c"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"blue"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"red"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$array2&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">"a"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"green"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"b"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"yellow"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"blue"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"red"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$result_array&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">array_intersect_assoc</span><span style="color: #007700">(</span><span style="color: #9876AA">$array1</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$array2</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$result_array</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Array (     [a] =&gt; green ) </span></div>     </div>    </div>   </span>   <p class="simpara">    上面例子中可以看到只有键值对 <em>&quot;a&quot; =&gt;    &quot;green&quot;</em> 在两个数组中都存在从而被返回。值    <em>&quot;red&quot;</em> 没有被返回是因为在    <var class="varname"><var class="varname">$array1</var></var> 中它的键名是 <em>0</em>    而在 <var class="varname"><var class="varname">$array2</var></var> 中 <em>&quot;red&quot;</em>    的键名是 <em>1</em>，键 <em>&quot;b&quot;</em> 没有返回的原因是它的值和其他数组不同。   </p>   <p class="simpara">     键值对 <em>key =&gt; value</em>    中的两个值仅在 <em>(string) $elem1 === (string)    $elem2 </em> 时被认为相等。也就是说使用了严格检查，字符串的表达必须相同。       </p>  </div>     <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-intersect-assoc-seealso">   <h3 class="title">参见</h3>   <ul class="simplelist">    <li class="member"><span class="function">{@link array_intersect()} - 计算数组的交集</span></li>    <li class="member"><span class="function">{@link array_uintersect_assoc()} - 带索引检查计算数组的交集，用回调函数比较数据</span></li>    <li class="member"><span class="function">{@link array_intersect_uassoc()} - 带索引检查计算数组的交集，用回调函数比较索引</span></li>    <li class="member"><span class="function">{@link array_uintersect_uassoc()} - 带索引检查计算数组的交集，用单独的回调函数比较数据和索引</span></li>    <li class="member"><span class="function">{@link array_diff()} - 计算数组的差集</span></li>    <li class="member"><span class="function">{@link array_diff_assoc()} - 带索引检查计算数组的差集</span></li>   </ul>  </div>    <div class="up"><a href="http://php.net/manual/zh/ref.array.php">数组 函数</a></div></div>
 * @return array an associative array containing all the values in*/
function array_intersect_assoc(array $array1, array $array2, array $_ = null) { }

/**
*<div id="function.array-uintersect-assoc" class="refentry">  <div class="refnamediv">   <h1 class="refname">array_uintersect_assoc</h1>   <p class="verinfo">(PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">array_uintersect_assoc</span> &mdash; <span class="dc-title">带索引检查计算数组的交集，用回调函数比较数据</span></p>   </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-uintersect-assoc-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">array</span> <span class="methodname" style="color:#CC7832"><strong>array_uintersect_assoc</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">$array1</span></span>    , <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">$array2</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">$...</span></span>    ], <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#2EACF9">$value_compare_func</span></span>    )</div>    <p class="para rdfs-comment">    此比较是通过用户提供的回调函数来进行的。如果认为第一个参数小于，等于，或大于第二个参数时必须分别返回一个小于零，等于零，或大于零的整数。   </p>   <p class="para">    注意和    <span class="function">{@link array_uintersect()}</span> 不同的是键名也要比较。数据是用回调函数比较的。   </p>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-uintersect-assoc-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">array1</span></dt>       <dd>        <p class="para">        第一个数组。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">array2</span></dt>       <dd>        <p class="para">        第二个数组。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">value_compare_func</span></dt>       <dd>        <p class="para">        在第一个参数小于，等于或大于第二个参数时，该比较函数必须相应地返回一个小于，等于或大于 0 的整数。       </p>       <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525"><span class="type" style="color:#EAB766">int</span> <span class="methodname" style="color:#CC7832"><span class="replaceable">callback</span></span> ( <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#2EACF9">$a</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#2EACF9">$b</span></span> )</div>       </dd>          </dl>    </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-uintersect-assoc-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">     返回一个数组，该数组包含了所有在    <span class="parameter" style="color:#2EACF9">array1</span> 中也同时出现在所有其它参数数组中的值。   </p>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-uintersect-assoc-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-6069">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">array_uintersect_assoc()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$array1&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">"a"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"green"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"b"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"brown"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"c"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"blue"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"red"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$array2&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">"a"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"GREEN"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"B"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"brown"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"yellow"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"red"</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">array_uintersect_assoc</span><span style="color: #007700">(</span><span style="color: #9876AA">$array1</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$array2</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"strcasecmp"</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Array (     [a] =&gt; green ) </span></div>     </div>    </div>   </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-uintersect-assoc-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link array_uintersect()} - 计算数组的交集，用回调函数比较数据</span></li>     <li class="member"><span class="function">{@link array_intersect_assoc()} - 带索引检查计算数组的交集</span></li>     <li class="member"><span class="function">{@link array_intersect_uassoc()} - 带索引检查计算数组的交集，用回调函数比较索引</span></li>     <li class="member"><span class="function">{@link array_uintersect_uassoc()} - 带索引检查计算数组的交集，用单独的回调函数比较数据和索引</span></li>    </ul>   </span>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.array.php">数组 函数</a></div></div>
 * @return array an array containing all the values of*/
function array_uintersect_assoc(array $array1, array $array2, array $_ = null, $data_compare_func) { }

/**
*<div id="function.array-intersect-uassoc" class="refentry">  <div class="refnamediv">   <h1 class="refname">array_intersect_uassoc</h1>   <p class="verinfo">(PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">array_intersect_uassoc</span> &mdash; <span class="dc-title">带索引检查计算数组的交集，用回调函数比较索引</span></p>   </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-intersect-uassoc-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">array</span> <span class="methodname" style="color:#CC7832"><strong>array_intersect_uassoc</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">$array1</span></span>    , <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">$array2</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">$...</span></span>    ], <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#2EACF9">$key_compare_func</span></span>    )</div>    <p class="para rdfs-comment">    <span class="function"><strong style="color:#CC7832">array_intersect_uassoc()</strong></span> 返回一个数组，该数组包含了所有在    <span class="parameter" style="color:#2EACF9">array1</span> 中也同时出现在所有其它参数数组中的值。注意和    <span class="function">{@link array_intersect()}</span> 不同的是键名也用于比较。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-intersect-uassoc-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">array1</span></dt>       <dd>        <p class="para">        Initial array for comparison of the arrays.       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">array2</span></dt>       <dd>        <p class="para">        First array to compare keys against.       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">...</span></dt>       <dd>        <p class="para">        Variable list of array arguments to compare values against.       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">key_compare_func</span></dt>       <dd>        <p class="para">        在第一个参数小于，等于或大于第二个参数时，该比较函数必须相应地返回一个小于，等于或大于 0 的整数。       </p>       <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525"><span class="type" style="color:#EAB766">int</span> <span class="methodname" style="color:#CC7832"><span class="replaceable">callback</span></span> ( <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#2EACF9">$a</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#2EACF9">$b</span></span> )</div>       </dd>          </dl>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-intersect-uassoc-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    Returns the values of <span class="parameter" style="color:#2EACF9">array1</span> whose values exist    in all of the arguments.   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-intersect-uassoc-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-6029">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">array_intersect_uassoc()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$array1&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">"a"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"green"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"b"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"brown"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"c"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"blue"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"red"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$array2&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">"a"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"GREEN"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"B"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"brown"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"yellow"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"red"</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">array_intersect_uassoc</span><span style="color: #007700">(</span><span style="color: #9876AA">$array1</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$array2</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"strcasecmp"</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Array (     [b] =&gt; brown ) </span></div>     </div>    </div>   </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-intersect-uassoc-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link array_intersect()} - 计算数组的交集</span></li>     <li class="member"><span class="function">{@link array_intersect_assoc()} - 带索引检查计算数组的交集</span></li>     <li class="member"><span class="function">{@link array_uintersect_assoc()} - 带索引检查计算数组的交集，用回调函数比较数据</span></li>     <li class="member"><span class="function">{@link array_uintersect_uassoc()} - 带索引检查计算数组的交集，用单独的回调函数比较数据和索引</span></li>     <li class="member"><span class="function">{@link array_intersect_key()} - 使用键名比较计算数组的交集</span></li>     <li class="member"><span class="function">{@link array_intersect_ukey()} - 用回调函数比较键名来计算数组的交集</span></li>    </ul>   </span>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.array.php">数组 函数</a></div></div>
 * @return array the values of array1 whose values exist*/
function array_intersect_uassoc(array $array1, array $array2, array $_ = null, $key_compare_func) { }

/**
*<div id="function.array-uintersect-uassoc" class="refentry">  <div class="refnamediv">   <h1 class="refname">array_uintersect_uassoc</h1>   <p class="verinfo">(PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">array_uintersect_uassoc</span> &mdash; <span class="dc-title">带索引检查计算数组的交集，用单独的回调函数比较数据和索引</span></p>   </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-uintersect-uassoc-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">array</span> <span class="methodname" style="color:#CC7832"><strong>array_uintersect_uassoc</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">$array1</span></span>    , <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">$array2</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">$...</span></span>    ], <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#2EACF9">$value_compare_func</span></span>    , <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#2EACF9">$key_compare_func</span></span>    )</div>    <p class="para rdfs-comment">   通过额外的索引检查、回调函数比较数据和索引来返回多个数组的交集。   </p>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-uintersect-uassoc-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">array1</span></dt>       <dd>        <p class="para">        第一个数组。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">array2</span></dt>       <dd>        <p class="para">        第二个数组。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">value_compare_func</span></dt>       <dd>        <p class="para">        在第一个参数小于，等于或大于第二个参数时，该比较函数必须相应地返回一个小于，等于或大于 0 的整数。       </p>       <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525"><span class="type" style="color:#EAB766">int</span> <span class="methodname" style="color:#CC7832"><span class="replaceable">callback</span></span> ( <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#2EACF9">$a</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#2EACF9">$b</span></span> )</div>       </dd>                 <dt> <span class="parameter" style="color:#2EACF9">key_compare_func</span></dt>       <dd>        <p class="para">        键名比较的回调函数。       </p>      </dd>          </dl>    </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-uintersect-uassoc-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">     返回一个数组，该数组包含了所有在    <span class="parameter" style="color:#2EACF9">array1</span> 中也同时出现在所有其它参数数组中的值。   </p>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-uintersect-uassoc-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-6070">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">array_uintersect_uassoc()</strong></span>  例子</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$array1&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">"a"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"green"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"b"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"brown"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"c"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"blue"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"red"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$array2&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">"a"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"GREEN"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"B"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"brown"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"yellow"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"red"</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">array_uintersect_uassoc</span><span style="color: #007700">(</span><span style="color: #9876AA">$array1</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$array2</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"strcasecmp"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"strcasecmp"</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Array (     [a] =&gt; green     [b] =&gt; brown ) </span></div>     </div>    </div>   </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-uintersect-uassoc-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link array_uintersect()} - 计算数组的交集，用回调函数比较数据</span></li>     <li class="member"><span class="function">{@link array_intersect_assoc()} - 带索引检查计算数组的交集</span></li>     <li class="member"><span class="function">{@link array_intersect_uassoc()} - 带索引检查计算数组的交集，用回调函数比较索引</span></li>     <li class="member"><span class="function">{@link array_uintersect_assoc()} - 带索引检查计算数组的交集，用回调函数比较数据</span></li>    </ul>   </span>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.array.php">数组 函数</a></div></div>
 * @return array an array containing all the values of*/
function array_uintersect_uassoc(array $array1, array $array2, array $_ = null, $data_compare_func, $key_compare_func) { }

/**
*<div id="function.array-diff" class="refentry">    <div class="refnamediv">     <h1 class="refname">array_diff</h1>     <p class="verinfo">(PHP 4 &gt;= 4.0.1, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">array_diff</span> &mdash; <span class="dc-title">计算数组的差集</span></p>     </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-diff-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">array</span> <span class="methodname" style="color:#CC7832"><strong>array_diff</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">$array1</span></span>    , <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">$array2</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">$...</span></span>   ] )</div>    <p class="para rdfs-comment">    对比 <span class="parameter" style="color:#2EACF9">array1</span> 和其他一个或者多个数组，返回在      <span class="parameter" style="color:#2EACF9">array1</span> 中但是不在其他 array 里的值。   </p>  </div>      <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-diff-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">array1</span></dt>       <dd>        <p class="para">        要被对比的数组       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">array2</span></dt>       <dd>        <p class="para">        和这个数组进行比较       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">...</span></dt>       <dd>        <p class="para">        更多相比较的数组       </p>      </dd>          </dl>    </span>  </div>          <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-diff-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">     返回一个数组，该数组包括了所有在      <span class="parameter" style="color:#2EACF9">array1</span> 中但是不在任何其它参数数组中的值。注意键名保留不变。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-diff-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="function.array-change-key-case.example-1">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">array_diff()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$array1&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">"a"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"green"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"red"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"blue"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"red"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$array2&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">"b"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"green"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"yellow"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"red"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$result&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">array_diff</span><span style="color: #007700">(</span><span style="color: #9876AA">$array1</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$array2</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$result</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>      在 <var class="varname"><var class="varname">$array1</var></var> 中多次出现的值一样处理，输出结果为：     </p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Array (     [1] =&gt; blue ) </span></div>     </div>    </div>   </span>  </div>          <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.array-diff-notes">   <h3 class="title">注释</h3>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>:     <p class="para">      两个单元仅在 <em>(string) $elem1 === (string) $elem2</em>       时被认为是相同的。也就是说，当字符串的表达是一样的时候。           </p>   </p></blockquote>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>:     <p class="para">     注意本函数只检查了多维数组中的一维。当然可以用       <em>array_diff($array1[0], $array2[0]);</em>       检查更深的维度。    </p>   </p></blockquote>  </div>          <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-diff-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link array_diff_assoc()} - 带索引检查计算数组的差集</span></li>     <li class="member"><span class="function">{@link array_intersect()} - 计算数组的交集</span></li>     <li class="member"><span class="function">{@link array_intersect_assoc()} - 带索引检查计算数组的交集</span></li>    </ul>   </span>  </div>        <div class="up"><a href="http://php.net/manual/zh/ref.array.php">数组 函数</a></div></div>
 * @return array an array containing all the entries from*/
function array_diff(array $array1, array $array2, array $_ = null) { }

/**
*<div id="function.array-diff-key" class="refentry">    <div class="refnamediv">     <h1 class="refname">array_diff_key</h1>     <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7)</p><p class="refpurpose"><span class="refname">array_diff_key</span> &mdash; <span class="dc-title">使用键名比较计算数组的差集</span></p>     </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-diff-key-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">array</span> <span class="methodname" style="color:#CC7832"><strong>array_diff_key</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">$array1</span></span>    , <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">$array2</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">$...</span></span>   ] )</div>      <p class="para rdfs-comment">      根据 <span class="parameter" style="color:#2EACF9">array1</span> 中的键名和 <span class="parameter" style="color:#2EACF9">array2</span> 进行比较，返回不同键名的项。      本函数和      <span class="function">{@link array_diff()}</span> 相同只除了比较是根据键名而不是值来进行的。     </p>    </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-diff-key-parameters">   <h3 class="title">参数</h3>   <span>    <dl>             <dt> <span class="parameter" style="color:#2EACF9">array1</span></dt>       <dd>        <p class="para">        从这个数组进行比较       </p>      </dd>                  <dt> <span class="parameter" style="color:#2EACF9">array2</span></dt>       <dd>        <p class="para">        针对此数组进行比较       </p>      </dd>                  <dt> <span class="parameter" style="color:#2EACF9">...</span></dt>       <dd>        <p class="para">        更多比较数组       </p>      </dd>           </dl>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-diff-key-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    <span class="function"><strong style="color:#CC7832">array_diff_key()</strong></span> 返回一个数组，该数组包括了所有出现在      <span class="parameter" style="color:#2EACF9">array1</span>      中但是未出现在任何其它参数数组中的键名的值。   </p>  </div>      <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-diff-key-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-6016">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">array_diff_key()</strong></span> 例</strong></p>     <div class="example-contents"><p>       在 <em>key =&gt; value</em> 对中的两个键名仅在      <em>(string) $key1 === (string) $key2 </em>      时被认为相等。换句话说，执行的是严格类型检查，因此字符串的表达必须完全一样。     </p></div>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$array1&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">'blue'&nbsp;&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">1</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'red'&nbsp;&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">2</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'green'&nbsp;&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">3</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'purple'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">4</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$array2&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">'green'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">5</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'blue'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">6</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'yellow'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">7</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'cyan'&nbsp;&nbsp;&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">8</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">array_diff_key</span><span style="color: #007700">(</span><span style="color: #9876AA">$array1</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$array2</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> array(2) {   [&quot;red&quot;]=&gt;   int(2)   [&quot;purple&quot;]=&gt;   int(4) } </span></div>     </div>    </div>   </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.array-diff-key-notes">   <h3 class="title">注释</h3>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>:     <p class="para">       注意本函数只检查了多维数组中的一维。当然，可以用       <em>array_diff_key($array1[0], $array2[0]);</em>       来检查更深的维度。    </p>   </p></blockquote>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-diff-key-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link array_diff()} - 计算数组的差集</span></li>     <li class="member"><span class="function">{@link array_udiff()} - 用回调函数比较数据来计算数组的差集</span></li>     <li class="member"><span class="function">{@link array_diff_assoc()} - 带索引检查计算数组的差集</span></li>     <li class="member"><span class="function">{@link array_diff_uassoc()} - 用用户提供的回调函数做索引检查来计算数组的差集</span></li>     <li class="member"><span class="function">{@link array_udiff_assoc()} - 带索引检查计算数组的差集，用回调函数比较数据</span></li>     <li class="member"><span class="function">{@link array_udiff_uassoc()} - 带索引检查计算数组的差集，用回调函数比较数据和索引</span></li>     <li class="member"><span class="function">{@link array_diff_ukey()} - 用回调函数对键名比较计算数组的差集</span></li>     <li class="member"><span class="function">{@link array_intersect()} - 计算数组的交集</span></li>     <li class="member"><span class="function">{@link array_intersect_assoc()} - 带索引检查计算数组的交集</span></li>     <li class="member"><span class="function">{@link array_intersect_uassoc()} - 带索引检查计算数组的交集，用回调函数比较索引</span></li>     <li class="member"><span class="function">{@link array_intersect_key()} - 使用键名比较计算数组的交集</span></li>     <li class="member"><span class="function">{@link array_intersect_ukey()} - 用回调函数比较键名来计算数组的交集</span></li>    </ul>   </span>  </div>    <div class="up"><a href="http://php.net/manual/zh/ref.array.php">数组 函数</a></div></div>
 * @return array an array containing all the entries from*/
function array_diff_key(array $array1, array $array2, array $_ = null) { }

/**
*<div id="function.array-diff-ukey" class="refentry">  <div class="refnamediv">   <h1 class="refname">array_diff_ukey</h1>   <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7)</p><p class="refpurpose"><span class="refname">array_diff_ukey</span> &mdash; <span class="dc-title">用回调函数对键名比较计算数组的差集</span></p>   </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-diff-ukey-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">array</span> <span class="methodname" style="color:#CC7832"><strong>array_diff_ukey</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">$array1</span></span>    , <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">$array2</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">$...</span></span>    ], <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#2EACF9">$key_compare_func</span></span>    )</div>    <p class="para rdfs-comment">    <span class="function"><strong style="color:#CC7832">array_diff_ukey()</strong></span> 返回一个数组，该数组包括了所有出现在    <span class="parameter" style="color:#2EACF9">array1</span>    中但是未出现在任何其它参数数组中的键名的值。注意关联关系保留不变。本函数和    <span class="function">{@link array_diff()}</span> 相同只除了比较是根据键名而不是值来进行的。   </p>   <p class="para">    此比较是通过用户提供的回调函数来进行的。如果认为第一个参数小于，等于，或大于第二个参数时必须分别返回一个小于零，等于零，或大于零的整数。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-diff-ukey-parameters">   <h3 class="title">参数</h3>   <span>    <dl>             <dt> <span class="parameter" style="color:#2EACF9">array1</span></dt>       <dd>        <p class="para">        The array to compare from       </p>      </dd>                  <dt> <span class="parameter" style="color:#2EACF9">array2</span></dt>       <dd>        <p class="para">        An array to compare against       </p>      </dd>                  <dt> <span class="parameter" style="color:#2EACF9">...</span></dt>       <dd>        <p class="para">        More arrays to compare against       </p>      </dd>                  <dt> <span class="parameter" style="color:#2EACF9">key_compare_func</span></dt>       <dd>        <p class="para">        在第一个参数小于，等于或大于第二个参数时，该比较函数必须相应地返回一个小于，等于或大于 0 的整数。       </p>       <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525"><span class="type" style="color:#EAB766">int</span> <span class="methodname" style="color:#CC7832"><span class="replaceable">callback</span></span> ( <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#2EACF9">$a</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#2EACF9">$b</span></span> )</div>       </dd>           </dl>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-diff-ukey-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    Returns an <span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span> containing all the entries from    <span class="parameter" style="color:#2EACF9">array1</span> that are not present in any of the other arrays.   </p>  </div>       <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-diff-ukey-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-6018">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">array_diff_ukey()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function&nbsp;</span><span style="color: #9876AA">key_compare_func</span><span style="color: #007700">(</span><span style="color: #9876AA">$key1</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$key2</span><span style="color: #007700">)<br />{<br />&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(</span><span style="color: #9876AA">$key1&nbsp;</span><span style="color: #007700">==&nbsp;</span><span style="color: #9876AA">$key2</span><span style="color: #007700">)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;</span><span style="color: #9876AA">0</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;else&nbsp;if&nbsp;(</span><span style="color: #9876AA">$key1&nbsp;</span><span style="color: #007700">&gt;&nbsp;</span><span style="color: #9876AA">$key2</span><span style="color: #007700">)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;</span><span style="color: #9876AA">1</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;else<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;-</span><span style="color: #9876AA">1</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">$array1&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">'blue'&nbsp;&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">1</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'red'&nbsp;&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">2</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'green'&nbsp;&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">3</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'purple'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">4</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$array2&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">'green'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">5</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'blue'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">6</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'yellow'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">7</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'cyan'&nbsp;&nbsp;&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">8</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">array_diff_ukey</span><span style="color: #007700">(</span><span style="color: #9876AA">$array1</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$array2</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'key_compare_func'</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> array(2) {   [&quot;red&quot;]=&gt;   int(2)   [&quot;purple&quot;]=&gt;   int(4) } </span></div>     </div>    </div>   </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.array-diff-ukey-notes">   <h3 class="title">注释</h3>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>:     <p class="para">     注意本函数只检查了多维数组中的一维。当然，可以用     <em>array_diff_ukey($array1[0], $array2[0], &#039;callback_func&#039;);</em>     来检查更深的维度。    </p>   </p></blockquote>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-diff-ukey-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link array_diff()} - 计算数组的差集</span></li>     <li class="member"><span class="function">{@link array_udiff()} - 用回调函数比较数据来计算数组的差集</span></li>     <li class="member"><span class="function">{@link array_diff_assoc()} - 带索引检查计算数组的差集</span></li>     <li class="member"><span class="function">{@link array_diff_uassoc()} - 用用户提供的回调函数做索引检查来计算数组的差集</span></li>     <li class="member"><span class="function">{@link array_udiff_assoc()} - 带索引检查计算数组的差集，用回调函数比较数据</span></li>     <li class="member"><span class="function">{@link array_udiff_uassoc()} - 带索引检查计算数组的差集，用回调函数比较数据和索引</span></li>     <li class="member"><span class="function">{@link array_diff_key()} - 使用键名比较计算数组的差集</span></li>     <li class="member"><span class="function">{@link array_intersect()} - 计算数组的交集</span></li>     <li class="member"><span class="function">{@link array_intersect_assoc()} - 带索引检查计算数组的交集</span></li>     <li class="member"><span class="function">{@link array_intersect_uassoc()} - 带索引检查计算数组的交集，用回调函数比较索引</span></li>     <li class="member"><span class="function">{@link array_intersect_key()} - 使用键名比较计算数组的交集</span></li>     <li class="member"><span class="function">{@link array_intersect_ukey()} - 用回调函数比较键名来计算数组的交集</span></li>    </ul>   </span>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.array.php">数组 函数</a></div></div>
 * @return array an array containing all the entries from*/
function array_diff_ukey(array $array1, array $array2, array $_ = null, $key_compare_func) { }

/**
*<div id="function.array-udiff" class="refentry">  <div class="refnamediv">   <h1 class="refname">array_udiff</h1>   <p class="verinfo">(PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">array_udiff</span> &mdash; <span class="dc-title">用回调函数比较数据来计算数组的差集</span></p>   </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-udiff-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">array</span> <span class="methodname" style="color:#CC7832"><strong>array_udiff</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">$array1</span></span>    , <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">$array2</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">$...</span></span>    ], <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#2EACF9">$value_compare_func</span></span>    )</div>    <p class="para rdfs-comment">    使用回调函数比较数据，计算数组的不同之处。和 <span class="function">{@link array_diff()}</span> 不同的是，前者使用内置函数进行数据比较。   </p>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-udiff-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">array1</span></dt>       <dd>        <p class="para">        第一个数组。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">array2</span></dt>       <dd>        <p class="para">        第二个数组。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">value_compare_func</span></dt>       <dd>        <p class="para">        回调对照函数。       </p>       <p class="para">        在第一个参数小于，等于或大于第二个参数时，该比较函数必须相应地返回一个小于，等于或大于 0 的整数。       </p>       <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525"><span class="type" style="color:#EAB766">int</span> <span class="methodname" style="color:#CC7832"><span class="replaceable">callback</span></span> ( <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#2EACF9">$a</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#2EACF9">$b</span></span> )</div>       </dd>          </dl>    </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-udiff-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回 <span class="parameter" style="color:#2EACF9">array1</span> 里没有出现在其他参数里的所有值。   </p>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-udiff-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-6067">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">array_udiff()</strong></span> 使用 stdClass 对象的例子</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">//&nbsp;Arrays&nbsp;to&nbsp;compare<br /></span><span style="color: #9876AA">$array1&nbsp;</span><span style="color: #007700">=&nbsp;array(new&nbsp;</span><span style="color: #9876AA">stdclass</span><span style="color: #007700">,&nbsp;new&nbsp;</span><span style="color: #9876AA">stdclass</span><span style="color: #007700">,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;</span><span style="color: #9876AA">stdclass</span><span style="color: #007700">,&nbsp;new&nbsp;</span><span style="color: #9876AA">stdclass</span><span style="color: #007700">,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br /><br /></span><span style="color: #9876AA">$array2&nbsp;</span><span style="color: #007700">=&nbsp;array(<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;</span><span style="color: #9876AA">stdclass</span><span style="color: #007700">,&nbsp;new&nbsp;</span><span style="color: #9876AA">stdclass</span><span style="color: #007700">,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br /><br /></span><span style="color: #FF8000">//&nbsp;Set&nbsp;some&nbsp;properties&nbsp;for&nbsp;each&nbsp;object<br /></span><span style="color: #9876AA">$array1</span><span style="color: #007700">[</span><span style="color: #9876AA">0</span><span style="color: #007700">]-&gt;</span><span style="color: #9876AA">width&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">11</span><span style="color: #007700">;&nbsp;</span><span style="color: #9876AA">$array1</span><span style="color: #007700">[</span><span style="color: #9876AA">0</span><span style="color: #007700">]-&gt;</span><span style="color: #9876AA">height&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">3</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$array1</span><span style="color: #007700">[</span><span style="color: #9876AA">1</span><span style="color: #007700">]-&gt;</span><span style="color: #9876AA">width&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">7</span><span style="color: #007700">;&nbsp;&nbsp;</span><span style="color: #9876AA">$array1</span><span style="color: #007700">[</span><span style="color: #9876AA">1</span><span style="color: #007700">]-&gt;</span><span style="color: #9876AA">height&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">1</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$array1</span><span style="color: #007700">[</span><span style="color: #9876AA">2</span><span style="color: #007700">]-&gt;</span><span style="color: #9876AA">width&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">2</span><span style="color: #007700">;&nbsp;&nbsp;</span><span style="color: #9876AA">$array1</span><span style="color: #007700">[</span><span style="color: #9876AA">2</span><span style="color: #007700">]-&gt;</span><span style="color: #9876AA">height&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">9</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$array1</span><span style="color: #007700">[</span><span style="color: #9876AA">3</span><span style="color: #007700">]-&gt;</span><span style="color: #9876AA">width&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">5</span><span style="color: #007700">;&nbsp;&nbsp;</span><span style="color: #9876AA">$array1</span><span style="color: #007700">[</span><span style="color: #9876AA">3</span><span style="color: #007700">]-&gt;</span><span style="color: #9876AA">height&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">7</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">$array2</span><span style="color: #007700">[</span><span style="color: #9876AA">0</span><span style="color: #007700">]-&gt;</span><span style="color: #9876AA">width&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">7</span><span style="color: #007700">;&nbsp;&nbsp;</span><span style="color: #9876AA">$array2</span><span style="color: #007700">[</span><span style="color: #9876AA">0</span><span style="color: #007700">]-&gt;</span><span style="color: #9876AA">height&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">5</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$array2</span><span style="color: #007700">[</span><span style="color: #9876AA">1</span><span style="color: #007700">]-&gt;</span><span style="color: #9876AA">width&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">9</span><span style="color: #007700">;&nbsp;&nbsp;</span><span style="color: #9876AA">$array2</span><span style="color: #007700">[</span><span style="color: #9876AA">1</span><span style="color: #007700">]-&gt;</span><span style="color: #9876AA">height&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">2</span><span style="color: #007700">;<br /><br />function&nbsp;</span><span style="color: #9876AA">compare_by_area</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$b</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$areaA&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">$a</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">width&nbsp;</span><span style="color: #007700">*&nbsp;</span><span style="color: #9876AA">$a</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">height</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$areaB&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">$b</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">width&nbsp;</span><span style="color: #007700">*&nbsp;</span><span style="color: #9876AA">$b</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">height</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(</span><span style="color: #9876AA">$areaA&nbsp;</span><span style="color: #007700">&lt;&nbsp;</span><span style="color: #9876AA">$areaB</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;-</span><span style="color: #9876AA">1</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;elseif&nbsp;(</span><span style="color: #9876AA">$areaA&nbsp;</span><span style="color: #007700">&gt;&nbsp;</span><span style="color: #9876AA">$areaB</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;</span><span style="color: #9876AA">1</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;</span><span style="color: #9876AA">0</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;}<br />}<br /><br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">array_udiff</span><span style="color: #007700">(</span><span style="color: #9876AA">$array1</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$array2</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'compare_by_area'</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Array (     [0] =&gt; stdClass Object         (             [width] =&gt; 11             [height] =&gt; 3         )      [1] =&gt; stdClass Object         (             [width] =&gt; 7             [height] =&gt; 1         )  ) </span></div>     </div>    </div>   </span>   <p class="para">    <div class="example" id="example-6068">     <p><strong>Example #2 <span class="function"><strong style="color:#CC7832">array_udiff()</strong></span> 使用 DateTime 对象的例子</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">class&nbsp;</span><span style="color: #9876AA">MyCalendar&nbsp;</span><span style="color: #007700">{<br />&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;</span><span style="color: #9876AA">$free&nbsp;</span><span style="color: #007700">=&nbsp;array();<br />&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;</span><span style="color: #9876AA">$booked&nbsp;</span><span style="color: #007700">=&nbsp;array();<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;function&nbsp;</span><span style="color: #9876AA">__construct</span><span style="color: #007700">(</span><span style="color: #9876AA">$week&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'now'</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$start&nbsp;</span><span style="color: #007700">=&nbsp;new&nbsp;</span><span style="color: #9876AA">DateTime</span><span style="color: #007700">(</span><span style="color: #9876AA">$week</span><span style="color: #007700">);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$start</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">modify</span><span style="color: #007700">(</span><span style="color: #DD0000">'Monday&nbsp;this&nbsp;week&nbsp;midnight'</span><span style="color: #007700">);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$end&nbsp;</span><span style="color: #007700">=&nbsp;clone&nbsp;</span><span style="color: #9876AA">$start</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$end</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">modify</span><span style="color: #007700">(</span><span style="color: #DD0000">'Friday&nbsp;this&nbsp;week&nbsp;midnight'</span><span style="color: #007700">);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$interval&nbsp;</span><span style="color: #007700">=&nbsp;new&nbsp;</span><span style="color: #9876AA">DateInterval</span><span style="color: #007700">(</span><span style="color: #DD0000">'P1D'</span><span style="color: #007700">);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;foreach&nbsp;(new&nbsp;</span><span style="color: #9876AA">DatePeriod</span><span style="color: #007700">(</span><span style="color: #9876AA">$start</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$interval</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$end</span><span style="color: #007700">)&nbsp;as&nbsp;</span><span style="color: #9876AA">$freeTime</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">free</span><span style="color: #007700">[]&nbsp;=&nbsp;</span><span style="color: #9876AA">$freeTime</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />&nbsp;&nbsp;&nbsp;&nbsp;}<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;function&nbsp;</span><span style="color: #9876AA">bookAppointment</span><span style="color: #007700">(</span><span style="color: #9876AA">DateTime&nbsp;$date</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$note</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">booked</span><span style="color: #007700">[]&nbsp;=&nbsp;array(</span><span style="color: #DD0000">'date'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">$date</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">modify</span><span style="color: #007700">(</span><span style="color: #DD0000">'midnight'</span><span style="color: #007700">),&nbsp;</span><span style="color: #DD0000">'note'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">$note</span><span style="color: #007700">);<br />&nbsp;&nbsp;&nbsp;&nbsp;}<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;function&nbsp;</span><span style="color: #9876AA">checkAvailability</span><span style="color: #007700">()&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;</span><span style="color: #9876AA">array_udiff</span><span style="color: #007700">(</span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">free</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">booked</span><span style="color: #007700">,&nbsp;array(</span><span style="color: #9876AA">$this</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'customCompare'</span><span style="color: #007700">));<br />&nbsp;&nbsp;&nbsp;&nbsp;}<br />&nbsp;&nbsp;&nbsp;&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;function&nbsp;</span><span style="color: #9876AA">customCompare</span><span style="color: #007700">(</span><span style="color: #9876AA">$free</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$booked</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(</span><span style="color: #9876AA">is_array</span><span style="color: #007700">(</span><span style="color: #9876AA">$free</span><span style="color: #007700">))&nbsp;</span><span style="color: #9876AA">$a&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">$free</span><span style="color: #007700">[</span><span style="color: #DD0000">'date'</span><span style="color: #007700">];<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else&nbsp;</span><span style="color: #9876AA">$a&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">$free</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(</span><span style="color: #9876AA">is_array</span><span style="color: #007700">(</span><span style="color: #9876AA">$booked</span><span style="color: #007700">))&nbsp;</span><span style="color: #9876AA">$b&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">$booked</span><span style="color: #007700">[</span><span style="color: #DD0000">'date'</span><span style="color: #007700">];<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else&nbsp;</span><span style="color: #9876AA">$b&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">$booked</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(</span><span style="color: #9876AA">$a&nbsp;</span><span style="color: #007700">==&nbsp;</span><span style="color: #9876AA">$b</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;</span><span style="color: #9876AA">0</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;elseif&nbsp;(</span><span style="color: #9876AA">$a&nbsp;</span><span style="color: #007700">&gt;&nbsp;</span><span style="color: #9876AA">$b</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;</span><span style="color: #9876AA">1</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;-</span><span style="color: #9876AA">1</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />&nbsp;&nbsp;&nbsp;&nbsp;}<br />}<br /><br /></span><span style="color: #FF8000">//&nbsp;Create&nbsp;a&nbsp;calendar&nbsp;for&nbsp;weekly&nbsp;appointments<br /></span><span style="color: #9876AA">$myCalendar&nbsp;</span><span style="color: #007700">=&nbsp;new&nbsp;</span><span style="color: #9876AA">MyCalendar</span><span style="color: #007700">;<br /><br /></span><span style="color: #FF8000">//&nbsp;Book&nbsp;some&nbsp;appointments&nbsp;for&nbsp;this&nbsp;week<br /></span><span style="color: #9876AA">$myCalendar</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">bookAppointment</span><span style="color: #007700">(new&nbsp;</span><span style="color: #9876AA">DateTime</span><span style="color: #007700">(</span><span style="color: #DD0000">'Monday&nbsp;this&nbsp;week'</span><span style="color: #007700">),&nbsp;</span><span style="color: #DD0000">"Cleaning&nbsp;GoogleGuy's&nbsp;apartment."</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$myCalendar</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">bookAppointment</span><span style="color: #007700">(new&nbsp;</span><span style="color: #9876AA">DateTime</span><span style="color: #007700">(</span><span style="color: #DD0000">'Wednesday&nbsp;this&nbsp;week'</span><span style="color: #007700">),&nbsp;</span><span style="color: #DD0000">"Going&nbsp;on&nbsp;a&nbsp;snowboarding&nbsp;trip."</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$myCalendar</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">bookAppointment</span><span style="color: #007700">(new&nbsp;</span><span style="color: #9876AA">DateTime</span><span style="color: #007700">(</span><span style="color: #DD0000">'Friday&nbsp;this&nbsp;week'</span><span style="color: #007700">),&nbsp;</span><span style="color: #DD0000">"Fixing&nbsp;buggy&nbsp;code."</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">//&nbsp;Check&nbsp;availability&nbsp;of&nbsp;days&nbsp;by&nbsp;comparing&nbsp;$booked&nbsp;dates&nbsp;against&nbsp;$free&nbsp;dates<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #DD0000">"I'm&nbsp;available&nbsp;on&nbsp;the&nbsp;following&nbsp;days&nbsp;this&nbsp;week...\n\n"</span><span style="color: #007700">;<br />foreach&nbsp;(</span><span style="color: #9876AA">$myCalendar</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">checkAvailability</span><span style="color: #007700">()&nbsp;as&nbsp;</span><span style="color: #9876AA">$free</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #9876AA">$free</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">format</span><span style="color: #007700">(</span><span style="color: #DD0000">'l'</span><span style="color: #007700">),&nbsp;</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;&nbsp;<br />}<br />echo&nbsp;</span><span style="color: #DD0000">"\n\n"</span><span style="color: #007700">;<br />echo&nbsp;</span><span style="color: #DD0000">"I'm&nbsp;busy&nbsp;on&nbsp;the&nbsp;following&nbsp;days&nbsp;this&nbsp;week...\n\n"</span><span style="color: #007700">;<br />foreach&nbsp;(</span><span style="color: #9876AA">$myCalendar</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">booked&nbsp;</span><span style="color: #007700">as&nbsp;</span><span style="color: #9876AA">$booked</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #9876AA">$booked</span><span style="color: #007700">[</span><span style="color: #DD0000">'date'</span><span style="color: #007700">]-&gt;</span><span style="color: #9876AA">format</span><span style="color: #007700">(</span><span style="color: #DD0000">'l'</span><span style="color: #007700">),&nbsp;</span><span style="color: #DD0000">":&nbsp;"</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$booked</span><span style="color: #007700">[</span><span style="color: #DD0000">'note'</span><span style="color: #007700">],&nbsp;</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;&nbsp;<br />}<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> I&#039;m available on the following days this week...  Tuesday Thursday   I&#039;m busy on the following days this week...  Monday: Cleaning GoogleGuy&#039;s apartment. Wednesday: Going on a snowboarding trip. Friday: Fixing buggy code. </span></div>     </div>    </div>   </p>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.array-udiff-notes">   <h3 class="title">注释</h3>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>:     <span class="simpara">     注意本函数只检查了多维数组中的一维。当然，可以用     <em>array_udiff($array1[0], $array2[0], &quot;data_compare_func&quot;);</em>     来检查更深的维度。    </span>   </p></blockquote>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-udiff-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link array_diff()} - 计算数组的差集</span></li>     <li class="member"><span class="function">{@link array_diff_assoc()} - 带索引检查计算数组的差集</span></li>     <li class="member"><span class="function">{@link array_diff_uassoc()} - 用用户提供的回调函数做索引检查来计算数组的差集</span></li>     <li class="member"><span class="function">{@link array_udiff_assoc()} - 带索引检查计算数组的差集，用回调函数比较数据</span></li>     <li class="member"><span class="function">{@link array_udiff_uassoc()} - 带索引检查计算数组的差集，用回调函数比较数据和索引</span></li>     <li class="member"><span class="function">{@link array_intersect()} - 计算数组的交集</span></li>     <li class="member"><span class="function">{@link array_intersect_assoc()} - 带索引检查计算数组的交集</span></li>     <li class="member"><span class="function">{@link array_uintersect()} - 计算数组的交集，用回调函数比较数据</span></li>     <li class="member"><span class="function">{@link array_uintersect_assoc()} - 带索引检查计算数组的交集，用回调函数比较数据</span></li>     <li class="member"><span class="function">{@link array_uintersect_uassoc()} - 带索引检查计算数组的交集，用单独的回调函数比较数据和索引</span></li>    </ul>   </span>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.array.php">数组 函数</a></div></div>
 * @return array an array containing all the values of array1*/
function array_udiff(array $array1, array $array2, array $_ = null, $data_compare_func) { }

/**
*<div id="function.array-diff-assoc" class="refentry">  <div class="refnamediv">   <h1 class="refname">array_diff_assoc</h1>   <p class="verinfo">(PHP 4 &gt;= 4.3.0, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">array_diff_assoc</span> &mdash; <span class="dc-title">带索引检查计算数组的差集</span></p>   </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-diff-assoc-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">array</span> <span class="methodname" style="color:#CC7832"><strong>array_diff_assoc</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">$array1</span></span>    , <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">$array2</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">$...</span></span>   ] )</div>    <p class="para rdfs-comment">    <span class="function"><strong style="color:#CC7832">array_diff_assoc()</strong></span> 返回一个数组，该数组包括了所有在    <span class="parameter" style="color:#2EACF9">array1</span> 中但是不在任何其它参数数组中的值。注意和    <span class="function">{@link array_diff()}</span> 不同的是键名也用于比较。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-diff-assoc-parameters">   <h3 class="title">参数</h3>   <span>    <dl>             <dt> <span class="parameter" style="color:#2EACF9">array1</span></dt>       <dd>        <p class="para">        从这个数组进行比较       </p>      </dd>                  <dt> <span class="parameter" style="color:#2EACF9">array2</span></dt>       <dd>        <p class="para">        被比较的数组       </p>      </dd>                  <dt> <span class="parameter" style="color:#2EACF9">...</span></dt>       <dd>        <p class="para">        更多被比较的数组       </p>      </dd>           </dl>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-diff-assoc-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    Returns an <span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span> containing all the values from    <span class="parameter" style="color:#2EACF9">array1</span> that are not present in any of the other arrays.   </p>  </div>      <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-diff-assoc-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-6014">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">array_diff_assoc()</strong></span> 例子</strong></p>     <div class="example-contents"><p>    上面的例子中可以看到键值对 <em>&quot;a&quot; =&gt; &quot;green&quot;</em>    在两个数组中都有，因此不在本函数的输出中。与此不同，键值对    <em>0 =&gt; &quot;red&quot;</em> 出现在输出中是因为第二个参数中的    <em>&quot;red&quot;</em> 的键名是 <em>1</em>。     </p></div>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$array1&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">"a"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"green"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"b"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"brown"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"c"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"blue"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"red"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$array2&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">"a"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"green"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"yellow"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"red"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$result&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">array_diff_assoc</span><span style="color: #007700">(</span><span style="color: #9876AA">$array1</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$array2</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$result</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Array (     [b] =&gt; brown     [c] =&gt; blue     [0] =&gt; red ) </span></div>     </div>    </div>   </span>   <p class="para">    <div class="example" id="example-6015">     <p><strong>Example #2 <span class="function"><strong style="color:#CC7832">array_diff_assoc()</strong></span> example</strong></p>     <div class="example-contents"><p>      键值对 <em class="emphasis">key =&gt; value</em>    中的两个值仅在 <em>(string) $elem1 === (string)    $elem2 </em> 时被认为相等。也就是说使用了严格检查，字符串的表达必须相同。     </p></div>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$array1&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #9876AA">0</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">1</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">2</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$array2&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">"00"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"01"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"2"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$result&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">array_diff_assoc</span><span style="color: #007700">(</span><span style="color: #9876AA">$array1</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$array2</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$result</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Array (     [0] =&gt; 0     [1] =&gt; 1     ) </span></div>     </div>    </div>   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.array-diff-assoc-notes">   <h3 class="title">注释</h3>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>:     <span class="simpara">     注意本函数只检查了多维数组中的一维。当然可以用     <em>array_diff_assoc($array1[0], $array2[0]);</em>     检查更深的维度。    </span>   </p></blockquote>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>:     <span class="simpara">     使用更多的键比较相似数组时，确保你传入参数的顺序是正确的。     新的数组应该是在列表里的第一个。    </span>   </p></blockquote>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-diff-assoc-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link array_diff()} - 计算数组的差集</span></li>     <li class="member"><span class="function">{@link array_diff_uassoc()} - 用用户提供的回调函数做索引检查来计算数组的差集</span></li>     <li class="member"><span class="function">{@link array_udiff_assoc()} - 带索引检查计算数组的差集，用回调函数比较数据</span></li>     <li class="member"><span class="function">{@link array_udiff_uassoc()} - 带索引检查计算数组的差集，用回调函数比较数据和索引</span></li>     <li class="member"><span class="function">{@link array_intersect()} - 计算数组的交集</span></li>     <li class="member"><span class="function">{@link array_intersect_assoc()} - 带索引检查计算数组的交集</span></li>    </ul>   </span>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.array.php">数组 函数</a></div></div>
 * @return array an array containing all the values from*/
function array_diff_assoc(array $array1, array $array2, array $_ = null) { }

/**
*<div id="function.array-udiff-assoc" class="refentry">  <div class="refnamediv">   <h1 class="refname">array_udiff_assoc</h1>   <p class="verinfo">(PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">array_udiff_assoc</span> &mdash; <span class="dc-title">带索引检查计算数组的差集，用回调函数比较数据</span></p>   </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-udiff-assoc-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">array</span> <span class="methodname" style="color:#CC7832"><strong>array_udiff_assoc</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">$array1</span></span>    , <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">$array2</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">$...</span></span>    ], <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#2EACF9">$value_compare_func</span></span>    )</div>    <p class="para rdfs-comment">    此比较是通过用户提供的回调函数来进行的。如果认为第一个参数小于，等于，或大于第二个参数时必须分别返回一个小于零，等于零，或大于零的整数。   </p>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>:     <span class="simpara">     注意本函数只检查了多维数组中的一维。当然，可以用     <em>array_udiff_assoc($array1[0], $array2[0], &quot;some_comparison_func&quot;);</em>     来检查更深的维度。    </span>   </p></blockquote>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-udiff-assoc-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">array1</span></dt>       <dd>        <p class="para">        第一个数组。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">array2</span></dt>       <dd>        <p class="para">        第二个数组。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">value_compare_func</span></dt>       <dd>        <p class="para">        在第一个参数小于，等于或大于第二个参数时，该比较函数必须相应地返回一个小于，等于或大于 0 的整数。       </p>       <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525"><span class="type" style="color:#EAB766">int</span> <span class="methodname" style="color:#CC7832"><span class="replaceable">callback</span></span> ( <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#2EACF9">$a</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#2EACF9">$b</span></span> )</div>       </dd>          </dl>    </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-udiff-assoc-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">  <span class="function"><strong style="color:#CC7832">array_udiff_assoc()</strong></span> 返回一个数组，该数组包括了所有在    <span class="parameter" style="color:#2EACF9">array1</span> 中但是不在任何其它参数数组中的值。注意和    <span class="function">{@link array_diff()}</span> 与 <span class="function">{@link array_udiff()}</span>    不同的是键名也用于比较。数组数据的比较是用用户提供的回调函数进行的。在此方面和    <span class="function">{@link array_diff_assoc()}</span> 的行为正好相反，后者是用内部函数进行比较的。   </p>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-udiff-assoc-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-6065">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">array_udiff_assoc()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">class&nbsp;</span><span style="color: #9876AA">cr&nbsp;</span><span style="color: #007700">{<br />&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;</span><span style="color: #9876AA">$priv_member</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;</span><span style="color: #9876AA">cr</span><span style="color: #007700">(</span><span style="color: #9876AA">$val</span><span style="color: #007700">)<br />&nbsp;&nbsp;&nbsp;&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">priv_member&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">$val</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;}<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;static&nbsp;function&nbsp;</span><span style="color: #9876AA">comp_func_cr</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$b</span><span style="color: #007700">)<br />&nbsp;&nbsp;&nbsp;&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(</span><span style="color: #9876AA">$a</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">priv_member&nbsp;</span><span style="color: #007700">===&nbsp;</span><span style="color: #9876AA">$b</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">priv_member</span><span style="color: #007700">)&nbsp;return&nbsp;</span><span style="color: #9876AA">0</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;(</span><span style="color: #9876AA">$a</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">priv_member&nbsp;</span><span style="color: #007700">&gt;&nbsp;</span><span style="color: #9876AA">$b</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">priv_member</span><span style="color: #007700">)?&nbsp;</span><span style="color: #9876AA">1</span><span style="color: #007700">:-</span><span style="color: #9876AA">1</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;}<br />}<br /><br /></span><span style="color: #9876AA">$a&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">"0.1"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;new&nbsp;</span><span style="color: #9876AA">cr</span><span style="color: #007700">(</span><span style="color: #9876AA">9</span><span style="color: #007700">),&nbsp;</span><span style="color: #DD0000">"0.5"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;new&nbsp;</span><span style="color: #9876AA">cr</span><span style="color: #007700">(</span><span style="color: #9876AA">12</span><span style="color: #007700">),&nbsp;</span><span style="color: #9876AA">0&nbsp;</span><span style="color: #007700">=&gt;&nbsp;new&nbsp;</span><span style="color: #9876AA">cr</span><span style="color: #007700">(</span><span style="color: #9876AA">23</span><span style="color: #007700">),&nbsp;</span><span style="color: #9876AA">1</span><span style="color: #007700">=&gt;&nbsp;new&nbsp;</span><span style="color: #9876AA">cr</span><span style="color: #007700">(</span><span style="color: #9876AA">4</span><span style="color: #007700">),&nbsp;</span><span style="color: #9876AA">2&nbsp;</span><span style="color: #007700">=&gt;&nbsp;new&nbsp;</span><span style="color: #9876AA">cr</span><span style="color: #007700">(-</span><span style="color: #9876AA">15</span><span style="color: #007700">),);<br /></span><span style="color: #9876AA">$b&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">"0.2"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;new&nbsp;</span><span style="color: #9876AA">cr</span><span style="color: #007700">(</span><span style="color: #9876AA">9</span><span style="color: #007700">),&nbsp;</span><span style="color: #DD0000">"0.5"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;new&nbsp;</span><span style="color: #9876AA">cr</span><span style="color: #007700">(</span><span style="color: #9876AA">22</span><span style="color: #007700">),&nbsp;</span><span style="color: #9876AA">0&nbsp;</span><span style="color: #007700">=&gt;&nbsp;new&nbsp;</span><span style="color: #9876AA">cr</span><span style="color: #007700">(</span><span style="color: #9876AA">3</span><span style="color: #007700">),&nbsp;</span><span style="color: #9876AA">1</span><span style="color: #007700">=&gt;&nbsp;new&nbsp;</span><span style="color: #9876AA">cr</span><span style="color: #007700">(</span><span style="color: #9876AA">4</span><span style="color: #007700">),&nbsp;</span><span style="color: #9876AA">2&nbsp;</span><span style="color: #007700">=&gt;&nbsp;new&nbsp;</span><span style="color: #9876AA">cr</span><span style="color: #007700">(-</span><span style="color: #9876AA">15</span><span style="color: #007700">),);<br /><br /></span><span style="color: #9876AA">$result&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">array_udiff_assoc</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$b</span><span style="color: #007700">,&nbsp;array(</span><span style="color: #DD0000">"cr"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"comp_func_cr"</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$result</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Array (     [0.1] =&gt; cr Object         (             [priv_member:private] =&gt; 9         )      [0.5] =&gt; cr Object         (             [priv_member:private] =&gt; 12         )      [0] =&gt; cr Object         (             [priv_member:private] =&gt; 23         ) ) </span></div>     </div>    </div>   </span>   <p class="simpara">    上例中可以看到键值对 <em>&quot;1&quot; =&gt; new cr(4)</em>    同时出现在两个数组中因此不在本函数的输出中。   </p>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-udiff-assoc-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link array_diff()} - 计算数组的差集</span></li>     <li class="member"><span class="function">{@link array_diff_assoc()} - 带索引检查计算数组的差集</span></li>     <li class="member"><span class="function">{@link array_diff_uassoc()} - 用用户提供的回调函数做索引检查来计算数组的差集</span></li>     <li class="member"><span class="function">{@link array_udiff()} - 用回调函数比较数据来计算数组的差集</span></li>     <li class="member"><span class="function">{@link array_udiff_uassoc()} - 带索引检查计算数组的差集，用回调函数比较数据和索引</span></li>     <li class="member"><span class="function">{@link array_intersect()} - 计算数组的交集</span></li>     <li class="member"><span class="function">{@link array_intersect_assoc()} - 带索引检查计算数组的交集</span></li>     <li class="member"><span class="function">{@link array_uintersect()} - 计算数组的交集，用回调函数比较数据</span></li>     <li class="member"><span class="function">{@link array_uintersect_assoc()} - 带索引检查计算数组的交集，用回调函数比较数据</span></li>     <li class="member"><span class="function">{@link array_uintersect_uassoc()} - 带索引检查计算数组的交集，用单独的回调函数比较数据和索引</span></li>    </ul>   </span>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.array.php">数组 函数</a></div></div>
 * @return array array_udiff_assoc returns an array*/
function array_udiff_assoc(array $array1, array $array2, array $_ = null, $data_compare_func) { }

/**
*<div id="function.array-diff-uassoc" class="refentry">  <div class="refnamediv">   <h1 class="refname">array_diff_uassoc</h1>   <p class="verinfo">(PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">array_diff_uassoc</span> &mdash; <span class="dc-title">用用户提供的回调函数做索引检查来计算数组的差集</span></p>   </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-diff-uassoc-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">array</span> <span class="methodname" style="color:#CC7832"><strong>array_diff_uassoc</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">$array1</span></span>    , <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">$array2</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">$...</span></span>    ], <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#2EACF9">$key_compare_func</span></span>    )</div>    <p class="para rdfs-comment">    对比了 <span class="parameter" style="color:#2EACF9">array1</span> 和 <span class="parameter" style="color:#2EACF9">array2</span> 并返回不同之处。    注意和    <span class="function">{@link array_diff()}</span> 不同的是键名也用于比较。   </p>   <p class="para">    和 <span class="function">{@link array_diff_assoc()}</span>    不同的是使用了用户自定义的回调函数，而不是内置的函数。   </p>    </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-diff-uassoc-parameters">   <h3 class="title">参数</h3>   <span>    <dl>             <dt> <span class="parameter" style="color:#2EACF9">array1</span></dt>       <dd>        <p class="para">        待比较的数组       </p>      </dd>                  <dt> <span class="parameter" style="color:#2EACF9">array2</span></dt>       <dd>        <p class="para">        和这个数组进行比较       </p>      </dd>                  <dt> <span class="parameter" style="color:#2EACF9">...</span></dt>       <dd>        <p class="para">        更多比较的数组       </p>      </dd>                  <dt> <span class="parameter" style="color:#2EACF9">key_compare_func</span></dt>       <dd>        <p class="para">        在第一个参数小于，等于或大于第二个参数时，该比较函数必须相应地返回一个小于，等于或大于 0 的整数。       </p>       <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525"><span class="type" style="color:#EAB766">int</span> <span class="methodname" style="color:#CC7832"><span class="replaceable">callback</span></span> ( <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#2EACF9">$a</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#2EACF9">$b</span></span> )</div>       </dd>           </dl>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-diff-uassoc-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回一个 <span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span>，该数组包括了所有在    <span class="parameter" style="color:#2EACF9">array1</span> 中但是不在任何其它参数数组中的值。   </p>  </div>      <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-diff-uassoc-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-6017">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">array_diff_uassoc()</strong></span> 例子</strong></p>     <div class="example-contents"><p>      上面的例子中 <em>&quot;a&quot; =&gt; &quot;green&quot;</em>    出现在两个数组中因此不在函数的输出中。但是    <em>0 =&gt; &quot;red&quot;</em> 却在输出中，因为第二个参数中的    <em>&quot;red&quot;</em> 的键名是 <em>1</em>。     </p></div>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function&nbsp;</span><span style="color: #9876AA">key_compare_func</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$b</span><span style="color: #007700">)<br />{<br />&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(</span><span style="color: #9876AA">$a&nbsp;</span><span style="color: #007700">===&nbsp;</span><span style="color: #9876AA">$b</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;</span><span style="color: #9876AA">0</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;}<br />&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;(</span><span style="color: #9876AA">$a&nbsp;</span><span style="color: #007700">&gt;&nbsp;</span><span style="color: #9876AA">$b</span><span style="color: #007700">)?&nbsp;</span><span style="color: #9876AA">1</span><span style="color: #007700">:-</span><span style="color: #9876AA">1</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">$array1&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">"a"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"green"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"b"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"brown"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"c"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"blue"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"red"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$array2&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">"a"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"green"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"yellow"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"red"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$result&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">array_diff_uassoc</span><span style="color: #007700">(</span><span style="color: #9876AA">$array1</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$array2</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"key_compare_func"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$result</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Array (     [b] =&gt; brown     [c] =&gt; blue     [0] =&gt; red ) </span></div>     </div>     <div class="example-contents"><p>      The equality of 2 indices is checked by the user supplied callback function.     </p></div>    </div>   </span>  </div>     <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.array-diff-uassoc-notes">   <h3 class="title">注释</h3>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>:     <p class="para">     注意本函数只检查了多维数组中的一维。当然可以用     <em>array_diff_uassoc($array1[0], $array2[0], &quot;key_compare_func&quot;);</em>     检查更深的维度。    </p>   </p></blockquote>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-diff-uassoc-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link array_diff()} - 计算数组的差集</span></li>     <li class="member"><span class="function">{@link array_diff_assoc()} - 带索引检查计算数组的差集</span></li>     <li class="member"><span class="function">{@link array_udiff()} - 用回调函数比较数据来计算数组的差集</span></li>     <li class="member"><span class="function">{@link array_udiff_assoc()} - 带索引检查计算数组的差集，用回调函数比较数据</span></li>     <li class="member"><span class="function">{@link array_udiff_uassoc()} - 带索引检查计算数组的差集，用回调函数比较数据和索引</span></li>     <li class="member"><span class="function">{@link array_intersect()} - 计算数组的交集</span></li>     <li class="member"><span class="function">{@link array_intersect_assoc()} - 带索引检查计算数组的交集</span></li>     <li class="member"><span class="function">{@link array_uintersect()} - 计算数组的交集，用回调函数比较数据</span></li>     <li class="member"><span class="function">{@link array_uintersect_assoc()} - 带索引检查计算数组的交集，用回调函数比较数据</span></li>     <li class="member"><span class="function">{@link array_uintersect_uassoc()} - 带索引检查计算数组的交集，用单独的回调函数比较数据和索引</span></li>    </ul>   </span>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.array.php">数组 函数</a></div></div>
 * @return array an array containing all the entries from*/
function array_diff_uassoc(array $array1, array $array2, array $_ = null, $key_compare_func) { }

/**
*<div id="function.array-udiff-uassoc" class="refentry">  <div class="refnamediv">   <h1 class="refname">array_udiff_uassoc</h1>   <p class="verinfo">(PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">array_udiff_uassoc</span> &mdash; <span class="dc-title">带索引检查计算数组的差集，用回调函数比较数据和索引</span></p>   </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-udiff-uassoc-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">array</span> <span class="methodname" style="color:#CC7832"><strong>array_udiff_uassoc</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">$array1</span></span>    , <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">$array2</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">$...</span></span>    ], <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#2EACF9">$value_compare_func</span></span>    , <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#2EACF9">$key_compare_func</span></span>    )</div>    <p class="para rdfs-comment">    <span class="function"><strong style="color:#CC7832">array_udiff_uassoc()</strong></span> 返回一个数组，该数组包括了所有在    <span class="parameter" style="color:#2EACF9">array1</span> 中但是不在任何其它参数数组中的值。   </p>   <p class="para">    注意和    <span class="function">{@link array_diff()}</span> 与 <span class="function">{@link array_udiff()}</span>    不同的是键名也用于比较。   </p>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-udiff-uassoc-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">array1</span></dt>       <dd>        <p class="para">        第一个数组。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">array2</span></dt>       <dd>        <p class="para">        第二个数组。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">value_compare_func</span></dt>       <dd>        <p class="para">        在第一个参数小于，等于或大于第二个参数时，该比较函数必须相应地返回一个小于，等于或大于 0 的整数。       </p>       <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525"><span class="type" style="color:#EAB766">int</span> <span class="methodname" style="color:#CC7832"><span class="replaceable">callback</span></span> ( <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#2EACF9">$a</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#2EACF9">$b</span></span> )</div>       </dd>                 <dt> <span class="parameter" style="color:#2EACF9">key_compare_func</span></dt>       <dd>        <p class="para">        对键名（索引）的检查也是由回调函数    <span class="parameter" style="color:#2EACF9">key_compare_func</span> 进行的。这和    <span class="function">{@link array_udiff_assoc()}</span> 的行为不同，后者是用内部函数比较索引的。       </p>      </dd>          </dl>    </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-udiff-uassoc-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    Returns an <span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span> containing all the values from    <span class="parameter" style="color:#2EACF9">array1</span> that are not present in any of the other    arguments.   </p>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-udiff-uassoc-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-6066">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">array_udiff_uassoc()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">class&nbsp;</span><span style="color: #9876AA">cr&nbsp;</span><span style="color: #007700">{<br />&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;</span><span style="color: #9876AA">$priv_member</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;</span><span style="color: #9876AA">cr</span><span style="color: #007700">(</span><span style="color: #9876AA">$val</span><span style="color: #007700">)<br />&nbsp;&nbsp;&nbsp;&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">priv_member&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">$val</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;}<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;static&nbsp;function&nbsp;</span><span style="color: #9876AA">comp_func_cr</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$b</span><span style="color: #007700">)<br />&nbsp;&nbsp;&nbsp;&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(</span><span style="color: #9876AA">$a</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">priv_member&nbsp;</span><span style="color: #007700">===&nbsp;</span><span style="color: #9876AA">$b</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">priv_member</span><span style="color: #007700">)&nbsp;return&nbsp;</span><span style="color: #9876AA">0</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;(</span><span style="color: #9876AA">$a</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">priv_member&nbsp;</span><span style="color: #007700">&gt;&nbsp;</span><span style="color: #9876AA">$b</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">priv_member</span><span style="color: #007700">)?&nbsp;</span><span style="color: #9876AA">1</span><span style="color: #007700">:-</span><span style="color: #9876AA">1</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;}<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;static&nbsp;function&nbsp;</span><span style="color: #9876AA">comp_func_key</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$b</span><span style="color: #007700">)<br />&nbsp;&nbsp;&nbsp;&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(</span><span style="color: #9876AA">$a&nbsp;</span><span style="color: #007700">===&nbsp;</span><span style="color: #9876AA">$b</span><span style="color: #007700">)&nbsp;return&nbsp;</span><span style="color: #9876AA">0</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;(</span><span style="color: #9876AA">$a&nbsp;</span><span style="color: #007700">&gt;&nbsp;</span><span style="color: #9876AA">$b</span><span style="color: #007700">)?&nbsp;</span><span style="color: #9876AA">1</span><span style="color: #007700">:-</span><span style="color: #9876AA">1</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;}<br />}<br /></span><span style="color: #9876AA">$a&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">"0.1"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;new&nbsp;</span><span style="color: #9876AA">cr</span><span style="color: #007700">(</span><span style="color: #9876AA">9</span><span style="color: #007700">),&nbsp;</span><span style="color: #DD0000">"0.5"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;new&nbsp;</span><span style="color: #9876AA">cr</span><span style="color: #007700">(</span><span style="color: #9876AA">12</span><span style="color: #007700">),&nbsp;</span><span style="color: #9876AA">0&nbsp;</span><span style="color: #007700">=&gt;&nbsp;new&nbsp;</span><span style="color: #9876AA">cr</span><span style="color: #007700">(</span><span style="color: #9876AA">23</span><span style="color: #007700">),&nbsp;</span><span style="color: #9876AA">1</span><span style="color: #007700">=&gt;&nbsp;new&nbsp;</span><span style="color: #9876AA">cr</span><span style="color: #007700">(</span><span style="color: #9876AA">4</span><span style="color: #007700">),&nbsp;</span><span style="color: #9876AA">2&nbsp;</span><span style="color: #007700">=&gt;&nbsp;new&nbsp;</span><span style="color: #9876AA">cr</span><span style="color: #007700">(-</span><span style="color: #9876AA">15</span><span style="color: #007700">),);<br /></span><span style="color: #9876AA">$b&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">"0.2"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;new&nbsp;</span><span style="color: #9876AA">cr</span><span style="color: #007700">(</span><span style="color: #9876AA">9</span><span style="color: #007700">),&nbsp;</span><span style="color: #DD0000">"0.5"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;new&nbsp;</span><span style="color: #9876AA">cr</span><span style="color: #007700">(</span><span style="color: #9876AA">22</span><span style="color: #007700">),&nbsp;</span><span style="color: #9876AA">0&nbsp;</span><span style="color: #007700">=&gt;&nbsp;new&nbsp;</span><span style="color: #9876AA">cr</span><span style="color: #007700">(</span><span style="color: #9876AA">3</span><span style="color: #007700">),&nbsp;</span><span style="color: #9876AA">1</span><span style="color: #007700">=&gt;&nbsp;new&nbsp;</span><span style="color: #9876AA">cr</span><span style="color: #007700">(</span><span style="color: #9876AA">4</span><span style="color: #007700">),&nbsp;</span><span style="color: #9876AA">2&nbsp;</span><span style="color: #007700">=&gt;&nbsp;new&nbsp;</span><span style="color: #9876AA">cr</span><span style="color: #007700">(-</span><span style="color: #9876AA">15</span><span style="color: #007700">),);<br /><br /></span><span style="color: #9876AA">$result&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">array_udiff_uassoc</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$b</span><span style="color: #007700">,&nbsp;array(</span><span style="color: #DD0000">"cr"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"comp_func_cr"</span><span style="color: #007700">),&nbsp;array(</span><span style="color: #DD0000">"cr"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"comp_func_key"</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$result</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Array (     [0.1] =&gt; cr Object         (             [priv_member:private] =&gt; 9         )      [0.5] =&gt; cr Object         (             [priv_member:private] =&gt; 12         )      [0] =&gt; cr Object         (             [priv_member:private] =&gt; 23         ) ) </span></div>     </div>    </div>   </span>   <p class="simpara">    在上例中键值对 <em>&quot;1&quot; =&gt; new cr(4)</em>    同时出现在两个数组中，因此不在本函数的输出中。要记住必须提供两个回调函数。   </p>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.array-udiff-uassoc-notes">   <h3 class="title">注释</h3>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>:     <span class="simpara">     注意本函数只检查了多维数组中的一维。当然，可以用     <em>array_udiff_uassoc($array1[0], $array2[0], &quot;data_compare_func&quot;, &quot;key_compare_func&quot;);</em>     来检查更深的维度。    </span>    </p></blockquote>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-udiff-uassoc-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link array_diff()} - 计算数组的差集</span></li>     <li class="member"><span class="function">{@link array_diff_assoc()} - 带索引检查计算数组的差集</span></li>     <li class="member"><span class="function">{@link array_udiff()} - 用回调函数比较数据来计算数组的差集</span></li>     <li class="member"><span class="function">{@link array_udiff_assoc()} - 带索引检查计算数组的差集，用回调函数比较数据</span></li>     <li class="member"><span class="function">{@link array_intersect()} - 计算数组的交集</span></li>     <li class="member"><span class="function">{@link array_intersect_assoc()} - 带索引检查计算数组的交集</span></li>     <li class="member"><span class="function">{@link array_uintersect()} - 计算数组的交集，用回调函数比较数据</span></li>     <li class="member"><span class="function">{@link array_uintersect_assoc()} - 带索引检查计算数组的交集，用回调函数比较数据</span></li>     <li class="member"><span class="function">{@link array_uintersect_uassoc()} - 带索引检查计算数组的交集，用单独的回调函数比较数据和索引</span></li>    </ul>   </span>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.array.php">数组 函数</a></div></div>
 * @return array an array containing all the values from*/
function array_udiff_uassoc(array $array1, array $array2, array $_ = null, $data_compare_func, $key_compare_func) { }

/**
*<div id="function.array-sum" class="refentry">    <div class="refnamediv">     <h1 class="refname">array_sum</h1>     <p class="verinfo">(PHP 4 &gt;= 4.0.4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">array_sum</span> &mdash; <span class="dc-title">      对数组中所有值求和     </span></p>     </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-sum-description">   <h3 class="title">说明</h3>      <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">       <span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.number" class="type number" style="color:#EAB766">number</a></span> <span class="methodname" style="color:#CC7832"><strong>array_sum</strong></span>        ( <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">$array</span></span>       )</div>      <p class="para rdfs-comment">      <span class="function"><strong style="color:#CC7832">array_sum()</strong></span> 将数组中的所有值相加，并返回结果。     </p>    </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-sum-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">array</span></dt>       <dd>        <p class="para">        输入的数组。       </p>      </dd>          </dl>    </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-sum-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    所有值的和以整数或浮点数的结果返回，<span class="parameter" style="color:#2EACF9">array</span> 为空时则返回 <em>0</em>。   </p>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-sum-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-6064">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">array_sum()</strong></span>  例子</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$a&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #9876AA">2</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">4</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">6</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">8</span><span style="color: #007700">);<br />echo&nbsp;</span><span style="color: #DD0000">"sum(a)&nbsp;=&nbsp;"&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #9876AA">array_sum</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">)&nbsp;.&nbsp;</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">$b&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">"a"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">1.2</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"b"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">2.3</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"c"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">3.4</span><span style="color: #007700">);<br />echo&nbsp;</span><span style="color: #DD0000">"sum(b)&nbsp;=&nbsp;"&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #9876AA">array_sum</span><span style="color: #007700">(</span><span style="color: #9876AA">$b</span><span style="color: #007700">)&nbsp;.&nbsp;</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> sum(a) = 20 sum(b) = 6.9 </span></div>     </div>    </div>   </span>  </div>    <div class="up"><a href="http://php.net/manual/zh/ref.array.php">数组 函数</a></div></div>
 * @return int|float the sum of values as an integer or float.*/
function array_sum(array $array) { }

/**
*<div id="function.array-product" class="refentry">  <div class="refnamediv">   <h1 class="refname">array_product</h1>   <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7)</p><p class="refpurpose"><span class="refname">array_product</span> &mdash; <span class="dc-title">计算数组中所有值的乘积</span></p>   </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-product-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.number" class="type number" style="color:#EAB766">number</a></span> <span class="methodname" style="color:#CC7832"><strong>array_product</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">$array</span></span>    )</div>    <p class="para rdfs-comment">    <span class="function"><strong style="color:#CC7832">array_product()</strong></span> 以整数或浮点数返回一个数组中所有值的乘积。   </p>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-product-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">array</span></dt>       <dd>        <p class="para">        这个数组。       </p>      </dd>          </dl>    </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-product-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    以整数或浮点数返回一个数组中所有值的乘积。   </p>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.array-product-changelog">   <h3 class="title">更新日志</h3>   <span>    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>5.3.6</td>        <td>         空数组现在会产生 1，而之前此函数处理空数组会产生 0。        </td>       </tr>       </tbody>         </table>    </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-product-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-6051">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">array_product()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /><br />$a&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #9876AA">2</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">4</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">6</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">8</span><span style="color: #007700">);<br />echo&nbsp;</span><span style="color: #DD0000">"product(a)&nbsp;=&nbsp;"&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #9876AA">array_product</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">)&nbsp;.&nbsp;</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />echo&nbsp;</span><span style="color: #DD0000">"product(array())&nbsp;=&nbsp;"&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #9876AA">array_product</span><span style="color: #007700">(array())&nbsp;.&nbsp;</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> product(a) = 384 product(array()) = 1 </span></div>     </div>    </div>   </span>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.array.php">数组 函数</a></div></div>
 * @return int|float the product as an integer or float.*/
function array_product(array $array) { }

/**
*<div id="function.array-filter" class="refentry">    <div class="refnamediv">     <h1 class="refname">array_filter</h1>     <p class="verinfo">(PHP 4 &gt;= 4.0.6, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">array_filter</span> &mdash; <span class="dc-title">      用回调函数过滤数组中的单元     </span></p>     </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-filter-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">array</span> <span class="methodname" style="color:#CC7832"><strong>array_filter</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">$array</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#2EACF9">$callback</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#2EACF9">$flag</span><span class="initializer"> = 0</span></span>   ]] )</div>      <p class="para rdfs-comment">      依次将 <span class="parameter" style="color:#2EACF9">array</span> 数组中的每个值传递到      <span class="parameter" style="color:#2EACF9">callback</span> 函数。如果      <span class="parameter" style="color:#2EACF9">callback</span> 函数返回 true，则      <span class="parameter" style="color:#2EACF9">array</span>      数组的当前值会被包含在返回的结果数组中。数组的键名保留不变。     </p>    </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-filter-parameters">   <h3 class="title">参数</h3>   <span>    <dl>             <dt> <span class="parameter" style="color:#2EACF9">array</span></dt>       <dd>        <p class="para">        要循环的数组       </p>      </dd>                  <dt> <span class="parameter" style="color:#2EACF9">callback</span></dt>       <dd>        <p class="para">        使用的回调函数       </p>       <p class="para">         如果没有提供 <span class="parameter" style="color:#2EACF9">callback</span>      函数，      将删除 <span class="parameter" style="color:#2EACF9">array</span> 中所有等值为      <strong><span>FALSE</span></strong> 的条目。更多信息见<a href="http://php.net/manual/zh/language.types.boolean.php#language.types.boolean.casting" class="link">转换为布尔值</a>。       </p>      </dd>                  <dt> <span class="parameter" style="color:#2EACF9">flag</span></dt>       <dd>        <p class="para">        决定<span class="parameter" style="color:#2EACF9">callback</span>接收的参数形式:        <ul class="itemizedlist">         <li class="listitem">          <span class="simpara"><strong><span>ARRAY_FILTER_USE_KEY</span></strong> - <span class="parameter" style="color:#2EACF9">callback</span>接受键名作为的唯一参数</span>         </li>         <li class="listitem">          <span class="simpara"><strong><span>ARRAY_FILTER_USE_BOTH</span></strong> - <span class="parameter" style="color:#2EACF9">callback</span>同时接受键名和键值</span>         </li>        </ul>       </p>      </dd>           </dl>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-filter-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回过滤后的数组。   </p>  </div>     <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.array-filter-changelog">   <h3 class="title">更新日志</h3>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>      </thead>      <tbody class="tbody">      <tr>       <td>5.6.0</td>       <td>        添加可选的参数 <span class="parameter" style="color:#2EACF9">flag</span>，以及常量        <strong><span>ARRAY_FILTER_USE_KEY</span></strong> 和         <strong><span>ARRAY_FILTER_USE_BOTH</span></strong>。       </td>      </tr>      </tbody>       </table>   </div>       <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-filter-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-6022">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">array_filter()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function&nbsp;</span><span style="color: #9876AA">odd</span><span style="color: #007700">(</span><span style="color: #9876AA">$var</span><span style="color: #007700">)<br />{<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;returns&nbsp;whether&nbsp;the&nbsp;input&nbsp;integer&nbsp;is&nbsp;odd<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #007700">return(</span><span style="color: #9876AA">$var&nbsp;</span><span style="color: #007700">&amp;&nbsp;</span><span style="color: #9876AA">1</span><span style="color: #007700">);<br />}<br /><br />function&nbsp;</span><span style="color: #9876AA">even</span><span style="color: #007700">(</span><span style="color: #9876AA">$var</span><span style="color: #007700">)<br />{<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;returns&nbsp;whether&nbsp;the&nbsp;input&nbsp;integer&nbsp;is&nbsp;even<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #007700">return(!(</span><span style="color: #9876AA">$var&nbsp;</span><span style="color: #007700">&amp;&nbsp;</span><span style="color: #9876AA">1</span><span style="color: #007700">));<br />}<br /><br /></span><span style="color: #9876AA">$array1&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">"a"</span><span style="color: #007700">=&gt;</span><span style="color: #9876AA">1</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"b"</span><span style="color: #007700">=&gt;</span><span style="color: #9876AA">2</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"c"</span><span style="color: #007700">=&gt;</span><span style="color: #9876AA">3</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"d"</span><span style="color: #007700">=&gt;</span><span style="color: #9876AA">4</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"e"</span><span style="color: #007700">=&gt;</span><span style="color: #9876AA">5</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$array2&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #9876AA">6</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">7</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">8</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">9</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">10</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">11</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">12</span><span style="color: #007700">);<br /><br />echo&nbsp;</span><span style="color: #DD0000">"Odd&nbsp;:\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">array_filter</span><span style="color: #007700">(</span><span style="color: #9876AA">$array1</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"odd"</span><span style="color: #007700">));<br />echo&nbsp;</span><span style="color: #DD0000">"Even:\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">array_filter</span><span style="color: #007700">(</span><span style="color: #9876AA">$array2</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"even"</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Odd : Array (     [a] =&gt; 1     [c] =&gt; 3     [e] =&gt; 5 ) Even: Array (     [0] =&gt; 6     [2] =&gt; 8     [4] =&gt; 10     [6] =&gt; 12 ) </span></div>     </div>    </div>    <div class="example" id="example-6023">     <p><strong>Example #2 不使用 <span class="parameter" style="color:#2EACF9">callback</span> 时的<span class="function"><strong style="color:#CC7832">array_filter()</strong></span>     </strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /><br />$entry&nbsp;</span><span style="color: #007700">=&nbsp;array(<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">0&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">'foo'</span><span style="color: #007700">,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">1&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">false</span><span style="color: #007700">,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">2&nbsp;</span><span style="color: #007700">=&gt;&nbsp;-</span><span style="color: #9876AA">1</span><span style="color: #007700">,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">3&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">null</span><span style="color: #007700">,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">4&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">''<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">array_filter</span><span style="color: #007700">(</span><span style="color: #9876AA">$entry</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Array (     [0] =&gt; foo     [2] =&gt; -1 ) </span></div>     </div>    </div>    <div class="example" id="example-6024">     <p><strong>Example #3 带 <span class="parameter" style="color:#2EACF9">flag</span> 标记的 <span class="function"><strong style="color:#CC7832">array_filter()</strong></span>     </strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /><br />$arr&nbsp;</span><span style="color: #007700">=&nbsp;[</span><span style="color: #DD0000">'a'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">1</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'b'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">2</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'c'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">3</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'d'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">4</span><span style="color: #007700">];<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">array_filter</span><span style="color: #007700">(</span><span style="color: #9876AA">$arr</span><span style="color: #007700">,&nbsp;function(</span><span style="color: #9876AA">$k</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;</span><span style="color: #9876AA">$k&nbsp;</span><span style="color: #007700">==&nbsp;</span><span style="color: #DD0000">'b'</span><span style="color: #007700">;<br />},&nbsp;</span><span style="color: #9876AA">ARRAY_FILTER_USE_KEY</span><span style="color: #007700">));<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">array_filter</span><span style="color: #007700">(</span><span style="color: #9876AA">$arr</span><span style="color: #007700">,&nbsp;function(</span><span style="color: #9876AA">$v</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$k</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;</span><span style="color: #9876AA">$k&nbsp;</span><span style="color: #007700">==&nbsp;</span><span style="color: #DD0000">'b'&nbsp;</span><span style="color: #007700">||&nbsp;</span><span style="color: #9876AA">$v&nbsp;</span><span style="color: #007700">==&nbsp;</span><span style="color: #9876AA">4</span><span style="color: #007700">;<br />},&nbsp;</span><span style="color: #9876AA">ARRAY_FILTER_USE_BOTH</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> array(1) {   [&quot;b&quot;]=&gt;   int(2) } array(2) {   [&quot;b&quot;]=&gt;   int(2)   [&quot;d&quot;]=&gt;   int(4) } </span></div>     </div>    </div>   </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.array-filter-notes">   <h3 class="title">注释</h3>   <div class="caution"><strong class="caution">Caution</strong>    <p class="para">      用户不应在回调函数中修改数组本身。例如增加／删除单元或者对      <span class="function"><strong style="color:#CC7832">array_filter()</strong></span> 正在作用的数组进行      unset。如果数组改变了，此函数的行为将不可预测。    </p>   </div>  </div>     <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-filter-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link array_map()} - 为数组的每个元素应用回调函数</span></li>     <li class="member"><span class="function">{@link array_reduce()} - 用回调函数迭代地将数组简化为单一的值</span></li>     <li class="member"><span class="function">{@link array_walk()} - 使用用户自定义函数对数组中的每个元素做回调处理</span></li>    </ul>   </span>  </div>    <div class="up"><a href="http://php.net/manual/zh/ref.array.php">数组 函数</a></div></div>
 * @return array the filtered array.*/
function array_filter(array $input, $callback = null, $flag = 0) { }

/**
*<div id="function.array-map" class="refentry">    <div class="refnamediv">     <h1 class="refname">array_map</h1>     <p class="verinfo">(PHP 4 &gt;= 4.0.6, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">array_map</span> &mdash; <span class="dc-title">      为数组的每个元素应用回调函数     </span></p>     </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-map-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">array</span> <span class="methodname" style="color:#CC7832"><strong>array_map</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#2EACF9">$callback</span></span>    , <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">$array1</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">$...</span></span>   ] )</div>    <p class="para rdfs-comment">    <span class="function"><strong style="color:#CC7832">array_map()</strong></span>：返回数组，是为 <span class="parameter" style="color:#2EACF9">array1</span> 每个元素应用 <span class="parameter" style="color:#2EACF9">callback</span>函数之后的数组。    <span class="parameter" style="color:#2EACF9">callback</span> 函数形参的数量和传给 <span class="function"><strong style="color:#CC7832">array_map()</strong></span> 数组数量，两者必须一样。   </p>    </div>     <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-map-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">callback</span></dt>       <dd>        <p class="para">        回调函数，应用到每个数组里的每个元素。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">array1</span></dt>       <dd>        <p class="para">        数组，遍历运行 <span class="parameter" style="color:#2EACF9">callback</span> 函数。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">...</span></dt>       <dd>        <p class="para">        数组列表，每个都遍历运行 <span class="parameter" style="color:#2EACF9">callback</span> 函数。       </p>      </dd>          </dl>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-map-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回数组，包含 <span class="parameter" style="color:#2EACF9">callback</span> 函数处理之后 <span class="parameter" style="color:#2EACF9">array1</span>  的所有元素。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-map-examples">   <h3 class="title">范例</h3>   <span>      <div class="example" id="example-6036">       <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">array_map()</strong></span> 例子</strong></p>       <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function&nbsp;</span><span style="color: #9876AA">cube</span><span style="color: #007700">(</span><span style="color: #9876AA">$n</span><span style="color: #007700">)<br />{<br />&nbsp;&nbsp;&nbsp;&nbsp;return(</span><span style="color: #9876AA">$n&nbsp;</span><span style="color: #007700">*&nbsp;</span><span style="color: #9876AA">$n&nbsp;</span><span style="color: #007700">*&nbsp;</span><span style="color: #9876AA">$n</span><span style="color: #007700">);<br />}<br /><br /></span><span style="color: #9876AA">$a&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #9876AA">1</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">2</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">3</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">4</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">5</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$b&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">array_map</span><span style="color: #007700">(</span><span style="color: #DD0000">"cube"</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$a</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$b</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>       </div>        <div class="example-contents"><p>        这使得 <var class="varname"><var class="varname">$b</var></var> 成为：       </p></div>       <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Array (     [0] =&gt; 1     [1] =&gt; 8     [2] =&gt; 27     [3] =&gt; 64     [4] =&gt; 125 ) </span></div>       </div>      </div>   </span>   <p class="para">    <div class="example" id="example-6037">     <p><strong>Example #2 <span class="function"><strong style="color:#CC7832">array_map()</strong></span> 使用匿名函数 (PHP 5.3.0 起)</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$func&nbsp;</span><span style="color: #007700">=&nbsp;function(</span><span style="color: #9876AA">$value</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;</span><span style="color: #9876AA">$value&nbsp;</span><span style="color: #007700">*&nbsp;</span><span style="color: #9876AA">2</span><span style="color: #007700">;<br />};<br /><br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">array_map</span><span style="color: #007700">(</span><span style="color: #9876AA">$func</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">range</span><span style="color: #007700">(</span><span style="color: #9876AA">1</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">5</span><span style="color: #007700">)));<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Array (     [0] =&gt; 2     [1] =&gt; 4     [2] =&gt; 6     [3] =&gt; 8     [4] =&gt; 10 ) </span></div>     </div>    </div>   </p>   <p class="para">    <div class="example" id="example-6038">     <p><strong>Example #3 <span class="function"><strong style="color:#CC7832">array_map()</strong></span>：使用更多的数组</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function&nbsp;</span><span style="color: #9876AA">show_Spanish</span><span style="color: #007700">(</span><span style="color: #9876AA">$n</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$m</span><span style="color: #007700">)<br />{<br />&nbsp;&nbsp;&nbsp;&nbsp;return(</span><span style="color: #DD0000">"The&nbsp;number&nbsp;</span><span style="color: #9876AA">$n</span><span style="color: #DD0000">&nbsp;is&nbsp;called&nbsp;</span><span style="color: #9876AA">$m</span><span style="color: #DD0000">&nbsp;in&nbsp;Spanish"</span><span style="color: #007700">);<br />}<br /><br />function&nbsp;</span><span style="color: #9876AA">map_Spanish</span><span style="color: #007700">(</span><span style="color: #9876AA">$n</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$m</span><span style="color: #007700">)<br />{<br />&nbsp;&nbsp;&nbsp;&nbsp;return(array(</span><span style="color: #9876AA">$n&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">$m</span><span style="color: #007700">));<br />}<br /><br /></span><span style="color: #9876AA">$a&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #9876AA">1</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">2</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">3</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">4</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">5</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$b&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">"uno"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"dos"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"tres"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"cuatro"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"cinco"</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$c&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">array_map</span><span style="color: #007700">(</span><span style="color: #DD0000">"show_Spanish"</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$a</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$b</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$c</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$d&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">array_map</span><span style="color: #007700">(</span><span style="color: #DD0000">"map_Spanish"</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$a&nbsp;</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$b</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$d</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> // printout of $c Array (     [0] =&gt; The number 1 is called uno in Spanish     [1] =&gt; The number 2 is called dos in Spanish     [2] =&gt; The number 3 is called tres in Spanish     [3] =&gt; The number 4 is called cuatro in Spanish     [4] =&gt; The number 5 is called cinco in Spanish )  // printout of $d Array (     [0] =&gt; Array         (             [1] =&gt; uno         )      [1] =&gt; Array         (             [2] =&gt; dos         )      [2] =&gt; Array         (             [3] =&gt; tres         )      [3] =&gt; Array         (             [4] =&gt; cuatro         )      [4] =&gt; Array         (             [5] =&gt; cinco         )  ) </span></div>     </div>    </div>   </p>   <p class="para">    传入两个及以上的数组时，它们元素数量将会相同。因为回调函数会并行地处理相互对应的元素。    如果几个数组的元素数量不一致：空元素会扩展短那个数组，直到长度和最长的数组一样。   </p>   <p class="para">    此函数有个有趣的用法：传入 <strong><span>NULL</span></strong> 作为回调函数的名称，将创建多维数组（一个数组，内部包含数组。）   </p>   <p class="para">    <div class="example" id="example-6039">     <p><strong>Example #4 多维数组：创建数组，内部包含数组</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$a&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #9876AA">1</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">2</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">3</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">4</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">5</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$b&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">"one"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"two"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"three"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"four"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"five"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$c&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">"uno"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"dos"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"tres"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"cuatro"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"cinco"</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$d&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">array_map</span><span style="color: #007700">(</span><span style="color: #9876AA">null</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$a</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$b</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$c</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$d</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Array (     [0] =&gt; Array         (             [0] =&gt; 1             [1] =&gt; one             [2] =&gt; uno         )      [1] =&gt; Array         (             [0] =&gt; 2             [1] =&gt; two             [2] =&gt; dos         )      [2] =&gt; Array         (             [0] =&gt; 3             [1] =&gt; three             [2] =&gt; tres         )      [3] =&gt; Array         (             [0] =&gt; 4             [1] =&gt; four             [2] =&gt; cuatro         )      [4] =&gt; Array         (             [0] =&gt; 5             [1] =&gt; five             [2] =&gt; cinco         )  ) </span></div>     </div>    </div>   </p>   <p class="para">    如果仅传入一个数组，键（key）会保留；传入多个数组，键（key）是整型数字的序列。   </p>   <p class="para">    <div class="example" id="example-6040">     <p><strong>Example #5 <span class="function"><strong style="color:#CC7832">array_map()</strong></span> 键（key）是 string</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$arr&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">"stringkey"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"value"</span><span style="color: #007700">);<br />function&nbsp;</span><span style="color: #9876AA">cb1</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;array&nbsp;(</span><span style="color: #9876AA">$a</span><span style="color: #007700">);<br />}<br />function&nbsp;</span><span style="color: #9876AA">cb2</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$b</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;array&nbsp;(</span><span style="color: #9876AA">$a</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$b</span><span style="color: #007700">);<br />}<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">array_map</span><span style="color: #007700">(</span><span style="color: #DD0000">"cb1"</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$arr</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">array_map</span><span style="color: #007700">(</span><span style="color: #DD0000">"cb2"</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$arr</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$arr</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">array_map</span><span style="color: #007700">(</span><span style="color: #9876AA">null</span><span style="color: #007700">,&nbsp;&nbsp;</span><span style="color: #9876AA">$arr</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">array_map</span><span style="color: #007700">(</span><span style="color: #9876AA">null</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$arr</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$arr</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> array(1) {   [&quot;stringkey&quot;]=&gt;   array(1) {     [0]=&gt;     string(5) &quot;value&quot;   } } array(1) {   [0]=&gt;   array(2) {     [0]=&gt;     string(5) &quot;value&quot;     [1]=&gt;     string(5) &quot;value&quot;   } } array(1) {   [&quot;stringkey&quot;]=&gt;   string(5) &quot;value&quot; } array(1) {   [0]=&gt;   array(2) {     [0]=&gt;     string(5) &quot;value&quot;     [1]=&gt;     string(5) &quot;value&quot;   } } </span></div>     </div>    </div>   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-map-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link array_filter()} - 用回调函数过滤数组中的单元</span></li>     <li class="member"><span class="function">{@link array_reduce()} - 用回调函数迭代地将数组简化为单一的值</span></li>     <li class="member"><span class="function">{@link array_walk()} - 使用用户自定义函数对数组中的每个元素做回调处理</span></li>     <li class="member"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.callback" class="link">callback</a> 类型的信息</li>    </ul>   </span>  </div>    <div class="up"><a href="http://php.net/manual/zh/ref.array.php">数组 函数</a></div></div>
 * @return array an array containing all the elements of arr1*/
function array_map($callback, array $arr1, array $_ = null) { }

/**
*<div id="function.array-chunk" class="refentry">    <div class="refnamediv">     <h1 class="refname">array_chunk</h1>     <p class="verinfo">(PHP 4 &gt;= 4.2.0, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">array_chunk</span> &mdash; <span class="dc-title">将一个数组分割成多个</span></p>     </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-chunk-description">   <h3 class="title">说明</h3>      <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">       <span class="type" style="color:#EAB766">array</span> <span class="methodname" style="color:#CC7832"><strong>array_chunk</strong></span>        ( <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">$array</span></span>       , <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#2EACF9">$size</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#2EACF9">$preserve_keys</span><span class="initializer"> = false</span></span>      ] )</div>      <p class="para rdfs-comment">      将一个数组分割成多个数组，其中每个数组的单元数目由      <span class="parameter" style="color:#2EACF9">size</span> 决定。最后一个数组的单元数目可能会少于 <span class="parameter" style="color:#2EACF9">size</span> 个。           </p>    </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-chunk-parameters">   <h3 class="title">参数</h3>   <span>    <dl>             <dt> <span class="parameter" style="color:#2EACF9">array</span></dt>       <dd>        <p class="para">        需要操作的数组       </p>      </dd>                  <dt> <span class="parameter" style="color:#2EACF9">size</span></dt>       <dd>        <p class="para">        每个数组的单元数目       </p>      </dd>                  <dt> <span class="parameter" style="color:#2EACF9">preserve_keys</span></dt>       <dd>        <p class="para">        设为 <strong><span>TRUE</span></strong>，可以使 PHP      保留输入数组中原来的键名。如果你指定了 <strong><span>FALSE</span></strong>，那每个结果数组将用从零开始的新数字索引。默认值是 <strong><span>FALSE</span></strong>。       </p>      </dd>           </dl>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-chunk-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    得到的数组是一个多维数组中的单元，其索引从零开始，每一维包含了 <span class="parameter" style="color:#2EACF9">size</span> 个元素。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-function.array-chunk-errors">   <h3 class="title">错误／异常</h3>   <p class="para">    如果 <span class="parameter" style="color:#2EACF9">size</span> 小于 1，会抛出一个    <strong><span>E_WARNING</span></strong> 错误并返回 <strong><span>NULL</span></strong>。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-chunk-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-6007">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">array_chunk()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$input_array&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">'a'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'b'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'c'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'d'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'e'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">array_chunk</span><span style="color: #007700">(</span><span style="color: #9876AA">$input_array</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">2</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">array_chunk</span><span style="color: #007700">(</span><span style="color: #9876AA">$input_array</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">2</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">true</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Array (     [0] =&gt; Array         (             [0] =&gt; a             [1] =&gt; b         )      [1] =&gt; Array         (             [0] =&gt; c             [1] =&gt; d         )      [2] =&gt; Array         (             [0] =&gt; e         )  ) Array (     [0] =&gt; Array         (             [0] =&gt; a             [1] =&gt; b         )      [1] =&gt; Array         (             [2] =&gt; c             [3] =&gt; d         )      [2] =&gt; Array         (             [4] =&gt; e         )  ) </span></div>     </div>    </div>   </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-chunk-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link array_slice()} - 从数组中取出一段</span></li>    </ul>   </span>  </div>    <div class="up"><a href="http://php.net/manual/zh/ref.array.php">数组 函数</a></div></div>
 * @return array a multidimensional numerically indexed array, starting with zero,*/
function array_chunk(array $input, $size, $preserve_keys = null) { }

/**
*<div id="function.array-combine" class="refentry">    <div class="refnamediv">     <h1 class="refname">array_combine</h1>     <p class="verinfo">(PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">array_combine</span> &mdash; <span class="dc-title">      创建一个数组，用一个数组的值作为其键名，另一个数组的值作为其值     </span></p>     </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-combine-description">   <h3 class="title">说明</h3>      <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">       <span class="type" style="color:#EAB766">array</span> <span class="methodname" style="color:#CC7832"><strong>array_combine</strong></span>        ( <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">$keys</span></span>       , <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">$values</span></span>       )</div>      <p class="para rdfs-comment">      返回一个 <span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span>，用来自      <span class="parameter" style="color:#2EACF9">keys</span> 数组的值作为键名，来自      <span class="parameter" style="color:#2EACF9">values</span> 数组的值作为相应的值。     </p>    </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-combine-parameters">   <h3 class="title">参数</h3>   <span>    <dl>             <dt> <span class="parameter" style="color:#2EACF9">keys</span></dt>       <dd>        <p class="para">        将被作为新数组的键。非法的值将会被转换为字符串类型（<span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>）。       </p>      </dd>                  <dt> <span class="parameter" style="color:#2EACF9">values</span></dt>       <dd>        <p class="para">        将被作为 <span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.types.array.php" class="type Array" style="color:#EAB766">Array</a></span> 的值。       </p>      </dd>           </dl>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-combine-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回合并的 <span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span>，如果两个数组的单元数不同则返回 <strong><span>FALSE</span></strong>。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-function.array-combine-errors">   <h3 class="title">错误／异常</h3>   <p class="para">    如果作为<span class="parameter" style="color:#2EACF9">keys</span>的数组和作为<span class="parameter" style="color:#2EACF9">values</span>的数组的元素个数不一样，将会抛出一个警告错误（<strong><span>E_WARNING</span></strong>）。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.array-combine-changelog">   <h3 class="title">更新日志</h3>   <span>    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>5.4.0</td>        <td>         （修复）早期版本中如果是空数组就报<strong><span>E_WARNING</span></strong>的错并且返回<strong><span>FALSE</span></strong>。        </td>       </tr>       </tbody>         </table>    </span>  </div>     <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-combine-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-6012">     <p><strong>Example #1 一个 <span class="function"><strong style="color:#CC7832">array_combine()</strong></span> 简单的例子</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$a&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">'green'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'red'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'yellow'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$b&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">'avocado'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'apple'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'banana'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$c&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">array_combine</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$b</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$c</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Array (     [green]  =&gt; avocado     [red]    =&gt; apple     [yellow] =&gt; banana ) </span></div>     </div>    </div>   </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-combine-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link array_merge()} - 合并一个或多个数组</span></li>     <li class="member"><span class="function">{@link array_walk()} - 使用用户自定义函数对数组中的每个元素做回调处理</span></li>     <li class="member"><span class="function">{@link array_values()} - 返回数组中所有的值</span></li>    </ul>   </span>  </div>    <div class="up"><a href="http://php.net/manual/zh/ref.array.php">数组 函数</a></div></div>
 * @return array the combined array, false if the number of elements*/
function array_combine(array $keys, array $values) { }

/**
*<div id="function.array-key-exists" class="refentry">  <div class="refnamediv">   <h1 class="refname">array_key_exists</h1>   <p class="verinfo">(PHP 4 &gt;= 4.0.7, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">array_key_exists</span> &mdash; <span class="dc-title">检查数组里是否有指定的键名或索引</span></p>   </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-key-exists-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">bool</span> <span class="methodname" style="color:#CC7832"><strong>array_key_exists</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#2EACF9">$key</span></span>    , <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">$array</span></span>    )</div>    <p class="para rdfs-comment">    数组里有键 <span class="parameter" style="color:#2EACF9">key</span> 时，<span class="function"><strong style="color:#CC7832">array_key_exists()</strong></span> 返回 <strong><span>TRUE</span></strong>。    <span class="parameter" style="color:#2EACF9">key</span>    可以是任何能作为数组索引的值。   </p>    </div>         <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-key-exists-parameters">     <h3 class="title">参数</h3>     <span>      <dl>                <dt> <span class="parameter" style="color:#2EACF9">key</span></dt>         <dd>          <p class="para">          要检查的键。         </p>        </dd>                       <dt> <span class="parameter" style="color:#2EACF9">array</span></dt>         <dd>          <p class="para">          一个数组，包含待检查的键。         </p>        </dd>              </dl>      </span>    </div>             <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-key-exists-returnvalues">     <h3 class="title">返回值</h3>     <p class="para">      成功时返回 <strong><span>TRUE</span></strong>， 或者在失败时返回 <strong><span>FALSE</span></strong>。     </p>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>:     <p class="para">     <span class="function"><strong style="color:#CC7832">array_key_exists()</strong></span> 仅仅搜索第一维的键。     多维数组里嵌套的键不会被搜索到。    </p>   </p></blockquote>    </div>         <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-key-exists-examples">     <h3 class="title">范例</h3>     <span>      <div class="example" id="example-6032">       <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">array_key_exists()</strong></span> 例子</strong></p>       <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$search_array&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">'first'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">1</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'second'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">4</span><span style="color: #007700">);<br />if&nbsp;(</span><span style="color: #9876AA">array_key_exists</span><span style="color: #007700">(</span><span style="color: #DD0000">'first'</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$search_array</span><span style="color: #007700">))&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"The&nbsp;'first'&nbsp;element&nbsp;is&nbsp;in&nbsp;the&nbsp;array"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>     </div>      </span>      <div class="example" id="example-6033">       <p><strong>Example #2 <span class="function"><strong style="color:#CC7832">array_key_exists()</strong></span> 与 <span class="function">{@link isset()}</span> 的对比</strong></p>       <div class="example-contents"><p>        <span class="function">{@link isset()}</span> 对于数组中为 <strong><span>NULL</span></strong>        的值不会返回 <strong><span>TRUE</span></strong>，而        <span class="function"><strong style="color:#CC7832">array_key_exists()</strong></span> 会。       </p></div>       <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$search_array&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">'first'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">null</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'second'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">4</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">//&nbsp;returns&nbsp;false<br /></span><span style="color: #007700">isset(</span><span style="color: #9876AA">$search_array</span><span style="color: #007700">[</span><span style="color: #DD0000">'first'</span><span style="color: #007700">]);<br /><br /></span><span style="color: #FF8000">//&nbsp;returns&nbsp;true<br /></span><span style="color: #9876AA">array_key_exists</span><span style="color: #007700">(</span><span style="color: #DD0000">'first'</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$search_array</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>    </div>       </div>    </div>         <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.array-key-exists-notes">     <h3 class="title">注释</h3>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>:      <p class="para">      由于为了兼容以前版本，如果 <span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.types.object.php" class="type object" style="color:#EAB766">object</a></span> 当做 <span class="parameter" style="color:#2EACF9">array</span> 传入 <span class="function"><strong style="color:#CC7832">array_key_exists()</strong></span>，同时  <span class="parameter" style="color:#2EACF9">key</span> 是对象的属性，也会返回  <strong><span>TRUE</span></strong>。            不要依赖这个特性，保证参数 <span class="parameter" style="color:#2EACF9">array</span> 类型是数组（<span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span>）。     </p>     <p class="para">      要检查对象是否有某个属性，应该去用      <span class="function">{@link property_exists()}</span>。     </p>   </p></blockquote>    </div>         <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-key-exists-seealso">     <h3 class="title">参见</h3>     <span>      <ul class="simplelist">       <li class="member"><span class="function">{@link isset()} - 检测变量是否已设置并且非 NULL</span></li>       <li class="member"><span class="function">{@link array_keys()} - 返回数组中部分的或所有的键名</span></li>       <li class="member"><span class="function">{@link in_array()} - 检查数组中是否存在某个值</span></li>       <li class="member"><span class="function">{@link property_exists()} - 检查对象或类是否具有该属性</span></li>      </ul>     </span>    </div>      <div class="up"><a href="http://php.net/manual/zh/ref.array.php">数组 函数</a></div></div>
 * @return bool true on success or false on failure.*/
function array_key_exists($key, array $search) { }

/**
*<div id="function.pos" class="refentry">  <div class="refnamediv">   <h1 class="refname">pos</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">pos</span> &mdash; <span class="dc-title"><span class="function">{@link current()}</span> 的别名</span></p>   </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.pos-description">   <h3 class="title">说明</h3>   <p class="simpara">    此函数是该函数的别名：<span class="function">{@link current()}</span>。   </p>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.array.php">数组 函数</a></div></div>
*/
function pos(&$arg) { }

/**
*<div id="function.sizeof" class="refentry">  <div class="refnamediv">   <h1 class="refname">sizeof</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">sizeof</span> &mdash; <span class="dc-title"><span class="function">{@link count()}</span> 的别名 </span></p>   </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.sizeof-description">   <h3 class="title">说明</h3>   <p class="simpara">    此函数是该函数的别名：<span class="function">{@link count()}</span>。   </p>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.array.php">数组 函数</a></div></div>
 * @return int*/
function sizeof($var, $mode) { }

/**
*<div id="function.key-exists" class="refentry">  <div class="refnamediv">   <h1 class="refname">key_exists</h1>   <p class="verinfo">(PHP 4 &gt;= 4.0.6, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">key_exists</span> &mdash; <span class="dc-title">别名 <span class="function">{@link array_key_exists()}</span></span></p>   </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.key-exists-description">   <h3 class="title">说明</h3>   <p class="simpara">    此函数是该函数的别名：    <span class="function">{@link array_key_exists()}</span>.   </p>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.array.php">数组 函数</a></div></div>
 * @return bool true on success or false on failure.*/
function key_exists($key, $search) { }

/**
*<div id="function.assert" class="refentry">  <div class="refnamediv">   <h1 class="refname">assert</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">assert</span> &mdash; <span class="dc-title">检查一个断言是否为 <strong><span>FALSE</span></strong></span></p>   </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.assert-description">   <h3 class="title">说明</h3>   <p class="para">PHP 5</p>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">bool</span> <span class="methodname" style="color:#CC7832"><strong>assert</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#2EACF9">$assertion</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#2EACF9">$description</span></span>   ] )</div>    <p class="para rdfs-comment">PHP 7</p>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">bool</span> <span class="methodname" style="color:#CC7832"><strong>assert</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#2EACF9">$assertion</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766"><span class="type Throwable" style="color:#EAB766">Throwable</span></span> <span class="parameter" style="color:#2EACF9">$exception</span></span>   ] )</div>    <p class="para rdfs-comment">    <span class="function"><strong style="color:#CC7832">assert()</strong></span> 会检查指定的    <span class="parameter" style="color:#2EACF9">assertion</span> 并在结果为 <strong><span>FALSE</span></strong> 时采取适当的行动。    </p>   <div class="refsect2 unknown-descriptioo" id="refsect2-function.assert-unknown-descriptioo">    <h4 class="title">Traditional assertions (PHP 5 and 7)</h4>    <p class="para">    如果 <span class="parameter" style="color:#2EACF9">assertion</span> 是字符串，它将会被 <span class="function"><strong style="color:#CC7832">assert()</strong></span> 当做 PHP 代码来执行。    <span class="parameter" style="color:#2EACF9">assertion</span> 是字符串的优势是当禁用断言时它的开销会更小，并且在断言失败时消息会包含 <span class="parameter" style="color:#2EACF9">assertion</span> 表达式。    这意味着如果你传入了 boolean 的条件作为 <span class="parameter" style="color:#2EACF9">assertion</span>，这个条件将不会显示为断言函数的参数；在调用你定义的  <span class="function">{@link assert_options()}</span> 处理函数时，条件会转换为字符串，而布尔值 <strong><span>FALSE</span></strong> 会被转换成空字符串。   </p>   <p class="para">    断言这个功能应该只被用来调试。    你应该用于完整性检查时测试条件是否始终应该为 <strong><span>TRUE</span></strong>，来指示某些程序错误，或者检查具体功能的存在（类似扩展函数或特定的系统限制和功能）。   </p>   <p class="para">    断言不应该用于普通运行时操作，类似输入参数的检查。    作为一个经验法则，在断言禁用时你的代码也应该能够正确地运行。   </p>   <p class="para">    <span class="function"><strong style="color:#CC7832">assert()</strong></span> 的行为可以通过 <span class="function">{@link assert_options()}</span> 来配置，或者手册页面上描述的 .ini 设置。   </p>   <p class="para">    <span class="function">{@link assert_options()}</span> <strong><span>ASSERT_CALLBACK</span></strong> 配置指令允许设置回调函数来处理失败的断言。   </p>   <p class="para">    <span class="function"><strong style="color:#CC7832">assert()</strong></span> 回调函数在构建自动测试套件的时候尤其有用，因为它们允许你简易地捕获传入断言的代码，并包含断言的位置信息。    当信息能够被其他方法捕获，使用断言可以让它更快更方便！   </p>   <p class="para">    回调函数应该接受三个参数。    第一个参数包括了断言失败所在的文件。    第二个参数包含了断言失败所在的行号，第三个参数包含了失败的表达式（如有任意 — 字面值例如 1 或者 &quot;two&quot; 将不会传递到这个参数）。    PHP 5.4.8 及更高版本的用户也可以提供第四个可选参数，如果设置了，用于将 <span class="parameter" style="color:#2EACF9">description</span> 指定到 <span class="function"><strong style="color:#CC7832">assert()</strong></span>。   </p>   </div>    <div class="refsect2 unknown-unknown-descriptiop" id="function.assert.expectations">    <h4 class="title">Expectations (PHP 7 only)</h4>    <p class="para">     <span class="function"><strong style="color:#CC7832">assert()</strong></span> is a language construct in PHP 7, allowing for     the definition of expectations: assertions that take effect in development     and testing environments, but are optimised away to have zero cost in     production.    </p>    <p class="para">     While <span class="function">{@link assert_options()}</span> can still be used to control     behaviour as described above for backward compatibility reasons, PHP 7     only code should use the two new configuration directives to control     the behaviour of <span class="function"><strong style="color:#CC7832">assert()</strong></span> and not call     <span class="function">{@link assert_options()}</span>.    </p>    <table class="doctable table">     <caption><strong>      PHP 7 configuration directives for <span class="function"><strong style="color:#CC7832">assert()</strong></span>     </strong></caption>           <thead>       <tr>        <th>Directive</th>        <th>Default value</th>        <th>Possible values</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>         <a href="http://php.net/manual/zh/ini.core.php#ini.zend.assertions" class="link">zend.assertions</a>        </td>        <td><em>1</em></td>        <td>         <ul class="simplelist">          <li class="member">           <em>1</em>: generate and execute code (development mode)          </li>          <li class="member">                      <em>0</em>: generate code but jump around it at runtime          </li>          <li class="member">           <em>-1</em>: do not generate code (production mode)          </li>         </ul>        </td>       </tr>        <tr>        <td>         <a href="http://php.net/manual/zh/info.configuration.php#ini.assert.exception" class="link">assert.exception</a>        </td>        <td><em>0</em></td>        <td>         <ul class="simplelist">          <li class="member">           <em>1</em>: throw when the assertion fails, either by           throwing the object provided as the <span class="parameter" style="color:#2EACF9">exception</span>           or by throwing a new <strong class="classname">AssertionError</strong> object if           <span class="parameter" style="color:#2EACF9">exception</span> wasn&#039;t provided          </li>          <li class="member">           <em>0</em>: use or generate a           <strong class="classname">Throwable</strong> as described above, but only           generate a warning based on that object rather than throwing it           (compatible with PHP 5 behaviour)          </li>         </ul>        </td>       </tr>       </tbody>         </table>    </div>   </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.assert-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">assertion</span></dt>       <dd>        <p class="para">        断言。In PHP 5, this must be either a <span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> to        be evaluated or a <span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.types.boolean.php" class="type boolean" style="color:#EAB766">boolean</a></span> to be tested. In PHP 7, this may        also be any expression that returns a value, which will be executed and        the result used to indicate whether the assertion succeeded or failed.       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">description</span></dt>       <dd>        <p class="para">        如果 <span class="parameter" style="color:#2EACF9">assertion</span> 失败了，选项 description 将会包括在失败信息里。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">exception</span></dt>       <dd>        <p class="para">        In PHP 7, the second parameter can be a        <strong class="classname">Throwable</strong> object instead of a descriptive        <span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>, in which case this is the object that will be        thrown if the assertion fails and the        <a href="http://php.net/manual/zh/info.configuration.php#ini.assert.exception" class="link">assert.exception</a>        configuration directive is enabled.       </p>      </dd>          </dl>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.assert-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    assertion 是 false 则返回 <strong><span>FALSE</span></strong>，否则是 <strong><span>TRUE</span></strong>。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.assert-changelog">   <h3 class="title">更新日志</h3>   <span>    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>7.0.0</td>        <td>         <span class="function"><strong style="color:#CC7832">assert()</strong></span> is now a language construct and not a         function. <span class="function"><strong style="color:#CC7832">assertion()</strong></span> can now be an expression.         The second parameter is now interpreted either as an         <span class="parameter" style="color:#2EACF9">exception</span> (if a         <strong class="classname">Throwable</strong> object is given), or as the         <span class="parameter" style="color:#2EACF9">description</span> supported from PHP 5.4.8 onwards.        </td>       </tr>        <tr>        <td>5.4.8</td>        <td>         增加了参数 <span class="parameter" style="color:#2EACF9">description</span>。         <span class="parameter" style="color:#2EACF9">description</span> 现在也作为第四个参数提供给 <strong><span>ASSERT_CALLBACK</span></strong> 模式里的回调函数。        </td>       </tr>       </tbody>         </table>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.assert-examples">   <h3 class="title">范例</h3>   <div class="refsect2 unknown-examplet" id="refsect2-function.assert-unknown-examplet">    <h4 class="title">Traditional assertions (PHP 5 and 7)</h4>    <span>     <div class="example" id="example-485">      <p><strong>Example #1 使用自定义处理程序处理失败的断言</strong></p>      <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">//&nbsp;激活断言，并设置它为&nbsp;quiet<br /></span><span style="color: #9876AA">assert_options</span><span style="color: #007700">(</span><span style="color: #9876AA">ASSERT_ACTIVE</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">1</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">assert_options</span><span style="color: #007700">(</span><span style="color: #9876AA">ASSERT_WARNING</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">0</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">assert_options</span><span style="color: #007700">(</span><span style="color: #9876AA">ASSERT_QUIET_EVAL</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">1</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">//创建处理函数<br /></span><span style="color: #007700">function&nbsp;</span><span style="color: #9876AA">my_assert_handler</span><span style="color: #007700">(</span><span style="color: #9876AA">$file</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$line</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$code</span><span style="color: #007700">)<br />{<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"&lt;hr&gt;Assertion&nbsp;Failed:<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;File&nbsp;'</span><span style="color: #9876AA">$file</span><span style="color: #DD0000">'&lt;br&nbsp;/&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Line&nbsp;'</span><span style="color: #9876AA">$line</span><span style="color: #DD0000">'&lt;br&nbsp;/&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Code&nbsp;'</span><span style="color: #9876AA">$code</span><span style="color: #DD0000">'&lt;br&nbsp;/&gt;&lt;hr&nbsp;/&gt;"</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #FF8000">//&nbsp;设置回调函数<br /></span><span style="color: #9876AA">assert_options</span><span style="color: #007700">(</span><span style="color: #9876AA">ASSERT_CALLBACK</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'my_assert_handler'</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">//&nbsp;让一则断言失败<br /></span><span style="color: #9876AA">assert</span><span style="color: #007700">(</span><span style="color: #DD0000">'mysql_query("")'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>     </div>   </span>   <p class="para">    <div class="example" id="example-486">     <p><strong>Example #2 使用自定义处理器打印描述信息</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">//&nbsp;激活断言，并设置它为&nbsp;quiet<br /></span><span style="color: #9876AA">assert_options</span><span style="color: #007700">(</span><span style="color: #9876AA">ASSERT_ACTIVE</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">1</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">assert_options</span><span style="color: #007700">(</span><span style="color: #9876AA">ASSERT_WARNING</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">0</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">assert_options</span><span style="color: #007700">(</span><span style="color: #9876AA">ASSERT_QUIET_EVAL</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">1</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">//创建处理函数<br /></span><span style="color: #007700">function&nbsp;</span><span style="color: #9876AA">my_assert_handler</span><span style="color: #007700">(</span><span style="color: #9876AA">$file</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$line</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$code</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$desc&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">null</span><span style="color: #007700">)<br />{<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"Assertion&nbsp;failed&nbsp;at&nbsp;</span><span style="color: #9876AA">$file</span><span style="color: #DD0000">:</span><span style="color: #9876AA">$line</span><span style="color: #DD0000">:&nbsp;</span><span style="color: #9876AA">$code</span><span style="color: #DD0000">"</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(</span><span style="color: #9876AA">$desc</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">":&nbsp;</span><span style="color: #9876AA">$desc</span><span style="color: #DD0000">"</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;}<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #FF8000">//&nbsp;设置回调函数<br /></span><span style="color: #9876AA">assert_options</span><span style="color: #007700">(</span><span style="color: #9876AA">ASSERT_CALLBACK</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'my_assert_handler'</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">//&nbsp;Make&nbsp;an&nbsp;assertion&nbsp;that&nbsp;should&nbsp;fail<br /></span><span style="color: #9876AA">assert</span><span style="color: #007700">(</span><span style="color: #DD0000">'2&nbsp;&lt;&nbsp;1'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">assert</span><span style="color: #007700">(</span><span style="color: #DD0000">'2&nbsp;&lt;&nbsp;1'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'Two&nbsp;is&nbsp;less&nbsp;than&nbsp;one'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Assertion failed at test.php:21: 2 &lt; 1 Assertion failed at test.php:22: 2 &lt; 1: Two is less than one </span></div>     </div>    </div>   </p>  </div>    <div class="refsect2 unknown-unknown-exampleu" id="refsect2-function.assert-unknown-unknown-exampleu">    <h4 class="title">Expectations (PHP 7 only)</h4>    <div class="example" id="example-487">     <p><strong>Example #3 Expectations without a custom exception</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />assert</span><span style="color: #007700">(</span><span style="color: #9876AA">true&nbsp;</span><span style="color: #007700">==&nbsp;</span><span style="color: #9876AA">false</span><span style="color: #007700">);<br />echo&nbsp;</span><span style="color: #DD0000">'Hi!'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>      With <a href="http://php.net/manual/zh/ini.core.php#ini.zend.assertions" class="link">zend.assertions</a> set to 0,      the above example will output:     </p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Hi! </span></div>     </div>     <div class="example-contents"><p>      With <a href="http://php.net/manual/zh/ini.core.php#ini.zend.assertions" class="link">zend.assertions</a> set to 1      and <a href="http://php.net/manual/zh/info.configuration.php#ini.assert.exception" class="link">assert.exception</a> set to 0,      the above example will output:     </p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Warning: assert(): assert(true == false) failed in - on line 2 Hi! </span></div>     </div>     <div class="example-contents"><p>      With <a href="http://php.net/manual/zh/ini.core.php#ini.zend.assertions" class="link">zend.assertions</a> set to 1      and <a href="http://php.net/manual/zh/info.configuration.php#ini.assert.exception" class="link">assert.exception</a> set to 1,      the above example will output:     </p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Fatal error: Uncaught AssertionError: assert(true == false) in -:2 Stack trace: #0 -(2): assert(false, &#039;assert(true == ...&#039;) #1 {main}   thrown in - on line 2 </span></div>     </div>    </div>    <div class="example" id="example-488">     <p><strong>Example #4 Expectations with a custom exception</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">class&nbsp;</span><span style="color: #9876AA">CustomError&nbsp;</span><span style="color: #007700">extends&nbsp;</span><span style="color: #9876AA">AssertionError&nbsp;</span><span style="color: #007700">{}<br /><br /></span><span style="color: #9876AA">assert</span><span style="color: #007700">(</span><span style="color: #9876AA">true&nbsp;</span><span style="color: #007700">==&nbsp;</span><span style="color: #9876AA">false</span><span style="color: #007700">,&nbsp;new&nbsp;</span><span style="color: #9876AA">CustomError</span><span style="color: #007700">(</span><span style="color: #DD0000">'True&nbsp;is&nbsp;not&nbsp;false!'</span><span style="color: #007700">));<br />echo&nbsp;</span><span style="color: #DD0000">'Hi!'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>      With <a href="http://php.net/manual/zh/ini.core.php#ini.zend.assertions" class="link">zend.assertions</a> set to 0,      the above example will output:     </p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Hi! </span></div>     </div>     <div class="example-contents"><p>      With <a href="http://php.net/manual/zh/ini.core.php#ini.zend.assertions" class="link">zend.assertions</a> set to 1      and <a href="http://php.net/manual/zh/info.configuration.php#ini.assert.exception" class="link">assert.exception</a> set to 0,      the above example will output:     </p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Warning: assert(): CustomError: True is not false! in -:4 Stack trace: #0 {main} failed in - on line 4 Hi! </span></div>     </div>     <div class="example-contents"><p>      With <a href="http://php.net/manual/zh/ini.core.php#ini.zend.assertions" class="link">zend.assertions</a> set to 1      and <a href="http://php.net/manual/zh/info.configuration.php#ini.assert.exception" class="link">assert.exception</a> set to 1,      the above example will output:     </p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Fatal error: Uncaught CustomError: True is not false! in -:4 Stack trace: #0 {main}   thrown in - on line 4 </span></div>     </div>    </div>   </div>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.assert-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link assert_options()} - 设置/获取断言的各种标志</span></li>    </ul>   </span>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.info.php">PHP 选项/信息 函数</a></div></div>
 * @return bool false if the assertion is false, true otherwise.*/
function assert($assertion, $description) { }

/**
*<div id="function.cli-get-process-title" class="refentry">  <div class="refnamediv">   <h1 class="refname">cli_get_process_title</h1>   <p class="verinfo">(PHP 5 &gt;= 5.5.0, PHP 7)</p><p class="refpurpose"><span class="refname">cli_get_process_title</span> &mdash; <span class="dc-title">Returns the current process title</span></p>   </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.cli-get-process-title-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">string</span> <span class="methodname" style="color:#CC7832"><strong>cli_get_process_title</strong></span>     ( <span class="methodparam">void</span>    )</div>    <p class="para rdfs-comment">    Returns the current process title, as set by    <span class="function">{@link cli_set_process_title()}</span>. Note that this may not exactly    match what is shown in <strong class="command">ps</strong> or <strong class="command">top</strong>,    depending on your operating system.   </p>    <p class="para">    This function is available only in    <a href="http://php.net/manual/zh/features.commandline.php" class="link">CLI</a> mode.   </p>   </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.cli-get-process-title-parameters">   <h3 class="title">参数</h3>   <span>此函数没有参数。</span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.cli-get-process-title-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    Return a string with the current process title or <strong><span>NULL</span></strong> on error.   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-function.cli-get-process-title-errors">   <h3 class="title">错误／异常</h3>       <p class="para">    An <strong><span>E_WARNING</span></strong> will be generated if the operating system    is unsupported.   </p>  </div>     <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.cli-get-process-title-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-489">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">cli_get_process_title()</strong></span> example</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #DD0000">"Process&nbsp;title:&nbsp;"&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #9876AA">cli_get_process_title</span><span style="color: #007700">()&nbsp;.&nbsp;</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>     </div>   </span>  </div>     <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.cli-get-process-title-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link cli_set_process_title()} - Sets the process title</span></li>    </ul>   </span>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.info.php">PHP 选项/信息 函数</a></div></div>
 * @return string*/
function cli_get_process_title() { }

/**
*<div id="function.cli-set-process-title" class="refentry">  <div class="refnamediv">   <h1 class="refname">cli_set_process_title</h1>   <p class="verinfo">(PHP 5 &gt;= 5.5.0, PHP 7)</p><p class="refpurpose"><span class="refname">cli_set_process_title</span> &mdash; <span class="dc-title">Sets the process title</span></p>   </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.cli-set-process-title-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">bool</span> <span class="methodname" style="color:#CC7832"><strong>cli_set_process_title</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#2EACF9">$title</span></span>    )</div>     <p class="para rdfs-comment">    Sets the process title visible in tools such as <strong class="command">top</strong> and    <strong class="command">ps</strong>. This function is available only in    <a href="http://php.net/manual/zh/features.commandline.php" class="link">CLI</a> mode.   </p>   </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.cli-set-process-title-parameters">   <h3 class="title">参数</h3>   <dl>          <dt> <span class="parameter" style="color:#2EACF9">title</span></dt>      <dd>       <span>       The new title.      </span>     </dd>        </dl>   </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.cli-set-process-title-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    成功时返回 <strong><span>TRUE</span></strong>， 或者在失败时返回 <strong><span>FALSE</span></strong>。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-function.cli-set-process-title-errors">   <h3 class="title">错误／异常</h3>       <p class="para">    An <strong><span>E_WARNING</span></strong> will be generated if the operating system    is unsupported.   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.cli-set-process-title-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-490">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">cli_set_process_title()</strong></span> example</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$title&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">"My&nbsp;Amazing&nbsp;PHP&nbsp;Script"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$pid&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">getmypid</span><span style="color: #007700">();&nbsp;</span><span style="color: #FF8000">//&nbsp;you&nbsp;can&nbsp;use&nbsp;this&nbsp;to&nbsp;see&nbsp;your&nbsp;process&nbsp;title&nbsp;in&nbsp;ps<br /><br /></span><span style="color: #007700">if&nbsp;(!</span><span style="color: #9876AA">cli_set_process_title</span><span style="color: #007700">(</span><span style="color: #9876AA">$title</span><span style="color: #007700">))&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"Unable&nbsp;to&nbsp;set&nbsp;process&nbsp;title&nbsp;for&nbsp;PID&nbsp;</span><span style="color: #9876AA">$pid</span><span style="color: #DD0000">...\n"</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;exit(</span><span style="color: #9876AA">1</span><span style="color: #007700">);<br />}&nbsp;else&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"The&nbsp;process&nbsp;title&nbsp;'</span><span style="color: #9876AA">$title</span><span style="color: #DD0000">'&nbsp;for&nbsp;PID&nbsp;</span><span style="color: #9876AA">$pid</span><span style="color: #DD0000">&nbsp;has&nbsp;been&nbsp;set&nbsp;for&nbsp;your&nbsp;process!\n"</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">sleep</span><span style="color: #007700">(</span><span style="color: #9876AA">5</span><span style="color: #007700">);<br />}<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>     </div>   </span>  </div>     <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.cli-set-process-title-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link cli_get_process_title()} - Returns the current process title</span></li>     <li class="member"><span class="function">{@link setproctitle()} - Set the process title</span></li>    </ul>   </span>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.info.php">PHP 选项/信息 函数</a></div></div>
 * @return bool Returns TRUE on success or FALSE on failure.*/
function cli_set_process_title($title) { }

/**
*<div id="function.assert-options" class="refentry">  <div class="refnamediv">   <h1 class="refname">assert_options</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">assert_options</span> &mdash; <span class="dc-title">设置/获取断言的各种标志</span></p>   </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.assert-options-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="methodname" style="color:#CC7832"><strong>assert_options</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#2EACF9">$what</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#2EACF9">$value</span></span>   ] )</div>    <p class="para rdfs-comment">    设置 <span class="function">{@link assert()}</span> 的各种控制选项，或者是仅仅查询当前的设置。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.assert-options-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">what</span></dt>       <dd>        <p class="para">        <table class="doctable table">         <caption><strong>断言标志</strong></caption>                   <thead>           <tr>            <th>标志</th>            <th>INI 设置</th>            <th>默认值</th>            <th>描述</th>           </tr>           </thead>           <tbody class="tbody">           <tr>            <td>ASSERT_ACTIVE</td>            <td>assert.active</td>            <td>1</td>            <td>启用 <span class="function">{@link assert()}</span> 断言</td>           </tr>            <tr>            <td>ASSERT_WARNING</td>            <td>assert.warning</td>            <td>1</td>            <td>为每个失败的断言产生一个 PHP 警告（warning）</td>           </tr>            <tr>            <td>ASSERT_BAIL</td>            <td>assert.bail</td>            <td>0</td>            <td>在断言失败时中止执行</td>           </tr>            <tr>            <td>ASSERT_QUIET_EVAL</td>            <td>assert.quiet_eval</td>            <td>0</td>            <td>             在断言表达式求值时禁用 error_reporting            </td>           </tr>            <tr>            <td>ASSERT_CALLBACK</td>            <td>assert.callback</td>            <td>(<strong><span>NULL</span></strong>)</td>            <td>断言失败时调用回调函数</td>           </tr>           </tbody>                 </table>        </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">value</span></dt>       <dd>        <p class="para">        标志的新值。       </p>      </dd>          </dl>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.assert-options-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回任意标志的原始设置，出错时返回 <strong><span>FALSE</span></strong>。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.assert-options-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-484">    <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">assert_options()</strong></span> 例子</strong></p>    <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">//&nbsp;处理断言失败时的函数<br /></span><span style="color: #007700">function&nbsp;</span><span style="color: #9876AA">assert_failure</span><span style="color: #007700">()<br />{<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">'Assert&nbsp;failed'</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #FF8000">//&nbsp;我们的测试函数<br /></span><span style="color: #007700">function&nbsp;</span><span style="color: #9876AA">test_assert</span><span style="color: #007700">(</span><span style="color: #9876AA">$parameter</span><span style="color: #007700">)<br />{<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">assert</span><span style="color: #007700">(</span><span style="color: #9876AA">is_bool</span><span style="color: #007700">(</span><span style="color: #9876AA">$parameter</span><span style="color: #007700">));<br />}<br /><br /></span><span style="color: #FF8000">//&nbsp;设置断言标志<br /></span><span style="color: #9876AA">assert_options</span><span style="color: #007700">(</span><span style="color: #9876AA">ASSERT_ACTIVE</span><span style="color: #007700">,&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">true</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">assert_options</span><span style="color: #007700">(</span><span style="color: #9876AA">ASSERT_BAIL</span><span style="color: #007700">,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">true</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">assert_options</span><span style="color: #007700">(</span><span style="color: #9876AA">ASSERT_WARNING</span><span style="color: #007700">,&nbsp;&nbsp;</span><span style="color: #9876AA">false</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">assert_options</span><span style="color: #007700">(</span><span style="color: #9876AA">ASSERT_CALLBACK</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'assert_failure'</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">//&nbsp;让一个断言会失败<br /></span><span style="color: #9876AA">test_assert</span><span style="color: #007700">(</span><span style="color: #9876AA">1</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">//&nbsp;由于&nbsp;ASSERT_BAIL&nbsp;是&nbsp;true，这里永远也到不了<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #DD0000">'Never&nbsp;reached'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>     </div>   </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.assert-options-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link assert()} - 检查一个断言是否为 FALSE</span></li>    </ul>   </span>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.info.php">PHP 选项/信息 函数</a></div></div>
 * @return mixed the original setting of any option or false on errors.*/
function assert_options($what, $value = null) { }

/**
*<div id="function.version-compare" class="refentry">  <div class="refnamediv">   <h1 class="refname">version_compare</h1>   <p class="verinfo">(PHP 4 &gt;= 4.1.0, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">version_compare</span> &mdash; <span class="dc-title">对比两个「PHP 规范化」的版本数字字符串</span></p>   </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.version-compare-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="methodname" style="color:#CC7832"><strong>version_compare</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#2EACF9">$version1</span></span>    , <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#2EACF9">$version2</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#2EACF9">$operator</span></span>   ] )</div>    <p class="para rdfs-comment">    <span class="function"><strong style="color:#CC7832">version_compare()</strong></span> 用于对比两个「PHP 规范化」的版本数字字符串。   </p>   <p class="para">    此函数首先在版本字符串里用一个点 <em>.</em> 替换 <em>_</em>、<em>-</em> 和 <em>+</em>，也会在任意非数字前后插入一个点 <em>.</em>，这样，类似 &#039;4.3.2RC1&#039; 将会变成 &#039;4.3.2.RC.1&#039;。    接下来它会分割结果，    然后它会从左往右对比各个部分。    如果某部分包含了特定的版本字符串，将会用以下顺序处理：    <em>列表中未找到的任意字符串</em> &lt;     <em>dev</em> &lt; <em>alpha</em> =    <em>a</em> &lt; <em>beta</em> =    <em>b</em> &lt; <em>RC</em> =      <em>rc</em> &lt; <em>#</em> &lt;    <em>pl</em> = <em>p</em>。        这种方式不仅能够对比类似 &#039;4.1&#039; 和 &#039;4.1.2&#039; 那种不同的版本级别，同时也可以指定对比任何包含 PHP 开发状态的版本。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.version-compare-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">version1</span></dt>       <dd>        <p class="para">        第一个版本数。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">version2</span></dt>       <dd>        <p class="para">        第二个版本数。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">operator</span></dt>       <dd>        <p class="para">        如果你指定了可选的第三个参数 <span class="parameter" style="color:#2EACF9">operator</span>，你可以测试两者的特定关系。        可以的操作符分别是：<em>&lt;</em>、        <em>lt</em>、<em>&lt;=</em>、        <em>le</em>、<em>&gt;</em>、        <em>gt</em>、<em>&gt;=</em>、        <em>ge</em>、<em>==</em>、        <em>=</em>、<em>eq</em>、        <em>!=</em>、<em>&lt;&gt;</em> 和        <em>ne</em>。       </p>       <p class="para">        此参数区分大小写，它的值应该是小写的。       </p>      </dd>          </dl>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.version-compare-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">        默认情况下，在第一个版本低于第二个时，<span class="function"><strong style="color:#CC7832">version_compare()</strong></span> 返回 <em>-1</em>；如果两者相等，返回 <em>0</em>；第二个版本更低时则返回 <em>1</em>。   </p>   <p class="para">    当使用了可选参数 <span class="parameter" style="color:#2EACF9">operator</span> 时，如果关系是操作符所指定的那个，函数将返回 <strong><span>TRUE</span></strong>，否则返回 <strong><span>FALSE</span></strong>。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.version-compare-examples">   <h3 class="title">范例</h3>   <span>    下例使用了 <strong><span>PHP_VERSION</span></strong> 常量，因为它执行的代码包含了 PHP 版本的值。   </span>   <p class="para">    <div class="example" id="example-535">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">version_compare()</strong></span> examples</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">if&nbsp;(</span><span style="color: #9876AA">version_compare</span><span style="color: #007700">(</span><span style="color: #9876AA">PHP_VERSION</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'7.0.0'</span><span style="color: #007700">)&nbsp;&gt;=&nbsp;</span><span style="color: #9876AA">0</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">'I&nbsp;am&nbsp;at&nbsp;least&nbsp;PHP&nbsp;version&nbsp;7.0.0,&nbsp;my&nbsp;version:&nbsp;'&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #9876AA">PHP_VERSION&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />}<br /><br />if&nbsp;(</span><span style="color: #9876AA">version_compare</span><span style="color: #007700">(</span><span style="color: #9876AA">PHP_VERSION</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'5.3.0'</span><span style="color: #007700">)&nbsp;&gt;=&nbsp;</span><span style="color: #9876AA">0</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">'I&nbsp;am&nbsp;at&nbsp;least&nbsp;PHP&nbsp;version&nbsp;5.3.0,&nbsp;my&nbsp;version:&nbsp;'&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #9876AA">PHP_VERSION&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />}<br /><br />if&nbsp;(</span><span style="color: #9876AA">version_compare</span><span style="color: #007700">(</span><span style="color: #9876AA">PHP_VERSION</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'5.0.0'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'&gt;='</span><span style="color: #007700">))&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">'I&nbsp;am&nbsp;at&nbsp;least&nbsp;PHP&nbsp;version&nbsp;5.0.0,&nbsp;my&nbsp;version:&nbsp;'&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #9876AA">PHP_VERSION&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />}<br /><br />if&nbsp;(</span><span style="color: #9876AA">version_compare</span><span style="color: #007700">(</span><span style="color: #9876AA">PHP_VERSION</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'5.0.0'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'&lt;'</span><span style="color: #007700">))&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">'I&nbsp;am&nbsp;still&nbsp;PHP&nbsp;4,&nbsp;my&nbsp;version:&nbsp;'&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #9876AA">PHP_VERSION&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>     </div>   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.version-compare-notes">   <h3 class="title">注释</h3>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>:     <p class="para">     <strong><span>PHP_VERSION</span></strong> 常量包含了当前 PHP 的版本。    </p>   </p></blockquote>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>:     <p class="para">     注意，类似 5.3.0-dev 的预发行版本，被认为是低于它们的最终发行版本（就像 5.3.0）。    </p>   </p></blockquote>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>:     <p class="para">     指定类似 <em>alpha</em>、<em>beta</em> 的版本字符串是大小写敏感的。     版本字符串的来源若不遵循 PHP 标准，可能需要在调用 <span class="function"><strong style="color:#CC7832">version_compare()</strong></span> 之前先用 <span class="function">{@link strtolower()}</span> 转成小写。    </p>   </p></blockquote>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.version-compare-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link phpversion()} - 获取当前的PHP版本</span></li>     <li class="member"><span class="function">{@link php_uname()} - 返回运行 PHP 的系统的有关信息</span></li>     <li class="member"><span class="function">{@link function_exists()} - 如果给定的函数已经被定义就返回 TRUE</span></li>    </ul>   </span>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.info.php">PHP 选项/信息 函数</a></div></div>
 * @return mixed By default, version_compare returns*/
function version_compare($version1, $version2, $operator = null) { }

/**
*<div id="function.ftok" class="refentry">  <div class="refnamediv">   <h1 class="refname">ftok</h1>   <p class="verinfo">(PHP 4 &gt;= 4.2.0, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">ftok</span> &mdash; <span class="dc-title">Convert a pathname and a project identifier to a System V IPC key</span></p>   </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.ftok-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">int</span> <span class="methodname" style="color:#CC7832"><strong>ftok</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#2EACF9">$pathname</span></span>    , <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#2EACF9">$proj</span></span>    )</div>    <p class="para rdfs-comment">    The function converts the <span class="parameter" style="color:#2EACF9">pathname</span> of an existing    accessible file and a project identifier into an    <em>integer</em> for use with for example    <span class="function">{@link shmop_open()}</span> and other System V IPC keys.    </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.ftok-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">pathname</span></dt>       <dd>        <p class="para">        Path to an accessible file.       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">proj</span></dt>       <dd>        <p class="para">        Project identifier. This must be a one character string.       </p>      </dd>          </dl>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.ftok-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    On success the return value will be the created key value, otherwise    <em>-1</em> is returned.   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.ftok-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link shmop_open()} - Create or open shared memory block</span></li>     <li class="member"><span class="function">{@link sem_get()} - Get a semaphore id</span></li>    </ul>   </span>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.sem.php">Semaphore 函数</a></div></div>
 * @return int On success the return value will be the created key value, otherwise*/
function ftok($pathname, $proj) { }

/**
*<div id="function.str-rot13" class="refentry">  <div class="refnamediv">   <h1 class="refname">str_rot13</h1>   <p class="verinfo">(PHP 4 &gt;= 4.2.0, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">str_rot13</span> &mdash; <span class="dc-title">对字符串执行 ROT13 转换</span></p>   </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.str-rot13-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">string</span> <span class="methodname" style="color:#CC7832"><strong>str_rot13</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#2EACF9">$str</span></span>    )</div>    <p class="para rdfs-comment">    对 <span class="parameter" style="color:#2EACF9">str</span> 参数执行 ROT13 编码并将结果字符串返回。   </p>   <p class="para">    ROT13 编码简单地使用字母表中后面第 13 个字母替换当前字母，同时忽略非字母表中的字符。编码和解码都使用相同的函数，传递一个编码过的字符串作为参数，将得到原始字符串。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.str-rot13-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">str</span></dt>       <dd>        <p class="para">        输入字符串。       </p>      </dd>          </dl>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.str-rot13-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回给定字符串的 ROT13 版本。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.str-rot13-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-5953">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">str_rot13()</strong></span> 范例</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /><br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #9876AA">str_rot13</span><span style="color: #007700">(</span><span style="color: #DD0000">'PHP&nbsp;4.3.0'</span><span style="color: #007700">);&nbsp;</span><span style="color: #FF8000">//&nbsp;CUC&nbsp;4.3.0<br /><br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>     </div>   </span>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.strings.php">字符串 函数</a></div></div>
 * @return string the ROT13 version of the given string.*/
function str_rot13($str) { }

/**
*<div id="function.stream-get-filters" class="refentry">  <div class="refnamediv">   <h1 class="refname">stream_get_filters</h1>   <p class="verinfo">(PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">stream_get_filters</span> &mdash; <span class="dc-title">获取已注册的数据流过滤器列表</span></p>   </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.stream-get-filters-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">array</span> <span class="methodname" style="color:#CC7832"><strong>stream_get_filters</strong></span>     ( <span class="methodparam">void</span>    )</div>    <p class="simpara">    获取当前运行系统中已注册的数据流过滤器列表。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.stream-get-filters-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回一个包含所有有效的数据流过滤器名字的索引数组。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.stream-get-filters-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-4819">     <p><strong>Example #1 使用 <span class="function"><strong style="color:#CC7832">stream_get_filters()</strong></span></strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$streamlist&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">stream_get_filters</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$streamlist</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程的输出类似于：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Array (   [0] =&gt; string.rot13   [1] =&gt; string.toupper   [2] =&gt; string.tolower   [3] =&gt; string.base64   [4] =&gt; string.quoted-printable ) </span></div>     </div>    </div>   </span>  </div>      <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.stream-get-filters-seealso">   <h3 class="title">参见</h3>   <ul class="simplelist">    <li class="member"><span class="function">{@link stream_filter_register()} - Register a user defined stream filter</span></li>    <li class="member"><span class="function">{@link stream_get_wrappers()} - 获取已注册的流类型</span></li>   </ul>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.stream.php">Stream 函数</a></div></div>
 * @return array an indexed array containing the name of all stream filters*/
function stream_get_filters() { }

/**
*<div id="function.stream-isatty" class="refentry">  <div class="refnamediv">   <h1 class="refname">stream_isatty</h1>   <p class="verinfo">(PHP 7 &gt;= 7.2.0)</p><p class="refpurpose"><span class="refname">stream_isatty</span> &mdash; <span class="dc-title">Check if a stream is a TTY</span></p>   </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.stream-isatty-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">bool</span> <span class="methodname" style="color:#CC7832"><strong>stream_isatty</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">resource</span> <span class="parameter" style="color:#2EACF9">$stream</span></span>    )</div>    <p class="para rdfs-comment">    Determines if stream <span class="parameter" style="color:#2EACF9">stream</span> refers to a valid terminal type device.    This is a more portable version of <span class="function">{@link posix_isatty()}</span>, since it works on Windows systems too.   </p>  </div>     <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.stream-isatty-parameters">   <h3 class="title">参数</h3>   <dl>          <dt> <span class="parameter" style="color:#2EACF9">stream</span></dt>      <dd>       <span>             </span>     </dd>        </dl>   </div>     <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.stream-isatty-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    成功时返回 <strong><span>TRUE</span></strong>， 或者在失败时返回 <strong><span>FALSE</span></strong>。   </p>  </div>     <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.stream-isatty-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-4824">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">stream_isatty()</strong></span> example</strong></p>     <div class="example-contents"><p>      This command can be used to determine if a standard output / standard error stream is redirected to a file.     </p></div>     <div class="example-contents"><div class="shcode"><span>php -r &quot;var_export(stream_isatty(STDERR));&quot;</span> </div></div>      <div class="example-contents"><p>以上例程的输出类似于：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"><br />      true<br />     </div>     <div class="example-contents"><div class="shcode"><span>php -r &quot;var_export(stream_isatty(STDERR));&quot; 2&gt;output.txt</span> </div></div>      <div class="example-contents"><p>以上例程的输出类似于：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"><br />      false<br />     </div>    </div>    </span>  </div>    <div class="up"><a href="http://php.net/manual/zh/ref.stream.php">Stream 函数</a></div></div>
*/
function stream_isatty($name) {}

/**
*<div id="function.stream-filter-register" class="refentry">  <div class="refnamediv">   <h1 class="refname">stream_filter_register</h1>   <p class="verinfo">(PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">stream_filter_register</span> &mdash; <span class="dc-title">Register a user defined stream filter</span></p>   </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.stream-filter-register-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">bool</span> <span class="methodname" style="color:#CC7832"><strong>stream_filter_register</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#2EACF9">$filtername</span></span>    , <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#2EACF9">$classname</span></span>    )</div>    <p class="para rdfs-comment">    <span class="function"><strong style="color:#CC7832">stream_filter_register()</strong></span> allows you to implement    your own filter on any registered stream used with all the other    filesystem functions (such as <span class="function">{@link fopen()}</span>,    <span class="function">{@link fread()}</span> etc.).   </p>  </div>     <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.stream-filter-register-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">filtername</span></dt>       <dd>        <p class="para">        The filter name to be registered.       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">classname</span></dt>       <dd>        <p class="para">        To implement a filter, you need to define a class as an extension of        <a href="http://php.net/manual/zh/class.php-user-filter.php" class="classname">php_user_filter</a> with a number of member        functions. When performing read/write operations on the stream        to which your filter is attached, PHP will pass the data through your        filter (and any other filters attached to that stream) so that the        data may be modified as desired. You must implement the methods        exactly as described in <a href="http://php.net/manual/zh/class.php-user-filter.php" class="classname">php_user_filter</a> - doing        otherwise will lead to undefined behaviour.       </p>      </dd>          </dl>    </span>  </div>     <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.stream-filter-register-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    成功时返回 <strong><span>TRUE</span></strong>， 或者在失败时返回 <strong><span>FALSE</span></strong>。   </p>   <p class="para">    <span class="function"><strong style="color:#CC7832">stream_filter_register()</strong></span> will return <strong><span>FALSE</span></strong> if the    <span class="parameter" style="color:#2EACF9">filtername</span> is already defined.   </p>  </div>     <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.stream-filter-register-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-4815">     <p><strong>Example #1 Filter for capitalizing characters on <var class="filename">foo-bar.txt</var> stream</strong></p>     <div class="example-contents"><p>      The example below implements a filter named <em>strtoupper</em>      on the <var class="filename">foo-bar.txt</var> stream which will capitalize      all letter characters written to/read from that stream.     </p></div>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /><br /></span><span style="color: #FF8000">//&nbsp;Define&nbsp;our&nbsp;filter&nbsp;class&nbsp;<br /></span><span style="color: #007700">class&nbsp;</span><span style="color: #9876AA">strtoupper_filter&nbsp;</span><span style="color: #007700">extends&nbsp;</span><span style="color: #9876AA">php_user_filter&nbsp;</span><span style="color: #007700">{<br />&nbsp;&nbsp;function&nbsp;</span><span style="color: #9876AA">filter</span><span style="color: #007700">(</span><span style="color: #9876AA">$in</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$out</span><span style="color: #007700">,&nbsp;&amp;</span><span style="color: #9876AA">$consumed</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$closing</span><span style="color: #007700">)<br />&nbsp;&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;(</span><span style="color: #9876AA">$bucket&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">stream_bucket_make_writeable</span><span style="color: #007700">(</span><span style="color: #9876AA">$in</span><span style="color: #007700">))&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$bucket</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">data&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">strtoupper</span><span style="color: #007700">(</span><span style="color: #9876AA">$bucket</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">data</span><span style="color: #007700">);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$consumed&nbsp;</span><span style="color: #007700">+=&nbsp;</span><span style="color: #9876AA">$bucket</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">datalen</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">stream_bucket_append</span><span style="color: #007700">(</span><span style="color: #9876AA">$out</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$bucket</span><span style="color: #007700">);<br />&nbsp;&nbsp;&nbsp;&nbsp;}<br />&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;</span><span style="color: #9876AA">PSFS_PASS_ON</span><span style="color: #007700">;<br />&nbsp;&nbsp;}<br />}<br /><br /></span><span style="color: #FF8000">//&nbsp;Register&nbsp;our&nbsp;filter&nbsp;with&nbsp;PHP&nbsp;<br /></span><span style="color: #9876AA">stream_filter_register</span><span style="color: #007700">(</span><span style="color: #DD0000">"strtoupper"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"strtoupper_filter"</span><span style="color: #007700">)<br />&nbsp;&nbsp;&nbsp;&nbsp;or&nbsp;die(</span><span style="color: #DD0000">"Failed&nbsp;to&nbsp;register&nbsp;filter"</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$fp&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">fopen</span><span style="color: #007700">(</span><span style="color: #DD0000">"foo-bar.txt"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"w"</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">//&nbsp;Attach&nbsp;the&nbsp;registered&nbsp;filter&nbsp;to&nbsp;the&nbsp;stream&nbsp;just&nbsp;opened&nbsp;<br /></span><span style="color: #9876AA">stream_filter_append</span><span style="color: #007700">(</span><span style="color: #9876AA">$fp</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"strtoupper"</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">fwrite</span><span style="color: #007700">(</span><span style="color: #9876AA">$fp</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"Line1\n"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">fwrite</span><span style="color: #007700">(</span><span style="color: #9876AA">$fp</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"Word&nbsp;-&nbsp;2\n"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">fwrite</span><span style="color: #007700">(</span><span style="color: #9876AA">$fp</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"Easy&nbsp;As&nbsp;123\n"</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">fclose</span><span style="color: #007700">(</span><span style="color: #9876AA">$fp</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">//&nbsp;Read&nbsp;the&nbsp;contents&nbsp;back&nbsp;out<br />&nbsp;<br /></span><span style="color: #9876AA">readfile</span><span style="color: #007700">(</span><span style="color: #DD0000">"foo-bar.txt"</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> LINE1 WORD - 2 EASY AS 123 </span></div>     </div>    </div>   </span>   <p class="para">    <div class="example" id="example-4816">     <p><strong>Example #2 Registering a generic filter class to match multiple filter names.</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /><br /></span><span style="color: #FF8000">//&nbsp;Define&nbsp;our&nbsp;filter&nbsp;class&nbsp;<br /></span><span style="color: #007700">class&nbsp;</span><span style="color: #9876AA">string_filter&nbsp;</span><span style="color: #007700">extends&nbsp;</span><span style="color: #9876AA">php_user_filter&nbsp;</span><span style="color: #007700">{<br />&nbsp;&nbsp;var&nbsp;</span><span style="color: #9876AA">$mode</span><span style="color: #007700">;<br /><br />&nbsp;&nbsp;function&nbsp;</span><span style="color: #9876AA">filter</span><span style="color: #007700">(</span><span style="color: #9876AA">$in</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$out</span><span style="color: #007700">,&nbsp;&amp;</span><span style="color: #9876AA">$consumed</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$closing</span><span style="color: #007700">)<br />&nbsp;&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;(</span><span style="color: #9876AA">$bucket&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">stream_bucket_make_writeable</span><span style="color: #007700">(</span><span style="color: #9876AA">$in</span><span style="color: #007700">))&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(</span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">mode&nbsp;</span><span style="color: #007700">==&nbsp;</span><span style="color: #9876AA">1</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$bucket</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">data&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">strtoupper</span><span style="color: #007700">(</span><span style="color: #9876AA">$bucket</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">data</span><span style="color: #007700">);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;elseif&nbsp;(</span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">mode&nbsp;</span><span style="color: #007700">==&nbsp;</span><span style="color: #9876AA">0</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$bucket</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">data&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">strtolower</span><span style="color: #007700">(</span><span style="color: #9876AA">$bucket</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">data</span><span style="color: #007700">);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$consumed&nbsp;</span><span style="color: #007700">+=&nbsp;</span><span style="color: #9876AA">$bucket</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">datalen</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">stream_bucket_append</span><span style="color: #007700">(</span><span style="color: #9876AA">$out</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$bucket</span><span style="color: #007700">);<br />&nbsp;&nbsp;&nbsp;&nbsp;}<br />&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;</span><span style="color: #9876AA">PSFS_PASS_ON</span><span style="color: #007700">;<br />&nbsp;&nbsp;}<br /><br />&nbsp;&nbsp;function&nbsp;</span><span style="color: #9876AA">onCreate</span><span style="color: #007700">()<br />&nbsp;&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(</span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">filtername&nbsp;</span><span style="color: #007700">==&nbsp;</span><span style="color: #DD0000">'str.toupper'</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">mode&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">1</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;elseif&nbsp;(</span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">filtername&nbsp;</span><span style="color: #007700">==&nbsp;</span><span style="color: #DD0000">'str.tolower'</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">mode&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">0</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;Some&nbsp;other&nbsp;str.*&nbsp;filter&nbsp;was&nbsp;asked&nbsp;for,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;report&nbsp;failure&nbsp;so&nbsp;that&nbsp;PHP&nbsp;will&nbsp;keep&nbsp;looking&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #007700">return&nbsp;</span><span style="color: #9876AA">false</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;}<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;</span><span style="color: #9876AA">true</span><span style="color: #007700">;<br />&nbsp;&nbsp;}<br />}<br /><br /></span><span style="color: #FF8000">//&nbsp;Register&nbsp;our&nbsp;filter&nbsp;with&nbsp;PHP&nbsp;<br /></span><span style="color: #9876AA">stream_filter_register</span><span style="color: #007700">(</span><span style="color: #DD0000">"str.*"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"string_filter"</span><span style="color: #007700">)<br />&nbsp;&nbsp;&nbsp;&nbsp;or&nbsp;die(</span><span style="color: #DD0000">"Failed&nbsp;to&nbsp;register&nbsp;filter"</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$fp&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">fopen</span><span style="color: #007700">(</span><span style="color: #DD0000">"foo-bar.txt"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"w"</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">//&nbsp;Attach&nbsp;the&nbsp;registered&nbsp;filter&nbsp;to&nbsp;the&nbsp;stream&nbsp;just&nbsp;opened<br />&nbsp;&nbsp;&nbsp;We&nbsp;could&nbsp;alternately&nbsp;bind&nbsp;to&nbsp;str.tolower&nbsp;here&nbsp;<br /></span><span style="color: #9876AA">stream_filter_append</span><span style="color: #007700">(</span><span style="color: #9876AA">$fp</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"str.toupper"</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">fwrite</span><span style="color: #007700">(</span><span style="color: #9876AA">$fp</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"Line1\n"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">fwrite</span><span style="color: #007700">(</span><span style="color: #9876AA">$fp</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"Word&nbsp;-&nbsp;2\n"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">fwrite</span><span style="color: #007700">(</span><span style="color: #9876AA">$fp</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"Easy&nbsp;As&nbsp;123\n"</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">fclose</span><span style="color: #007700">(</span><span style="color: #9876AA">$fp</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">//&nbsp;Read&nbsp;the&nbsp;contents&nbsp;back&nbsp;out<br />&nbsp;<br /></span><span style="color: #9876AA">readfile</span><span style="color: #007700">(</span><span style="color: #DD0000">"foo-bar.txt"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> LINE1 WORD - 2 EASY AS 123 </span></div>     </div>    </div>   </p>  </div>     <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.stream-filter-register-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link stream_wrapper_register()} - 注册一个用 PHP 类实现的 URL 封装协议</span></li>     <li class="member"><span class="function">{@link stream_filter_append()} - Attach a filter to a stream</span></li>     <li class="member"><span class="function">{@link stream_filter_prepend()} - Attach a filter to a stream</span></li>    </ul>   </span>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.stream.php">Stream 函数</a></div></div>
 * @return bool true on success or false on failure.*/
function stream_filter_register($filtername, $classname) { }

/**
*<div id="function.stream-bucket-make-writeable" class="refentry">  <div class="refnamediv">   <h1 class="refname">stream_bucket_make_writeable</h1>   <p class="verinfo">(PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">stream_bucket_make_writeable</span> &mdash; <span class="dc-title">    Return a bucket object from the brigade for operating on   </span></p>   </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.stream-bucket-make-writeable-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">object</span> <span class="methodname" style="color:#CC7832"><strong>stream_bucket_make_writeable</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">resource</span> <span class="parameter" style="color:#2EACF9">$brigade</span></span>    )</div>     <div class="warning"><strong class="warning">Warning</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div>   </div>   <div class="up"><a href="http://php.net/manual/zh/ref.stream.php">Stream 函数</a></div></div>
 * @return object*/
function stream_bucket_make_writeable($brigade) { }

/**
*<div id="function.stream-bucket-prepend" class="refentry">  <div class="refnamediv">   <h1 class="refname">stream_bucket_prepend</h1>   <p class="verinfo">(PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">stream_bucket_prepend</span> &mdash; <span class="dc-title">    Prepend bucket to brigade   </span></p>   </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.stream-bucket-prepend-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span> <span class="methodname" style="color:#CC7832"><strong>stream_bucket_prepend</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">resource</span> <span class="parameter" style="color:#2EACF9">$brigade</span></span>    , <span class="methodparam"><span class="type" style="color:#EAB766">object</span> <span class="parameter" style="color:#2EACF9">$bucket</span></span>    )</div>    <p class="para rdfs-comment">     This function can be called to prepend a bucket to a bucket brigade. It     is typically called from <span class="methodname" style="color:#CC7832">{@link php_user_filter::filter()}</span>.   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.stream-bucket-prepend-parameters">   <h3 class="title">参数</h3>   <dl>          <dt> <span class="parameter" style="color:#2EACF9">brigade</span></dt>      <dd>       <span>       <span class="parameter" style="color:#2EACF9">brigade</span> is a resource pointing to a <em>bucket brigade</em>       which contains one or more <em>bucket</em> objects.      </span>     </dd>              <dt> <span class="parameter" style="color:#2EACF9">bucket</span></dt>      <dd>       <p class="para">       A bucket object.      </p>     </dd>        </dl>   </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.stream-bucket-prepend-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    没有返回值。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.stream-bucket-prepend-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-4807">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">stream_bucket_prepend()</strong></span> examples</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /><br /></span><span style="color: #007700">class&nbsp;</span><span style="color: #9876AA">foo&nbsp;</span><span style="color: #007700">extends&nbsp;</span><span style="color: #9876AA">php_user_filter&nbsp;</span><span style="color: #007700">{<br />&nbsp;&nbsp;protected&nbsp;</span><span style="color: #9876AA">$calls&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">0</span><span style="color: #007700">;<br />&nbsp;&nbsp;public&nbsp;function&nbsp;</span><span style="color: #9876AA">filter</span><span style="color: #007700">(</span><span style="color: #9876AA">$in</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$out</span><span style="color: #007700">,&nbsp;&amp;</span><span style="color: #9876AA">$consumed</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$closing</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;(</span><span style="color: #9876AA">$bucket&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">stream_bucket_make_writeable</span><span style="color: #007700">(</span><span style="color: #9876AA">$in</span><span style="color: #007700">))&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$consumed&nbsp;</span><span style="color: #007700">+=&nbsp;</span><span style="color: #9876AA">$bucket</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">datalen</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(</span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">calls</span><span style="color: #007700">++&nbsp;==&nbsp;</span><span style="color: #9876AA">2</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;This&nbsp;bucket&nbsp;will&nbsp;appear&nbsp;again&nbsp;before&nbsp;any&nbsp;other&nbsp;bucket.<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">stream_bucket_prepend</span><span style="color: #007700">(</span><span style="color: #9876AA">$in</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$bucket</span><span style="color: #007700">);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />&nbsp;&nbsp;&nbsp;&nbsp;}<br />&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;</span><span style="color: #9876AA">PSFS_FEED_ME</span><span style="color: #007700">;<br />&nbsp;&nbsp;}<br />}<br /></span><span style="color: #9876AA">stream_filter_register</span><span style="color: #007700">(</span><span style="color: #DD0000">'test'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'foo'</span><span style="color: #007700">);<br />print&nbsp;&nbsp;</span><span style="color: #9876AA">file_get_contents</span><span style="color: #007700">(</span><span style="color: #DD0000">'php://filter/read=test/resource=foo'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>     </div>   </span>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.stream.php">Stream 函数</a></div></div>
 * @return void*/
function stream_bucket_prepend($brigade, $bucket) { }

/**
*<div id="function.stream-bucket-append" class="refentry">  <div class="refnamediv">   <h1 class="refname">stream_bucket_append</h1>   <p class="verinfo">(PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">stream_bucket_append</span> &mdash; <span class="dc-title">    Append bucket to brigade   </span></p>   </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.stream-bucket-append-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span> <span class="methodname" style="color:#CC7832"><strong>stream_bucket_append</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">resource</span> <span class="parameter" style="color:#2EACF9">$brigade</span></span>    , <span class="methodparam"><span class="type" style="color:#EAB766">object</span> <span class="parameter" style="color:#2EACF9">$bucket</span></span>    )</div>     <div class="warning"><strong class="warning">Warning</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div>   </div>   <div class="up"><a href="http://php.net/manual/zh/ref.stream.php">Stream 函数</a></div></div>
 * @return void*/
function stream_bucket_append($brigade, $bucket) { }

/**
*<div id="function.stream-bucket-new" class="refentry">  <div class="refnamediv">   <h1 class="refname">stream_bucket_new</h1>   <p class="verinfo">(PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">stream_bucket_new</span> &mdash; <span class="dc-title">    Create a new bucket for use on the current stream   </span></p>   </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.stream-bucket-new-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">object</span> <span class="methodname" style="color:#CC7832"><strong>stream_bucket_new</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">resource</span> <span class="parameter" style="color:#2EACF9">$stream</span></span>    , <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#2EACF9">$buffer</span></span>    )</div>     <div class="warning"><strong class="warning">Warning</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div>   </div>   <div class="up"><a href="http://php.net/manual/zh/ref.stream.php">Stream 函数</a></div></div>
 * @return object*/
function stream_bucket_new($stream, $buffer) { }

/**
*<div id="function.output-add-rewrite-var" class="refentry">  <div class="refnamediv">   <h1 class="refname">output_add_rewrite_var</h1>   <p class="verinfo">(PHP 4 &gt;= 4.3.0, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">output_add_rewrite_var</span> &mdash; <span class="dc-title">添加URL重写器的值（Add URL rewriter values）</span></p>   </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.output-add-rewrite-var-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">bool</span> <span class="methodname" style="color:#CC7832"><strong>output_add_rewrite_var</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#2EACF9">$name</span></span>    , <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#2EACF9">$value</span></span>    )</div>    <p class="para rdfs-comment">    此函数给URL重写机制添加名/值对。    这种名值对将被添加到URL（以GET参数的形式）和表单（以input隐藏域的形式），当透明URL重写用     <a href="http://php.net/manual/zh/session.configuration.php#ini.session.use-trans-sid" class="link">session.use_trans_sid</a>    开启时同样可以添加到session ID。    要注意，绝对URL(http://example.com/..)不能被重写。   </p>   <p class="para">    此函数的行为由<a href="http://php.net/manual/zh/session.configuration.php#ini.url-rewriter.tags" class="link">url_rewriter.tags</a> <var class="filename">php.ini</var>    参数控制。   </p>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>:     <span class="simpara">     如果还没有活跃的输出缓冲区，调用此函数将隐式地开启它。    </span>   </p></blockquote>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.output-add-rewrite-var-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">name</span></dt>       <dd>        <p class="para">        变量名。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">value</span></dt>       <dd>        <p class="para">        变量值。       </p>      </dd>          </dl>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.output-add-rewrite-var-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    成功时返回 <strong><span>TRUE</span></strong>， 或者在失败时返回 <strong><span>FALSE</span></strong>。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.output-add-rewrite-var-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-482">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">output_add_rewrite_var()</strong></span> example</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />output_add_rewrite_var</span><span style="color: #007700">(</span><span style="color: #DD0000">'var'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'value'</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">//&nbsp;some&nbsp;links<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #DD0000">'&lt;a&nbsp;href="file.php"&gt;link&lt;/a&gt;<br />&lt;a&nbsp;href="http://example.com"&gt;link2&lt;/a&gt;'</span><span style="color: #007700">;<br /><br /></span><span style="color: #FF8000">//&nbsp;a&nbsp;form<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #DD0000">'&lt;form&nbsp;action="script.php"&nbsp;method="post"&gt;<br />&lt;input&nbsp;type="text"&nbsp;name="var2"&nbsp;/&gt;<br />&lt;/form&gt;'</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">ob_list_handlers</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> &lt;a href=&quot;file.php?var=value&quot;&gt;link&lt;/a&gt; &lt;a href=&quot;http://example.com&quot;&gt;link2&lt;/a&gt;  &lt;form action=&quot;script.php&quot; method=&quot;post&quot;&gt; &lt;input type=&quot;hidden&quot; name=&quot;var&quot; value=&quot;value&quot; /&gt; &lt;input type=&quot;text&quot; name=&quot;var2&quot; /&gt; &lt;/form&gt;  Array (     [0] =&gt; URL-Rewriter ) </span></div>     </div>    </div>   </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.output-add-rewrite-var-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link output_reset_rewrite_vars()} - 重设URL重写器的值（Reset URL rewriter values）</span></li>     <li class="member"><span class="function">{@link ob_flush()} - 冲刷出（送出）输出缓冲区中的内容</span></li>     <li class="member"><span class="function">{@link ob_list_handlers()} - 列出所有使用中的输出处理程序。</span></li>    </ul>   </span>  </div>     <div class="up"><a href="http://php.net/manual/zh/ref.outcontrol.php">Output Control 函数</a></div></div>
 * @return bool true on success or false on failure.*/
function output_add_rewrite_var($name, $value) { }

/**
*<div id="function.output-reset-rewrite-vars" class="refentry">  <div class="refnamediv">   <h1 class="refname">output_reset_rewrite_vars</h1>   <p class="verinfo">(PHP 4 &gt;= 4.3.0, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">output_reset_rewrite_vars</span> &mdash; <span class="dc-title">重设URL重写器的值（Reset URL rewriter values）</span></p>   </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.output-reset-rewrite-vars-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">bool</span> <span class="methodname" style="color:#CC7832"><strong>output_reset_rewrite_vars</strong></span>     ( <span class="methodparam">void</span>    )</div>    <p class="para rdfs-comment">    此函数重置URL重写器，移除所有的先前由 <span class="function">{@link output_add_rewrite_var()}</span>     函数设置的重写变量，或者移除会话机制（如果<em>session.use_trans_sid</em>    在 <span class="function">{@link session_start()}</span>上进行了设置）。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.output-reset-rewrite-vars-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    成功时返回 <strong><span>TRUE</span></strong>， 或者在失败时返回 <strong><span>FALSE</span></strong>。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.output-reset-rewrite-vars-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-483">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">output_reset_rewrite_vars()</strong></span> example</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />session_start</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">output_add_rewrite_var</span><span style="color: #007700">(</span><span style="color: #DD0000">'var'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'value'</span><span style="color: #007700">);<br /><br />echo&nbsp;</span><span style="color: #DD0000">'&lt;a&nbsp;href="file.php"&gt;link&lt;/a&gt;'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">ob_flush</span><span style="color: #007700">();<br /><br /></span><span style="color: #9876AA">output_reset_rewrite_vars</span><span style="color: #007700">();<br />echo&nbsp;</span><span style="color: #DD0000">'&lt;a&nbsp;href="file.php"&gt;link&lt;/a&gt;'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> &lt;a href=&quot;file.php?PHPSESSID=xxx&amp;var=value&quot;&gt;link&lt;/a&gt; &lt;a href=&quot;file.php&quot;&gt;link&lt;/a&gt; </span></div>     </div>    </div>   </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.output-reset-rewrite-vars-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link output_add_rewrite_var()} - 添加URL重写器的值（Add URL rewriter values）</span></li>     <li class="member"><span class="function">{@link ob_flush()} - 冲刷出（送出）输出缓冲区中的内容</span></li>     <li class="member"><span class="function">{@link ob_list_handlers()} - 列出所有使用中的输出处理程序。</span></li>     <li class="member"><span class="function">{@link session_start()} - 启动新会话或者重用现有会话</span></li>    </ul>   </span>  </div>     <div class="up"><a href="http://php.net/manual/zh/ref.outcontrol.php">Output Control 函数</a></div></div>
 * @return bool true on success or false on failure.*/
function output_reset_rewrite_vars() { }

/**
*<div id="function.sys-get-temp-dir" class="refentry">  <div class="refnamediv">   <h1 class="refname">sys_get_temp_dir</h1>   <p class="verinfo">(PHP 5 &gt;= 5.2.1, PHP 7)</p><p class="refpurpose"><span class="refname">sys_get_temp_dir</span> &mdash; <span class="dc-title">返回用于临时文件的目录</span></p>   </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.sys-get-temp-dir-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">string</span> <span class="methodname" style="color:#CC7832"><strong>sys_get_temp_dir</strong></span>     ( <span class="methodparam">void</span>    )</div>    <p class="para rdfs-comment">    返回 PHP 储存临时文件的默认目录的路径。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.sys-get-temp-dir-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回临时目录的路径。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.sys-get-temp-dir-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-534">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">sys_get_temp_dir()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">//&nbsp;使用&nbsp;sys_get_temp_dir()&nbsp;在目录里创建临时文件<br /></span><span style="color: #9876AA">$temp_file&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">tempnam</span><span style="color: #007700">(</span><span style="color: #9876AA">sys_get_temp_dir</span><span style="color: #007700">(),&nbsp;</span><span style="color: #DD0000">'Tux'</span><span style="color: #007700">);<br /><br />echo&nbsp;</span><span style="color: #9876AA">$temp_file</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程的输出类似于：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> C:\Windows\Temp\TuxA318.tmp </span></div>     </div>    </div>   </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.sys-get-temp-dir-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link tmpfile()} - 建立一个临时文件</span></li>     <li class="member"><span class="function">{@link tempnam()} - 建立一个具有唯一文件名的文件</span></li>    </ul>   </span>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.info.php">PHP 选项/信息 函数</a></div></div>
 * @return string the path of the temporary directory.*/
function sys_get_temp_dir() { }

/**
*<div id="function.realpath-cache-get" class="refentry">  <div class="refnamediv">   <h1 class="refname">realpath_cache_get</h1>   <p class="verinfo">(PHP 5 &gt;= 5.3.2, PHP 7)</p><p class="refpurpose"><span class="refname">realpath_cache_get</span> &mdash; <span class="dc-title">获取真实目录缓存的详情</span></p>   </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.realpath-cache-get-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">array</span> <span class="methodname" style="color:#CC7832"><strong>realpath_cache_get</strong></span>     ( <span class="methodparam">void</span>    )</div>    <p class="para rdfs-comment">    获得真实路径缓存的详情。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.realpath-cache-get-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回真实路径缓存详情的数组。键是原始路径以及值为具体信息数组，含有该解析的路径，过期时间以及其他的更多选项。    </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.realpath-cache-get-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-2833">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">realpath_cache_get()</strong></span> example</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">realpath_cache_get</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程的输出类似于：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> array(2) {   [&quot;/test&quot;]=&gt;   array(4) {     [&quot;key&quot;]=&gt;     int(123456789)     [&quot;is_dir&quot;]=&gt;     bool(true)     [&quot;realpath&quot;]=&gt;     string(5) &quot;/test&quot;     [&quot;expires&quot;]=&gt;     int(1260318939)   }   [&quot;/test/test.php&quot;]=&gt;   array(4) {     [&quot;key&quot;]=&gt;     int(987654321)     [&quot;is_dir&quot;]=&gt;     bool(false)     [&quot;realpath&quot;]=&gt;     string(12) &quot;/root/test.php&quot;     [&quot;expires&quot;]=&gt;     int(1260318939)   } } </span></div>     </div>    </div>   </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.realpath-cache-get-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link realpath_cache_size()} - 获取真实路径缓冲区的大小</span></li>    </ul>   </span>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.filesystem.php">文件系统函数</a></div></div>
 * @return array Returns an array of realpath cache entries. The keys are*/
function realpath_cache_get() { }

/**
*<div id="function.realpath-cache-size" class="refentry">  <div class="refnamediv">   <h1 class="refname">realpath_cache_size</h1>   <p class="verinfo">(PHP 5 &gt;= 5.3.2, PHP 7)</p><p class="refpurpose"><span class="refname">realpath_cache_size</span> &mdash; <span class="dc-title">获取真实路径缓冲区的大小</span></p>   </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.realpath-cache-size-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">int</span> <span class="methodname" style="color:#CC7832"><strong>realpath_cache_size</strong></span>     ( <span class="methodparam">void</span>    )</div>    <p class="para rdfs-comment">    获取真实路径缓存区大小在内存中的使用量。       </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.realpath-cache-size-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回真实路径缓存区使用内存的用量。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.realpath-cache-size-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-2834">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">realpath_cache_size()</strong></span> example</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">realpath_cache_size</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程的输出类似于：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> int(412) </span></div>     </div>    </div>   </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.realpath-cache-size-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link realpath_cache_get()} - 获取真实目录缓存的详情</span></li>     <li class="member">      <a href="http://php.net/manual/zh/ini.core.php#ini.realpath-cache-size" class="link">realpath_cache_size</a> 方法的配置选项     </li>    </ul>   </span>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.filesystem.php">文件系统函数</a></div></div>
 * @return int Returns how much memory realpath cache is using.*/
function realpath_cache_size() { }

?>
