<?php


/**
*<div id="function.syslog" class="refentry">  <div class="refnamediv">   <h1 class="refname">syslog</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">syslog</span> &mdash; <span class="dc-title">Generate a system log message</span></p>   </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.syslog-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">bool</span> <span class="methodname" style="color:#CC7832"><strong>syslog</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#2EACF9">$priority</span></span>    , <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#2EACF9">$message</span></span>    )</div>    <p class="para rdfs-comment">    <span class="function"><strong style="color:#CC7832">syslog()</strong></span> generates a log message that will be    distributed by the system logger.   </p>   <p class="para">    For information on setting up a user defined log handler, see the    <span class="citerefentry"><span class="refentrytitle">syslog.conf</span>    <span class="manvolnum">(5)</span></span> Unix manual page.  More    information on the syslog facilities and option can be found in the man    pages for <span class="citerefentry"><span class="refentrytitle">syslog</span>    <span class="manvolnum">(3)</span></span> on Unix machines.   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.syslog-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">priority</span></dt>       <dd>        <p class="para">        <span class="parameter" style="color:#2EACF9">priority</span> is a combination of the facility and        the level. Possible values are:        <table class="doctable table">         <caption><strong><span class="function"><strong style="color:#CC7832">syslog()</strong></span> Priorities (in descending order)</strong></caption>                   <thead>           <tr>            <th>Constant</th>            <th>Description</th>           </tr>           </thead>           <tbody class="tbody">           <tr>            <td><strong><span>LOG_EMERG</span></strong></td>            <td>system is unusable</td>           </tr>            <tr>            <td><strong><span>LOG_ALERT</span></strong></td>            <td>action must be taken immediately</td>           </tr>            <tr>            <td><strong><span>LOG_CRIT</span></strong></td>            <td>critical conditions</td>           </tr>            <tr>            <td><strong><span>LOG_ERR</span></strong></td>            <td>error conditions</td>           </tr>            <tr>            <td><strong><span>LOG_WARNING</span></strong></td>            <td>warning conditions</td>           </tr>            <tr>            <td><strong><span>LOG_NOTICE</span></strong></td>            <td>normal, but significant, condition</td>           </tr>            <tr>            <td><strong><span>LOG_INFO</span></strong></td>            <td>informational message</td>           </tr>            <tr>            <td><strong><span>LOG_DEBUG</span></strong></td>            <td>debug-level message</td>           </tr>           </tbody>                 </table>        </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">message</span></dt>       <dd>        <p class="para">        The message to send, except that the two characters        <em>%m</em> will be replaced by the error message string        (strerror) corresponding to the present value of        <span class="errortype">errno</span>.       </p>      </dd>          </dl>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.syslog-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    成功时返回 <strong><span>TRUE</span></strong>， 或者在失败时返回 <strong><span>FALSE</span></strong>。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.syslog-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-5501">     <p><strong>Example #1 Using <span class="function"><strong style="color:#CC7832">syslog()</strong></span></strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">//&nbsp;open&nbsp;syslog,&nbsp;include&nbsp;the&nbsp;process&nbsp;ID&nbsp;and&nbsp;also&nbsp;send<br />//&nbsp;the&nbsp;log&nbsp;to&nbsp;standard&nbsp;error,&nbsp;and&nbsp;use&nbsp;a&nbsp;user&nbsp;defined<br />//&nbsp;logging&nbsp;mechanism<br /></span><span style="color: #9876AA">openlog</span><span style="color: #007700">(</span><span style="color: #DD0000">"myScriptLog"</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">LOG_PID&nbsp;</span><span style="color: #007700">|&nbsp;</span><span style="color: #9876AA">LOG_PERROR</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">LOG_LOCAL0</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">//&nbsp;some&nbsp;code<br /><br /></span><span style="color: #007700">if&nbsp;(</span><span style="color: #9876AA">authorized_client</span><span style="color: #007700">())&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;do&nbsp;something<br /></span><span style="color: #007700">}&nbsp;else&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;unauthorized&nbsp;client!<br />&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;log&nbsp;the&nbsp;attempt<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$access&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">date</span><span style="color: #007700">(</span><span style="color: #DD0000">"Y/m/d&nbsp;H:i:s"</span><span style="color: #007700">);<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">syslog</span><span style="color: #007700">(</span><span style="color: #9876AA">LOG_WARNING</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"Unauthorized&nbsp;client:&nbsp;</span><span style="color: #9876AA">$access</span><span style="color: #DD0000">&nbsp;</span><span style="color: #007700">{</span><span style="color: #9876AA">$_SERVER</span><span style="color: #007700">[</span><span style="color: #DD0000">'REMOTE_ADDR'</span><span style="color: #007700">]}</span><span style="color: #DD0000">&nbsp;(</span><span style="color: #007700">{</span><span style="color: #9876AA">$_SERVER</span><span style="color: #007700">[</span><span style="color: #DD0000">'HTTP_USER_AGENT'</span><span style="color: #007700">]}</span><span style="color: #DD0000">)"</span><span style="color: #007700">);<br />}<br /><br /></span><span style="color: #9876AA">closelog</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>     </div>   </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.syslog-notes">   <h3 class="title">注释</h3>   <p class="para">    On Windows NT, the syslog service is emulated using the Event    Log.   </p>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>:     <p class="para">     Use of <em>LOG_LOCAL0</em> through     <em>LOG_LOCAL7</em> for the <span class="parameter" style="color:#2EACF9">facility</span>     parameter of <span class="function">{@link openlog()}</span> is not available     in Windows.    </p>   </p></blockquote>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.syslog-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link openlog()} - Open connection to system logger</span></li>     <li class="member"><span class="function">{@link closelog()} - 关闭系统日志链接</span></li>    </ul>   </span>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.network.php">网络 函数</a></div></div>
 * @return bool true on success or false on failure.*/
function syslog ($priority, $message) {}

/**
*<div id="function.closelog" class="refentry">  <div class="refnamediv">   <h1 class="refname">closelog</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">closelog</span> &mdash; <span class="dc-title">关闭系统日志链接</span></p>   </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.closelog-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">bool</span> <span class="methodname" style="color:#CC7832"><strong>closelog</strong></span>     ( <span class="methodparam">void</span>    )</div>    <p class="para rdfs-comment">    <span class="function"><strong style="color:#CC7832">closelog()</strong></span> 关闭用于通信的描述符并写入系统日志。<span class="function"><strong style="color:#CC7832">closelog()</strong></span>是可选的。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.closelog-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    成功时返回 <strong><span>TRUE</span></strong>， 或者在失败时返回 <strong><span>FALSE</span></strong>。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.closelog-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link syslog()} - Generate a system log message</span></li>     <li class="member"><span class="function">{@link openlog()} - Open connection to system logger</span></li>    </ul>   </span>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.network.php">网络 函数</a></div></div>
 * @return bool true on success or false on failure.*/
function closelog () {}

/**
*<div id="function.header-register-callback" class="refentry">  <div class="refnamediv">   <h1 class="refname">header_register_callback</h1>   <p class="verinfo">(PHP 5 &gt;= 5.4.0, PHP 7)</p><p class="refpurpose"><span class="refname">header_register_callback</span> &mdash; <span class="dc-title">调用一个 header 函数</span></p>   </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.header-register-callback-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">bool</span> <span class="methodname" style="color:#CC7832"><strong>header_register_callback</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#2EACF9">$callback</span></span>    )</div>    <p class="para rdfs-comment">    注册一个函数，在 PHP 开始发送输出时调用。   </p>   <p class="para">    PHP 准备好所有响应头，在发送内容之前执行 <span class="parameter" style="color:#2EACF9">callback</span>，创建了一个发送响应头的操作窗口。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.header-register-callback-parameters">   <h3 class="title">参数</h3>   <dl>          <dt> <span class="parameter" style="color:#2EACF9">callback</span></dt>      <dd>       <span>       在头发送前调用函数。       它没有参数，返回的值也会被忽略。      </span>     </dd>        </dl>   </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.header-register-callback-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    成功时返回 <strong><span>TRUE</span></strong>， 或者在失败时返回 <strong><span>FALSE</span></strong>。   </p>  </div>     <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.header-register-callback-examples">   <h3 class="title">范例</h3>   <div class="example" id="example-5485">    <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">header_register_callback()</strong></span> 例子</strong></p>    <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /><br />header</span><span style="color: #007700">(</span><span style="color: #DD0000">'Content-Type:&nbsp;text/plain'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">header</span><span style="color: #007700">(</span><span style="color: #DD0000">'X-Test:&nbsp;foo'</span><span style="color: #007700">);<br /><br />function&nbsp;</span><span style="color: #9876AA">foo</span><span style="color: #007700">()&nbsp;{<br />&nbsp;foreach&nbsp;(</span><span style="color: #9876AA">headers_list</span><span style="color: #007700">()&nbsp;as&nbsp;</span><span style="color: #9876AA">$header</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;if&nbsp;(</span><span style="color: #9876AA">strpos</span><span style="color: #007700">(</span><span style="color: #9876AA">$header</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'X-Powered-By:'</span><span style="color: #007700">)&nbsp;!==&nbsp;</span><span style="color: #9876AA">false</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">header_remove</span><span style="color: #007700">(</span><span style="color: #DD0000">'X-Powered-By'</span><span style="color: #007700">);<br />&nbsp;&nbsp;&nbsp;}<br />&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">header_remove</span><span style="color: #007700">(</span><span style="color: #DD0000">'X-Test'</span><span style="color: #007700">);<br />&nbsp;}<br />}<br /><br /></span><span style="color: #9876AA">$result&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">header_register_callback</span><span style="color: #007700">(</span><span style="color: #DD0000">'foo'</span><span style="color: #007700">);<br />echo&nbsp;</span><span style="color: #DD0000">"a"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>    </div>     <div class="example-contents"><p>以上例程的输出类似于：</p></div>    <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Content-Type: text/plain  a </span></div>    </div>   </div>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.header-register-callback-notes">   <h3 class="title">注释</h3>   <p class="para">    <span class="function"><strong style="color:#CC7832">header_register_callback()</strong></span> 是在头即将发送前执行的，    所以本函数的任意内容输出都会打断输出过程。   </p>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>:  <p class="para">  数据头只会在SAPI支持时得到处理和输出。 </p> </p></blockquote>   </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.header-register-callback-seealso">   <h3 class="title">参见</h3>   <ul class="simplelist">    <li class="member"><span class="function">{@link headers_list()} - 返回已发送的 HTTP 响应头（或准备发送的）</span></li>    <li class="member"><span class="function">{@link header_remove()} - 删除之前设置的 HTTP 头</span></li>    <li class="member"><span class="function">{@link header()} - 发送原生 HTTP 头</span></li>   </ul>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.network.php">网络 函数</a></div></div>
 * @return bool true on success or false on failure.*/
function header_register_callback ( callable $callback ) {}

/**
*<div id="function.getimagesizefromstring" class="refentry">  <div class="refnamediv">   <h1 class="refname">getimagesizefromstring</h1>   <p class="verinfo">(PHP 5 &gt;= 5.4.0, PHP 7)</p><p class="refpurpose"><span class="refname">getimagesizefromstring</span> &mdash; <span class="dc-title">从字符串中获取图像尺寸信息</span></p>   </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.getimagesizefromstring-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">array</span> <span class="methodname" style="color:#CC7832"><strong>getimagesizefromstring</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#2EACF9">$imagedata</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">&$imageinfo</span></span>   ] )</div>    <p class="para rdfs-comment">    同 <span class="function">{@link getimagesize()}</span> 函数。    区别是 <span class="function"><strong style="color:#CC7832">getimagesizefromstring()</strong></span> 第一个参数是图像数据的字符串表达，而不是文件名。   </p>   <p class="para">    关于本函数如何工作的更多信息请参见    <span class="function">{@link getimagesize()}</span> 函数。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.getimagesizefromstring-parameters">   <h3 class="title">参数</h3>   <dl>          <dt> <span class="parameter" style="color:#2EACF9">imagedata</span></dt>      <dd>       <span>       图像数据的字符串表示。      </span>     </dd>              <dt> <span class="parameter" style="color:#2EACF9">imageinfo</span></dt>      <dd>       <p class="para">       参见 <span class="function">{@link getimagesize()}</span> 函数。      </p>     </dd>        </dl>   </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.getimagesizefromstring-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    参见 <span class="function">{@link getimagesize()}</span> 函数。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.getimagesizefromstring-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-3645">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">getimagesizefromstring()</strong></span> 函数例程</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$img&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'/path/to/test.png'</span><span style="color: #007700">;<br /><br /></span><span style="color: #FF8000">//&nbsp;以文件方式打开<br /></span><span style="color: #9876AA">$size_info1&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">getimagesize</span><span style="color: #007700">(</span><span style="color: #9876AA">$img</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">//&nbsp;以字符串格式打开<br /></span><span style="color: #9876AA">$data&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">file_get_contents</span><span style="color: #007700">(</span><span style="color: #9876AA">$img</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$size_info2&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">getimagesizefromstring</span><span style="color: #007700">(</span><span style="color: #9876AA">$data</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>     </div>   </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.getimagesizefromstring-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link getimagesize()} - 取得图像大小</span></li>    </ul>   </span>  </div>    <div class="up"><a href="http://php.net/manual/zh/ref.image.php">GD 和图像处理 函数</a></div></div>
 * @return array|bool Returns an array with 7 elements.<br>*/
function getimagesizefromstring ($imagedata , array &$imageinfo = null) {}

/**
*<div id="function.stream-set-chunk-size" class="refentry">  <div class="refnamediv">   <h1 class="refname">stream_set_chunk_size</h1>   <p class="verinfo">(PHP 5 &gt;= 5.4.0, PHP 7)</p><p class="refpurpose"><span class="refname">stream_set_chunk_size</span> &mdash; <span class="dc-title">设置资源流区块大小</span></p>   </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.stream-set-chunk-size-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">int</span> <span class="methodname" style="color:#CC7832"><strong>stream_set_chunk_size</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">resource</span> <span class="parameter" style="color:#2EACF9">$fp</span></span>    , <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#2EACF9">$chunk_size</span></span>    )</div>    <p class="para rdfs-comment">    设置资源流区块大小。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.stream-set-chunk-size-parameters">   <h3 class="title">参数</h3>   <dl>          <dt> <span class="parameter" style="color:#2EACF9">fp</span></dt>      <dd>       <span>       目标资源流。      </span>     </dd>              <dt> <span class="parameter" style="color:#2EACF9">chunk_size</span></dt>      <dd>       <p class="para">       想设置的新的区块大小。      </p>     </dd>        </dl>   </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.stream-set-chunk-size-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    成功的情况下返回资源流之前的区块大小。   </p>   <p class="para">    如果 <span class="parameter" style="color:#2EACF9">chunk_size</span> 比 1 小或者比 <strong><span>PHP_INT_MAX</span></strong> 还大，就将返回 <strong><span>FALSE</span></strong> 。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-function.stream-set-chunk-size-errors">   <h3 class="title">错误／异常</h3>   <p class="para">    当 <span class="parameter" style="color:#2EACF9">chunk_size</span> 比 1 小或者比 <strong><span>PHP_INT_MAX</span></strong> 还大的时候将会产生一个 <strong><span>E_WARNING</span></strong> 级别的错误。   </p>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.stream.php">Stream 函数</a></div></div>
 * @return int Returns the previous chunk size on success.<br>*/
function stream_set_chunk_size ($fp , $chunk_size) {}

/**
*<div id="function.socket-import-stream" class="refentry">  <div class="refnamediv">   <h1 class="refname">socket_import_stream</h1>   <p class="verinfo">(PHP 5 &gt;= 5.4.0, PHP 7)</p><p class="refpurpose"><span class="refname">socket_import_stream</span> &mdash; <span class="dc-title">Import a stream</span></p>   </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.socket-import-stream-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">resource</span> <span class="methodname" style="color:#CC7832"><strong>socket_import_stream</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">resource</span> <span class="parameter" style="color:#2EACF9">$stream</span></span>    )</div>    <p class="para rdfs-comment">    Imports a stream that encapsulates a socket into a socket extension resource.   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.socket-import-stream-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">stream</span></dt>       <dd>        <p class="para">        The stream resource to import.       </p>      </dd>          </dl>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.socket-import-stream-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    Returns <strong><span>FALSE</span></strong> or <strong><span>NULL</span></strong> on failure.   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.socket-import-stream-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="snmp.getnext.example.oidarray">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">socket_import_stream()</strong></span> example</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$stream&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">stream_socket_server</span><span style="color: #007700">(</span><span style="color: #DD0000">"udp://0.0.0.0:58380"</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$errno</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$errstr</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">STREAM_SERVER_BIND</span><span style="color: #007700">);&nbsp;<br /></span><span style="color: #9876AA">$sock&nbsp;&nbsp;&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">socket_import_stream</span><span style="color: #007700">(</span><span style="color: #9876AA">$stream</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>     </div>   </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.socket-import-stream-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link stream_socket_server()} - Create an Internet or Unix domain server socket</span></li>    </ul>   </span>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.sockets.php">Socket 函数</a></div></div>
 * @return void|bool|null Returns <b>FALSE</b> or <b>NULL</b> on failure.*/
function socket_import_stream ($stream) {}

/**
*<div id="function.define-syslog-variables" class="refentry">  <div class="refnamediv">   <h1 class="refname">define_syslog_variables</h1>   <p class="verinfo">(PHP 4, PHP 5 &lt; 5.4.0)</p><p class="refpurpose"><span class="refname">define_syslog_variables</span> &mdash; <span class="dc-title">Initializes all syslog related variables</span></p>   </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.define-syslog-variables-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span> <span class="methodname" style="color:#CC7832"><strong>define_syslog_variables</strong></span>     ( <span class="methodparam">void</span>    )</div>    <p class="para rdfs-comment">    Initializes all variables used in the syslog functions.   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.define-syslog-variables-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    没有返回值。   </p>   <table class="doctable table">    <caption><strong>Syslog variables</strong></caption>         <thead>      <tr>       <th>Variable</th>       <th>Constant equal</th>       <th>Meaning</th>       <th>Notes</th>      </tr>      </thead>      <tbody class="tbody">      <tr>       <td><var class="varname"><var class="varname">$LOG_EMERG</var></var></td>       <td><strong><span>LOG_EMERG</span></strong></td>       <td>System is unusable</td>       <td class="empty">&nbsp;</td>      </tr>       <tr>       <td><var class="varname"><var class="varname">$LOG_ALERT</var></var></td>       <td><strong><span>LOG_ALERT</span></strong></td>       <td>Immediate action required</td>       <td class="empty">&nbsp;</td>      </tr>       <tr>       <td><var class="varname"><var class="varname">$LOG_CRIT</var></var></td>       <td><strong><span>LOG_CRIT</span></strong></td>       <td>Critical conditions</td>       <td class="empty">&nbsp;</td>      </tr>       <tr>       <td><var class="varname"><var class="varname">$LOG_ERR</var></var></td>       <td><strong><span>LOG_ERR</span></strong></td>       <td class="empty">&nbsp;</td>       <td class="empty">&nbsp;</td>      </tr>       <tr>       <td><var class="varname"><var class="varname">$LOG_WARNING</var></var></td>       <td><strong><span>LOG_WARNING</span></strong></td>       <td class="empty">&nbsp;</td>       <td class="empty">&nbsp;</td>      </tr>       <tr>       <td><var class="varname"><var class="varname">$LOG_NOTICE</var></var></td>       <td><strong><span>LOG_NOTICE</span></strong></td>       <td class="empty">&nbsp;</td>       <td class="empty">&nbsp;</td>      </tr>       <tr>       <td><var class="varname"><var class="varname">$LOG_INFO</var></var></td>       <td><strong><span>LOG_INFO</span></strong></td>       <td class="empty">&nbsp;</td>       <td class="empty">&nbsp;</td>      </tr>       <tr>       <td><var class="varname"><var class="varname">$LOG_DEBUG</var></var></td>       <td><strong><span>LOG_DEBUG</span></strong></td>       <td class="empty">&nbsp;</td>       <td class="empty">&nbsp;</td>      </tr>       <tr>       <td><var class="varname"><var class="varname">$LOG_KERN</var></var></td>       <td><strong><span>LOG_KERN</span></strong></td>       <td class="empty">&nbsp;</td>       <td class="empty">&nbsp;</td>      </tr>       <tr>       <td><var class="varname"><var class="varname">$LOG_USER</var></var></td>       <td><strong><span>LOG_USER</span></strong></td>       <td>Genetic user level</td>       <td class="empty">&nbsp;</td>      </tr>       <tr>       <td><var class="varname"><var class="varname">$LOG_MAIL</var></var></td>       <td><strong><span>LOG_MAIL</span></strong></td>       <td>Log to email</td>       <td class="empty">&nbsp;</td>      </tr>       <tr>       <td><var class="varname"><var class="varname">$LOG_DAEMON</var></var></td>       <td><strong><span>LOG_DAEMON</span></strong></td>       <td>Other system daemons</td>       <td class="empty">&nbsp;</td>      </tr>       <tr>       <td><var class="varname"><var class="varname">$LOG_AUTH</var></var></td>       <td><strong><span>LOG_AUTH</span></strong></td>       <td class="empty">&nbsp;</td>       <td class="empty">&nbsp;</td>      </tr>       <tr>       <td><var class="varname"><var class="varname">$LOG_SYSLOG</var></var></td>       <td><strong><span>LOG_SYSLOG</span></strong></td>       <td class="empty">&nbsp;</td>       <td>Not available on Netware</td>      </tr>       <tr>       <td><var class="varname"><var class="varname">$LOG_LPR</var></var></td>       <td><strong><span>LOG_LPR</span></strong></td>       <td class="empty">&nbsp;</td>       <td class="empty">&nbsp;</td>      </tr>       <tr>       <td><var class="varname"><var class="varname">$LOG_NEWS</var></var></td>       <td><strong><span>LOG_NEWS</span></strong></td>       <td>Usenet new</td>       <td>Not available on HP-UX</td>      </tr>       <tr>       <td><var class="varname"><var class="varname">$LOG_CRON</var></var></td>       <td><strong><span>LOG_CRON</span></strong></td>       <td class="empty">&nbsp;</td>       <td>Not available on all platforms</td>      </tr>       <tr>       <td><var class="varname"><var class="varname">$LOG_AUTHPRIV</var></var></td>       <td><strong><span>LOG_AUTHPRIV</span></strong></td>       <td class="empty">&nbsp;</td>       <td>Not available on AIX</td>      </tr>       <tr>       <td><var class="varname"><var class="varname">$LOG_LOCAL0</var></var></td>       <td><strong><span>LOG_LOCAL0</span></strong></td>       <td class="empty">&nbsp;</td>       <td>Not available on Windows and Netware</td>      </tr>       <tr>       <td><var class="varname"><var class="varname">$LOG_LOCAL1</var></var></td>       <td><strong><span>LOG_LOCAL1</span></strong></td>       <td class="empty">&nbsp;</td>       <td>Not available on Windows and Netware</td>      </tr>       <tr>       <td><var class="varname"><var class="varname">$LOG_LOCAL2</var></var></td>       <td><strong><span>LOG_LOCAL2</span></strong></td>       <td class="empty">&nbsp;</td>       <td>Not available on Windows and Netware</td>      </tr>       <tr>       <td><var class="varname"><var class="varname">$LOG_LOCAL3</var></var></td>       <td><strong><span>LOG_LOCAL3</span></strong></td>       <td class="empty">&nbsp;</td>       <td>Not available on Windows and Netware</td>      </tr>       <tr>       <td><var class="varname"><var class="varname">$LOG_LOCAL4</var></var></td>       <td><strong><span>LOG_LOCAL4</span></strong></td>       <td class="empty">&nbsp;</td>       <td>Not available on Windows and Netware</td>      </tr>       <tr>       <td><var class="varname"><var class="varname">$LOG_LOCAL5</var></var></td>       <td><strong><span>LOG_LOCAL5</span></strong></td>       <td class="empty">&nbsp;</td>       <td>Not available on Windows and Netware</td>      </tr>       <tr>       <td><var class="varname"><var class="varname">$LOG_LOCAL6</var></var></td>       <td><strong><span>LOG_LOCAL6</span></strong></td>       <td class="empty">&nbsp;</td>       <td>Not available on Windows and Netware</td>      </tr>       <tr>       <td><var class="varname"><var class="varname">$LOG_LOCAL7</var></var></td>       <td><strong><span>LOG_LOCAL7</span></strong></td>       <td class="empty">&nbsp;</td>       <td>Not available on Windows and Netware</td>      </tr>       <tr>       <td><var class="varname"><var class="varname">$LOG_PID</var></var></td>       <td><strong><span>LOG_PID</span></strong></td>       <td class="empty">&nbsp;</td>       <td class="empty">&nbsp;</td>      </tr>       <tr>       <td><var class="varname"><var class="varname">$LOG_CONS</var></var></td>       <td><strong><span>LOG_CONS</span></strong></td>       <td class="empty">&nbsp;</td>       <td class="empty">&nbsp;</td>      </tr>       <tr>       <td><var class="varname"><var class="varname">$LOG_ODELAY</var></var></td>       <td><strong><span>LOG_ODELAY</span></strong></td>       <td class="empty">&nbsp;</td>       <td class="empty">&nbsp;</td>      </tr>       <tr>       <td><var class="varname"><var class="varname">$LOG_NDELAY</var></var></td>       <td><strong><span>LOG_NDELAY</span></strong></td>       <td class="empty">&nbsp;</td>       <td class="empty">&nbsp;</td>      </tr>       <tr>       <td><var class="varname"><var class="varname">$LOG_NOWAIT</var></var></td>       <td><strong><span>LOG_NOWAIT</span></strong></td>       <td class="empty">&nbsp;</td>       <td>Not available on BeOS</td>      </tr>       <tr>       <td><var class="varname"><var class="varname">$LOG_PERROR</var></var></td>       <td><strong><span>LOG_PERROR</span></strong></td>       <td class="empty">&nbsp;</td>       <td>Not available on AIX</td>      </tr>      </tbody>       </table>    <div class="warning"><strong class="warning">Warning</strong><p class="simpara">本函数已自 PHP 5.3.0 起<em class="emphasis">废弃</em>并将自 PHP 5.4.0 起<em class="emphasis">移除</em>。</p></div>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.define-syslog-variables-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-5474">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">define_syslog_variables()</strong></span> example</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">//&nbsp;Check&nbsp;if&nbsp;syslog&nbsp;variables&nbsp;already&nbsp;is&nbsp;defined<br /></span><span style="color: #007700">if(!</span><span style="color: #9876AA">get_cfg_var</span><span style="color: #007700">(</span><span style="color: #DD0000">'define_syslog_variables'</span><span style="color: #007700">))<br />{<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">define_syslog_variables</span><span style="color: #007700">();<br />}<br /><br /></span><span style="color: #FF8000">//&nbsp;Open&nbsp;the&nbsp;log<br /></span><span style="color: #9876AA">openlog</span><span style="color: #007700">(</span><span style="color: #DD0000">''</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$LOG_ODELAY</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$LOG_MAIL&nbsp;</span><span style="color: #007700">|&nbsp;</span><span style="color: #9876AA">$LOG_USER</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">//&nbsp;Continue&nbsp;script&nbsp;...<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>     </div>   </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.define-syslog-variables-changelog">   <h3 class="title">更新日志</h3>   <span>    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>5.4.0</td>        <td>         This function was removed from PHP.        </td>       </tr>        <tr>        <td>5.3.0</td>        <td>         This function now throws an E_DEPRECATED notice.        </td>       </tr>       </tbody>         </table>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.define-syslog-variables-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link openlog()} - Open connection to system logger</span></li>     <li class="member"><span class="function">{@link syslog()} - Generate a system log message</span></li>     <li class="member"><span class="function">{@link closelog()} - 关闭系统日志链接</span></li>    </ul>   </span>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.network.php">网络 函数</a></div></div>
 * @return void*/
function define_syslog_variables () {}

/**
*<div id="function.lcg-value" class="refentry">    <div class="refnamediv">     <h1 class="refname">lcg_value</h1>     <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">lcg_value</span> &mdash; <span class="dc-title">组合线性同余发生器</span></p>     </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.lcg-value-description">   <h3 class="title">说明</h3>    <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">     <span class="type" style="color:#EAB766">float</span> <span class="methodname" style="color:#CC7832"><strong>lcg_value</strong></span>      ( <span class="methodparam">void</span>     )</div>      <p class="para rdfs-comment">      <span class="function"><strong style="color:#CC7832">lcg_value()</strong></span> 返回范围为      (0, 1) 的一个伪随机数。本函数组合了周期为      2^31 - 85 和 2^31 - 249 的两个同余发生器。本函数的周期等于这两个素数的乘积。     </p>    </div>      <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.lcg-value-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    范围为 (0, 1) 的伪随机数。   </p>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.lcg-value-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link rand()} - 产生一个随机整数</span></li>     <li class="member"><span class="function">{@link mt_rand()} - 生成更好的随机数</span></li>    </ul>   </span>  </div>    <div class="up"><a href="http://php.net/manual/zh/ref.math.php">Math 函数</a></div></div>
 * @return float A pseudo random float value in the range of (0, 1)*/
function lcg_value () {}

/**
*<div id="function.metaphone" class="refentry">  <div class="refnamediv">   <h1 class="refname">metaphone</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">metaphone</span> &mdash; <span class="dc-title">Calculate the metaphone key of a string</span></p>   </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.metaphone-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">string</span> <span class="methodname" style="color:#CC7832"><strong>metaphone</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#2EACF9">$str</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#2EACF9">$phonemes</span><span class="initializer"> = 0</span></span>   ] )</div>    <p class="para rdfs-comment">    Calculates the metaphone key of <span class="parameter" style="color:#2EACF9">str</span>.   </p>   <p class="para">    Similar to <span class="function">{@link soundex()}</span> metaphone creates the same key for    similar sounding words. It&#039;s more accurate than    <span class="function">{@link soundex()}</span> as it knows the basic rules of English    pronunciation.  The metaphone generated keys are of variable length.   </p>   <p class="para">    Metaphone was developed by Lawrence Philips    &lt;lphilips at verity dot com&gt;. It is described in [&quot;Practical    Algorithms for Programmers&quot;, Binstock &amp; Rex, Addison Wesley,    1995].   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.metaphone-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">str</span></dt>       <dd>        <p class="para">        The input string.       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">phonemes</span></dt>       <dd>        <p class="para">        This parameter restricts the returned metaphone key to         <span class="parameter" style="color:#2EACF9">phonemes</span> characters in length.        The default value of <em>0</em> means no restriction.       </p>      </dd>          </dl>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.metaphone-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    Returns the metaphone key as a string,  或者在失败时返回 <strong><span>FALSE</span></strong>.   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.metaphone-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="hex2bin.example.basic">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">metaphone()</strong></span> basic example</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">metaphone</span><span style="color: #007700">(</span><span style="color: #DD0000">'programming'</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">metaphone</span><span style="color: #007700">(</span><span style="color: #DD0000">'programmer'</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程的输出类似于：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> string(7) &quot;PRKRMNK&quot; string(6) &quot;PRKRMR&quot; </span></div>     </div>    </div>   </span>   <p class="para">    <div class="example" id="example-5918">     <p><strong>Example #2 Using the <span class="parameter" style="color:#2EACF9">phonemes</span> parameter</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">metaphone</span><span style="color: #007700">(</span><span style="color: #DD0000">'programming'</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">5</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">metaphone</span><span style="color: #007700">(</span><span style="color: #DD0000">'programmer'</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">5</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程的输出类似于：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> string(5) &quot;PRKRM&quot; string(5) &quot;PRKRM&quot; </span></div>     </div>    </div>   </p>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.strings.php">字符串 函数</a></div></div>
 * @return string|bool the metaphone key as a string, or FALSE on failure*/
function metaphone ($str, $phonemes = 0) {}

/**
*<div id="function.ob-start" class="refentry">  <div class="refnamediv">   <h1 class="refname">ob_start</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">ob_start</span> &mdash; <span class="dc-title">打开输出控制缓冲</span></p>   </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.ob-start-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">bool</span> <span class="methodname" style="color:#CC7832"><strong>ob_start</strong></span>     ([ <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.callback" class="type callback" style="color:#EAB766">callback</a></span> <span class="parameter" style="color:#2EACF9">$output_callback</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#2EACF9">$chunk_size</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#2EACF9">$erase</span></span>   ]]] )</div>    <p class="para rdfs-comment">    此函数将打开输出缓冲。当输出缓冲激活后，脚本将不会输出内容（除http标头外），相反需要输出的内容被存储在内部缓冲区中。   </p>   <p class="para">     内部缓冲区的内容可以用 <span class="function">{@link ob_get_contents()}</span> 函数复制到一个字符串变量中。     想要输出存储在内部缓冲区中的内容，可以使用 <span class="function">{@link ob_end_flush()}</span> 函数。另外，     使用 <span class="function">{@link ob_end_clean()}</span> 函数会静默丢弃掉缓冲区的内容。   </p>   <div class="warning"><strong class="warning">Warning</strong>    <p class="para">     当有正在调用的回调函数时，一些网络服务器（例如Apache）会改变一个脚本的工作目录。     你可以在回调函数中再把它改回来，例如 <em>chdir(dirname($_SERVER[&#039;SCRIPT_FILENAME&#039;]))</em> 。    </p>   </div>   <p class="para">    输出缓冲区是可堆叠的，这即意谓着，当有一个 <span class="function"><strong style="color:#CC7832">ob_start()</strong></span> 是活跃的时，    你可以调用另一个 <span class="function"><strong style="color:#CC7832">ob_start()</strong></span> 。    只要确保又正确调用了 <span class="function">{@link ob_end_flush()}</span> 恰当的次数即可。    如果有多重输出回调函数是活跃的，输出内容会一直按嵌套的顺序依次通过它们而被过滤。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.ob-start-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">output_callback</span></dt>       <dd>        <p class="para">        可选参数 <span class="parameter" style="color:#2EACF9">output_callback</span> 函数可以被指定。         此函数把一个字符串当作参数并返回一个字符串。        当输出缓冲区被( <span class="function">{@link ob_flush()}</span>, <span class="function">{@link ob_clean()}</span> 或者相似的函数)冲刷（送出）或者被清洗的时候；或者在请求结束之际输出缓冲区内容被冲刷到浏览器的时候该函数将会被调用。         当调用 <span class="parameter" style="color:#2EACF9">output_callback</span> 时，它将收到输出缓冲区的内容作为参数        并预期返回一个新的输出缓冲区作为结果，这个新返回的输出缓冲区内容将被送到浏览器。        如果这个 <span class="parameter" style="color:#2EACF9">output_callback</span> 不是一个可以调用的函数，此函数        会返回 <strong><span>FALSE</span></strong> 。       </p>       <p class="para">        如果回调函数有两个参数，第二个参数会由一个位域补充，该位域由        <strong><span>PHP_OUTPUT_HANDLER_START</span></strong>,        <strong><span>PHP_OUTPUT_HANDLER_CONT</span></strong> 和        <strong><span>PHP_OUTPUT_HANDLER_END</span></strong> 组成。       </p>       <p class="para">        如果 <span class="parameter" style="color:#2EACF9">output_callback</span> 返回 <strong><span>FALSE</span></strong> ，其原来的输入        内容被直接送到浏览器。       </p>       <p class="para">        这个参数 <span class="parameter" style="color:#2EACF9">output_callback</span> 可以通过直接给一个 <strong><span>NULL</span></strong>         值而避开。       </p>       <p class="para">        <span class="function">{@link ob_end_clean()}</span>, <span class="function">{@link ob_end_flush()}</span>,        <span class="function">{@link ob_clean()}</span>, <span class="function">{@link ob_flush()}</span> and        <span class="function"><strong style="color:#CC7832">ob_start()</strong></span> 不能从一个回调函数中调用。        如果从回调函数中调用了它们，产生的行为是不明确的。        如果想要删除缓冲区的内容，从回调函数中返回一个&quot;&quot; (空字符串)。        更不能从一个回调函数中使用像<em>print_r($expression, true)</em>         或<em>highlight_file($filename, true)</em> 一样的输出缓冲函数。          </p>       <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>:         <p class="para">         在PHP 4.0.4中， <span class="function">{@link ob_gzhandler()}</span> 被引入是为了简化把gz编码过          数据发送到支持压缩网页的浏览器。         <span class="function">{@link ob_gzhandler()}</span> 会判定浏览器可以接受哪种类型的编码内容，并返回相应         的输出。        </p>       </p></blockquote>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">chunk_size</span></dt>       <dd>        <p class="para">        如果可选参数 <span class="parameter" style="color:#2EACF9">chunk_size</span> 被赋值了，在任何一个能引起缓冲区的长度等于        或超过 <span class="parameter" style="color:#2EACF9">chunk_size</span> 的输出操作后，缓冲区都会被刷送。        默认值 0 意味着函数仅在最后被调用，其余的特殊值可以将 <span class="parameter" style="color:#2EACF9">chunk_size</span>        从 1 设定到 4096。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">erase</span></dt>       <dd>        <p class="para">        如果可选参数 <span class="parameter" style="color:#2EACF9">erase</span> 被赋成 <strong><span>FALSE</span></strong>，直到脚本执行完成缓冲区才被删除。        这使得，如果调用了冲刷和清洗（清除）函数，会抛出一个“notice”,并返回 <strong><span>FALSE</span></strong> 值。       </p>      </dd>          </dl>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.ob-start-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    成功时返回 <strong><span>TRUE</span></strong>， 或者在失败时返回 <strong><span>FALSE</span></strong>。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.ob-start-changelog">   <h3 class="title">更新日志</h3>   <span>    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">              <tr>        <td>4.3.2</td>        <td>         在传递的 <span class="parameter" style="color:#2EACF9">output_callback</span> 不能被执行时，此函数         被改成返回 <strong><span>FALSE</span></strong>         </td>       </tr>        <tr>        <td>4.2.0</td>        <td>         添加了 <span class="parameter" style="color:#2EACF9">erase</span> 参数。        </td>       </tr>       </tbody>         </table>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.ob-start-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-481">     <p><strong>Example #1 用户自定义回调函数的例子</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /><br /></span><span style="color: #007700">function&nbsp;</span><span style="color: #9876AA">callback</span><span style="color: #007700">(</span><span style="color: #9876AA">$buffer</span><span style="color: #007700">)<br />{<br />&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;replace&nbsp;all&nbsp;the&nbsp;apples&nbsp;with&nbsp;oranges<br />&nbsp;&nbsp;</span><span style="color: #007700">return&nbsp;(</span><span style="color: #9876AA">str_replace</span><span style="color: #007700">(</span><span style="color: #DD0000">"apples"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"oranges"</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$buffer</span><span style="color: #007700">));<br />}<br /><br /></span><span style="color: #9876AA">ob_start</span><span style="color: #007700">(</span><span style="color: #DD0000">"callback"</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">?&gt;<br /></span>&lt;html&gt;<br />&lt;body&gt;<br />&lt;p&gt;It's&nbsp;like&nbsp;comparing&nbsp;apples&nbsp;to&nbsp;oranges.&lt;/p&gt;<br />&lt;/body&gt;<br />&lt;/html&gt;<br /><span style="color: #9876AA">&lt;?php<br /><br />ob_end_flush</span><span style="color: #007700">();<br /><br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> &lt;html&gt; &lt;body&gt; &lt;p&gt;It&#039;s like comparing oranges to oranges.&lt;/p&gt; &lt;/body&gt; &lt;/html&gt; </span></div>     </div>    </div>   </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.ob-start-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link ob_get_contents()} - 返回输出缓冲区的内容</span></li>     <li class="member"><span class="function">{@link ob_end_clean()} - 清空（擦除）缓冲区并关闭输出缓冲</span></li>     <li class="member"><span class="function">{@link ob_end_flush()} - 冲刷出（送出）输出缓冲区内容并关闭缓冲</span></li>     <li class="member"><span class="function">{@link ob_implicit_flush()} - 打开/关闭绝对刷送</span></li>     <li class="member"><span class="function">{@link ob_gzhandler()} - 在ob_start中使用的用来压缩输出缓冲区中内容的回调函数。ob_start callback function to gzip output buffer</span></li>     <li class="member"><span class="function">{@link ob_iconv_handler()} - 以输出缓冲处理程序转换字符编码</span></li>     <li class="member"><span class="function">{@link mb_output_handler()} - 在输出缓冲中转换字符编码的回调函数</span></li>     <li class="member"><span class="function">{@link ob_tidyhandler()} - ob_start callback function to repair the buffer</span></li>    </ul>   </span>  </div>     <div class="up"><a href="http://php.net/manual/zh/ref.outcontrol.php">Output Control 函数</a></div></div>
 * @return bool true on success or false on failure.*/
function ob_start ($output_callback = null, $chunk_size = null, $erase = null) {}

/**
*<div id="function.ob-flush" class="refentry">  <div class="refnamediv">   <h1 class="refname">ob_flush</h1>   <p class="verinfo">(PHP 4 &gt;= 4.2.0, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">ob_flush</span> &mdash; <span class="dc-title">冲刷出（送出）输出缓冲区中的内容</span></p>   </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.ob-flush-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span> <span class="methodname" style="color:#CC7832"><strong>ob_flush</strong></span>     ( <span class="methodparam">void</span>    )</div>    <p class="para rdfs-comment">    这个函数将送出缓冲区的内容（如果里边有内容的话）。如果想进一步处理缓冲区中的内容，必须在<span class="function"><strong style="color:#CC7832">ob_flush()</strong></span>之前调用<span class="function">{@link ob_get_contents()}</span> ，因为在调用<span class="function"><strong style="color:#CC7832">ob_flush()</strong></span>之后缓冲区内容将被丢弃。   </p>   <p class="para">   此函数不会销毁输出缓冲区，而像<span class="function">{@link ob_end_flush()}</span> 函数会销毁缓冲区。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.ob-flush-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    没有返回值。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.ob-flush-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link ob_get_contents()} - 返回输出缓冲区的内容</span></li>     <li class="member"><span class="function">{@link ob_clean()} - 清空（擦掉）输出缓冲区</span></li>     <li class="member"><span class="function">{@link ob_end_flush()} - 冲刷出（送出）输出缓冲区内容并关闭缓冲</span></li>     <li class="member"><span class="function">{@link ob_end_clean()} - 清空（擦除）缓冲区并关闭输出缓冲</span></li>    </ul>   </span>  </div>    <div class="up"><a href="http://php.net/manual/zh/ref.outcontrol.php">Output Control 函数</a></div></div>
 * @return void */
function ob_flush () {}

/**
*<div id="function.ob-clean" class="refentry">  <div class="refnamediv">   <h1 class="refname">ob_clean</h1>   <p class="verinfo">(PHP 4 &gt;= 4.2.0, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">ob_clean</span> &mdash; <span class="dc-title">清空（擦掉）输出缓冲区</span></p>   </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.ob-clean-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span> <span class="methodname" style="color:#CC7832"><strong>ob_clean</strong></span>     ( <span class="methodparam">void</span>    )</div>    <p class="para rdfs-comment">    此函数用来丢弃输出缓冲区中的内容。   </p>   <p class="para">    此函数不会像 <span class="function">{@link ob_end_clean()}</span> 函数那样销毁输出缓冲区。   </p>   <p class="para">    输出缓冲必须已被    <span class="function">{@link ob_start()}</span> 以 <a href="http://php.net/manual/zh/outcontrol.constants.php#constant.php-output-handler-cleanable" class="link">PHP_OUTPUT_HANDLER_CLEANABLE</a>    标记启动。否则 <span class="function"><strong style="color:#CC7832">ob_clean()</strong></span> 不会有效果。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.ob-clean-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    没有返回值。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.ob-clean-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link ob_flush()} - 冲刷出（送出）输出缓冲区中的内容</span></li>     <li class="member"><span class="function">{@link ob_end_flush()} - 冲刷出（送出）输出缓冲区内容并关闭缓冲</span></li>     <li class="member"><span class="function">{@link ob_end_clean()} - 清空（擦除）缓冲区并关闭输出缓冲</span></li>    </ul>   </span>  </div>    <div class="up"><a href="http://php.net/manual/zh/ref.outcontrol.php">Output Control 函数</a></div></div>
 * @return void */
function ob_clean () {}

/**
*<div id="function.ob-end-flush" class="refentry">  <div class="refnamediv">   <h1 class="refname">ob_end_flush</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">ob_end_flush</span> &mdash; <span class="dc-title">冲刷出（送出）输出缓冲区内容并关闭缓冲</span></p>   </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.ob-end-flush-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">bool</span> <span class="methodname" style="color:#CC7832"><strong>ob_end_flush</strong></span>     ( <span class="methodparam">void</span>    )</div>    <p class="para rdfs-comment">   这个函数将送出最顶层缓冲区的内容（如果里边有内容的话），并关闭缓冲区。如果想进一步处理缓冲区中的内容，必须在<span class="function"><strong style="color:#CC7832">ob_end_flush()</strong></span>之前调用   <span class="function">{@link ob_get_contents()}</span>，因为在调用<span class="function"><strong style="color:#CC7832">ob_end_flush()</strong></span>后缓冲区内容被丢弃。    </p>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>:     <span class="simpara">    这个函数与<span class="function">{@link ob_get_flush()}</span>相似，不同的是<span class="function">{@link ob_get_flush()}</span>会把缓冲区中的内容作为字符串返回。        </span>   </p></blockquote>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.ob-end-flush-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    成功时返回 <strong><span>TRUE</span></strong>， 或者在失败时返回 <strong><span>FALSE</span></strong>。 错误的原因首先是，在调用时没有一个起作用的缓冲区，或者是因为某些原因缓冲区不能被删除（可能对特殊缓冲区而言）。      </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-function.ob-end-flush-errors">   <h3 class="title">错误／异常</h3>   <p class="para">    如果函数失败了，将引发一个<strong><span>E_NOTICE</span></strong>异常。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.ob-end-flush-changelog">   <h3 class="title">更新日志</h3>   <span>    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>4.2.0</td>        <td>         添加了布尔返回值。        </td>       </tr>       </tbody>         </table>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.ob-end-flush-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-474">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">ob_end_flush()</strong></span> example</strong></p>     <div class="example-contents"><p>      下面的例子给出了一种送出缓冲区内容并关闭所有输出缓冲区的容易的方法：      </p></div>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />&nbsp;&nbsp;</span><span style="color: #007700">while&nbsp;(@</span><span style="color: #9876AA">ob_end_flush</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>     </div>   </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.ob-end-flush-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link ob_start()} - 打开输出控制缓冲</span></li>     <li class="member"><span class="function">{@link ob_get_contents()} - 返回输出缓冲区的内容</span></li>     <li class="member"><span class="function">{@link ob_get_flush()} - 刷出（送出）缓冲区内容，以字符串形式返回内容，并关闭输出缓冲区。</span></li>     <li class="member"><span class="function">{@link ob_flush()} - 冲刷出（送出）输出缓冲区中的内容</span></li>     <li class="member"><span class="function">{@link ob_end_clean()} - 清空（擦除）缓冲区并关闭输出缓冲</span></li>    </ul>   </span>  </div>    <div class="up"><a href="http://php.net/manual/zh/ref.outcontrol.php">Output Control 函数</a></div></div>
 * @return bool true on success or false on failure. Reasons for failure are first that you called the*/
function ob_end_flush () {}

/**
*<div id="function.ob-end-clean" class="refentry">  <div class="refnamediv">   <h1 class="refname">ob_end_clean</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">ob_end_clean</span> &mdash; <span class="dc-title">清空（擦除）缓冲区并关闭输出缓冲</span></p>   </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.ob-end-clean-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">bool</span> <span class="methodname" style="color:#CC7832"><strong>ob_end_clean</strong></span>     ( <span class="methodparam">void</span>    )</div>    <p class="para rdfs-comment">    此函数丢弃最顶层输出缓冲区的内容并关闭这个缓冲区。如果想要进一步处理缓冲区的内容，必须在<span class="function"><strong style="color:#CC7832">ob_end_clean()</strong></span>之前调用<span class="function">{@link ob_get_contents()}</span>，因为当调用<span class="function"><strong style="color:#CC7832">ob_end_clean()</strong></span>时缓冲区内容将被丢弃。    </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.ob-end-clean-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    成功时返回 <strong><span>TRUE</span></strong>， 或者在失败时返回 <strong><span>FALSE</span></strong>。 错误的原因首先是，在调用时没有一个起作用的缓冲区，或者是因为某些原因缓冲区不能被删除（可能对特殊缓冲区而言）。      </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-function.ob-end-clean-errors">   <h3 class="title">错误／异常</h3>   <p class="para">   如果函数失败了，将引发一个<strong><span>E_NOTICE</span></strong>异常。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.ob-end-clean-changelog">   <h3 class="title">更新日志</h3>   <span>    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>4.2.0</td>        <td>         添加了布尔返回值。        </td>       </tr>       </tbody>         </table>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.ob-end-clean-examples">   <h3 class="title">范例</h3>   <span>   下面的例子给出了一种去除所有输出缓冲区的方法：      </span>   <p class="para">    <div class="example" id="example-473">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">ob_end_clean()</strong></span> example</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />ob_start</span><span style="color: #007700">();<br />echo&nbsp;</span><span style="color: #DD0000">'Text&nbsp;that&nbsp;won\'t&nbsp;get&nbsp;displayed.'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">ob_end_clean</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>     </div>   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.ob-end-clean-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link ob_start()} - 打开输出控制缓冲</span></li>     <li class="member"><span class="function">{@link ob_get_contents()} - 返回输出缓冲区的内容</span></li>     <li class="member"><span class="function">{@link ob_flush()} - 冲刷出（送出）输出缓冲区中的内容</span></li>    </ul>   </span>  </div>    <div class="up"><a href="http://php.net/manual/zh/ref.outcontrol.php">Output Control 函数</a></div></div>
 * @return bool true on success or false on failure. Reasons for failure are first that you called the*/
function ob_end_clean () {}

/**
*<div id="function.ob-get-flush" class="refentry">  <div class="refnamediv">   <h1 class="refname">ob_get_flush</h1>   <p class="verinfo">(PHP 4 &gt;= 4.3.0, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">ob_get_flush</span> &mdash; <span class="dc-title">刷出（送出）缓冲区内容，以字符串形式返回内容，并关闭输出缓冲区。</span></p>   </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.ob-get-flush-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">string</span> <span class="methodname" style="color:#CC7832"><strong>ob_get_flush</strong></span>     ( <span class="methodparam">void</span>    )</div>    <p class="para rdfs-comment">    <span class="function"><strong style="color:#CC7832">ob_get_flush()</strong></span>    刷出（送出）缓冲区内容，以字符串形式返回内容，并关闭输出缓冲区。   </p>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>:     <span class="simpara">    这个函数与<span class="function">{@link ob_end_flush()}</span>相似，不同的是本函数还会以字符串形式返回缓冲区内容。    </span>   </p></blockquote>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.ob-get-flush-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回输出缓冲区的内容；或者是，如果没有起作用的输出缓冲区，返回<strong><span>FALSE</span></strong> 。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.ob-get-flush-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-477">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">ob_get_flush()</strong></span> example</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">//using&nbsp;output_buffering=On<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">ob_list_handlers</span><span style="color: #007700">());<br /><br /></span><span style="color: #FF8000">//save&nbsp;buffer&nbsp;in&nbsp;a&nbsp;file<br /></span><span style="color: #9876AA">$buffer&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">ob_get_flush</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">file_put_contents</span><span style="color: #007700">(</span><span style="color: #DD0000">'buffer.txt'</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$buffer</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">ob_list_handlers</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Array (     [0] =&gt; default output handler ) Array ( ) </span></div>     </div>    </div>   </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.ob-get-flush-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link ob_end_clean()} - 清空（擦除）缓冲区并关闭输出缓冲</span></li>     <li class="member"><span class="function">{@link ob_end_flush()} - 冲刷出（送出）输出缓冲区内容并关闭缓冲</span></li>     <li class="member"><span class="function">{@link ob_list_handlers()} - 列出所有使用中的输出处理程序。</span></li>    </ul>   </span>  </div>    <div class="up"><a href="http://php.net/manual/zh/ref.outcontrol.php">Output Control 函数</a></div></div>
 * @return string the output buffer or false if no buffering is active.*/
function ob_get_flush () {}

/**
*<div id="function.ob-get-clean" class="refentry">  <div class="refnamediv">   <h1 class="refname">ob_get_clean</h1>   <p class="verinfo">(PHP 4 &gt;= 4.3.0, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">ob_get_clean</span> &mdash; <span class="dc-title">得到当前缓冲区的内容并删除当前输出缓。</span></p>   </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.ob-get-clean-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">string</span> <span class="methodname" style="color:#CC7832"><strong>ob_get_clean</strong></span>     ( <span class="methodparam">void</span>    )</div>    <p class="para rdfs-comment">得到当前缓冲区的内容并删除当前输出缓冲区。   </p>   <p class="para">    <span class="function"><strong style="color:#CC7832">ob_get_clean()</strong></span> 实质上是一起执行了    <span class="function">{@link ob_get_contents()}</span> 和    <span class="function">{@link ob_end_clean()}</span>。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.ob-get-clean-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回输出缓冲区的内容，并结束输出缓冲区。如果输出缓冲区不是活跃的，即返回 <strong><span>FALSE</span></strong> 。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.ob-get-clean-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-475">     <p><strong>Example #1 A simple <span class="function"><strong style="color:#CC7832">ob_get_clean()</strong></span> example</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /><br />ob_start</span><span style="color: #007700">();<br /><br />echo&nbsp;</span><span style="color: #DD0000">"Hello&nbsp;World"</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">$out&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">ob_get_clean</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$out&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">strtolower</span><span style="color: #007700">(</span><span style="color: #9876AA">$out</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$out</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span>  string(11) &quot;hello world&quot;  </span></div>     </div>    </div>   </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.ob-get-clean-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link ob_get_contents()} - 返回输出缓冲区的内容</span></li>     <li class="member"><span class="function">{@link ob_start()} - 打开输出控制缓冲</span></li>    </ul>   </span>  </div>    <div class="up"><a href="http://php.net/manual/zh/ref.outcontrol.php">Output Control 函数</a></div></div>
 * @return string the contents of the output buffer and end output buffering.*/
function ob_get_clean () {}

/**
*<div id="function.ob-get-length" class="refentry">  <div class="refnamediv">   <h1 class="refname">ob_get_length</h1>   <p class="verinfo">(PHP 4 &gt;= 4.0.2, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">ob_get_length</span> &mdash; <span class="dc-title">返回输出缓冲区内容的长度</span></p>   </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.ob-get-length-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">int</span> <span class="methodname" style="color:#CC7832"><strong>ob_get_length</strong></span>     ( <span class="methodparam">void</span>    )</div>    <p class="para rdfs-comment">    此函数将返回输出缓中冲区内容的长度。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.ob-get-length-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回输出缓冲区内容的长度；或者返回<strong><span>FALSE</span></strong>——如果没有起作用的缓冲区。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.ob-get-length-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-478">     <p><strong>Example #1 A simple <span class="function"><strong style="color:#CC7832">ob_get_length()</strong></span> example</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /><br />ob_start</span><span style="color: #007700">();<br /><br />echo&nbsp;</span><span style="color: #DD0000">"Hello&nbsp;"</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">$len1&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">ob_get_length</span><span style="color: #007700">();<br /><br />echo&nbsp;</span><span style="color: #DD0000">"World"</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">$len2&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">ob_get_length</span><span style="color: #007700">();<br /><br /></span><span style="color: #9876AA">ob_end_clean</span><span style="color: #007700">();<br /><br />echo&nbsp;</span><span style="color: #9876AA">$len1&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #DD0000">",&nbsp;."&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #9876AA">$len2</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> 6, 11 </span></div>     </div>    </div>   </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.ob-get-length-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link ob_start()} - 打开输出控制缓冲</span></li>     <li class="member"><span class="function">{@link ob_get_contents()} - 返回输出缓冲区的内容</span></li>    </ul>   </span>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.outcontrol.php">Output Control 函数</a></div></div>
 * @return int the length of the output buffer contents or false if no*/
function ob_get_length () {}

/**
*<div id="function.ob-get-level" class="refentry">  <div class="refnamediv">   <h1 class="refname">ob_get_level</h1>   <p class="verinfo">(PHP 4 &gt;= 4.2.0, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">ob_get_level</span> &mdash; <span class="dc-title">返回输出缓冲机制的嵌套级别</span></p>   </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.ob-get-level-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">int</span> <span class="methodname" style="color:#CC7832"><strong>ob_get_level</strong></span>     ( <span class="methodparam">void</span>    )</div>    <p class="para rdfs-comment">    返回输出缓冲机制的嵌套级别。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.ob-get-level-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回嵌套的输出缓冲处理程序的级别；或者是，如果输出缓冲区不起作用，返回零。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.ob-get-level-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link ob_start()} - 打开输出控制缓冲</span></li>     <li class="member"><span class="function">{@link ob_get_contents()} - 返回输出缓冲区的内容</span></li>    </ul>   </span>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.outcontrol.php">Output Control 函数</a></div></div>
 * @return int the level of nested output buffering handlers or zero if output*/
function ob_get_level () {}

/**
*<div id="function.ob-get-status" class="refentry">  <div class="refnamediv">   <h1 class="refname">ob_get_status</h1>   <p class="verinfo">(PHP 4 &gt;= 4.2.0, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">ob_get_status</span> &mdash; <span class="dc-title">得到所有输出缓冲区的状态</span></p>   </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.ob-get-status-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">array</span> <span class="methodname" style="color:#CC7832"><strong>ob_get_status</strong></span>     ([ <span class="methodparam"><span class="type" style="color:#EAB766">bool</span>  <span class="parameter" style="color:#2EACF9">$full_status</span> <span class="initializer"> = FALSE</span></span>   ] )</div>    <p class="para rdfs-comment">    <span class="function"><strong style="color:#CC7832">ob_get_status()</strong></span>返回最顶层输出缓冲区的状态信息；或者如果<span class="parameter" style="color:#2EACF9">full_status</span>设为<strong><span>TRUE</span></strong>，返回所有有效的输出缓冲级别。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.ob-get-status-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">full_status</span></dt>       <dd>        <p class="para">         设为<strong><span>TRUE</span></strong> 返回所有有效的输出缓冲区级别的状态信息。如果设为 <strong><span>FALSE</span></strong> 或者没有设置，仅返回最        顶层输出缓冲区的状态信息。       </p>      </dd>          </dl>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.ob-get-status-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">     如果调用时没有<span class="parameter" style="color:#2EACF9">full_status</span>参数，或者<span class="parameter" style="color:#2EACF9">full_status</span> = <strong><span>FALSE</span></strong> 将返回一个包含下面元素的简单数组：    <div class="informalexample">     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="returnvaluescode"><span>Array (     [level] =&gt; 2     [type] =&gt; 0     [status] =&gt; 0     [name] =&gt; URL-Rewriter     [del] =&gt; 1 )</span> </div>     </div>    </div>    <table class="segmentedlist">     <caption><strong>Simple <span class="function"><strong style="color:#CC7832">ob_get_status()</strong></span> results</strong></caption>     <thead><tr><th>Key</th><th>Value</th>     </tr></thead><tbody><tr class="seglistitem"><td class="seg">level</td><td class="seg">输出嵌套级别</td></tr>     <tr class="seglistitem"><td class="seg">type</td><td class="seg"><em>PHP_OUTPUT_HANDLER_INTERNAL (0)</em> 或者 <em>PHP_OUTPUT_HANDLER_USER (1)</em></td></tr>     <tr class="seglistitem"><td class="seg">status</td><td class="seg"><em>PHP_OUTPUT_HANDLER_START</em> (0), <em>PHP_OUTPUT_HANDLER_CONT</em> (1) or <em>PHP_OUTPUT_HANDLER_END</em> (2) 三个之一</td></tr>     <tr class="seglistitem"><td class="seg">name</td><td class="seg">起作用的输出处理程序的名字，或者是默认的输出处理程序的名字（如果没有设置的话）</td></tr>     <tr class="seglistitem"><td class="seg">del</td><td class="seg">由<span class="function">{@link ob_start()}</span>设置的删除标签（Erase-flag）</td></tr>    </tbody></table>   </p>   <p class="para">    如果调用时<span class="parameter" style="color:#2EACF9">full_status</span> = <strong><span>TRUE</span></strong>，将返回一个数组，该数组的每个元素包含有效的输出缓冲区级别的状态信息。缓冲区的级别数用来当作数组的第一维数；每个元素自身是另一个数组，它持有该有效输出级别的状态信息。    <div class="informalexample">     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Array (     [0] =&gt; Array         (             [chunk_size] =&gt; 0             [size] =&gt; 40960             [block_size] =&gt; 10240             [type] =&gt; 1             [status] =&gt; 0             [name] =&gt; default output handler             [del] =&gt; 1         )      [1] =&gt; Array         (             [chunk_size] =&gt; 0             [size] =&gt; 40960             [block_size] =&gt; 10240             [type] =&gt; 0             [buffer_size] =&gt; 0             [status] =&gt; 0             [name] =&gt; URL-Rewriter             [del] =&gt; 1         )  ) </span></div>     </div>    </div>   </p>   <p class="para">    完整的输出包含以下附加元素：    <table class="segmentedlist">     <caption><strong>完整的<span class="function"><strong style="color:#CC7832">ob_get_status()</strong></span> 结果</strong></caption>     <thead><tr><th>Key</th><th>Value</th>     </tr></thead><tbody><tr class="seglistitem"><td class="seg">chunk_size</td><td class="seg">由 <span class="function">{@link ob_start()}</span>设置的Chunk size值</td></tr>     <tr class="seglistitem"><td class="seg">size</td><td class="seg">...</td></tr>     <tr class="seglistitem"><td class="seg">blocksize</td><td class="seg">...</td></tr>    </tbody></table>   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.ob-get-status-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link ob_get_level()} - 返回输出缓冲机制的嵌套级别</span></li>     <li class="member"><span class="function">{@link ob_list_handlers()} - 列出所有使用中的输出处理程序。</span></li>    </ul>   </span>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.outcontrol.php">Output Control 函数</a></div></div>
 * @return array If called without the full_status parameter*/
function ob_get_status ($full_status = null) {}

/**
*<div id="function.ob-get-contents" class="refentry">  <div class="refnamediv">   <h1 class="refname">ob_get_contents</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">ob_get_contents</span> &mdash; <span class="dc-title">返回输出缓冲区的内容</span></p>   </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.ob-get-contents-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">string</span> <span class="methodname" style="color:#CC7832"><strong>ob_get_contents</strong></span>     ( <span class="methodparam">void</span>    )</div>    <p class="para rdfs-comment">   只是得到输出缓冲区的内容，但不清除它。   </p>  </div>     <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.ob-get-contents-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">   此函数返回输出缓冲区的内容，或者如果输出缓冲区无效将返回<strong><span>FALSE</span></strong> 。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.ob-get-contents-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-476">     <p><strong>Example #1 A simple <span class="function"><strong style="color:#CC7832">ob_get_contents()</strong></span> example</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /><br />ob_start</span><span style="color: #007700">();<br /><br />echo&nbsp;</span><span style="color: #DD0000">"Hello&nbsp;"</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">$out1&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">ob_get_contents</span><span style="color: #007700">();<br /><br />echo&nbsp;</span><span style="color: #DD0000">"World"</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">$out2&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">ob_get_contents</span><span style="color: #007700">();<br /><br /></span><span style="color: #9876AA">ob_end_clean</span><span style="color: #007700">();<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$out1</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$out2</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> string(6) &quot;Hello &quot; string(11) &quot;Hello World&quot; </span></div>     </div>    </div>   </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.ob-get-contents-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link ob_start()} - 打开输出控制缓冲</span></li>     <li class="member"><span class="function">{@link ob_get_length()} - 返回输出缓冲区内容的长度</span></li>    </ul>   </span>  </div>    <div class="up"><a href="http://php.net/manual/zh/ref.outcontrol.php">Output Control 函数</a></div></div>
 * @return string This will return the contents of the output buffer or false, if output*/
function ob_get_contents () {}

/**
*<div id="function.ob-implicit-flush" class="refentry">  <div class="refnamediv">   <h1 class="refname">ob_implicit_flush</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">ob_implicit_flush</span> &mdash; <span class="dc-title">打开/关闭绝对刷送</span></p>   </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.ob-implicit-flush-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span> <span class="methodname" style="color:#CC7832"><strong>ob_implicit_flush</strong></span>     ([ <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#2EACF9">$flag</span><span class="initializer"> = true</span></span>   ] )</div>    <p class="para rdfs-comment">    <span class="function"><strong style="color:#CC7832">ob_implicit_flush()</strong></span>将打开或关闭绝对（隐式）刷送。绝对（隐式）刷送将导致在每次输出调用后有一次刷送操作，以便不再需要对 <span class="function">{@link flush()}</span> 的显式调用。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.ob-implicit-flush-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">flag</span></dt>       <dd>        <p class="para">         设为<strong><span>TRUE</span></strong> 打开绝对刷送，反之是 <strong><span>FALSE</span></strong> 。       </p>      </dd>          </dl>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.ob-implicit-flush-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    没有返回值。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.ob-implicit-flush-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link flush()} - 刷新输出缓冲</span></li>     <li class="member"><span class="function">{@link ob_start()} - 打开输出控制缓冲</span></li>     <li class="member"><span class="function">{@link ob_end_flush()} - 冲刷出（送出）输出缓冲区内容并关闭缓冲</span></li>    </ul>   </span>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.outcontrol.php">Output Control 函数</a></div></div>
 * @return void */
function ob_implicit_flush ($flag = null) {}

/**
*<div id="function.ob-list-handlers" class="refentry">  <div class="refnamediv">   <h1 class="refname">ob_list_handlers</h1>   <p class="verinfo">(PHP 4 &gt;= 4.3.0, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">ob_list_handlers</span> &mdash; <span class="dc-title">列出所有使用中的输出处理程序。</span></p>   </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.ob-list-handlers-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">array</span> <span class="methodname" style="color:#CC7832"><strong>ob_list_handlers</strong></span>     ( <span class="methodparam">void</span>    )</div>    <p class="para rdfs-comment">    列出所有使用中的输出处理程序。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.ob-list-handlers-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">     此函数将返回一个数组，数组元素是正在使用中输出处理程序名（如果存在的输出处理程序的话）。     如果启用了<a href="http://php.net/manual/zh/outcontrol.configuration.php#ini.output-buffering" class="link">output_buffering</a> 或者在      <span class="function">{@link ob_start()}</span> 中创建了一个匿名函数，<span class="function"><strong style="color:#CC7832">ob_list_handlers()</strong></span> 将返回   &quot;default output handler&quot;。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.ob-list-handlers-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-480">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">ob_list_handlers()</strong></span> example</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">//using&nbsp;output_buffering=On<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">ob_list_handlers</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">ob_end_flush</span><span style="color: #007700">();<br /><br /></span><span style="color: #9876AA">ob_start</span><span style="color: #007700">(</span><span style="color: #DD0000">"ob_gzhandler"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">ob_list_handlers</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">ob_end_flush</span><span style="color: #007700">();<br /><br /></span><span style="color: #FF8000">//&nbsp;anonymous&nbsp;functions<br /></span><span style="color: #9876AA">ob_start</span><span style="color: #007700">(</span><span style="color: #9876AA">create_function</span><span style="color: #007700">(</span><span style="color: #DD0000">'$string'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'return&nbsp;$string;'</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">ob_list_handlers</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">ob_end_flush</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Array (     [0] =&gt; default output handler )  Array (     [0] =&gt; ob_gzhandler )  Array (     [0] =&gt; default output handler ) </span></div>     </div>    </div>   </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.ob-list-handlers-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link ob_end_clean()} - 清空（擦除）缓冲区并关闭输出缓冲</span></li>     <li class="member"><span class="function">{@link ob_end_flush()} - 冲刷出（送出）输出缓冲区内容并关闭缓冲</span></li>     <li class="member"><span class="function">{@link ob_get_flush()} - 刷出（送出）缓冲区内容，以字符串形式返回内容，并关闭输出缓冲区。</span></li>     <li class="member"><span class="function">{@link ob_start()} - 打开输出控制缓冲</span></li>    </ul>   </span>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.outcontrol.php">Output Control 函数</a></div></div>
 * @return array This will return an array with the output handlers in use (if any). If*/
function ob_list_handlers () {}

/**
*<div id="function.ksort" class="refentry">    <div class="refnamediv">     <h1 class="refname">ksort</h1>     <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">ksort</span> &mdash; <span class="dc-title">对数组按照键名排序</span></p>     </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.ksort-description">   <h3 class="title">说明</h3>     <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">      <span class="type" style="color:#EAB766">bool</span> <span class="methodname" style="color:#CC7832"><strong>ksort</strong></span>       ( <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">&$array</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#2EACF9">$sort_flags</span><span class="initializer"> = SORT_REGULAR</span></span>     ] )</div>      <p class="para rdfs-comment">      对数组按照键名排序，保留键名到数据的关联。本函数主要用于关联数组。     </p>    </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.ksort-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">array</span></dt>       <dd>        <p class="para">        输入的数组。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">sort_flags</span></dt>       <dd>        <p class="para">        可以用可选参数  <span class="parameter" style="color:#2EACF9">sort_flags</span>       改变排序的行为，详情见  <span class="function">{@link sort()}</span>。       </p>      </dd>          </dl>    </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.ksort-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    成功时返回 <strong><span>TRUE</span></strong>， 或者在失败时返回 <strong><span>FALSE</span></strong>。   </p>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.ksort-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-6097">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">ksort()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$fruits&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">"d"</span><span style="color: #007700">=&gt;</span><span style="color: #DD0000">"lemon"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"a"</span><span style="color: #007700">=&gt;</span><span style="color: #DD0000">"orange"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"b"</span><span style="color: #007700">=&gt;</span><span style="color: #DD0000">"banana"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"c"</span><span style="color: #007700">=&gt;</span><span style="color: #DD0000">"apple"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">ksort</span><span style="color: #007700">(</span><span style="color: #9876AA">$fruits</span><span style="color: #007700">);<br />foreach&nbsp;(</span><span style="color: #9876AA">$fruits&nbsp;</span><span style="color: #007700">as&nbsp;</span><span style="color: #9876AA">$key&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">$val</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"</span><span style="color: #9876AA">$key</span><span style="color: #DD0000">&nbsp;=&nbsp;</span><span style="color: #9876AA">$val</span><span style="color: #DD0000">\n"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> a = orange b = banana c = apple d = lemon </span></div>     </div>    </div>   </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.ksort-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link asort()} - 对数组进行排序并保持索引关系</span></li>     <li class="member"><a href="http://php.net/manual/zh/array.sorting.php" class="link">数组排序函数对比</a></li>    </ul>   </span>  </div>    <div class="up"><a href="http://php.net/manual/zh/ref.array.php">数组 函数</a></div></div>
 * @return bool true on success or false on failure.*/
function ksort (array &$array, $sort_flags = null) {}

/**
*<div id="function.krsort" class="refentry">  <div class="refnamediv">   <h1 class="refname">krsort</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">krsort</span> &mdash; <span class="dc-title">对数组按照键名逆向排序</span></p>   </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.krsort-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">bool</span> <span class="methodname" style="color:#CC7832"><strong>krsort</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">&$array</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#2EACF9">$sort_flags</span><span class="initializer"> = SORT_REGULAR</span></span>   ] )</div>    <p class="para rdfs-comment">    对数组按照键名逆向排序，保留键名到数据的关联。主要用于结合数组。   </p>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.krsort-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">array</span></dt>       <dd>        <p class="para">        输入的数组。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">sort_flags</span></dt>       <dd>        <p class="para">        可以用可选参数 <span class="parameter" style="color:#2EACF9">sort_flags</span> 改变排序的行为，详情见 <span class="function">{@link sort()}</span>。       </p>      </dd>          </dl>    </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.krsort-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    成功时返回 <strong><span>TRUE</span></strong>， 或者在失败时返回 <strong><span>FALSE</span></strong>。   </p>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.krsort-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-6096">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">krsort()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$fruits&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">"d"</span><span style="color: #007700">=&gt;</span><span style="color: #DD0000">"lemon"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"a"</span><span style="color: #007700">=&gt;</span><span style="color: #DD0000">"orange"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"b"</span><span style="color: #007700">=&gt;</span><span style="color: #DD0000">"banana"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"c"</span><span style="color: #007700">=&gt;</span><span style="color: #DD0000">"apple"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">krsort</span><span style="color: #007700">(</span><span style="color: #9876AA">$fruits</span><span style="color: #007700">);<br />foreach&nbsp;(</span><span style="color: #9876AA">$fruits&nbsp;</span><span style="color: #007700">as&nbsp;</span><span style="color: #9876AA">$key&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">$val</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"</span><span style="color: #9876AA">$key</span><span style="color: #DD0000">&nbsp;=&nbsp;</span><span style="color: #9876AA">$val</span><span style="color: #DD0000">\n"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> d = lemon c = apple b = banana a = orange </span></div>     </div>    </div>   </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.krsort-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link arsort()} - 对数组进行逆向排序并保持索引关系</span></li>     <li class="member"><span class="function">{@link ksort()} - 对数组按照键名排序</span></li>     <li class="member"><a href="http://php.net/manual/zh/array.sorting.php" class="link">数组排序函数对比</a></li>    </ul>   </span>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.array.php">数组 函数</a></div></div>
 * @return bool true on success or false on failure.*/
function krsort (array &$array, $sort_flags = null) {}

/**
*<div id="function.natsort" class="refentry">    <div class="refnamediv">     <h1 class="refname">natsort</h1>     <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">natsort</span> &mdash; <span class="dc-title">      用“自然排序”算法对数组排序     </span></p>     </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.natsort-description">   <h3 class="title">说明</h3>      <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">       <span class="type" style="color:#EAB766">bool</span> <span class="methodname" style="color:#CC7832"><strong>natsort</strong></span>        ( <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">&$array</span></span>       )</div>      <p class="para rdfs-comment">      本函数实现了一个和人们通常对字母数字字符串进行排序的方法一样的排序算法并保持原有键／值的关联，这被称为“自然排序”。本算法和通常的计算机字符串排序算法（用于      <span class="function">{@link sort()}</span>）的区别见下面示例。     </p>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>:   <p class="para">   If two members compare as equal, their relative order in the sorted array is undefined.  </p> </p></blockquote>     </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.natsort-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">array</span></dt>       <dd>        <p class="para">        输入的 array。       </p>      </dd>          </dl>    </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.natsort-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    成功时返回 <strong><span>TRUE</span></strong>， 或者在失败时返回 <strong><span>FALSE</span></strong>。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.natsort-changelog">   <h3 class="title">更新日志</h3>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>      </thead>      <tbody class="tbody">      <tr>       <td>5.2.10</td>       <td>        用零填充的数字字符串 (例如 &#039;00005&#039;)现在本质上会忽略掉填充的前道零。       </td>      </tr>      </tbody>       </table>   </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.natsort-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-6105">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">natsort()</strong></span> 基本用法的操作示例</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$array1&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">$array2&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">"img12.png"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"img10.png"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"img2.png"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"img1.png"</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">asort</span><span style="color: #007700">(</span><span style="color: #9876AA">$array1</span><span style="color: #007700">);<br />echo&nbsp;</span><span style="color: #DD0000">"Standard&nbsp;sorting\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$array1</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">natsort</span><span style="color: #007700">(</span><span style="color: #9876AA">$array2</span><span style="color: #007700">);<br />echo&nbsp;</span><span style="color: #DD0000">"\nNatural&nbsp;order&nbsp;sorting\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$array2</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Standard sorting Array (     [3] =&gt; img1.png     [1] =&gt; img10.png     [0] =&gt; img12.png     [2] =&gt; img2.png )  Natural order sorting Array (     [3] =&gt; img1.png     [2] =&gt; img2.png     [1] =&gt; img10.png     [0] =&gt; img12.png ) </span></div>     </div>     <div class="example-contents"><p>      For more information see: Martin Pool&#039;s <a href="http://sourcefrog.net/projects/natsort/" class="link external">&raquo;&nbsp;Natural Order String Comparison</a>      page.     </p></div>    </div>    <div class="example" id="example-6106">     <p><strong>Example #2 <span class="function"><strong style="color:#CC7832">natsort()</strong></span> examples demonstrating potential gotchas</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #DD0000">"Negative&nbsp;numbers\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$negative&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">'-5'</span><span style="color: #007700">,</span><span style="color: #DD0000">'3'</span><span style="color: #007700">,</span><span style="color: #DD0000">'-2'</span><span style="color: #007700">,</span><span style="color: #DD0000">'0'</span><span style="color: #007700">,</span><span style="color: #DD0000">'-1000'</span><span style="color: #007700">,</span><span style="color: #DD0000">'9'</span><span style="color: #007700">,</span><span style="color: #DD0000">'1'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$negative</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">natsort</span><span style="color: #007700">(</span><span style="color: #9876AA">$negative</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$negative</span><span style="color: #007700">);<br /><br />echo&nbsp;</span><span style="color: #DD0000">"Zero&nbsp;padding\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$zeros&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">'09'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'8'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'10'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'009'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'011'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'0'</span><span style="color: #007700">);&nbsp;<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$zeros</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">natsort</span><span style="color: #007700">(</span><span style="color: #9876AA">$zeros</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$zeros</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Negative numbers Array (     [0] =&gt; -5     [1] =&gt; 3     [2] =&gt; -2     [3] =&gt; 0     [4] =&gt; -1000     [5] =&gt; 9     [6] =&gt; 1 ) Array (     [2] =&gt; -2     [0] =&gt; -5     [4] =&gt; -1000     [3] =&gt; 0     [6] =&gt; 1     [1] =&gt; 3     [5] =&gt; 9 )  Zero padding Array (     [0] =&gt; 09     [1] =&gt; 8     [2] =&gt; 10     [3] =&gt; 009     [4] =&gt; 011     [5] =&gt; 0 ) Array (     [5] =&gt; 0     [1] =&gt; 8     [3] =&gt; 009     [0] =&gt; 09     [2] =&gt; 10     [4] =&gt; 011 ) </span></div>     </div>    </div>   </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.natsort-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link natcasesort()} - 用&ldquo;自然排序&rdquo;算法对数组进行不区分大小写字母的排序</span></li>     <li class="member"><a href="http://php.net/manual/zh/array.sorting.php" class="link">数组排序函数对比</a></li>     <li class="member"><span class="function">{@link strnatcmp()} - 使用自然排序算法比较字符串</span></li>     <li class="member"><span class="function">{@link strnatcasecmp()} - 使用&ldquo;自然顺序&rdquo;算法比较字符串（不区分大小写）</span></li>    </ul>   </span>  </div>    <div class="up"><a href="http://php.net/manual/zh/ref.array.php">数组 函数</a></div></div>
 * @return bool true on success or false on failure.*/
function natsort (array &$array) {}

/**
*<div id="function.natcasesort" class="refentry">    <div class="refnamediv">     <h1 class="refname">natcasesort</h1>     <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">natcasesort</span> &mdash; <span class="dc-title">      用“自然排序”算法对数组进行不区分大小写字母的排序     </span></p>     </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.natcasesort-description">   <h3 class="title">说明</h3>      <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">       <span class="type" style="color:#EAB766">bool</span> <span class="methodname" style="color:#CC7832"><strong>natcasesort</strong></span>        ( <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">&$array</span></span>       )</div>      <p class="para rdfs-comment">      <span class="function"><strong style="color:#CC7832">natcasesort()</strong></span> 是 <span class="function">{@link natsort()}</span>      函数的不区分大小写字母的版本。     </p>     <p class="para">      本函数实现了一个和人们通常对字母数字字符串进行排序的方法一样的排序算法并保持原有键／值的关联，这被称为“自然排序”。     </p>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>:   <p class="para">   If two members compare as equal, their relative order in the sorted array is undefined.  </p> </p></blockquote>     </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.natcasesort-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">array</span></dt>       <dd>        <p class="para">        输入的数组。       </p>      </dd>          </dl>    </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.natcasesort-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    成功时返回 <strong><span>TRUE</span></strong>， 或者在失败时返回 <strong><span>FALSE</span></strong>。   </p>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.natcasesort-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-6104">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">natcasesort()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$array1&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">$array2&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">'IMG0.png'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'img12.png'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'img10.png'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'img2.png'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'img1.png'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'IMG3.png'</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">sort</span><span style="color: #007700">(</span><span style="color: #9876AA">$array1</span><span style="color: #007700">);<br />echo&nbsp;</span><span style="color: #DD0000">"Standard&nbsp;sorting\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$array1</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">natcasesort</span><span style="color: #007700">(</span><span style="color: #9876AA">$array2</span><span style="color: #007700">);<br />echo&nbsp;</span><span style="color: #DD0000">"\nNatural&nbsp;order&nbsp;sorting&nbsp;(case-insensitive)\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$array2</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Standard sorting Array (     [0] =&gt; IMG0.png     [1] =&gt; IMG3.png     [2] =&gt; img1.png     [3] =&gt; img10.png     [4] =&gt; img12.png     [5] =&gt; img2.png )  Natural order sorting (case-insensitive) Array (     [0] =&gt; IMG0.png     [4] =&gt; img1.png     [3] =&gt; img2.png     [5] =&gt; IMG3.png     [2] =&gt; img10.png     [1] =&gt; img12.png ) </span></div>     </div>     <div class="example-contents"><p>      更多信息见 Martin Pool 的 <a href="http://sourcefrog.net/projects/natsort/" class="link external">&raquo;&nbsp;Natural Order String Comparison</a> 页面。     </p></div>    </div>   </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.natcasesort-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link natsort()} - 用&ldquo;自然排序&rdquo;算法对数组排序</span></li>     <li class="member"><a href="http://php.net/manual/zh/array.sorting.php" class="link">数组排序函数对比</a></li>     <li class="member"><span class="function">{@link strnatcmp()} - 使用自然排序算法比较字符串</span></li>     <li class="member"><span class="function">{@link strnatcasecmp()} - 使用&ldquo;自然顺序&rdquo;算法比较字符串（不区分大小写）</span></li>    </ul>   </span>  </div>    <div class="up"><a href="http://php.net/manual/zh/ref.array.php">数组 函数</a></div></div>
 * @return bool true on success or false on failure.*/
function natcasesort (array &$array) {}

/**
*<div id="function.asort" class="refentry">    <div class="refnamediv">     <h1 class="refname">asort</h1>     <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">asort</span> &mdash; <span class="dc-title">对数组进行排序并保持索引关系</span></p>     </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.asort-description">   <h3 class="title">说明</h3>      <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">       <span class="type" style="color:#EAB766">bool</span> <span class="methodname" style="color:#CC7832"><strong>asort</strong></span>        ( <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">&$array</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#2EACF9">$sort_flags</span><span class="initializer"> = SORT_REGULAR</span></span>      ] )</div>      <p class="para rdfs-comment">      本函数对数组进行排序，数组的索引保持和单元的关联。主要用于对那些单元顺序很重要的结合数组进行排序。     </p>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>:   <p class="para">   If two members compare as equal, their relative order in the sorted array is undefined.  </p> </p></blockquote>     </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.asort-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">array</span></dt>       <dd>        <p class="para">        输入的数组。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">sort_flags</span></dt>       <dd>        <p class="para">        可以用可选的参数 <span class="parameter" style="color:#2EACF9">sort_flags</span> 改变排序的行为，详情见 <span class="function">{@link sort()}</span>。       </p>      </dd>          </dl>    </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.asort-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    成功时返回 <strong><span>TRUE</span></strong>， 或者在失败时返回 <strong><span>FALSE</span></strong>。   </p>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.asort-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-6083">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">asort()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$fruits&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">"d"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"lemon"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"a"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"orange"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"b"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"banana"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"c"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"apple"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">asort</span><span style="color: #007700">(</span><span style="color: #9876AA">$fruits</span><span style="color: #007700">);<br />foreach&nbsp;(</span><span style="color: #9876AA">$fruits&nbsp;</span><span style="color: #007700">as&nbsp;</span><span style="color: #9876AA">$key&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">$val</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"</span><span style="color: #9876AA">$key</span><span style="color: #DD0000">&nbsp;=&nbsp;</span><span style="color: #9876AA">$val</span><span style="color: #DD0000">\n"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> c = apple b = banana d = lemon a = orange </span></div>     </div>     <div class="example-contents"><p>      fruits 被按照字母顺序排序，并且单元的索引关系不变。     </p></div>    </div>   </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.asort-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link arsort()} - 对数组进行逆向排序并保持索引关系</span></li>     <li class="member"><a href="http://php.net/manual/zh/array.sorting.php" class="link">数组排序函数对比</a></li>    </ul>   </span>  </div>    <div class="up"><a href="http://php.net/manual/zh/ref.array.php">数组 函数</a></div></div>
 * @return bool true on success or false on failure.*/
function asort (array &$array, $sort_flags = null) {}

/**
*<div id="function.arsort" class="refentry">    <div class="refnamediv">     <h1 class="refname">arsort</h1>     <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">arsort</span> &mdash; <span class="dc-title">      对数组进行逆向排序并保持索引关系     </span></p>     </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.arsort-description">   <h3 class="title">说明</h3>      <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">       <span class="type" style="color:#EAB766">bool</span> <span class="methodname" style="color:#CC7832"><strong>arsort</strong></span>        ( <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">&$array</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#2EACF9">$sort_flags</span><span class="initializer"> = SORT_REGULAR</span></span>      ] )</div>      <p class="para rdfs-comment">      本函数对数组进行排序，数组的索引保持和单元的关联。     </p>     <p class="para">      主要用于对那些单元顺序很重要的结合数组进行排序。     </p>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>:   <p class="para">   If two members compare as equal, their relative order in the sorted array is undefined.  </p> </p></blockquote>     </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.arsort-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">array</span></dt>       <dd>        <p class="para">        输入的数组。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">sort_flags</span></dt>       <dd>        <p class="para">        可以用可选的参数 <span class="parameter" style="color:#2EACF9">sort_flags</span>      改变排序的行为，详情见 <span class="function">{@link sort()}</span>。       </p>      </dd>          </dl>    </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.arsort-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    成功时返回 <strong><span>TRUE</span></strong>， 或者在失败时返回 <strong><span>FALSE</span></strong>。   </p>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.arsort-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-6082">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">arsort()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$fruits&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">"d"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"lemon"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"a"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"orange"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"b"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"banana"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"c"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"apple"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">arsort</span><span style="color: #007700">(</span><span style="color: #9876AA">$fruits</span><span style="color: #007700">);<br />foreach&nbsp;(</span><span style="color: #9876AA">$fruits&nbsp;</span><span style="color: #007700">as&nbsp;</span><span style="color: #9876AA">$key&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">$val</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"</span><span style="color: #9876AA">$key</span><span style="color: #DD0000">&nbsp;=&nbsp;</span><span style="color: #9876AA">$val</span><span style="color: #DD0000">\n"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> a = orange d = lemon b = banana c = apple </span></div>     </div>     <div class="example-contents"><p>      fruits 被按照字母顺序逆向排序，并且单元的索引关系不变。     </p></div>    </div>   </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.arsort-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link asort()} - 对数组进行排序并保持索引关系</span></li>     <li class="member"><a href="http://php.net/manual/zh/array.sorting.php" class="link">数组排序函数对比</a></li>    </ul>   </span>  </div>    <div class="up"><a href="http://php.net/manual/zh/ref.array.php">数组 函数</a></div></div>
 * @return bool true on success or false on failure.*/
function arsort (array &$array, $sort_flags = null) {}

/**
*<div id="function.sort" class="refentry">  <div class="refnamediv">   <h1 class="refname">sort</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">sort</span> &mdash; <span class="dc-title">对数组排序</span></p>   </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.sort-description">   <h3 class="title">说明</h3>    <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">bool</span> <span class="methodname" style="color:#CC7832"><strong>sort</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">&$array</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#2EACF9">$sort_flags</span><span class="initializer"> = SORT_REGULAR</span></span>   ] )</div>    <p class="para rdfs-comment">    本函数对数组进行排序。当本函数结束时数组单元将被从最低到最高重新安排。   </p>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>:   <p class="para">   If two members compare as equal, their relative order in the sorted array is undefined.  </p> </p></blockquote>   </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.sort-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">array</span></dt>       <dd>        <p class="para">        要排序的数组。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">sort_flags</span></dt>       <dd>        <p class="para">        可选的第二个参数 <span class="parameter" style="color:#2EACF9">sort_flags</span>    可以用以下值改变排序的行为：       </p>       <p class="para">        排序类型标记：        <ul class="itemizedlist">         <li class="listitem">          <span class="simpara"><strong><span>SORT_REGULAR</span></strong>  - 正常比较单元（不改变类型）</span>         </li>         <li class="listitem">          <span class="simpara"><strong><span>SORT_NUMERIC</span></strong> - 单元被作为数字来比较</span>         </li>         <li class="listitem">          <span class="simpara"><strong><span>SORT_STRING</span></strong> - 单元被作为字符串来比较</span>         </li>         <li class="listitem">          <span class="simpara"> <strong><span>SORT_LOCALE_STRING</span></strong> -       根据当前的区域（locale）设置来把单元当作字符串比较，可以用       <span class="function">{@link setlocale()}</span> 来改变。          </span>         </li>         <li class="listitem">          <span class="simpara"><strong><span>SORT_NATURAL</span></strong> - 和 <span class="function">{@link natsort()}</span> 类似对每个单元以“自然的顺序”对字符串进行排序。 PHP 5.4.0 中新增的。</span>         </li>         <li class="listitem">          <span class="simpara"><strong><span>SORT_FLAG_CASE</span></strong> - 能够与 <strong><span>SORT_STRING</span></strong> 或           <strong><span>SORT_NATURAL</span></strong> 合并（OR 位运算），不区分大小写排序字符串。</span>         </li>        </ul>       </p>      </dd>          </dl>    </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.sort-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    成功时返回 <strong><span>TRUE</span></strong>， 或者在失败时返回 <strong><span>FALSE</span></strong>。   </p>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.sort-changelog">   <h3 class="title">更新日志</h3>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>      </thead>      <tbody class="tbody">      <tr>       <td>5.4.0</td>       <td>        添加了 <span class="parameter" style="color:#2EACF9">sort_flags</span> 内 <strong><span>SORT_NATURAL</span></strong> 和        <strong><span>SORT_FLAG_CASE</span></strong> 的支持。        </td>      </tr>       <tr>       <td>5.0.2</td>       <td>        添加了  <strong><span>SORT_LOCALE_STRING</span></strong>。       </td>      </tr>      </tbody>       </table>   </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.sort-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-6113">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">sort()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /><br />$fruits&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">"lemon"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"orange"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"banana"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"apple"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">sort</span><span style="color: #007700">(</span><span style="color: #9876AA">$fruits</span><span style="color: #007700">);<br />foreach&nbsp;(</span><span style="color: #9876AA">$fruits&nbsp;</span><span style="color: #007700">as&nbsp;</span><span style="color: #9876AA">$key&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">$val</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"fruits["&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #9876AA">$key&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #DD0000">"]&nbsp;=&nbsp;"&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #9876AA">$val&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> fruits[0] = apple fruits[1] = banana fruits[2] = lemon fruits[3] = orange </span></div>     </div>    </div>   </span>   <p class="para">    fruits 被按照字母顺序排序。   </p>   <p class="para">    <div class="example" id="example-6114">     <p><strong>Example #2 使用不区分大小写自然排序的 <span class="function"><strong style="color:#CC7832">sort()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /><br />$fruits&nbsp;</span><span style="color: #007700">=&nbsp;array(<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #DD0000">"Orange1"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"orange2"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"Orange3"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"orange20"<br /></span><span style="color: #007700">);<br /></span><span style="color: #9876AA">sort</span><span style="color: #007700">(</span><span style="color: #9876AA">$fruits</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">SORT_NATURAL&nbsp;</span><span style="color: #007700">|&nbsp;</span><span style="color: #9876AA">SORT_FLAG_CASE</span><span style="color: #007700">);<br />foreach&nbsp;(</span><span style="color: #9876AA">$fruits&nbsp;</span><span style="color: #007700">as&nbsp;</span><span style="color: #9876AA">$key&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">$val</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"fruits["&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #9876AA">$key&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #DD0000">"]&nbsp;=&nbsp;"&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #9876AA">$val&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> fruits[0] = Orange1 fruits[1] = orange2 fruits[2] = Orange3 fruits[3] = orange20 </span></div>     </div>    </div>   </p>   <p class="para">    fruits 排序得像 <span class="function">{@link natcasesort()}</span> 的结果。   </p>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.sort-notes">   <h3 class="title">注释</h3>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>: <span class="simpara">此函数为 <span class="parameter" style="color:#2EACF9">array</span> 中的元素赋与新的键名。这将删除原有的键名，而不是仅仅将键名重新排序。</span></p></blockquote>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>:     <span class="simpara">     和大多数 PHP 排序函数一样，<span class="function"><strong style="color:#CC7832">sort()</strong></span>      使用了 <a href="http://en.wikipedia.org/wiki/Quicksort" class="link external">&raquo;&nbsp;Quicksort</a> 实现的。     The pivot is chosen in the middle of the partition resulting in an optimal     time for already sorted arrays. This is however an implementation detail you     shouldn&#039;t rely on.    </span>   </p></blockquote>   <div class="warning"><strong class="warning">Warning</strong>    <p class="simpara">     在对含有混合类型值的数组排序时要小心，因为     <span class="function"><strong style="color:#CC7832">sort()</strong></span> 可能会产生不可预知的结果。    </p>   </div>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.sort-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link asort()} - 对数组进行排序并保持索引关系</span></li>     <li class="member"><a href="http://php.net/manual/zh/array.sorting.php" class="link">数组排序函数对比</a></li>    </ul>   </span>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.array.php">数组 函数</a></div></div>
 * @return bool true on success or false on failure.*/
function sort (array &$array, $sort_flags = null) {}

/**
*<div id="function.rsort" class="refentry">    <div class="refnamediv">     <h1 class="refname">rsort</h1>     <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">rsort</span> &mdash; <span class="dc-title">对数组逆向排序</span></p>     </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.rsort-description">   <h3 class="title">说明</h3>      <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">       <span class="type" style="color:#EAB766">bool</span> <span class="methodname" style="color:#CC7832"><strong>rsort</strong></span>        ( <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">&$array</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#2EACF9">$sort_flags</span><span class="initializer"> = SORT_REGULAR</span></span>      ] )</div>      <p class="para rdfs-comment">      本函数对数组进行逆向排序（最高到最低）。     </p>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>:   <p class="para">   If two members compare as equal, their relative order in the sorted array is undefined.  </p> </p></blockquote>     </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.rsort-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">array</span></dt>       <dd>        <p class="para">        输入的数组。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">sort_flags</span></dt>       <dd>        <p class="para">        可以用可选参数 <span class="parameter" style="color:#2EACF9">sort_flags</span>      改变排序的行为，详情见 <span class="function">{@link sort()}</span>。       </p>      </dd>          </dl>    </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.rsort-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    成功时返回 <strong><span>TRUE</span></strong>， 或者在失败时返回 <strong><span>FALSE</span></strong>。   </p>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.rsort-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-6111">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">rsort()</strong></span> 例</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$fruits&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">"lemon"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"orange"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"banana"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"apple"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">rsort</span><span style="color: #007700">(</span><span style="color: #9876AA">$fruits</span><span style="color: #007700">);<br />foreach&nbsp;(</span><span style="color: #9876AA">$fruits&nbsp;</span><span style="color: #007700">as&nbsp;</span><span style="color: #9876AA">$key&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">$val</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"</span><span style="color: #9876AA">$key</span><span style="color: #DD0000">&nbsp;=&nbsp;</span><span style="color: #9876AA">$val</span><span style="color: #DD0000">\n"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> 0 = orange 1 = lemon 2 = banana 3 = apple </span></div>     </div>     <div class="example-contents"><p>      fruits 被按照字母顺序逆向排序。     </p></div>    </div>   </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.rsort-notes">   <h3 class="title">注释</h3>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>: <span class="simpara">此函数为 <span class="parameter" style="color:#2EACF9">array</span> 中的元素赋与新的键名。这将删除原有的键名，而不是仅仅将键名重新排序。</span></p></blockquote>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.rsort-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link arsort()} - 对数组进行逆向排序并保持索引关系</span></li>     <li class="member"><span class="function">{@link krsort()} - 对数组按照键名逆向排序</span></li>     <li class="member"><a href="http://php.net/manual/zh/array.sorting.php" class="link">数组排序函数对比</a></li>    </ul>   </span>  </div>    <div class="up"><a href="http://php.net/manual/zh/ref.array.php">数组 函数</a></div></div>
 * @return bool true on success or false on failure.*/
function rsort (array &$array, $sort_flags = null) {}

/**
*<div id="function.usort" class="refentry">    <div class="refnamediv">     <h1 class="refname">usort</h1>     <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">usort</span> &mdash; <span class="dc-title">      使用用户自定义的比较函数对数组中的值进行排序     </span></p>     </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.usort-description">   <h3 class="title">说明</h3>      <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">       <span class="type" style="color:#EAB766">bool</span> <span class="methodname" style="color:#CC7832"><strong>usort</strong></span>        ( <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">&$array</span></span>    , <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#2EACF9">$value_compare_func</span></span>       )</div>      <p class="para rdfs-comment">      本函数将用用户自定义的比较函数对一个数组中的值进行排序。      如果要排序的数组需要用一种不寻常的标准进行排序，那么应该使用此函数。     </p>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>:   <p class="para">   If two members compare as equal, their relative order in the sorted array is undefined.  </p> </p></blockquote>    <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>: <span class="simpara">此函数为 <span class="parameter" style="color:#2EACF9">array</span> 中的元素赋与新的键名。这将删除原有的键名，而不是仅仅将键名重新排序。</span></p></blockquote>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.usort-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">array</span></dt>       <dd>        <p class="para">        输入的数组       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">cmp_function</span></dt>       <dd>        <p class="para">        在第一个参数小于，等于或大于第二个参数时，该比较函数必须相应地返回一个小于，等于或大于 0 的整数。       </p>       <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525"><span class="type" style="color:#EAB766">int</span> <span class="methodname" style="color:#CC7832"><span class="replaceable">callback</span></span> ( <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#2EACF9">$a</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#2EACF9">$b</span></span> )</div>         <div class="caution"><strong class="caution">Caution</strong>        <p class="para">         Returning <em class="emphasis">non-integer</em> values from the comparison         function, such as <span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.types.float.php" class="type float" style="color:#EAB766">float</a></span>, will result in an internal cast to         <span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.types.integer.php" class="type integer" style="color:#EAB766">integer</a></span> of the callback&#039;s return value. So values such as         0.99 and 0.1 will both be cast to an integer value of 0, which will         compare such values as equal.        </p>       </div>      </dd>          </dl>    </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.usort-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    成功时返回 <strong><span>TRUE</span></strong>， 或者在失败时返回 <strong><span>FALSE</span></strong>。   </p>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.usort-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-6117">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">usort()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function&nbsp;</span><span style="color: #9876AA">cmp</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$b</span><span style="color: #007700">)<br />{<br />&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(</span><span style="color: #9876AA">$a&nbsp;</span><span style="color: #007700">==&nbsp;</span><span style="color: #9876AA">$b</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;</span><span style="color: #9876AA">0</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;}<br />&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;(</span><span style="color: #9876AA">$a&nbsp;</span><span style="color: #007700">&lt;&nbsp;</span><span style="color: #9876AA">$b</span><span style="color: #007700">)&nbsp;?&nbsp;-</span><span style="color: #9876AA">1&nbsp;</span><span style="color: #007700">:&nbsp;</span><span style="color: #9876AA">1</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">$a&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #9876AA">3</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">2</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">5</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">6</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">1</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">usort</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"cmp"</span><span style="color: #007700">);<br /><br />foreach&nbsp;(</span><span style="color: #9876AA">$a&nbsp;</span><span style="color: #007700">as&nbsp;</span><span style="color: #9876AA">$key&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">$value</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"</span><span style="color: #9876AA">$key</span><span style="color: #DD0000">:&nbsp;</span><span style="color: #9876AA">$value</span><span style="color: #DD0000">\n"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> 0: 1 1: 2 2: 3 3: 5 4: 6 </span></div>     </div>    </div>   </span>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>:     <p class="para">     很明显在这个小例子中用 <span class="function">{@link sort()}</span> 函数更合适。    </p>   </p></blockquote>   <p class="para">    <div class="example" id="example-6118">     <p><strong>Example #2       使用多维数组的 <span class="function"><strong style="color:#CC7832">usort()</strong></span> 例子     </strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function&nbsp;</span><span style="color: #9876AA">cmp</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$b</span><span style="color: #007700">)<br />{<br />&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;</span><span style="color: #9876AA">strcmp</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">[</span><span style="color: #DD0000">"fruit"</span><span style="color: #007700">],&nbsp;</span><span style="color: #9876AA">$b</span><span style="color: #007700">[</span><span style="color: #DD0000">"fruit"</span><span style="color: #007700">]);<br />}<br /><br /></span><span style="color: #9876AA">$fruits</span><span style="color: #007700">[</span><span style="color: #9876AA">0</span><span style="color: #007700">][</span><span style="color: #DD0000">"fruit"</span><span style="color: #007700">]&nbsp;=&nbsp;</span><span style="color: #DD0000">"lemons"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$fruits</span><span style="color: #007700">[</span><span style="color: #9876AA">1</span><span style="color: #007700">][</span><span style="color: #DD0000">"fruit"</span><span style="color: #007700">]&nbsp;=&nbsp;</span><span style="color: #DD0000">"apples"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$fruits</span><span style="color: #007700">[</span><span style="color: #9876AA">2</span><span style="color: #007700">][</span><span style="color: #DD0000">"fruit"</span><span style="color: #007700">]&nbsp;=&nbsp;</span><span style="color: #DD0000">"grapes"</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">usort</span><span style="color: #007700">(</span><span style="color: #9876AA">$fruits</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"cmp"</span><span style="color: #007700">);<br /><br />while&nbsp;(list(</span><span style="color: #9876AA">$key</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$value</span><span style="color: #007700">)&nbsp;=&nbsp;</span><span style="color: #9876AA">each</span><span style="color: #007700">(</span><span style="color: #9876AA">$fruits</span><span style="color: #007700">))&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"</span><span style="color: #9876AA">$fruits</span><span style="color: #007700">[</span><span style="color: #9876AA">$key</span><span style="color: #007700">]</span><span style="color: #DD0000">:&nbsp;"&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #9876AA">$value</span><span style="color: #007700">[</span><span style="color: #DD0000">"fruit"</span><span style="color: #007700">]&nbsp;.&nbsp;</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>      当排序多维数组时，<var class="varname"><var class="varname">$a</var></var> 和 <var class="varname"><var class="varname">$b</var></var> 包含到数组第一个索引的引用。     </p></div>     <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> $fruits[0]: apples $fruits[1]: grapes $fruits[2]: lemons </span></div>     </div>    </div>   </p>   <p class="para">    <div class="example" id="example-6119">     <p><strong>Example #3       <span class="function"><strong style="color:#CC7832">usort()</strong></span> example using a member function of an object     </strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">class&nbsp;</span><span style="color: #9876AA">TestObj&nbsp;</span><span style="color: #007700">{<br />&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;</span><span style="color: #9876AA">$name</span><span style="color: #007700">;<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;</span><span style="color: #9876AA">TestObj</span><span style="color: #007700">(</span><span style="color: #9876AA">$name</span><span style="color: #007700">)<br />&nbsp;&nbsp;&nbsp;&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">name&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">$name</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;}<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;This&nbsp;is&nbsp;the&nbsp;static&nbsp;comparing&nbsp;function:&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #007700">static&nbsp;function&nbsp;</span><span style="color: #9876AA">cmp_obj</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$b</span><span style="color: #007700">)<br />&nbsp;&nbsp;&nbsp;&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$al&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">strtolower</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">name</span><span style="color: #007700">);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$bl&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">strtolower</span><span style="color: #007700">(</span><span style="color: #9876AA">$b</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">name</span><span style="color: #007700">);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(</span><span style="color: #9876AA">$al&nbsp;</span><span style="color: #007700">==&nbsp;</span><span style="color: #9876AA">$bl</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;</span><span style="color: #9876AA">0</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;(</span><span style="color: #9876AA">$al&nbsp;</span><span style="color: #007700">&gt;&nbsp;</span><span style="color: #9876AA">$bl</span><span style="color: #007700">)&nbsp;?&nbsp;+</span><span style="color: #9876AA">1&nbsp;</span><span style="color: #007700">:&nbsp;-</span><span style="color: #9876AA">1</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;}<br />}<br /><br /></span><span style="color: #9876AA">$a</span><span style="color: #007700">[]&nbsp;=&nbsp;new&nbsp;</span><span style="color: #9876AA">TestObj</span><span style="color: #007700">(</span><span style="color: #DD0000">"c"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$a</span><span style="color: #007700">[]&nbsp;=&nbsp;new&nbsp;</span><span style="color: #9876AA">TestObj</span><span style="color: #007700">(</span><span style="color: #DD0000">"b"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$a</span><span style="color: #007700">[]&nbsp;=&nbsp;new&nbsp;</span><span style="color: #9876AA">TestObj</span><span style="color: #007700">(</span><span style="color: #DD0000">"d"</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">usort</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">,&nbsp;array(</span><span style="color: #DD0000">"TestObj"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"cmp_obj"</span><span style="color: #007700">));<br /><br />foreach&nbsp;(</span><span style="color: #9876AA">$a&nbsp;</span><span style="color: #007700">as&nbsp;</span><span style="color: #9876AA">$item</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #9876AA">$item</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">name&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> b c d </span></div>     </div>    </div>     <div class="example" id="example-6120">     <p><strong>Example #4       <span class="function"><strong style="color:#CC7832">usort()</strong></span> example using a <a href="http://php.net/manual/zh/functions.anonymous.php" class="link">closure</a>      to sort a multi-dimensional array     </strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$array</span><span style="color: #007700">[</span><span style="color: #9876AA">0</span><span style="color: #007700">]&nbsp;=&nbsp;array(</span><span style="color: #DD0000">'key_a'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">'z'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'key_b'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">'c'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$array</span><span style="color: #007700">[</span><span style="color: #9876AA">1</span><span style="color: #007700">]&nbsp;=&nbsp;array(</span><span style="color: #DD0000">'key_a'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">'x'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'key_b'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">'b'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$array</span><span style="color: #007700">[</span><span style="color: #9876AA">2</span><span style="color: #007700">]&nbsp;=&nbsp;array(</span><span style="color: #DD0000">'key_a'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">'y'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'key_b'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">'a'</span><span style="color: #007700">);<br /><br />function&nbsp;</span><span style="color: #9876AA">build_sorter</span><span style="color: #007700">(</span><span style="color: #9876AA">$key</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;function&nbsp;(</span><span style="color: #9876AA">$a</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$b</span><span style="color: #007700">)&nbsp;use&nbsp;(</span><span style="color: #9876AA">$key</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;</span><span style="color: #9876AA">strnatcmp</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">[</span><span style="color: #9876AA">$key</span><span style="color: #007700">],&nbsp;</span><span style="color: #9876AA">$b</span><span style="color: #007700">[</span><span style="color: #9876AA">$key</span><span style="color: #007700">]);<br />&nbsp;&nbsp;&nbsp;&nbsp;};<br />}<br /><br /></span><span style="color: #9876AA">usort</span><span style="color: #007700">(</span><span style="color: #9876AA">$array</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">build_sorter</span><span style="color: #007700">(</span><span style="color: #DD0000">'key_b'</span><span style="color: #007700">));<br /><br />foreach&nbsp;(</span><span style="color: #9876AA">$array&nbsp;</span><span style="color: #007700">as&nbsp;</span><span style="color: #9876AA">$item</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #9876AA">$item</span><span style="color: #007700">[</span><span style="color: #DD0000">'key_a'</span><span style="color: #007700">]&nbsp;.&nbsp;</span><span style="color: #DD0000">',&nbsp;'&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #9876AA">$item</span><span style="color: #007700">[</span><span style="color: #DD0000">'key_b'</span><span style="color: #007700">]&nbsp;.&nbsp;</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> y, a x, b z, c </span></div>     </div>    </div>   </p>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.usort-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link uasort()} - 使用用户自定义的比较函数对数组中的值进行排序并保持索引关联</span></li>     <li class="member"><a href="http://php.net/manual/zh/array.sorting.php" class="link">数组排序函数对比</a></li>    </ul>   </span>  </div>    <div class="up"><a href="http://php.net/manual/zh/ref.array.php">数组 函数</a></div></div>
 * @return bool true on success or false on failure.*/
function usort (array &$array, $cmp_function) {}

/**
*<div id="function.uasort" class="refentry">    <div class="refnamediv">     <h1 class="refname">uasort</h1>     <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">uasort</span> &mdash; <span class="dc-title">      使用用户自定义的比较函数对数组中的值进行排序并保持索引关联     </span></p>     </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.uasort-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">bool</span> <span class="methodname" style="color:#CC7832"><strong>uasort</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">&$array</span></span>    , <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#2EACF9">$value_compare_func</span></span>    )</div>      <p class="para rdfs-comment">      本函数对数组排序并保持索引和单元之间的关联。   </p>   <p class="para">      主要用于对那些单元顺序很重要的结合数组进行排序。比较函数是用户自定义的。     </p>    <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>:   <p class="para">   If two members compare as equal, their relative order in the sorted array is undefined.  </p> </p></blockquote>     </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.uasort-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">array</span></dt>       <dd>        <p class="para">        输入的数组。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">value_compare_func</span></dt>       <dd>        <p class="para">       用户自定义比较函数的例子请参考 <span class="function">{@link usort()}</span> 和 <span class="function">{@link uksort()}</span>。       </p>      </dd>          </dl>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.uasort-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    成功时返回 <strong><span>TRUE</span></strong>， 或者在失败时返回 <strong><span>FALSE</span></strong>。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.uasort-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-6115">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">uasort()</strong></span> 的基本例子</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">//&nbsp;Comparison&nbsp;function<br /></span><span style="color: #007700">function&nbsp;</span><span style="color: #9876AA">cmp</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$b</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(</span><span style="color: #9876AA">$a&nbsp;</span><span style="color: #007700">==&nbsp;</span><span style="color: #9876AA">$b</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;</span><span style="color: #9876AA">0</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;}<br />&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;(</span><span style="color: #9876AA">$a&nbsp;</span><span style="color: #007700">&lt;&nbsp;</span><span style="color: #9876AA">$b</span><span style="color: #007700">)&nbsp;?&nbsp;-</span><span style="color: #9876AA">1&nbsp;</span><span style="color: #007700">:&nbsp;</span><span style="color: #9876AA">1</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #FF8000">//&nbsp;Array&nbsp;to&nbsp;be&nbsp;sorted<br /></span><span style="color: #9876AA">$array&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">'a'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">4</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'b'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">8</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'c'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;-</span><span style="color: #9876AA">1</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'d'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;-</span><span style="color: #9876AA">9</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'e'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">2</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'f'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">5</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'g'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">3</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'h'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;-</span><span style="color: #9876AA">4</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$array</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">//&nbsp;Sort&nbsp;and&nbsp;print&nbsp;the&nbsp;resulting&nbsp;array<br /></span><span style="color: #9876AA">uasort</span><span style="color: #007700">(</span><span style="color: #9876AA">$array</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'cmp'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$array</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Array (     [a] =&gt; 4     [b] =&gt; 8     [c] =&gt; -1     [d] =&gt; -9     [e] =&gt; 2     [f] =&gt; 5     [g] =&gt; 3     [h] =&gt; -4 ) Array (     [d] =&gt; -9     [h] =&gt; -4     [c] =&gt; -1     [e] =&gt; 2     [g] =&gt; 3     [a] =&gt; 4     [f] =&gt; 5     [b] =&gt; 8 ) </span></div>     </div>    </div>   </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.uasort-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link usort()} - 使用用户自定义的比较函数对数组中的值进行排序</span></li>     <li class="member"><a href="http://php.net/manual/zh/array.sorting.php" class="link">数组排序函数对比</a></li>    </ul>   </span>  </div>    <div class="up"><a href="http://php.net/manual/zh/ref.array.php">数组 函数</a></div></div>
 * @return bool true on success or false on failure.*/
function uasort (array &$array, $cmp_function) {}

/**
*<div id="function.uksort" class="refentry">    <div class="refnamediv">     <h1 class="refname">uksort</h1>     <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">uksort</span> &mdash; <span class="dc-title">      使用用户自定义的比较函数对数组中的键名进行排序     </span></p>     </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.uksort-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">bool</span> <span class="methodname" style="color:#CC7832"><strong>uksort</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">&$array</span></span>    , <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#2EACF9">$key_compare_func</span></span>    )</div>      <p class="para rdfs-comment">      <span class="function"><strong style="color:#CC7832">uksort()</strong></span> 函数将使用用户提供的比较函数对数组中的键名进行排序。如果要排序的数组需要用一种不寻常的标准进行排序，那么应该使用此函数。     </p>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>:   <p class="para">   If two members compare as equal, their relative order in the sorted array is undefined.  </p> </p></blockquote>     </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.uksort-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">array</span></dt>       <dd>        <p class="para">        输入的数组。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">key_compare_func</span></dt>       <dd>        <p class="para">        在第一个参数小于，等于或大于第二个参数时，该比较函数必须相应地返回一个小于，等于或大于 0 的整数。       </p>       <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525"><span class="type" style="color:#EAB766">int</span> <span class="methodname" style="color:#CC7832"><span class="replaceable">callback</span></span> ( <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#2EACF9">$a</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#2EACF9">$b</span></span> )</div>       </dd>          </dl>    </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.uksort-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    成功时返回 <strong><span>TRUE</span></strong>， 或者在失败时返回 <strong><span>FALSE</span></strong>。   </p>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.uksort-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-6116">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">uksort()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function&nbsp;</span><span style="color: #9876AA">cmp</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$b</span><span style="color: #007700">)<br />{<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$a&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">preg_replace</span><span style="color: #007700">(</span><span style="color: #DD0000">'@^(a|an|the)&nbsp;@'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">''</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$a</span><span style="color: #007700">);<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$b&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">preg_replace</span><span style="color: #007700">(</span><span style="color: #DD0000">'@^(a|an|the)&nbsp;@'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">''</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$b</span><span style="color: #007700">);<br />&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;</span><span style="color: #9876AA">strcasecmp</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$b</span><span style="color: #007700">);<br />}<br /><br /></span><span style="color: #9876AA">$a&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">"John"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">1</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"the&nbsp;Earth"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">2</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"an&nbsp;apple"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">3</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"a&nbsp;banana"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">4</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">uksort</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"cmp"</span><span style="color: #007700">);<br /><br />foreach&nbsp;(</span><span style="color: #9876AA">$a&nbsp;</span><span style="color: #007700">as&nbsp;</span><span style="color: #9876AA">$key&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">$value</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"</span><span style="color: #9876AA">$key</span><span style="color: #DD0000">:&nbsp;</span><span style="color: #9876AA">$value</span><span style="color: #DD0000">\n"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> an apple: 3 a banana: 4 the Earth: 2 John: 1 </span></div>     </div>    </div>   </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.uksort-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link usort()} - 使用用户自定义的比较函数对数组中的值进行排序</span></li>     <li class="member"><a href="http://php.net/manual/zh/array.sorting.php" class="link">数组排序函数对比</a></li>    </ul>   </span>  </div>    <div class="up"><a href="http://php.net/manual/zh/ref.array.php">数组 函数</a></div></div>
 * @return bool true on success or false on failure.*/
function uksort (array &$array, $cmp_function) {}

/**
*<div id="function.shuffle" class="refentry">    <div class="refnamediv">     <h1 class="refname">shuffle</h1>     <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">shuffle</span> &mdash; <span class="dc-title">打乱数组</span></p>     </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.shuffle-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">bool</span> <span class="methodname" style="color:#CC7832"><strong>shuffle</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">&$array</span></span>    )</div>      <p class="para rdfs-comment">      本函数打乱（随机排列单元的顺序）一个数组。      它使用的是伪随机数产生器，并不适合密码学的场合。     </p>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>:   <p class="para">   If two members compare as equal, their relative order in the sorted array is undefined.  </p> </p></blockquote>     </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.shuffle-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">array</span></dt>       <dd>        <p class="para">        待操作的数组。       </p>      </dd>          </dl>    </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.shuffle-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    成功时返回 <strong><span>TRUE</span></strong>， 或者在失败时返回 <strong><span>FALSE</span></strong>。   </p>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.shuffle-changelog">   <h3 class="title">更新日志</h3>   <span>    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>7.1.0</td>        <td>         <a href="http://php.net/manual/zh/migration71.incompatible.php#migration71.incompatible.rand-srand-aliases" class="link">内置的随机数产生算法从 libc rand 函数改成 <a href="http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html" class="link external">&raquo;&nbsp;梅森旋转</a>伪随机数生成算法。</a>        </td>       </tr>       </tbody>         </table>    </span>  </div>     <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.shuffle-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-6112">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">shuffle()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$numbers&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">range</span><span style="color: #007700">(</span><span style="color: #9876AA">1</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">20</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">shuffle</span><span style="color: #007700">(</span><span style="color: #9876AA">$numbers</span><span style="color: #007700">);<br />foreach&nbsp;(</span><span style="color: #9876AA">$numbers&nbsp;</span><span style="color: #007700">as&nbsp;</span><span style="color: #9876AA">$number</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"</span><span style="color: #9876AA">$number</span><span style="color: #DD0000">&nbsp;"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>     </div>   </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.shuffle-notes">   <h3 class="title">注释</h3>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>: <span class="simpara">此函数为 <span class="parameter" style="color:#2EACF9">array</span> 中的元素赋与新的键名。这将删除原有的键名，而不是仅仅将键名重新排序。</span></p></blockquote>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.shuffle-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">         <li class="member"><span class="function">{@link array_rand()} - 从数组中随机取出一个或多个单元</span></li>     <li class="member"><a href="http://php.net/manual/zh/array.sorting.php" class="link">数组排序函数对比</a></li>    </ul>   </span>  </div>    <div class="up"><a href="http://php.net/manual/zh/ref.array.php">数组 函数</a></div></div>
 * @return bool true on success or false on failure.*/
function shuffle (array &$array) {}

/**
*<div id="function.array-walk" class="refentry">  <div class="refnamediv">   <h1 class="refname">array_walk</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">array_walk</span> &mdash; <span class="dc-title">使用用户自定义函数对数组中的每个元素做回调处理</span></p>   </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-walk-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">bool</span> <span class="methodname" style="color:#CC7832"><strong>array_walk</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">&$array</span></span>    , <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#2EACF9">$callback</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#2EACF9">$userdata</span><span class="initializer"> = <strong><span>NULL</span></strong></span></span>   ] )</div>    <p class="simpara">    将用户自定义函数 <span class="parameter" style="color:#2EACF9">funcname</span> 应用到    <span class="parameter" style="color:#2EACF9">array</span> 数组中的每个单元。   </p>   <p class="para">    <span class="function"><strong style="color:#CC7832">array_walk()</strong></span> 不会受到 <span class="parameter" style="color:#2EACF9">array</span>    内部数组指针的影响。<span class="function"><strong style="color:#CC7832">array_walk()</strong></span>    会遍历整个数组而不管指针的位置。   </p>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-walk-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">array</span></dt>       <dd>        <p class="para">        输入的数组。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">callback</span></dt>       <dd>        <p class="para">        典型情况下    <span class="parameter" style="color:#2EACF9">callback</span> 接受两个参数。<span class="parameter" style="color:#2EACF9">array</span>    参数的值作为第一个，键名作为第二个。       </p>       <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>:         <p class="para">        如果 <span class="parameter" style="color:#2EACF9">callback</span> 需要直接作用于数组中的值，则给     <span class="parameter" style="color:#2EACF9">callback</span> 的第一个参数指定为<a href="http://php.net/manual/zh/language.references.php" class="link">引用</a>。这样任何对这些单元的改变也将会改变原始数组本身。        </p>       </p></blockquote>       <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>:          <p class="para">          参数数量超过预期，传入内置函数 (例如 <span class="function">{@link strtolower()}</span>)，          将抛出警告，所以不适合当做 <span class="parameter" style="color:#2EACF9">funcname</span>。         </p>       </p></blockquote>       <p class="para">        只有 <span class="parameter" style="color:#2EACF9">array</span> 的值才可以被改变，用户不应在回调函数中改变该数组本身的结构。例如增加/删除单元，unset    单元等等。如果 <span class="function"><strong style="color:#CC7832">array_walk()</strong></span>    作用的数组改变了，则此函数的的行为未经定义，且不可预期。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">userdata</span></dt>       <dd>        <p class="para">        如果提供了可选参数    <span class="parameter" style="color:#2EACF9">userdata</span>，将被作为第三个参数传递给    callback <span class="parameter" style="color:#2EACF9">funcname</span>。       </p>      </dd>          </dl>    </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-walk-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    成功时返回 <strong><span>TRUE</span></strong>， 或者在失败时返回 <strong><span>FALSE</span></strong>。   </p>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-function.array-walk-errors">   <h3 class="title">错误／异常</h3>   <p class="para">       如果 <span class="parameter" style="color:#2EACF9">callback</span> 函数需要的参数比给出的多，则每次    <span class="function"><strong style="color:#CC7832">array_walk()</strong></span> 调用 <span class="parameter" style="color:#2EACF9">callback</span>    时都会产生一个 <a href="http://php.net/manual/zh/errorfunc.constants.php" class="link">E_WARNING</a>    级的错误。   </p>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-walk-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-6077">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">array_walk()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$fruits&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">"d"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"lemon"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"a"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"orange"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"b"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"banana"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"c"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"apple"</span><span style="color: #007700">);<br /><br />function&nbsp;</span><span style="color: #9876AA">test_alter</span><span style="color: #007700">(&amp;</span><span style="color: #9876AA">$item1</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$key</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$prefix</span><span style="color: #007700">)<br />{<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$item1&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">"</span><span style="color: #9876AA">$prefix</span><span style="color: #DD0000">:&nbsp;</span><span style="color: #9876AA">$item1</span><span style="color: #DD0000">"</span><span style="color: #007700">;<br />}<br /><br />function&nbsp;</span><span style="color: #9876AA">test_print</span><span style="color: #007700">(</span><span style="color: #9876AA">$item2</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$key</span><span style="color: #007700">)<br />{<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"</span><span style="color: #9876AA">$key</span><span style="color: #DD0000">.&nbsp;</span><span style="color: #9876AA">$item2</span><span style="color: #DD0000">&lt;br&nbsp;/&gt;\n"</span><span style="color: #007700">;<br />}<br /><br />echo&nbsp;</span><span style="color: #DD0000">"Before&nbsp;...:\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">array_walk</span><span style="color: #007700">(</span><span style="color: #9876AA">$fruits</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'test_print'</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">array_walk</span><span style="color: #007700">(</span><span style="color: #9876AA">$fruits</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'test_alter'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'fruit'</span><span style="color: #007700">);<br />echo&nbsp;</span><span style="color: #DD0000">"...&nbsp;and&nbsp;after:\n"</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">array_walk</span><span style="color: #007700">(</span><span style="color: #9876AA">$fruits</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'test_print'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Before ...: d. lemon a. orange b. banana c. apple ... and after: d. fruit: lemon a. fruit: orange b. fruit: banana c. fruit: apple </span></div>     </div>    </div>   </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-walk-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link array_walk_recursive()} - 对数组中的每个成员递归地应用用户函数</span></li>     <li class="member"><span class="function">{@link iterator_apply()} - 为迭代器中每个元素调用一个用户自定义函数</span></li>     <li class="member"><span class="function">{@link list()} - 把数组中的值赋给一组变量</span></li>     <li class="member"><span class="function">{@link each()} - 返回数组中当前的键／值对并将数组指针向前移动一步</span></li>     <li class="member"><span class="function">{@link call_user_func_array()} - 调用回调函数，并把一个数组参数作为回调函数的参数</span></li>     <li class="member"><span class="function">{@link array_map()} - 为数组的每个元素应用回调函数</span></li>     <li class="member"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.callback" class="link">callback</a> 类型的信息</li>     <li class="member"><a href="http://php.net/manual/zh/control-structures.foreach.php" class="link">foreach</a></li>    </ul>   </span>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.array.php">数组 函数</a></div></div>
 * @return bool true on success or false on failure.*/
function array_walk (array &$array, $funcname, $userdata = null) {}

/**
*<div id="function.array-walk-recursive" class="refentry">  <div class="refnamediv">   <h1 class="refname">array_walk_recursive</h1>   <p class="verinfo">(PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">array_walk_recursive</span> &mdash; <span class="dc-title">对数组中的每个成员递归地应用用户函数</span></p>   </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-walk-recursive-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">bool</span> <span class="methodname" style="color:#CC7832"><strong>array_walk_recursive</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">&$array</span></span>    , <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#2EACF9">$callback</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#2EACF9">$userdata</span><span class="initializer"> = <strong><span>NULL</span></strong></span></span>   ] )</div>    <p class="para rdfs-comment">    将用户自定义函数 <span class="parameter" style="color:#2EACF9">callback</span> 应用到    <span class="parameter" style="color:#2EACF9">array</span> 数组中的每个单元。本函数会递归到更深层的数组中去。   </p>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-walk-recursive-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">array</span></dt>       <dd>        <p class="para">        输入的数组。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">callback</span></dt>       <dd>        <p class="para">        典型情况下    <span class="parameter" style="color:#2EACF9">callback</span> 接受两个参数。<span class="parameter" style="color:#2EACF9">array</span>    参数的值作为第一个，键名作为第二个。       </p>       <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>:         <p class="para">         如果 <span class="parameter" style="color:#2EACF9">callback</span> 需要直接作用于数组中的值，则给          <span class="parameter" style="color:#2EACF9">callback</span> 的第一个参数指定为<a href="http://php.net/manual/zh/language.references.php" class="link">引用</a>。这样任何对这些单元的改变也将会改变原始数组本身。        </p>       </p></blockquote>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">userdata</span></dt>       <dd>        <p class="para">        如果提供了可选参数         <span class="parameter" style="color:#2EACF9">userdata</span>，将被作为第三个参数传递给 <span class="parameter" style="color:#2EACF9">callback</span>。       </p>      </dd>          </dl>    </span>  </div>     <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-walk-recursive-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    成功时返回 <strong><span>TRUE</span></strong>， 或者在失败时返回 <strong><span>FALSE</span></strong>。   </p>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-walk-recursive-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-6076">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">array_walk_recursive()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$sweet&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">'a'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">'apple'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'b'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">'banana'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$fruits&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">'sweet'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">$sweet</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'sour'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">'lemon'</span><span style="color: #007700">);<br /><br />function&nbsp;</span><span style="color: #9876AA">test_print</span><span style="color: #007700">(</span><span style="color: #9876AA">$item</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$key</span><span style="color: #007700">)<br />{<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"</span><span style="color: #9876AA">$key</span><span style="color: #DD0000">&nbsp;holds&nbsp;</span><span style="color: #9876AA">$item</span><span style="color: #DD0000">\n"</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">array_walk_recursive</span><span style="color: #007700">(</span><span style="color: #9876AA">$fruits</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'test_print'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> a holds apple b holds banana sour holds lemon </span></div>     </div>     <div class="example-contents"><p>      注意上例中的键 &#039;<em>sweet</em>&#039; 并没有显示出来。任何其值为 <span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span> 的键都不会被传递到回调函数中去。     </p></div>    </div>   </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-walk-recursive-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link array_walk()} - 使用用户自定义函数对数组中的每个元素做回调处理</span></li>     <li class="member"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.callback" class="link">callback</a> 类型的信息</li>    </ul>   </span>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.array.php">数组 函数</a></div></div>
 * @return bool true on success or false on failure.*/
function array_walk_recursive (array &$input, $funcname, $userdata = null) {}

/**
*<div id="function.count" class="refentry">    <div class="refnamediv">     <h1 class="refname">count</h1>     <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">count</span> &mdash; <span class="dc-title">计算数组中的单元数目，或对象中的属性个数</span></p>     </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.count-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">int</span> <span class="methodname" style="color:#CC7832"><strong>count</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#2EACF9">$array_or_countable</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#2EACF9">$mode</span><span class="initializer"> = COUNT_NORMAL</span></span>   ] )</div>    <p class="para rdfs-comment">    统计出数组里的所有元素的数量，或者对象里的东西。   </p>     <p class="para">      对于对象，如果安装了 <a href="http://php.net/manual/zh/ref.spl.php" class="link">SPL</a>，可以通过实现      <em>Countable</em> 接口对 <span class="function"><strong style="color:#CC7832">count()</strong></span>挂钩（hook）      。该接口只有一个方法      <span class="methodname" style="color:#CC7832">{@link Countable::count()}</span>，此方法为 <span class="function"><strong style="color:#CC7832">count()</strong></span>      函数返回值。     </p>     <p class="para">      关于 PHP 中如何实现和使用数组可以参考手册中<a href="http://php.net/manual/zh/language.types.array.php" class="link">数组</a>章节中的详细描述。   </p>  </div>      <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.count-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">array_or_countable</span></dt>       <dd>        <p class="para">        数组或者 <a href="http://php.net/manual/zh/class.countable.php" class="classname">Countable</a>  对象。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">mode</span></dt>       <dd>        <p class="para">        如果可选的 <span class="parameter" style="color:#2EACF9">mode</span> 参数设为      <strong><span>COUNT_RECURSIVE</span></strong>（或 1），<span class="function"><strong style="color:#CC7832">count()</strong></span>      将递归地对数组计数。对计算多维数组的所有单元尤其有用。       </p>       <div class="caution"><strong class="caution">Caution</strong>        <p class="para">         <span class="function"><strong style="color:#CC7832">count()</strong></span> 能检测递归来避免无限循环，但每次出现时会产生 <strong><span>E_WARNING</span></strong> 错误         （如果 array 不止一次包含了自身）并返回大于预期的统计数字。        </p>       </div>      </dd>          </dl>    </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.count-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回 <span class="parameter" style="color:#2EACF9">array_or_countable</span> 中的单元数目。        如果参数既不是数组，也不是实现      <em>Countable</em> 接口的对象，将返回      <em>1</em>。    有个例外：如果      <span class="parameter" style="color:#2EACF9">array_or_countable</span> 是 <strong><span>NULL</span></strong> 则结果是 <em>0</em>。   </p>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.count-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-6085">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">count()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$a</span><span style="color: #007700">[</span><span style="color: #9876AA">0</span><span style="color: #007700">]&nbsp;=&nbsp;</span><span style="color: #9876AA">1</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$a</span><span style="color: #007700">[</span><span style="color: #9876AA">1</span><span style="color: #007700">]&nbsp;=&nbsp;</span><span style="color: #9876AA">3</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$a</span><span style="color: #007700">[</span><span style="color: #9876AA">2</span><span style="color: #007700">]&nbsp;=&nbsp;</span><span style="color: #9876AA">5</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">count</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">));<br /><br /></span><span style="color: #9876AA">$b</span><span style="color: #007700">[</span><span style="color: #9876AA">0</span><span style="color: #007700">]&nbsp;&nbsp;=&nbsp;</span><span style="color: #9876AA">7</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$b</span><span style="color: #007700">[</span><span style="color: #9876AA">5</span><span style="color: #007700">]&nbsp;&nbsp;=&nbsp;</span><span style="color: #9876AA">9</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$b</span><span style="color: #007700">[</span><span style="color: #9876AA">10</span><span style="color: #007700">]&nbsp;=&nbsp;</span><span style="color: #9876AA">11</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">count</span><span style="color: #007700">(</span><span style="color: #9876AA">$b</span><span style="color: #007700">));<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">count</span><span style="color: #007700">(</span><span style="color: #9876AA">null</span><span style="color: #007700">));<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">count</span><span style="color: #007700">(</span><span style="color: #9876AA">false</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> int(3) int(3)  Warning: count(): Parameter must be an array or an object that implements Countable in … on line 12 // PHP 7.2 起 int(0)  Warning: count(): Parameter must be an array or an object that implements Countable in … on line 14 // PHP 7.2 起 int(1) </span></div>     </div>    </div>   </span>   <p class="para">    <div class="example" id="example-6086">     <p><strong>Example #2 递归 <span class="function"><strong style="color:#CC7832">count()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$food&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">'fruits'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;array(</span><span style="color: #DD0000">'orange'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'banana'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'apple'</span><span style="color: #007700">),<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #DD0000">'veggie'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;array(</span><span style="color: #DD0000">'carrot'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'collard'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'pea'</span><span style="color: #007700">));<br /><br /></span><span style="color: #FF8000">//&nbsp;recursive&nbsp;count<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #9876AA">count</span><span style="color: #007700">(</span><span style="color: #9876AA">$food</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">COUNT_RECURSIVE</span><span style="color: #007700">);&nbsp;</span><span style="color: #FF8000">//&nbsp;output&nbsp;8<br /><br />//&nbsp;normal&nbsp;count<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #9876AA">count</span><span style="color: #007700">(</span><span style="color: #9876AA">$food</span><span style="color: #007700">);&nbsp;</span><span style="color: #FF8000">//&nbsp;output&nbsp;2<br /><br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>     </div>   </p>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.count-changelog">   <h3 class="title">更新日志</h3>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>      </thead>      <tbody class="tbody">      <tr>       <td>7.2.0</td>       <td>        当无效的 countable 类型传递给 <span class="parameter" style="color:#2EACF9">array_or_countable</span> 参数时，<span class="function"><strong style="color:#CC7832">count()</strong></span> 会产生警告。       </td>      </tr>      </tbody>       </table>   </div>      <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.count-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link is_array()} - 检测变量是否是数组</span></li>     <li class="member"><span class="function">{@link isset()} - 检测变量是否已设置并且非 NULL</span></li>     <li class="member"><span class="function">{@link empty()} - 检查一个变量是否为空</span></li>     <li class="member"><span class="function">{@link strlen()} - 获取字符串长度</span></li>    </ul>   </span>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.array.php">数组 函数</a></div></div>
 * @return int the number of elements in var, which is*/
function count ($var, $mode = COUNT_NORMAL) {}

/**
*<div id="function.end" class="refentry">    <div class="refnamediv">     <h1 class="refname">end</h1>     <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">end</span> &mdash; <span class="dc-title">      将数组的内部指针指向最后一个单元     </span></p>     </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.end-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="methodname" style="color:#CC7832"><strong>end</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">&$array</span></span>    )</div>      <p class="para rdfs-comment">      <span class="function"><strong style="color:#CC7832">end()</strong></span> 将 <span class="parameter" style="color:#2EACF9">array</span>      的内部指针移动到最后一个单元并返回其值。     </p>    </div>      <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.end-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">array</span></dt>       <dd>        <p class="para">        这个数组。        该数组是通过引用传递的，因为它会被这个函数修改。        这意味着你必须传入一个真正的变量，而不是函数返回的数组，因为只有真正的变量才能以引用传递。       </p>      </dd>          </dl>    </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.end-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回最后一个元素的值，或者如果是空数组则返回 <strong><span>FALSE</span></strong>。   </p>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.end-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-6090">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">end()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /><br />$fruits&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">'apple'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'banana'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'cranberry'</span><span style="color: #007700">);<br />echo&nbsp;</span><span style="color: #9876AA">end</span><span style="color: #007700">(</span><span style="color: #9876AA">$fruits</span><span style="color: #007700">);&nbsp;</span><span style="color: #FF8000">//&nbsp;cranberry<br /><br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>     </div>   </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.end-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link current()} - 返回数组中的当前单元</span></li>     <li class="member"><span class="function">{@link each()} - 返回数组中当前的键／值对并将数组指针向前移动一步</span></li>     <li class="member"><span class="function">{@link prev()} - 将数组的内部指针倒回一位</span></li>     <li class="member"><span class="function">{@link reset()} - 将数组的内部指针指向第一个单元</span></li>     <li class="member"><span class="function">{@link next()} - 将数组中的内部指针向前移动一位</span></li>    </ul>   </span>  </div>    <div class="up"><a href="http://php.net/manual/zh/ref.array.php">数组 函数</a></div></div>
 * @return mixed the value of the last element or false for empty array.*/
function end (array &$array) {}

/**
*<div id="function.prev" class="refentry">    <div class="refnamediv">     <h1 class="refname">prev</h1>     <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">prev</span> &mdash; <span class="dc-title">将数组的内部指针倒回一位</span></p>     </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.prev-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="methodname" style="color:#CC7832"><strong>prev</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">&$array</span></span>    )</div>    <p class="para rdfs-comment">    将数组的内部指针倒回一位。   </p>   <p class="para">      <span class="function"><strong style="color:#CC7832">prev()</strong></span> 和      <span class="function">{@link next()}</span> 的行为类似，只除了它将内部指针倒回一位而不是前移一位。     </p>    </div>      <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.prev-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">array</span></dt>       <dd>        <p class="para">        The input array.       </p>      </dd>          </dl>    </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.prev-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回数组内部指针指向的前一个单元的值，或当没有更多单元时返回 <strong><span>FALSE</span></strong>。   </p>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.prev-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-6108">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">prev()</strong></span> 及相关函数用法示例</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$transport&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">'foot'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'bike'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'car'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'plane'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$mode&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">current</span><span style="color: #007700">(</span><span style="color: #9876AA">$transport</span><span style="color: #007700">);&nbsp;</span><span style="color: #FF8000">//&nbsp;$mode&nbsp;=&nbsp;'foot';<br /></span><span style="color: #9876AA">$mode&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">next</span><span style="color: #007700">(</span><span style="color: #9876AA">$transport</span><span style="color: #007700">);&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;$mode&nbsp;=&nbsp;'bike';<br /></span><span style="color: #9876AA">$mode&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">next</span><span style="color: #007700">(</span><span style="color: #9876AA">$transport</span><span style="color: #007700">);&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;$mode&nbsp;=&nbsp;'car';<br /></span><span style="color: #9876AA">$mode&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">prev</span><span style="color: #007700">(</span><span style="color: #9876AA">$transport</span><span style="color: #007700">);&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;$mode&nbsp;=&nbsp;'bike';<br /></span><span style="color: #9876AA">$mode&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">end</span><span style="color: #007700">(</span><span style="color: #9876AA">$transport</span><span style="color: #007700">);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;$mode&nbsp;=&nbsp;'plane';<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>     </div>   </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.prev-notes">   <h3 class="title">注释</h3>   <div class="warning"><strong class="warning">Warning</strong><p class="simpara">此函数可能返回布尔值 <strong><span>FALSE</span></strong>，但也可能返回等同于 <strong><span>FALSE</span></strong> 的非布尔值。请阅读 <a href="http://php.net/manual/zh/language.types.boolean.php" class="link">布尔类型</a>章节以获取更多信息。应使用 <a href="http://php.net/manual/zh/language.operators.comparison.php" class="link">=== 运算符</a>来测试此函数的返回值。</p></div>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>:     <span class="simpara">     你会无法区分包含 <span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.types.boolean.php" class="type boolean" style="color:#EAB766">boolean</a></span> <strong><span>FALSE</span></strong> 单元的数组开头。要正确遍历可能含有空单元或者单元值为 0 的数组，参见        <span class="function">{@link each()}</span> 函数。    </span>   </p></blockquote>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.prev-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link current()} - 返回数组中的当前单元</span></li>     <li class="member"><span class="function">{@link end()} - 将数组的内部指针指向最后一个单元</span></li>     <li class="member"><span class="function">{@link next()} - 将数组中的内部指针向前移动一位</span></li>     <li class="member"><span class="function">{@link reset()} - 将数组的内部指针指向第一个单元</span></li>     <li class="member"><span class="function">{@link each()} - 返回数组中当前的键／值对并将数组指针向前移动一步</span></li>    </ul>   </span>  </div>    <div class="up"><a href="http://php.net/manual/zh/ref.array.php">数组 函数</a></div></div>
 * @return mixed the array value in the previous place that's pointed to by*/
function prev (array &$array) {}

/**
*<div id="function.next" class="refentry">    <div class="refnamediv">     <h1 class="refname">next</h1>     <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">next</span> &mdash; <span class="dc-title">      将数组中的内部指针向前移动一位     </span></p>     </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.next-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="methodname" style="color:#CC7832"><strong>next</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">&$array</span></span>    )</div>     <p class="para rdfs-comment">      <span class="function"><strong style="color:#CC7832">next()</strong></span> 和 <span class="function">{@link current()}</span>      的行为类似，只有一点区别，在返回值之前将内部指针向前移动一位。这意味着它返回的是下一个数组单元的值并将数组指针向前移动了一位。     </p>    </div>      <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.next-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">array</span></dt>       <dd>        <p class="para">        受影响的 <span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span> 。       </p>      </dd>          </dl>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.next-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回数组内部指针指向的下一个单元的值，或当没有更多单元时返回 <strong><span>FALSE</span></strong>。   </p>   <div class="warning"><strong class="warning">Warning</strong><p class="simpara">此函数可能返回布尔值 <strong><span>FALSE</span></strong>，但也可能返回等同于 <strong><span>FALSE</span></strong> 的非布尔值。请阅读 <a href="http://php.net/manual/zh/language.types.boolean.php" class="link">布尔类型</a>章节以获取更多信息。应使用 <a href="http://php.net/manual/zh/language.operators.comparison.php" class="link">=== 运算符</a>来测试此函数的返回值。</p></div>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.next-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-6107">     <p><strong>Example #1  <span class="function"><strong style="color:#CC7832">next()</strong></span> 及相关函数的用法示例</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$transport&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">'foot'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'bike'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'car'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'plane'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$mode&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">current</span><span style="color: #007700">(</span><span style="color: #9876AA">$transport</span><span style="color: #007700">);&nbsp;</span><span style="color: #FF8000">//&nbsp;$mode&nbsp;=&nbsp;'foot';<br /></span><span style="color: #9876AA">$mode&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">next</span><span style="color: #007700">(</span><span style="color: #9876AA">$transport</span><span style="color: #007700">);&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;$mode&nbsp;=&nbsp;'bike';<br /></span><span style="color: #9876AA">$mode&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">next</span><span style="color: #007700">(</span><span style="color: #9876AA">$transport</span><span style="color: #007700">);&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;$mode&nbsp;=&nbsp;'car';<br /></span><span style="color: #9876AA">$mode&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">prev</span><span style="color: #007700">(</span><span style="color: #9876AA">$transport</span><span style="color: #007700">);&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;$mode&nbsp;=&nbsp;'bike';<br /></span><span style="color: #9876AA">$mode&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">end</span><span style="color: #007700">(</span><span style="color: #9876AA">$transport</span><span style="color: #007700">);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;$mode&nbsp;=&nbsp;'plane';<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>     </div>   </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.next-notes">   <h3 class="title">注释</h3>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>:     <span class="simpara">      你将无法区别包含数组尾以及 <span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.types.boolean.php" class="type boolean" style="color:#EAB766">boolean</a></span> <strong><span>FALSE</span></strong> 单元的数组。要正确遍历可能含有空单元或者单元值为 0 的数组，参见    <span class="function">{@link each()}</span> 函数。    </span>   </p></blockquote>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.next-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link current()} - 返回数组中的当前单元</span></li>     <li class="member"><span class="function">{@link end()} - 将数组的内部指针指向最后一个单元</span></li>     <li class="member"><span class="function">{@link prev()} - 将数组的内部指针倒回一位</span></li>     <li class="member"><span class="function">{@link reset()} - 将数组的内部指针指向第一个单元</span></li>     <li class="member"><span class="function">{@link each()} - 返回数组中当前的键／值对并将数组指针向前移动一步</span></li>    </ul>   </span>  </div>    <div class="up"><a href="http://php.net/manual/zh/ref.array.php">数组 函数</a></div></div>
 * @return mixed the array value in the next place that's pointed to by the*/
function next (array &$array) {}

/**
*<div id="function.reset" class="refentry">  <div class="refnamediv">   <h1 class="refname">reset</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">reset</span> &mdash; <span class="dc-title">将数组的内部指针指向第一个单元</span></p>   </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.reset-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="methodname" style="color:#CC7832"><strong>reset</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">&$array</span></span>    )</div>    <p class="para rdfs-comment">    <span class="function"><strong style="color:#CC7832">reset()</strong></span> 将 <span class="parameter" style="color:#2EACF9">array</span>    的内部指针倒回到第一个单元并返回第一个数组单元的值。   </p>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.reset-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">array</span></dt>       <dd>        <p class="para">        输入的数组。       </p>      </dd>          </dl>    </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.reset-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回数组第一个单元的值，如果数组为空则返回 <strong><span>FALSE</span></strong>。   </p>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.reset-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-6110">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">reset()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /><br />$array&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">'step&nbsp;one'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'step&nbsp;two'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'step&nbsp;three'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'step&nbsp;four'</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">//&nbsp;by&nbsp;default,&nbsp;the&nbsp;pointer&nbsp;is&nbsp;on&nbsp;the&nbsp;first&nbsp;element<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #9876AA">current</span><span style="color: #007700">(</span><span style="color: #9876AA">$array</span><span style="color: #007700">)&nbsp;.&nbsp;</span><span style="color: #DD0000">"&lt;br&nbsp;/&gt;\n"</span><span style="color: #007700">;&nbsp;</span><span style="color: #FF8000">//&nbsp;"step&nbsp;one"<br /><br />//&nbsp;skip&nbsp;two&nbsp;steps<br /></span><span style="color: #9876AA">next</span><span style="color: #007700">(</span><span style="color: #9876AA">$array</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">next</span><span style="color: #007700">(</span><span style="color: #9876AA">$array</span><span style="color: #007700">);<br />echo&nbsp;</span><span style="color: #9876AA">current</span><span style="color: #007700">(</span><span style="color: #9876AA">$array</span><span style="color: #007700">)&nbsp;.&nbsp;</span><span style="color: #DD0000">"&lt;br&nbsp;/&gt;\n"</span><span style="color: #007700">;&nbsp;</span><span style="color: #FF8000">//&nbsp;"step&nbsp;three"<br /><br />//&nbsp;reset&nbsp;pointer,&nbsp;start&nbsp;again&nbsp;on&nbsp;step&nbsp;one<br /></span><span style="color: #9876AA">reset</span><span style="color: #007700">(</span><span style="color: #9876AA">$array</span><span style="color: #007700">);<br />echo&nbsp;</span><span style="color: #9876AA">current</span><span style="color: #007700">(</span><span style="color: #9876AA">$array</span><span style="color: #007700">)&nbsp;.&nbsp;</span><span style="color: #DD0000">"&lt;br&nbsp;/&gt;\n"</span><span style="color: #007700">;&nbsp;</span><span style="color: #FF8000">//&nbsp;"step&nbsp;one"<br /><br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>     </div>   </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.reset-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link current()} - 返回数组中的当前单元</span></li>     <li class="member"><span class="function">{@link each()} - 返回数组中当前的键／值对并将数组指针向前移动一步</span></li>     <li class="member"><span class="function">{@link end()} - 将数组的内部指针指向最后一个单元</span></li>     <li class="member"><span class="function">{@link next()} - 将数组中的内部指针向前移动一位</span></li>     <li class="member"><span class="function">{@link prev()} - 将数组的内部指针倒回一位</span></li>    </ul>   </span>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.array.php">数组 函数</a></div></div>
 * @return mixed the value of the first array element, or false if the array is*/
function reset (array &$array) {}

/**
*<div id="function.current" class="refentry">    <div class="refnamediv">     <h1 class="refname">current</h1>     <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">current</span> &mdash; <span class="dc-title">返回数组中的当前单元</span></p>     </div>      <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.current-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="methodname" style="color:#CC7832"><strong>current</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">&$array</span></span>    )</div>      <p class="para rdfs-comment">      每个数组中都有一个内部的指针指向它“当前的”单元，初始指向插入到数组中的第一个单元。     </p>    </div>       <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.current-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">array</span></dt>       <dd>        <p class="para">        这个数组。       </p>      </dd>          </dl>    </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.current-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    <span class="function"><strong style="color:#CC7832">current()</strong></span> 函数返回当前被内部指针指向的数组单元的值，并不移动指针。如果内部指针指向超出了单元列表的末端，<span class="function"><strong style="color:#CC7832">current()</strong></span>      返回 <strong><span>FALSE</span></strong>。   </p>   <div class="warning"><strong class="warning">Warning</strong><p class="simpara">此函数可能返回布尔值 <strong><span>FALSE</span></strong>，但也可能返回等同于 <strong><span>FALSE</span></strong> 的非布尔值。请阅读 <a href="http://php.net/manual/zh/language.types.boolean.php" class="link">布尔类型</a>章节以获取更多信息。应使用 <a href="http://php.net/manual/zh/language.operators.comparison.php" class="link">=== 运算符</a>来测试此函数的返回值。</p></div>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.current-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-6087">     <p><strong>Example #1 使用  <span class="function"><strong style="color:#CC7832">current()</strong></span> 系列函数的例子</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$transport&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">'foot'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'bike'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'car'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'plane'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$mode&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">current</span><span style="color: #007700">(</span><span style="color: #9876AA">$transport</span><span style="color: #007700">);&nbsp;</span><span style="color: #FF8000">//&nbsp;$mode&nbsp;=&nbsp;'foot';<br /></span><span style="color: #9876AA">$mode&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">next</span><span style="color: #007700">(</span><span style="color: #9876AA">$transport</span><span style="color: #007700">);&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;$mode&nbsp;=&nbsp;'bike';<br /></span><span style="color: #9876AA">$mode&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">current</span><span style="color: #007700">(</span><span style="color: #9876AA">$transport</span><span style="color: #007700">);&nbsp;</span><span style="color: #FF8000">//&nbsp;$mode&nbsp;=&nbsp;'bike';<br /></span><span style="color: #9876AA">$mode&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">prev</span><span style="color: #007700">(</span><span style="color: #9876AA">$transport</span><span style="color: #007700">);&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;$mode&nbsp;=&nbsp;'foot';<br /></span><span style="color: #9876AA">$mode&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">end</span><span style="color: #007700">(</span><span style="color: #9876AA">$transport</span><span style="color: #007700">);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;$mode&nbsp;=&nbsp;'plane';<br /></span><span style="color: #9876AA">$mode&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">current</span><span style="color: #007700">(</span><span style="color: #9876AA">$transport</span><span style="color: #007700">);&nbsp;</span><span style="color: #FF8000">//&nbsp;$mode&nbsp;=&nbsp;'plane';<br /><br /></span><span style="color: #9876AA">$arr&nbsp;</span><span style="color: #007700">=&nbsp;array();<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">current</span><span style="color: #007700">(</span><span style="color: #9876AA">$arr</span><span style="color: #007700">));&nbsp;</span><span style="color: #FF8000">//&nbsp;bool(false)<br /><br /></span><span style="color: #9876AA">$arr&nbsp;</span><span style="color: #007700">=&nbsp;array(array());<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">current</span><span style="color: #007700">(</span><span style="color: #9876AA">$arr</span><span style="color: #007700">));&nbsp;</span><span style="color: #FF8000">//&nbsp;array(0)&nbsp;{&nbsp;}<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>     </div>   </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.current-notes">   <h3 class="title">注释</h3>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>:     <span class="simpara">     如果数组包含 <span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.types.boolean.php" class="type boolean" style="color:#EAB766">boolean</a></span> <strong><span>FALSE</span></strong> 的单元则本函数在碰到这个单元时也返回        <strong><span>FALSE</span></strong>，使得不可能判断是否到了此数组列表的末端。     要正确遍历可能含有空单元的数组，用 <span class="function">{@link each()}</span> 函数。    </span>   </p></blockquote>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.current-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link end()} - 将数组的内部指针指向最后一个单元</span></li>     <li class="member"><span class="function">{@link key()} - 从关联数组中取得键名</span></li>     <li class="member"><span class="function">{@link each()} - 返回数组中当前的键／值对并将数组指针向前移动一步</span></li>     <li class="member"><span class="function">{@link prev()} - 将数组的内部指针倒回一位</span></li>     <li class="member"><span class="function">{@link reset()} - 将数组的内部指针指向第一个单元</span></li>     <li class="member"><span class="function">{@link next()} - 将数组中的内部指针向前移动一位</span></li>    </ul>   </span>  </div>         <div class="up"><a href="http://php.net/manual/zh/ref.array.php">数组 函数</a></div></div>
 * @return mixed The current function simply returns the*/
function current (array $array) {}

/**
*<div id="function.key" class="refentry">    <div class="refnamediv">     <h1 class="refname">key</h1>     <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">key</span> &mdash; <span class="dc-title">从关联数组中取得键名</span></p>     </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.key-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="methodname" style="color:#CC7832"><strong>key</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">$array</span></span>    )</div>      <p class="para rdfs-comment">      <span class="function"><strong style="color:#CC7832">key()</strong></span> 返回数组中当前单元的键名。     </p>    </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.key-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">array</span></dt>       <dd>        <p class="para">        该数组。       </p>      </dd>          </dl>    </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.key-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    <span class="function"><strong style="color:#CC7832">key()</strong></span> 函数返回数组中内部指针指向的当前单元的键名。    但它不会移动指针。如果内部指针超过了元素列表尾部，或者数组是空的，<span class="function"><strong style="color:#CC7832">key()</strong></span> 会返回 <strong><span>NULL</span></strong>。   </p>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.key-changelog">   <h3 class="title">更新日志</h3>   <span>    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>7.0.0</td>        <td>         <span class="parameter" style="color:#2EACF9">array</span> 现在总是会传值。          在此之前，它会尽可能传引用，否则就传值。        </td>       </tr>       </tbody>         </table>    </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.key-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-6095">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">key()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$array&nbsp;</span><span style="color: #007700">=&nbsp;array(<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #DD0000">'fruit1'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">'apple'</span><span style="color: #007700">,<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #DD0000">'fruit2'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">'orange'</span><span style="color: #007700">,<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #DD0000">'fruit3'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">'grape'</span><span style="color: #007700">,<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #DD0000">'fruit4'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">'apple'</span><span style="color: #007700">,<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #DD0000">'fruit5'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">'apple'</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">//&nbsp;this&nbsp;cycle&nbsp;echoes&nbsp;all&nbsp;associative&nbsp;array<br />//&nbsp;key&nbsp;where&nbsp;value&nbsp;equals&nbsp;"apple"<br /></span><span style="color: #007700">while&nbsp;(</span><span style="color: #9876AA">$fruit_name&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">current</span><span style="color: #007700">(</span><span style="color: #9876AA">$array</span><span style="color: #007700">))&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(</span><span style="color: #9876AA">$fruit_name&nbsp;</span><span style="color: #007700">==&nbsp;</span><span style="color: #DD0000">'apple'</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #9876AA">key</span><span style="color: #007700">(</span><span style="color: #9876AA">$array</span><span style="color: #007700">).</span><span style="color: #DD0000">'&lt;br&nbsp;/&gt;'</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;}<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">next</span><span style="color: #007700">(</span><span style="color: #9876AA">$array</span><span style="color: #007700">);<br />}<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> fruit1&lt;br /&gt; fruit4&lt;br /&gt; fruit5&lt;br /&gt; </span></div>     </div>    </div>   </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.key-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link current()} - 返回数组中的当前单元</span></li>     <li class="member"><span class="function">{@link next()} - 将数组中的内部指针向前移动一位</span></li>     <li class="member"><a href="http://php.net/manual/zh/control-structures.foreach.php" class="link">foreach</a></li>    </ul>   </span>  </div>    <div class="up"><a href="http://php.net/manual/zh/ref.array.php">数组 函数</a></div></div>
 * @return int|string|null The key function simply returns the*/
function key (array $array) {}

/**
*<div id="function.min" class="refentry">  <div class="refnamediv">   <h1 class="refname">min</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">min</span> &mdash; <span class="dc-title">找出最小值</span></p>   </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.min-description">   <h3 class="title">说明</h3>    <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">     <span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="methodname" style="color:#CC7832"><strong>min</strong></span>      ( <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">$values</span></span>     )</div>     <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">     <span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="methodname" style="color:#CC7832"><strong>min</strong></span>      ( <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#2EACF9">$value1</span></span>     , <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#2EACF9">$value2</span></span>     [, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#2EACF9">$...</span></span>    ] )</div>    <p class="para rdfs-comment">    如果仅有一个参数且为数组，<span class="function"><strong style="color:#CC7832">min()</strong></span>    返回该数组中最小的值。如果给出了两个或更多参数,    <span class="function"><strong style="color:#CC7832">min()</strong></span> 会返回这些值中最小的一个。   </p>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>:     <p class="para">     PHP 会将非数值的 <span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> 当成     <em>0</em>，但如果这个正是最小的数值则仍然会返回一个字符串。如果多个参数都求值为     <em>0</em> 且是最小值，<span class="function"><strong style="color:#CC7832">min()</strong></span>     会返回按字母表顺序最小的字符串，如果其中没有字符串的话，则返回数值的 <em>0</em>。    </p>   </p></blockquote>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.min-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">values</span></dt>       <dd>        <p class="para">        包含值的数组。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">value1</span></dt>       <dd>        <p class="para">        Any <a href="http://php.net/manual/zh/language.operators.comparison.php" class="link">comparable</a>        value.       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">value2</span></dt>       <dd>        <p class="para">        Any <a href="http://php.net/manual/zh/language.operators.comparison.php" class="link">comparable</a>        value.       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">...</span></dt>       <dd>        <p class="para">        Any <a href="http://php.net/manual/zh/language.operators.comparison.php" class="link">comparable</a>        value.       </p>      </dd>          </dl>    </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.min-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    <span class="function"><strong style="color:#CC7832">min()</strong></span> 返回参数中数值最小的。   </p>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.min-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-4129">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">min()</strong></span> 用法的例子</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #9876AA">min</span><span style="color: #007700">(</span><span style="color: #9876AA">2</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">3</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">1</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">6</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">7</span><span style="color: #007700">);&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;1<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #9876AA">min</span><span style="color: #007700">(array(</span><span style="color: #9876AA">2</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">4</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">5</span><span style="color: #007700">));&nbsp;</span><span style="color: #FF8000">//&nbsp;2<br /><br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #9876AA">min</span><span style="color: #007700">(</span><span style="color: #9876AA">0</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'hello'</span><span style="color: #007700">);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;0<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #9876AA">min</span><span style="color: #007700">(</span><span style="color: #DD0000">'hello'</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">0</span><span style="color: #007700">);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;hello<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #9876AA">min</span><span style="color: #007700">(</span><span style="color: #DD0000">'hello'</span><span style="color: #007700">,&nbsp;-</span><span style="color: #9876AA">1</span><span style="color: #007700">);&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;-1<br /><br />//&nbsp;对多个数组，min&nbsp;从左向右比较。<br />//&nbsp;因此在本例中：2&nbsp;==&nbsp;2，但&nbsp;4&nbsp;&lt;&nbsp;5<br /></span><span style="color: #9876AA">$val&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">min</span><span style="color: #007700">(array(</span><span style="color: #9876AA">2</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">4</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">8</span><span style="color: #007700">),&nbsp;array(</span><span style="color: #9876AA">2</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">5</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">1</span><span style="color: #007700">));&nbsp;</span><span style="color: #FF8000">//&nbsp;array(2,&nbsp;4,&nbsp;8)<br /><br />//&nbsp;如果同时给出数组和非数组作为参数，则不可能返回数组，因为<br />//&nbsp;数组被视为最大的<br /></span><span style="color: #9876AA">$val&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">min</span><span style="color: #007700">(</span><span style="color: #DD0000">'string'</span><span style="color: #007700">,&nbsp;array(</span><span style="color: #9876AA">2</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">5</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">7</span><span style="color: #007700">),&nbsp;</span><span style="color: #9876AA">42</span><span style="color: #007700">);&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;string<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>     </div>   </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.min-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link max()} - 找出最大值</span></li>     <li class="member"><span class="function">{@link count()} - 计算数组中的单元数目，或对象中的属性个数</span></li>    </ul>   </span>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.math.php">Math 函数</a></div></div>
 * @return mixed min returns the numerically lowest of the*/
function min ($value1, $value2 = null, ...$values) {}

/**
*<div id="function.max" class="refentry">  <div class="refnamediv">   <h1 class="refname">max</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">max</span> &mdash; <span class="dc-title">找出最大值</span></p>   </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.max-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="methodname" style="color:#CC7832"><strong>max</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">$values</span></span>    )</div>    <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="methodname" style="color:#CC7832"><strong>max</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#2EACF9">$value1</span></span>    , <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#2EACF9">$value2</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#2EACF9">$...</span></span>   ] )</div>    <p class="para rdfs-comment">    如果仅有一个参数且为数组，<span class="function"><strong style="color:#CC7832">max()</strong></span>    返回该数组中最大的值。如果第一个参数是整数、字符串或浮点数，则至少需要两个参数而    <span class="function"><strong style="color:#CC7832">max()</strong></span> 会返回这些值中最大的一个。可以比较无限多个值。   </p>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>:     <p class="para">     PHP 会将非数值的 <span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> 当成     <em>0</em>，但如果这个正是最大的数值则仍然会返回一个字符串。如果多个参数都求值为     <em>0</em> 且是最大值，<span class="function"><strong style="color:#CC7832">max()</strong></span> 会返回其中数值的     <em>0</em>，如果参数中没有数值的 <em>0</em>，则返回按字母表顺序最大的字符串。    </p>   </p></blockquote>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.max-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">values</span></dt>       <dd>        <p class="para">        包含了多个值的数组。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">value1</span></dt>       <dd>        <p class="para">        Any <a href="http://php.net/manual/zh/language.operators.comparison.php" class="link">comparable</a>        value.       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">value2</span></dt>       <dd>        <p class="para">        Any <a href="http://php.net/manual/zh/language.operators.comparison.php" class="link">comparable</a>        value.       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">...</span></dt>       <dd>        <p class="para">        Any <a href="http://php.net/manual/zh/language.operators.comparison.php" class="link">comparable</a>        value.       </p>      </dd>          </dl>    </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.max-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    <span class="function"><strong style="color:#CC7832">max()</strong></span> 返回参数中数值最大的值。    If multiple values can be considered of the same size,    the one that is listed first will be returned.   </p>   <p class="para">    When <span class="function"><strong style="color:#CC7832">max()</strong></span> is given multiple <span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span>s, the    longest array is returned. If all the arrays have the same length,    <span class="function"><strong style="color:#CC7832">max()</strong></span> will use lexicographic ordering to find the return    value.   </p>   <p class="para">    When given a <span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> it will be cast as an <span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.types.integer.php" class="type integer" style="color:#EAB766">integer</a></span>    when comparing.   </p>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.max-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-4128">     <p><strong>Example #1 使用 <span class="function"><strong style="color:#CC7832">max()</strong></span> 的例子</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #9876AA">max</span><span style="color: #007700">(</span><span style="color: #9876AA">1</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">3</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">5</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">6</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">7</span><span style="color: #007700">);&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;7<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #9876AA">max</span><span style="color: #007700">(array(</span><span style="color: #9876AA">2</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">4</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">5</span><span style="color: #007700">));&nbsp;</span><span style="color: #FF8000">//&nbsp;5<br /><br />//&nbsp;When&nbsp;'hello'&nbsp;is&nbsp;cast&nbsp;as&nbsp;integer&nbsp;it&nbsp;will&nbsp;be&nbsp;0.&nbsp;Both&nbsp;the&nbsp;parameters&nbsp;are&nbsp;equally<br />//&nbsp;long,&nbsp;so&nbsp;the&nbsp;order&nbsp;they&nbsp;are&nbsp;given&nbsp;in&nbsp;determines&nbsp;the&nbsp;result<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #9876AA">max</span><span style="color: #007700">(</span><span style="color: #9876AA">0</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'hello'</span><span style="color: #007700">);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;0<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #9876AA">max</span><span style="color: #007700">(</span><span style="color: #DD0000">'hello'</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">0</span><span style="color: #007700">);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;hello<br /><br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #9876AA">max</span><span style="color: #007700">(</span><span style="color: #DD0000">'42'</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">3</span><span style="color: #007700">);&nbsp;</span><span style="color: #FF8000">//&nbsp;'42'<br /><br />//&nbsp;Here&nbsp;0&nbsp;&gt;&nbsp;-1,&nbsp;so&nbsp;'hello'&nbsp;is&nbsp;the&nbsp;return&nbsp;value.<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #9876AA">max</span><span style="color: #007700">(-</span><span style="color: #9876AA">1</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'hello'</span><span style="color: #007700">);&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;hello<br /><br />//&nbsp;With&nbsp;multiple&nbsp;arrays&nbsp;of&nbsp;different&nbsp;lengths,&nbsp;max&nbsp;returns&nbsp;the&nbsp;longest<br /></span><span style="color: #9876AA">$val&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">max</span><span style="color: #007700">(array(</span><span style="color: #9876AA">2</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">2</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">2</span><span style="color: #007700">),&nbsp;array(</span><span style="color: #9876AA">1</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">1</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">1</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">1</span><span style="color: #007700">));&nbsp;</span><span style="color: #FF8000">//&nbsp;array(1,&nbsp;1,&nbsp;1,&nbsp;1)<br /><br />//&nbsp;对多个数组，max&nbsp;从左向右比较。<br />&nbsp;&nbsp;&nbsp;//&nbsp;因此在本例中：2&nbsp;==&nbsp;2，但&nbsp;4&nbsp;&lt;&nbsp;5<br /></span><span style="color: #9876AA">$val&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">max</span><span style="color: #007700">(array(</span><span style="color: #9876AA">2</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">4</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">8</span><span style="color: #007700">),&nbsp;array(</span><span style="color: #9876AA">2</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">5</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">7</span><span style="color: #007700">));&nbsp;</span><span style="color: #FF8000">//&nbsp;array(2,&nbsp;5,&nbsp;7)<br /><br />//&nbsp;如果同时给出数组和非数组作为参数，则总是将数组视为<br />&nbsp;&nbsp;&nbsp;//&nbsp;最大值返回<br /></span><span style="color: #9876AA">$val&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">max</span><span style="color: #007700">(</span><span style="color: #DD0000">'string'</span><span style="color: #007700">,&nbsp;array(</span><span style="color: #9876AA">2</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">5</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">7</span><span style="color: #007700">),&nbsp;</span><span style="color: #9876AA">42</span><span style="color: #007700">);&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;array(2,&nbsp;5,&nbsp;7)<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      </div>    </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.max-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link min()} - 找出最小值</span></li>     <li class="member"><span class="function">{@link count()} - 计算数组中的单元数目，或对象中的属性个数</span></li>    </ul>   </span>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.math.php">Math 函数</a></div></div>
 * @return mixed max returns the numerically highest of the*/
function max ($value1, $value2 = null, ...$values) {}

/**
*<div id="function.in-array" class="refentry">    <div class="refnamediv">     <h1 class="refname">in_array</h1>     <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">in_array</span> &mdash; <span class="dc-title">检查数组中是否存在某个值</span></p>     </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.in-array-description">   <h3 class="title">说明</h3>     <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">      <span class="type" style="color:#EAB766">bool</span> <span class="methodname" style="color:#CC7832"><strong>in_array</strong></span>       ( <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#2EACF9">$needle</span></span>      , <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">$haystack</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#2EACF9">$strict</span><span class="initializer"> = <strong><span>FALSE</span></strong></span></span>     ] )</div>      <p class="para rdfs-comment">      大海捞针，在大海（<span class="parameter" style="color:#2EACF9">haystack</span>）中搜索针（      <span class="parameter" style="color:#2EACF9">needle</span>），如果没有设置         <span class="parameter" style="color:#2EACF9">strict</span> 则使用宽松的比较。     </p>    </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.in-array-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">needle</span></dt>       <dd>        <p class="para">        待搜索的值。       </p>       <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>:         <p class="para">         如果 <span class="parameter" style="color:#2EACF9">needle</span> 是字符串，则比较是区分大小写的。        </p>       </p></blockquote>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">haystack</span></dt>       <dd>        <p class="para">        待搜索的数组。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">strict</span></dt>       <dd>        <p class="para">         如果第三个参数 <span class="parameter" style="color:#2EACF9">strict</span> 的值为      <strong><span>TRUE</span></strong> 则 <span class="function"><strong style="color:#CC7832">in_array()</strong></span> 函数还会检查      <span class="parameter" style="color:#2EACF9">needle</span> 的<a href="http://php.net/manual/zh/language.types.php" class="link">类型</a>是否和      <span class="parameter" style="color:#2EACF9">haystack</span> 中的相同。       </p>      </dd>          </dl>    </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.in-array-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">如果找到 <span class="parameter" style="color:#2EACF9">needle</span> 则返回 <strong><span>TRUE</span></strong>，否则返回 <strong><span>FALSE</span></strong>。   </p>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.in-array-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-6092">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">in_array()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$os&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">"Mac"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"NT"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"Irix"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"Linux"</span><span style="color: #007700">);<br />if&nbsp;(</span><span style="color: #9876AA">in_array</span><span style="color: #007700">(</span><span style="color: #DD0000">"Irix"</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$os</span><span style="color: #007700">))&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"Got&nbsp;Irix"</span><span style="color: #007700">;<br />}<br />if&nbsp;(</span><span style="color: #9876AA">in_array</span><span style="color: #007700">(</span><span style="color: #DD0000">"mac"</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$os</span><span style="color: #007700">))&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"Got&nbsp;mac"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>       第二个条件失败，因为 <span class="function"><strong style="color:#CC7832">in_array()</strong></span>        是区分大小写的，所以以上程序显示为：     </p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Got Irix </span></div>     </div>    </div>   </span>   <p class="para">    <div class="example" id="example-6093">     <p><strong>Example #2 <span class="function"><strong style="color:#CC7832">in_array()</strong></span> 严格类型检查例子</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$a&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">'1.10'</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">12.4</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">1.13</span><span style="color: #007700">);<br /><br />if&nbsp;(</span><span style="color: #9876AA">in_array</span><span style="color: #007700">(</span><span style="color: #DD0000">'12.4'</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$a</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">true</span><span style="color: #007700">))&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"'12.4'&nbsp;found&nbsp;with&nbsp;strict&nbsp;check\n"</span><span style="color: #007700">;<br />}<br /><br />if&nbsp;(</span><span style="color: #9876AA">in_array</span><span style="color: #007700">(</span><span style="color: #9876AA">1.13</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$a</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">true</span><span style="color: #007700">))&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"1.13&nbsp;found&nbsp;with&nbsp;strict&nbsp;check\n"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> 1.13 found with strict check </span></div>     </div>    </div>   </p>   <p class="para">    <div class="example" id="example-6094">     <p><strong>Example #3 <span class="function"><strong style="color:#CC7832">in_array()</strong></span> 中用数组作为 needle</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$a&nbsp;</span><span style="color: #007700">=&nbsp;array(array(</span><span style="color: #DD0000">'p'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'h'</span><span style="color: #007700">),&nbsp;array(</span><span style="color: #DD0000">'p'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'r'</span><span style="color: #007700">),&nbsp;</span><span style="color: #DD0000">'o'</span><span style="color: #007700">);<br /><br />if&nbsp;(</span><span style="color: #9876AA">in_array</span><span style="color: #007700">(array(</span><span style="color: #DD0000">'p'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'h'</span><span style="color: #007700">),&nbsp;</span><span style="color: #9876AA">$a</span><span style="color: #007700">))&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"'ph'&nbsp;was&nbsp;found\n"</span><span style="color: #007700">;<br />}<br /><br />if&nbsp;(</span><span style="color: #9876AA">in_array</span><span style="color: #007700">(array(</span><span style="color: #DD0000">'f'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'i'</span><span style="color: #007700">),&nbsp;</span><span style="color: #9876AA">$a</span><span style="color: #007700">))&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"'fi'&nbsp;was&nbsp;found\n"</span><span style="color: #007700">;<br />}<br /><br />if&nbsp;(</span><span style="color: #9876AA">in_array</span><span style="color: #007700">(</span><span style="color: #DD0000">'o'</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$a</span><span style="color: #007700">))&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"'o'&nbsp;was&nbsp;found\n"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span>   &#039;ph&#039; was found   &#039;o&#039; was found </span></div>     </div>    </div>   </p>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.in-array-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link array_search()} - 在数组中搜索给定的值，如果成功则返回首个相应的键名</span></li>     <li class="member"><span class="function">{@link isset()} - 检测变量是否已设置并且非 NULL</span></li>     <li class="member"><span class="function">{@link array_key_exists()} - 检查数组里是否有指定的键名或索引</span></li>    </ul>   </span>  </div>    <div class="up"><a href="http://php.net/manual/zh/ref.array.php">数组 函数</a></div></div>
 * @return bool true if needle is found in the array,*/
function in_array ($needle, array $haystack, $strict = false) {}

/**
*<div id="function.array-search" class="refentry">    <div class="refnamediv">     <h1 class="refname">array_search</h1>     <p class="verinfo">(PHP 4 &gt;= 4.0.5, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">array_search</span> &mdash; <span class="dc-title">      在数组中搜索给定的值，如果成功则返回首个相应的键名     </span></p>     </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-search-description">   <h3 class="title">说明</h3>      <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">       <span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="methodname" style="color:#CC7832"><strong>array_search</strong></span>        ( <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#2EACF9">$needle</span></span>       , <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">$haystack</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#2EACF9">$strict</span><span class="initializer"> = false</span></span>      ] )</div>      <p class="para rdfs-comment">      大海捞针，在大海（<span class="parameter" style="color:#2EACF9">haystack</span>）中搜索针（      <span class="parameter" style="color:#2EACF9">needle</span> 参数）。     </p>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-search-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">needle</span></dt>       <dd>        <p class="para">        搜索的值。       </p>       <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>:         <p class="para">         如果 <span class="parameter" style="color:#2EACF9">needle</span> 是字符串，则比较以区分大小写的方式进行。        </p>       </p></blockquote>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">haystack</span></dt>       <dd>        <p class="para">        这个数组。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">strict</span></dt>       <dd>        <p class="para">        如果可选的第三个参数 <span class="parameter" style="color:#2EACF9">strict</span> 为 <strong><span>TRUE</span></strong>，则      <span class="function"><strong style="color:#CC7832">array_search()</strong></span> 将在 <span class="parameter" style="color:#2EACF9">haystack</span>      中检查<em class="emphasis">完全相同</em>的元素。        这意味着同样严格比较 <span class="parameter" style="color:#2EACF9">haystack</span> 里 <span class="parameter" style="color:#2EACF9">needle</span> 的 <a href="http://php.net/manual/zh/language.types.php" class="link">类型</a>，并且对象需是同一个实例。       </p>      </dd>          </dl>    </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-search-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    如果找到了 <span class="parameter" style="color:#2EACF9">needle</span> 则返回它的键，否则返回 <strong><span>FALSE</span></strong>。   </p>   <p class="para">    如果 <span class="parameter" style="color:#2EACF9">needle</span> 在      <span class="parameter" style="color:#2EACF9">haystack</span>      中出现不止一次，则返回第一个匹配的键。要返回所有匹配值的键，应该用      <span class="function">{@link array_keys()}</span> 加上可选参数      <span class="parameter" style="color:#2EACF9">search_value</span> 来代替。   </p>   <div class="warning"><strong class="warning">Warning</strong><p class="simpara">此函数可能返回布尔值 <strong><span>FALSE</span></strong>，但也可能返回等同于 <strong><span>FALSE</span></strong> 的非布尔值。请阅读 <a href="http://php.net/manual/zh/language.types.boolean.php" class="link">布尔类型</a>章节以获取更多信息。应使用 <a href="http://php.net/manual/zh/language.operators.comparison.php" class="link">=== 运算符</a>来测试此函数的返回值。</p></div>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.array-search-changelog">   <h3 class="title">更新日志</h3>   <span>    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>5.3.0</td>        <td>         As with all internal PHP functions as of 5.3.0,         <span class="function"><strong style="color:#CC7832">array_search()</strong></span> returns <strong><span>NULL</span></strong> if invalid parameters         are passed to it.        </td>       </tr>       </tbody>         </table>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-search-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-6059">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">array_search()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$array&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #9876AA">0&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">'blue'</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">1&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">'red'</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">2&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">'green'</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">3&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">'red'</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$key&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">array_search</span><span style="color: #007700">(</span><span style="color: #DD0000">'green'</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$array</span><span style="color: #007700">);&nbsp;</span><span style="color: #FF8000">//&nbsp;$key&nbsp;=&nbsp;2;<br /></span><span style="color: #9876AA">$key&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">array_search</span><span style="color: #007700">(</span><span style="color: #DD0000">'red'</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$array</span><span style="color: #007700">);&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;$key&nbsp;=&nbsp;1;<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>     </div>   </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-search-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link array_keys()} - 返回数组中部分的或所有的键名</span></li>     <li class="member"><span class="function">{@link array_values()} - 返回数组中所有的值</span></li>     <li class="member"><span class="function">{@link array_key_exists()} - 检查数组里是否有指定的键名或索引</span></li>     <li class="member"><span class="function">{@link in_array()} - 检查数组中是否存在某个值</span></li>    </ul>   </span>  </div>    <div class="up"><a href="http://php.net/manual/zh/ref.array.php">数组 函数</a></div></div>
 * @return int|string|false the key for needle if it is found in the*/
function array_search ($needle, array $haystack, $strict = null) {}

/**
*<div id="function.extract" class="refentry">  <div class="refnamediv">   <h1 class="refname">extract</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">extract</span> &mdash; <span class="dc-title">从数组中将变量导入到当前的符号表</span></p>   </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.extract-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">int</span> <span class="methodname" style="color:#CC7832"><strong>extract</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">&$array</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#2EACF9">$flags</span><span class="initializer"> = EXTR_OVERWRITE</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#2EACF9">$prefix</span><span class="initializer"> = <strong><span>NULL</span></strong></span></span>   ]] )</div>    <p class="para rdfs-comment">    本函数用来将变量从数组中导入到当前的符号表中。   </p>   <p class="para">    检查每个键名看是否可以作为一个合法的变量名，同时也检查和符号表中已有的变量名的冲突。   </p>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.extract-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">array</span></dt>       <dd>        <p class="para">        一个关联数组。此函数会将键名当作变量名，值作为变量的值。        对每个键／值对都会在当前的符号表中建立变量，并受到    <span class="parameter" style="color:#2EACF9">flags</span> 和 <span class="parameter" style="color:#2EACF9">prefix</span> 参数的影响。       </p>       <p class="para">         必须使用关联数组，数字索引的数组将不会产生结果，除非用了    <strong><span>EXTR_PREFIX_ALL</span></strong> 或者 <strong><span>EXTR_PREFIX_INVALID</span></strong>。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">flags</span></dt>       <dd>        <p class="para">         对待非法／数字和冲突的键名的方法将根据取出标记    <span class="parameter" style="color:#2EACF9">flags</span> 参数决定。可以是以下值之一：        <dl>                    <dt> <strong><span>EXTR_OVERWRITE</span></strong></dt>           <dd>            <span class="simpara">            如果有冲突，覆盖已有的变量。           </span>          </dd>                             <dt> <strong><span>EXTR_SKIP</span></strong></dt>           <dd>            <span class="simpara">            如果有冲突，不覆盖已有的变量。           </span>          </dd>                             <dt> <strong><span>EXTR_PREFIX_SAME</span></strong></dt>           <dd>            <span class="simpara">如果有冲突，在变量名前加上前缀 <span class="parameter" style="color:#2EACF9">prefix</span>。           </span>          </dd>                             <dt> <strong><span>EXTR_PREFIX_ALL</span></strong></dt>           <dd>            <span class="simpara">            给所有变量名加上前缀        <span class="parameter" style="color:#2EACF9">prefix</span>。           </span>          </dd>                             <dt> <strong><span>EXTR_PREFIX_INVALID</span></strong></dt>           <dd>            <span class="simpara">            仅在非法／数字的变量名前加上前缀 <span class="parameter" style="color:#2EACF9">prefix</span>。           </span>          </dd>                             <dt> <strong><span>EXTR_IF_EXISTS</span></strong></dt>           <dd>            <span class="simpara">            仅在当前符号表中已有同名变量时，覆盖它们的值。其它的都不处理。            举个例子，以下情况非常有用：定义一些有效变量，然后从 <var class="varname"><var class="varname"><a href="http://php.net/manual/zh/reserved.variables.request.php" class="classname">$_REQUEST</a></var></var> 中仅导入这些已定义的变量。           </span>          </dd>                             <dt> <strong><span>EXTR_PREFIX_IF_EXISTS</span></strong></dt>           <dd>            <span class="simpara">            仅在当前符号表中已有同名变量时，建立附加了前缀的变量名，其它的都不处理。           </span>          </dd>                             <dt> <strong><span>EXTR_REFS</span></strong></dt>           <dd>            <span class="simpara">            将变量作为引用提取。这有力地表明了导入的变量仍然引用了        <span class="parameter" style="color:#2EACF9">array</span> 参数的值。可以单独使用这个标志或者在        <span class="parameter" style="color:#2EACF9">flags</span> 中用 OR 与其它任何标志结合使用。           </span>          </dd>                  </dl>        </p>       <p class="para">        如果没有指定 <span class="parameter" style="color:#2EACF9">flags</span>，则被假定为 <strong><span>EXTR_OVERWRITE</span></strong>。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">prefix</span></dt>       <dd>        <p class="para">        注意 <span class="parameter" style="color:#2EACF9">prefix</span> 仅在    <span class="parameter" style="color:#2EACF9">flags</span> 的值是    <strong><span>EXTR_PREFIX_SAME</span></strong>，<strong><span>EXTR_PREFIX_ALL</span></strong>，<strong><span>EXTR_PREFIX_INVALID</span></strong>    或 <strong><span>EXTR_PREFIX_IF_EXISTS</span></strong>    时需要。        如果附加了前缀后的结果不是合法的变量名，将不会导入到符号表中。前缀和数组键名之间会自动加上一个下划线。       </p>      </dd>          </dl>    </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.extract-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回成功导入到符号表中的变量数目。   </p>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.extract-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-6091">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">extract()</strong></span> 例子</strong></p>     <div class="example-contents"><p>      <span class="function"><strong style="color:#CC7832">extract()</strong></span> 的一种可能用法是将 <span class="function">{@link wddx_deserialize()}</span>    返回的结合数组中的内容导入到符号表变量中去。     </p></div>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /><br /></span><span style="color: #FF8000">//&nbsp;假定&nbsp;$var_array&nbsp;是&nbsp;wddx_deserialize&nbsp;返回的数组<br /><br /></span><span style="color: #9876AA">$size&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">"large"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$var_array&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">"color"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"blue"</span><span style="color: #007700">,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #DD0000">"size"&nbsp;&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"medium"</span><span style="color: #007700">,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #DD0000">"shape"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"sphere"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">extract</span><span style="color: #007700">(</span><span style="color: #9876AA">$var_array</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">EXTR_PREFIX_SAME</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"wddx"</span><span style="color: #007700">);<br /><br />echo&nbsp;</span><span style="color: #DD0000">"</span><span style="color: #9876AA">$color</span><span style="color: #DD0000">,&nbsp;</span><span style="color: #9876AA">$size</span><span style="color: #DD0000">,&nbsp;</span><span style="color: #9876AA">$shape</span><span style="color: #DD0000">,&nbsp;</span><span style="color: #9876AA">$wddx_size</span><span style="color: #DD0000">\n"</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> blue, large, sphere, medium </span></div>     </div>     <div class="example-contents"><p>        <var class="varname"><var class="varname">$size</var></var> 没有被覆盖，因为指定了    <strong><span>EXTR_PREFIX_SAME</span></strong>，这使得 <var class="varname"><var class="varname">$wddx_size</var></var>      被建立。如果指定了 <strong><span>EXTR_SKIP</span></strong>，则 <var class="varname"><var class="varname">$wddx_size</var></var>    也不会被建立。<strong><span>EXTR_OVERWRITE</span></strong> 将使 <var class="varname"><var class="varname">$size</var></var>    的值为“medium”，<strong><span>EXTR_PREFIX_ALL</span></strong> 将建立新变量    <var class="varname"><var class="varname">$wddx_color</var></var>，<var class="varname"><var class="varname">$wddx_size</var></var> 和    <var class="varname"><var class="varname">$wddx_shape</var></var>。     </p></div>    </div>   </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.extract-notes">   <h3 class="title">注释</h3>   <div class="warning"><strong class="warning">Warning</strong>    <p class="para">         不要对不能信任的数据使用     <span class="function"><strong style="color:#CC7832">extract()</strong></span>，例如用户的输入（<var class="varname"><var class="varname"><a href="http://php.net/manual/zh/reserved.variables.get.php" class="classname">$_GET</a></var></var>， <var class="varname"><var class="varname"><a href="http://php.net/manual/zh/reserved.variables.files.php" class="classname">$_FILES</a></var></var>，...）。如果这样做，举例说，要临时运行依赖于     <a href="http://php.net/manual/zh/security.globals.php" class="link">register_globals</a>     的老代码，要确保使用不会覆盖的     <span class="parameter" style="color:#2EACF9">extract_type</span> 值，例如     <strong><span>EXTR_SKIP</span></strong>，并且要留意应该按照 <a href="http://php.net/manual/zh/ini.core.php#ini.variables-order" class="link">variables_order</a> 在 <a href="http://php.net/manual/zh/ini.php" class="link"><var class="filename">php.ini</var></a> 里     定义的顺序来提取。    </p>   </div>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>:     <p class="para">     If you still     have <a href="http://php.net/manual/zh/security.globals.php" class="link">register_globals</a>     and it is turned on, if you use <span class="function"><strong style="color:#CC7832">extract()</strong></span>     on <var class="varname"><var class="varname"><a href="http://php.net/manual/zh/reserved.variables.files.php" class="classname">$_FILES</a></var></var> and     specify <strong><span>EXTR_SKIP</span></strong>, you may be surprised at     the results.    </p>    <div class="warning"><strong class="warning">Warning</strong>     <p class="para">      This is not recommended practice and is only documented here for      completeness. The use      of <a href="http://php.net/manual/zh/security.globals.php" class="link">register_globals</a> is      deprecated and calling <span class="function"><strong style="color:#CC7832">extract()</strong></span> on untrusted      data such as <var class="varname"><var class="varname"><a href="http://php.net/manual/zh/reserved.variables.files.php" class="classname">$_FILES</a></var></var> is, as noted above, a      potential security risk. If you encounter this issue, it means      that you are using at least two poor coding practices.     </p>    </div>    <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /><br /></span><span style="color: #FF8000">//&nbsp;Suppose&nbsp;that&nbsp;$testfile&nbsp;is&nbsp;the&nbsp;name&nbsp;of&nbsp;a&nbsp;file&nbsp;upload&nbsp;input<br />&nbsp;&nbsp;&nbsp;and&nbsp;that&nbsp;register_globals&nbsp;is&nbsp;turned&nbsp;on.&nbsp;<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$testfile</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">extract</span><span style="color: #007700">(</span><span style="color: #9876AA">$_FILES</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">EXTR_SKIP</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$testfile</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$testfile</span><span style="color: #007700">[</span><span style="color: #DD0000">'tmp_name'</span><span style="color: #007700">]);<br /><br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>    </div>     <span class="simpara">     You might expect to see something like the following:    </span>    <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> string(14) &quot;/tmp/phpgCCPX8&quot; array(5) {   [&quot;name&quot;]=&gt;   string(10) &quot;somefile.txt&quot;   [&quot;type&quot;]=&gt;   string(24) &quot;application/octet-stream&quot;   [&quot;tmp_name&quot;]=&gt;   string(14) &quot;/tmp/phpgCCPX8&quot;   [&quot;error&quot;]=&gt;   int(0)   [&quot;size&quot;]=&gt;   int(4208) } string(14) &quot;/tmp/phpgCCPX8&quot; </span></div>    </div>    <span class="simpara">     However, you would instead see something like this:    </span>    <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> string(14) &quot;/tmp/phpgCCPX8&quot; string(14) &quot;/tmp/phpgCCPX8&quot; string(1) &quot;/&quot; </span></div>    </div>    <p class="para">     This is due to the fact that     since <a href="http://php.net/manual/zh/security.globals.php" class="link">register_globals</a> is     turned on, <var class="varname"><var class="varname">$testfile</var></var> already exists in the     global scope when <span class="function"><strong style="color:#CC7832">extract()</strong></span> is called. And     since <strong><span>EXTR_SKIP</span></strong> is     specified, <var class="varname"><var class="varname">$testfile</var></var> is not overwritten with     the contents of the <strong><span>$_FILES</span></strong> array     so <var class="varname"><var class="varname">$testfile</var></var> remains a string.     Because <a href="http://php.net/manual/zh/language.types.string.php#language.types.string.substr" class="link">strings may     be accessed using array syntax</a> and the non-numeric string     <em>tmp_name</em> is interpreted     as <em>0</em>, PHP     sees <var class="varname"><var class="varname">$testfile['tmp_name']</var></var>     as <var class="varname"><var class="varname">$testfile[0]</var></var>.    </p>   </p></blockquote>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.extract-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link compact()} - 建立一个数组，包括变量名和它们的值</span></li>     <li class="member"><span class="function">{@link list()} - 把数组中的值赋给一组变量</span></li>    </ul>   </span>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.array.php">数组 函数</a></div></div>
 * @return int the number of variables successfully imported into the symbol*/
function extract (array $var_array, $extract_type = null, $prefix = null) {}

/**
*<div id="function.compact" class="refentry">  <div class="refnamediv">   <h1 class="refname">compact</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">compact</span> &mdash; <span class="dc-title">    建立一个数组，包括变量名和它们的值   </span></p>   </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.compact-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">array</span> <span class="methodname" style="color:#CC7832"><strong>compact</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#2EACF9">$varname1</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#2EACF9">$...</span></span>     ] )</div>      <p class="para rdfs-comment">      创建一个包含变量与其值的数组。     </p>     <p class="para">      对每个参数，<span class="function"><strong style="color:#CC7832">compact()</strong></span>      在当前的符号表中查找该变量名并将它添加到输出的数组中，变量名成为键名而变量的内容成为该键的值。简单说，它做的事和      <span class="function">{@link extract()}</span> 正好相反。返回将所有变量添加进去后的数组。     </p>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>:     <p class="para">     在 PHP 7.3 之前版本，未设置的字符串会被静默忽略。    </p>   </p></blockquote>   </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.compact-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">varname1</span></dt>       <dd>        <p class="para">        <span class="function"><strong style="color:#CC7832">compact()</strong></span> 接受可变的参数数目。每个参数可以是一个包括变量名的字符串或者是一个包含变量名的数组，该数组中还可以包含其它单元内容为变量名的数组，  <span class="function"><strong style="color:#CC7832">compact()</strong></span> 可以递归处理。       </p>      </dd>          </dl>    </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.compact-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回输出的数组，包含了添加的所有变量。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-function.compact-errors">   <h3 class="title">错误／异常</h3>   <p class="para">    如果字符串指向的变量未定义，<span class="function"><strong style="color:#CC7832">compact()</strong></span> 会产生 E_NOTICE 级错误。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.compact-changelog">   <h3 class="title">更新日志</h3>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>      </thead>      <tbody class="tbody">      <tr>       <td>7.3.0</td>       <td>         现在，如果字符串指向的变量未定义，<span class="function"><strong style="color:#CC7832">compact()</strong></span> 会产生 E_NOTICE 级错误。        在此之前，此类问题会静默忽略掉。       </td>      </tr>      </tbody>       </table>   </div>     <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.compact-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-6084">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">compact()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$city&nbsp;&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">"San&nbsp;Francisco"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$state&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">"CA"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$event&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">"SIGGRAPH"</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">$location_vars&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">"city"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"state"</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$result&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">compact</span><span style="color: #007700">(</span><span style="color: #DD0000">"event"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"nothing_here"</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$location_vars</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$result</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Array (     [event] =&gt; SIGGRAPH     [city] =&gt; San Francisco     [state] =&gt; CA ) </span></div>     </div>    </div>   </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.compact-notes">   <h3 class="title">注释</h3>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>:     <strong>Gotcha</strong><br />    <p class="para">     因为<a href="http://php.net/manual/zh/language.variables.variable.php" class="link">可变变量</a>也许不能在函数内部用于   PHP 的<a href="http://php.net/manual/zh/language.variables.superglobals.php" class="link">超全局数组</a>，此时不能将超全局数组传递入   <span class="function"><strong style="color:#CC7832">compact()</strong></span> 中。    </p>   </p></blockquote>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.compact-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link extract()} - 从数组中将变量导入到当前的符号表</span></li>    </ul>   </span>  </div>      <div class="up"><a href="http://php.net/manual/zh/ref.array.php">数组 函数</a></div></div>
 * @return array the output array with all the variables added to it.*/
function compact ($varname, $_ = null) {}

/**
*<div id="function.array-fill" class="refentry">  <div class="refnamediv">   <h1 class="refname">array_fill</h1>   <p class="verinfo">(PHP 4 &gt;= 4.2.0, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">array_fill</span> &mdash; <span class="dc-title">用给定的值填充数组</span></p>   </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-fill-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">array</span> <span class="methodname" style="color:#CC7832"><strong>array_fill</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#2EACF9">$start_index</span></span>    , <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#2EACF9">$num</span></span>    , <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#2EACF9">$value</span></span>    )</div>    <p class="para rdfs-comment">    <span class="function"><strong style="color:#CC7832">array_fill()</strong></span> 用 <span class="parameter" style="color:#2EACF9">value</span>    参数的值将一个数组填充 <span class="parameter" style="color:#2EACF9">num</span> 个条目，键名由    <span class="parameter" style="color:#2EACF9">start_index</span> 参数指定的开始。   </p>    </div>             <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-fill-parameters">     <h3 class="title">参数</h3>     <span>      <dl>                       <dt> <span class="parameter" style="color:#2EACF9">start_index</span></dt>         <dd>          <p class="para">          返回的数组的第一个索引值。         </p>         <p class="para">          如果 <span class="parameter" style="color:#2EACF9">start_index</span> 是负数，          那么返回的数组的第一个索引将会是          <span class="parameter" style="color:#2EACF9">start_index</span> ，而后面索引则从0开始。             (参见 {@link 例子})。         </p>        </dd>                              <dt> <span class="parameter" style="color:#2EACF9">num</span></dt>         <dd>          <p class="para">          插入元素的数量。          必须大于或等于 0。         </p>        </dd>                              <dt> <span class="parameter" style="color:#2EACF9">value</span></dt>         <dd>          <p class="para">          用来填充的值。         </p>        </dd>                     </dl>      </span>    </div>         <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-fill-returnvalues">     <h3 class="title">返回值</h3>     <p class="para">      返回填充后的数组。     </p>    </div>         <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-function.array-fill-errors">     <h3 class="title">错误／异常</h3>     <p class="para">      如果 <span class="parameter" style="color:#2EACF9">num</span> 小于零，将会抛出 <strong><span>E_WARNING</span></strong>。     </p>    </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.array-fill-changelog">   <h3 class="title">更新日志</h3>   <span>    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>5.6.0</td>        <td>         <span class="parameter" style="color:#2EACF9">num</span> 现在可以是零。         之前          <span class="parameter" style="color:#2EACF9">num</span> 必须大于零。        </td>       </tr>       </tbody>         </table>    </span>  </div>         <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-fill-examples">     <h3 class="title">范例</h3>     <span>      <div class="example" id="example-6021">       <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">array_fill()</strong></span> 例子</strong></p>       <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$a&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">array_fill</span><span style="color: #007700">(</span><span style="color: #9876AA">5</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">6</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'banana'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$b&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">array_fill</span><span style="color: #007700">(-</span><span style="color: #9876AA">2</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">4</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'pear'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$b</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>       </div>        <div class="example-contents"><p>以上例程会输出：</p></div>       <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Array (     [5]  =&gt; banana     [6]  =&gt; banana     [7]  =&gt; banana     [8]  =&gt; banana     [9]  =&gt; banana     [10] =&gt; banana ) Array (     [-2] =&gt; pear     [0] =&gt; pear     [1] =&gt; pear     [2] =&gt; pear ) </span></div>     </div>    </div>      </span>    </div>         <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.array-fill-notes">     <h3 class="title">注释</h3>     <p class="para">      参见手册上 <a href="http://php.net/manual/zh/language.types.array.php" class="link">数组</a> 一节里关于负数的键的详细解释。     </p>    </div>         <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-fill-seealso">     <h3 class="title">参见</h3>     <span>      <ul class="simplelist">       <li class="member"><span class="function">{@link array_fill_keys()} - 使用指定的键和值填充数组</span></li>       <li class="member"><span class="function">{@link str_repeat()} - 重复一个字符串</span></li>       <li class="member"><span class="function">{@link range()} - 根据范围创建数组，包含指定的元素</span></li>      </ul>     </span>    </div>  <div class="up"><a href="http://php.net/manual/zh/ref.array.php">数组 函数</a></div></div>
 * @return array the filled array*/
function array_fill ($start_index, $num, $value) {}

/**
*<div id="function.array-fill-keys" class="refentry">  <div class="refnamediv">   <h1 class="refname">array_fill_keys</h1>   <p class="verinfo">(PHP 5 &gt;= 5.2.0, PHP 7)</p><p class="refpurpose"><span class="refname">array_fill_keys</span> &mdash; <span class="dc-title">使用指定的键和值填充数组</span></p>   </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-fill-keys-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">array</span> <span class="methodname" style="color:#CC7832"><strong>array_fill_keys</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">$keys</span></span>    , <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#2EACF9">$value</span></span>    )</div>    <p class="para rdfs-comment">     使用 <span class="parameter" style="color:#2EACF9">value</span> 参数的值作为值，使用 <span class="parameter" style="color:#2EACF9">keys</span> 数组的值作为键来填充一个数组。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-fill-keys-parameters">   <h3 class="title">参数</h3>   <span>    <dl>             <dt> <span class="parameter" style="color:#2EACF9">keys</span></dt>       <dd>        <p class="para">        使用该数组的值作为键。非法值将被转换为<span class="type" style="color:#EAB766"><span class="type 字符串" style="color:#EAB766">字符串</span></span>。       </p>      </dd>                  <dt> <span class="parameter" style="color:#2EACF9">value</span></dt>       <dd>        <p class="para">        填充使用的值。       </p>      </dd>           </dl>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-fill-keys-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回填充后的数组。   </p>  </div>      <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-fill-keys-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-6020">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">array_fill_keys()</strong></span> 范例</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$keys&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">'foo'</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">5</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">10</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'bar'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$a&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">array_fill_keys</span><span style="color: #007700">(</span><span style="color: #9876AA">$keys</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'banana'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Array (     [foo] =&gt; banana     [5] =&gt; banana     [10] =&gt; banana     [bar] =&gt; banana ) </span></div>     </div>    </div>   </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-fill-keys-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link array_fill()} - 用给定的值填充数组</span></li>     <li class="member"><span class="function">{@link array_combine()} - 创建一个数组，用一个数组的值作为其键名，另一个数组的值作为其值</span></li>    </ul>   </span>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.array.php">数组 函数</a></div></div>
 * @return array the filled array*/
function array_fill_keys (array $keys, $value) {}

/**
*<div id="function.range" class="refentry">    <div class="refnamediv">     <h1 class="refname">range</h1>     <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">range</span> &mdash; <span class="dc-title">      根据范围创建数组，包含指定的元素     </span></p>     </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.range-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">array</span> <span class="methodname" style="color:#CC7832"><strong>range</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#2EACF9">$start</span></span>    , <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#2EACF9">$end</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.number" class="type number" style="color:#EAB766">number</a></span> <span class="parameter" style="color:#2EACF9">$step</span><span class="initializer"> = 1</span></span>   ] )</div>      <p class="para rdfs-comment">    建立一个包含指定范围单元的数组。   </p>  </div>        <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.range-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">start</span></dt>       <dd>        <p class="para">        序列的第一个值。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">end</span></dt>       <dd>        <p class="para">        序列结束于 <span class="parameter" style="color:#2EACF9">end</span> 的值。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">step</span></dt>       <dd>        <p class="para">        如果设置了步长 <span class="parameter" style="color:#2EACF9">step</span>，会被作为单元之间的步进值。<span class="parameter" style="color:#2EACF9">step</span>      应该为正值。不设置<span class="parameter" style="color:#2EACF9">step</span> 则默认为 1。       </p>      </dd>          </dl>    </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.range-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回的数组中从      <span class="parameter" style="color:#2EACF9">start</span> 到 <span class="parameter" style="color:#2EACF9">end</span> （含 start 和 end）的单元。   </p>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.range-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-6109">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">range()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">//&nbsp;array(0,&nbsp;1,&nbsp;2,&nbsp;3,&nbsp;4,&nbsp;5,&nbsp;6,&nbsp;7,&nbsp;8,&nbsp;9,&nbsp;10,&nbsp;11,&nbsp;12)<br /></span><span style="color: #007700">foreach&nbsp;(</span><span style="color: #9876AA">range</span><span style="color: #007700">(</span><span style="color: #9876AA">0</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">12</span><span style="color: #007700">)&nbsp;as&nbsp;</span><span style="color: #9876AA">$number</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #9876AA">$number</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #FF8000">//&nbsp;&nbsp;step&nbsp;参数<br />//&nbsp;array(0,&nbsp;10,&nbsp;20,&nbsp;30,&nbsp;40,&nbsp;50,&nbsp;60,&nbsp;70,&nbsp;80,&nbsp;90,&nbsp;100)<br /></span><span style="color: #007700">foreach&nbsp;(</span><span style="color: #9876AA">range</span><span style="color: #007700">(</span><span style="color: #9876AA">0</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">100</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">10</span><span style="color: #007700">)&nbsp;as&nbsp;</span><span style="color: #9876AA">$number</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #9876AA">$number</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #FF8000">//&nbsp;字符序列的使用<br />//&nbsp;array('a',&nbsp;'b',&nbsp;'c',&nbsp;'d',&nbsp;'e',&nbsp;'f',&nbsp;'g',&nbsp;'h',&nbsp;'i');<br /></span><span style="color: #007700">foreach&nbsp;(</span><span style="color: #9876AA">range</span><span style="color: #007700">(</span><span style="color: #DD0000">'a'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'i'</span><span style="color: #007700">)&nbsp;as&nbsp;</span><span style="color: #9876AA">$letter</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #9876AA">$letter</span><span style="color: #007700">;<br />}<br /></span><span style="color: #FF8000">//&nbsp;array('c',&nbsp;'b',&nbsp;'a');<br /></span><span style="color: #007700">foreach&nbsp;(</span><span style="color: #9876AA">range</span><span style="color: #007700">(</span><span style="color: #DD0000">'c'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'a'</span><span style="color: #007700">)&nbsp;as&nbsp;</span><span style="color: #9876AA">$letter</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #9876AA">$letter</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>     </div>   </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.range-notes">   <h3 class="title">注释</h3>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>:     <p class="para">     字符序列值仅限单个字符。     如果长度大于1，仅仅使用第一个字符。    </p>   </p></blockquote>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.range-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link shuffle()} - 打乱数组</span></li>     <li class="member"><span class="function">{@link array_fill()} - 用给定的值填充数组</span></li>     <li class="member"><a href="http://php.net/manual/zh/control-structures.foreach.php" class="link">foreach</a></li>    </ul>   </span>  </div>          <div class="up"><a href="http://php.net/manual/zh/ref.array.php">数组 函数</a></div></div>
 * @return array an array of elements from start to*/
function range ($start, $end, $step = 1) {}

/**
*<div id="function.array-multisort" class="refentry">  <div class="refnamediv">   <h1 class="refname">array_multisort</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">array_multisort</span> &mdash; <span class="dc-title">对多个数组或多维数组进行排序</span></p>   </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-multisort-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">bool</span> <span class="methodname" style="color:#CC7832"><strong>array_multisort</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">&$array1</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#2EACF9">$array1_sort_order</span><span class="initializer"> = SORT_ASC</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#2EACF9">$array1_sort_flags</span><span class="initializer"> = SORT_REGULAR</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#2EACF9">$...</span></span>   ]]] )</div>    <p class="para rdfs-comment">    <span class="function"><strong style="color:#CC7832">array_multisort()</strong></span>    可以用来一次对多个数组进行排序，或者根据某一维或多维对多维数组进行排序。   </p>   <p class="para">    关联（<span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>）键名保持不变，但数字键名会被重新索引。   </p>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>:   <p class="para">   If two members compare as equal, their relative order in the sorted array is undefined.  </p> </p></blockquote>   </div>     <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-multisort-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">array1</span></dt>       <dd>        <p class="para">        要排序的 <span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span>。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">array1_sort_order</span></dt>       <dd>        <p class="para">        之前 <span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span>  参数要排列的顺序。        <strong><span>SORT_ASC</span></strong> 按照上升顺序排序， <strong><span>SORT_DESC</span></strong> 按照下降顺序排序。       </p>       <p class="para">        此参数可以和 <span class="parameter" style="color:#2EACF9">array1_sort_flags</span> 互换，也可以完全删除，默认是 <strong><span>SORT_ASC</span></strong> 。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">array1_sort_flags</span></dt>       <dd>        <p class="para">        为 <span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span> 参数设定选项：       </p>       <p class="para">        排序类型标志：        <ul class="itemizedlist">         <li class="listitem">          <span class="simpara"><strong><span>SORT_REGULAR</span></strong> -            将项目按照通常方法比较（不修改类型）          </span>         </li>         <li class="listitem">          <span class="simpara"><strong><span>SORT_NUMERIC</span></strong> - 按照数字大小比较</span>         </li>         <li class="listitem">          <span class="simpara"><strong><span>SORT_STRING</span></strong> -  按照字符串比较</span>         </li>         <li class="listitem">          <span class="simpara">           <strong><span>SORT_LOCALE_STRING</span></strong> -  根据当前的本地化设置，按照字符串比较。            它会使用 locale 信息，可以通过 <span class="function">{@link setlocale()}</span> 修改此信息。          </span>         </li>         <li class="listitem">          <span class="simpara">           <strong><span>SORT_NATURAL</span></strong> - 以字符串的&quot;自然排序&quot;，类似 <span class="function">{@link natsort()}</span>          </span>         </li>         <li class="listitem">          <span class="simpara">           <strong><span>SORT_FLAG_CASE</span></strong> - 可以组合           (按位或 OR)            <strong><span>SORT_STRING</span></strong> 或者           <strong><span>SORT_NATURAL</span></strong> 大小写不敏感的方式排序字符串。          </span>         </li>        </ul>       </p>       <p class="para">        参数可以和 <span class="parameter" style="color:#2EACF9">array1_sort_order</span> 交换或者省略，默认情况下是 <strong><span>SORT_REGULAR</span></strong>。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">...</span></dt>       <dd>        <p class="para">        可选的选项，可提供更多数组，跟随在 sort order 和 sort flag 之后。        提供的数组和之前的数组要有相同数量的元素。        换言之，排序是按字典顺序排列的。       </p>      </dd>          </dl>    </span>  </div>         <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-multisort-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    成功时返回 <strong><span>TRUE</span></strong>， 或者在失败时返回 <strong><span>FALSE</span></strong>。   </p>  </div>       <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.array-multisort-changelog">   <h3 class="title">更新日志</h3>   <span>    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>5.4.0</td>        <td>         <span class="parameter" style="color:#2EACF9">array1_sort_flags</span> 增加 <strong><span>SORT_NATURAL</span></strong> 和 <strong><span>SORT_FLAG_CASE</span></strong> 选项。        </td>       </tr>        <tr>        <td>5.3.0</td>        <td>         <span class="parameter" style="color:#2EACF9">array1_sort_flags</span> 增加选项 <strong><span>SORT_LOCALE_STRING</span></strong>。        </td>       </tr>       </tbody>         </table>    </span>  </div>     <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-multisort-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-6045">     <p><strong>Example #1 多个数组排序</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$ar1&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #9876AA">10</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">100</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">100</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">0</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$ar2&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #9876AA">1</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">3</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">2</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">4</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">array_multisort</span><span style="color: #007700">(</span><span style="color: #9876AA">$ar1</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$ar2</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$ar1</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$ar2</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>      这个例子里，排序后，第一个数组会包含  0、      10、 100、 100。      第二个数组会包含 4、1、 2、 3。      第二个数组里的项目对应第一个数组后也进行了排序（100 和 100）。     </p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> array(4) {   [0]=&gt; int(0)   [1]=&gt; int(10)   [2]=&gt; int(100)   [3]=&gt; int(100) } array(4) {   [0]=&gt; int(4)   [1]=&gt; int(1)   [2]=&gt; int(2)   [3]=&gt; int(3) } </span></div>     </div>    </div>   </span>   <p class="para">    <div class="example" id="example-6046">     <p><strong>Example #2 排序多维数组</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$ar&nbsp;</span><span style="color: #007700">=&nbsp;array(<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;array(</span><span style="color: #DD0000">"10"</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">11</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">100</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">100</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"a"</span><span style="color: #007700">),<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;array(&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">1</span><span style="color: #007700">,&nbsp;&nbsp;</span><span style="color: #9876AA">2</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"2"</span><span style="color: #007700">,&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">3</span><span style="color: #007700">,&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">1</span><span style="color: #007700">)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br /></span><span style="color: #9876AA">array_multisort</span><span style="color: #007700">(</span><span style="color: #9876AA">$ar</span><span style="color: #007700">[</span><span style="color: #9876AA">0</span><span style="color: #007700">],&nbsp;</span><span style="color: #9876AA">SORT_ASC</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">SORT_STRING</span><span style="color: #007700">,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$ar</span><span style="color: #007700">[</span><span style="color: #9876AA">1</span><span style="color: #007700">],&nbsp;</span><span style="color: #9876AA">SORT_NUMERIC</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">SORT_DESC</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$ar</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>      本例中在排序后，第一个数组将变成      &quot;10&quot;，100，100，11，&quot;a&quot;（被当作字符串以升序排列）。第二个数组将包含      1, 3, &quot;2&quot;, 2, 1（被当作数字以降序排列）。     </p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> array(2) {   [0]=&gt; array(5) {     [0]=&gt; string(2) &quot;10&quot;     [1]=&gt; int(100)     [2]=&gt; int(100)     [3]=&gt; int(11)     [4]=&gt; string(1) &quot;a&quot;   }   [1]=&gt; array(5) {     [0]=&gt; int(1)     [1]=&gt; int(3)     [2]=&gt; string(1) &quot;2&quot;     [3]=&gt; int(2)     [4]=&gt; int(1)   } } </span></div>     </div>    </div>   </p>   <p class="para">    <div class="example" id="array_key_first.example.basic">     <p><strong>Example #3 对数据库结果进行排序</strong></p>     <div class="example-contents"><p>      本例中 <var class="varname"><var class="varname">data</var></var>      数组中的每个单元表示一个表中的一行。这是典型的数据库记录的数据集合。     </p></div>     <div class="example-contents"><p>      例子中的数据如下：     </p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> volume | edition -------+--------     67 |       2     86 |       1     85 |       6     98 |       2     86 |       6     67 |       7 </span></div>     </div>     <div class="example-contents"><p>      数据全都存放在名为 <var class="varname"><var class="varname">data</var></var>      的数组中。这通常是通过循环从数据库取得的结果，例如      <span class="function">{@link mysql_fetch_assoc()}</span>。     </p></div>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$data</span><span style="color: #007700">[]&nbsp;=&nbsp;array(</span><span style="color: #DD0000">'volume'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">67</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'edition'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">2</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$data</span><span style="color: #007700">[]&nbsp;=&nbsp;array(</span><span style="color: #DD0000">'volume'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">86</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'edition'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">1</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$data</span><span style="color: #007700">[]&nbsp;=&nbsp;array(</span><span style="color: #DD0000">'volume'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">85</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'edition'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">6</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$data</span><span style="color: #007700">[]&nbsp;=&nbsp;array(</span><span style="color: #DD0000">'volume'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">98</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'edition'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">2</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$data</span><span style="color: #007700">[]&nbsp;=&nbsp;array(</span><span style="color: #DD0000">'volume'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">86</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'edition'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">6</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$data</span><span style="color: #007700">[]&nbsp;=&nbsp;array(</span><span style="color: #DD0000">'volume'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">67</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'edition'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">7</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>      本例中将把 <var class="varname"><var class="varname">volume</var></var> 降序排列，把      <var class="varname"><var class="varname">edition</var></var> 升序排列。     </p></div>     <div class="example-contents"><p>      现在有了包含有行的数组，但是 <span class="function"><strong style="color:#CC7832">array_multisort()</strong></span>      需要一个包含列的数组，因此用以下代码来取得列，然后排序。     </p></div>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">//&nbsp;取得列的列表<br /></span><span style="color: #007700">foreach&nbsp;(</span><span style="color: #9876AA">$data&nbsp;</span><span style="color: #007700">as&nbsp;</span><span style="color: #9876AA">$key&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">$row</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$volume</span><span style="color: #007700">[</span><span style="color: #9876AA">$key</span><span style="color: #007700">]&nbsp;&nbsp;=&nbsp;</span><span style="color: #9876AA">$row</span><span style="color: #007700">[</span><span style="color: #DD0000">'volume'</span><span style="color: #007700">];<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$edition</span><span style="color: #007700">[</span><span style="color: #9876AA">$key</span><span style="color: #007700">]&nbsp;=&nbsp;</span><span style="color: #9876AA">$row</span><span style="color: #007700">[</span><span style="color: #DD0000">'edition'</span><span style="color: #007700">];<br />}<br /><br /></span><span style="color: #FF8000">//&nbsp;将数据根据&nbsp;volume&nbsp;降序排列，根据&nbsp;edition&nbsp;升序排列<br />//&nbsp;把&nbsp;$data&nbsp;作为最后一个参数，以通用键排序<br /></span><span style="color: #9876AA">array_multisort</span><span style="color: #007700">(</span><span style="color: #9876AA">$volume</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">SORT_DESC</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$edition</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">SORT_ASC</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$data</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>      数据集合现在排好序了，结果如下：     </p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> volume | edition -------+--------     98 |       2     86 |       1     86 |       6     85 |       6     67 |       2     67 |       7 </span></div>     </div>    </div>   </p>   <p class="para">    <div class="example" id="example-6048">     <p><strong>Example #4 不区分大小写字母排序</strong></p>     <div class="example-contents"><p>      <strong><span>SORT_STRING</span></strong> 和      <strong><span>SORT_REGULAR</span></strong>      都是区分大小写字母的，大写字母会排在小写字母之前。     </p></div>     <div class="example-contents"><p>      要进行不区分大小写的排序，就要按照原数组的小写字母拷贝来排序。     </p></div>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$array&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">'Alpha'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'atomic'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'Beta'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'bank'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$array_lowercase&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">array_map</span><span style="color: #007700">(</span><span style="color: #DD0000">'strtolower'</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$array</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">array_multisort</span><span style="color: #007700">(</span><span style="color: #9876AA">$array_lowercase</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">SORT_ASC</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">SORT_STRING</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$array</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$array</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Array (     [0] =&gt; Alpha     [1] =&gt; atomic     [2] =&gt; bank     [3] =&gt; Beta ) </span></div>     </div>    </div>   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-multisort-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link usort()} - 使用用户自定义的比较函数对数组中的值进行排序</span></li>     <li class="member"><a href="http://php.net/manual/zh/array.sorting.php" class="link">数组排序函数对比</a></li>    </ul>   </span>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.array.php">数组 函数</a></div></div>
 * @return bool true on success or false on failure.*/
function array_multisort (array &$arr, $arg = null, $arg = null, $_ = null) {}

/**
*<div id="function.array-push" class="refentry">  <div class="refnamediv">   <h1 class="refname">array_push</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">array_push</span> &mdash; <span class="dc-title">    将一个或多个单元压入数组的末尾（入栈）   </span></p>   </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-push-description">   <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">   <span class="type" style="color:#EAB766">int</span> <span class="methodname" style="color:#CC7832"><strong>array_push</strong></span>    ( <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">&$array</span></span>    , <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#2EACF9">$value1</span></span>   [, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#2EACF9">$...</span></span>  ] )</div>   <p class="para rdfs-comment">   <span class="function"><strong style="color:#CC7832">array_push()</strong></span> 将   <span class="parameter" style="color:#2EACF9">array</span> 当成一个栈，并将传入的变量压入   <span class="parameter" style="color:#2EACF9">array</span> 的末尾。<span class="parameter" style="color:#2EACF9">array</span>   的长度将根据入栈变量的数目增加。和如下效果相同：   <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$array</span><span style="color: #007700">[]&nbsp;=&nbsp;</span><span style="color: #9876AA">$var</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>      </div>       并对每个传入的值重复以上动作。     </p>     <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>:       <span class="simpara">       如果用 <span class="function"><strong style="color:#CC7832">array_push()</strong></span> 来给数组增加一个单元，还不如用       <em>$array[] = </em>，因为这样没有调用函数的额外负担。     </span>     </p></blockquote>     <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>:       <span class="simpara">       如果第一个参数不是数组，<span class="function"><strong style="color:#CC7832">array_push()</strong></span>       将发出一条警告。这和     <em>$var[]</em> 的行为不同，后者会新建一个数组。        </span>     </p></blockquote>    </div>     <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-push-parameters">     <h3 class="title">参数</h3>     <span>      <dl>                <dt> <span class="parameter" style="color:#2EACF9">array</span></dt>         <dd>          <p class="para">          输入的数组。         </p>        </dd>                       <dt> <span class="parameter" style="color:#2EACF9">value1</span></dt>         <dd>          <p class="para">          要压入 <span class="parameter" style="color:#2EACF9">array</span> 末尾的第一个值。         </p>        </dd>              </dl>      </span>    </div>     <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-push-returnvalues">     <h3 class="title">返回值</h3>     <p class="para">      返回处理之后数组的元素个数。     </p>    </div>     <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-push-examples">     <h3 class="title">范例</h3>     <span>      <div class="example" id="example-6052">       <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">array_push()</strong></span> 例子</strong></p>       <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$stack&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">"orange"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"banana"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">array_push</span><span style="color: #007700">(</span><span style="color: #9876AA">$stack</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"apple"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"raspberry"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$stack</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Array (     [0] =&gt; orange     [1] =&gt; banana     [2] =&gt; apple     [3] =&gt; raspberry ) </span></div>     </div>    </div>      </span>    </div>     <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-push-seealso">     <h3 class="title">参见</h3>     <span>      <ul class="simplelist">       <li class="member"><span class="function">{@link array_pop()} - 弹出数组最后一个单元（出栈）</span></li>       <li class="member"><span class="function">{@link array_shift()} - 将数组开头的单元移出数组</span></li>       <li class="member"><span class="function">{@link array_unshift()} - 在数组开头插入一个或多个单元</span></li>      </ul>     </span>    </div>  <div class="up"><a href="http://php.net/manual/zh/ref.array.php">数组 函数</a></div></div>
 * @return int the new number of elements in the array.*/
function array_push (array &$array, $var, $_ = null) {}

/**
*<div id="function.array-pop" class="refentry">    <div class="refnamediv">     <h1 class="refname">array_pop</h1>     <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">array_pop</span> &mdash; <span class="dc-title">弹出数组最后一个单元（出栈）</span></p>     </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-pop-description">   <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="methodname" style="color:#CC7832"><strong>array_pop</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">&$array</span></span>    )</div>      <p class="para rdfs-comment">      <span class="function"><strong style="color:#CC7832">array_pop()</strong></span> 弹出并返回      <span class="parameter" style="color:#2EACF9">array</span> 数组的最后一个单元，并将数组      <span class="parameter" style="color:#2EACF9">array</span> 的长度减一。     </p>     <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>: <span class="simpara">使用此函数后会重置（<span class="function">{@link reset()}</span>）<span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span> 指针。</span></p></blockquote>    </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-pop-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">array</span></dt>       <dd>        <p class="para">        需要弹出栈的数组。       </p>      </dd>          </dl>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-pop-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回 <span class="parameter" style="color:#2EACF9">array</span> 的最后一个值。如果 <span class="parameter" style="color:#2EACF9">array</span> 是空（如果不是一个数组），将会返回 <strong><span>NULL</span></strong> 。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-function.array-pop-errors">   <h3 class="title">错误／异常</h3>   <p class="para">    调用此函数去处理非数组的值，会产生 <a href="http://php.net/manual/zh/errorfunc.constants.php" class="link">    E_WARNING</a> 级别的错误。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-pop-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-6050">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">array_pop()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$stack&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">"orange"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"banana"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"apple"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"raspberry"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$fruit&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">array_pop</span><span style="color: #007700">(</span><span style="color: #9876AA">$stack</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$stack</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>      经过此操作后，<var class="varname"><var class="varname">$stack</var></var> 将只有 3 个单元：     </p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Array (     [0] =&gt; orange     [1] =&gt; banana     [2] =&gt; apple ) </span></div>     </div>     <div class="example-contents"><p>      并且 <em>rasberry</em> 将被赋给 <var class="varname"><var class="varname">$fruit</var></var>。     </p></div>    </div>   </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-pop-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link array_push()} - 将一个或多个单元压入数组的末尾（入栈）</span></li>     <li class="member"><span class="function">{@link array_shift()} - 将数组开头的单元移出数组</span></li>     <li class="member"><span class="function">{@link array_unshift()} - 在数组开头插入一个或多个单元</span></li>    </ul>   </span>  </div>    <div class="up"><a href="http://php.net/manual/zh/ref.array.php">数组 函数</a></div></div>
 * @return mixed the last value of array.*/
function array_pop (array &$array) {}

/**
*<div id="function.array-shift" class="refentry">    <div class="refnamediv">     <h1 class="refname">array_shift</h1>     <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">array_shift</span> &mdash; <span class="dc-title">      将数组开头的单元移出数组     </span></p>     </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-shift-description">   <h3 class="title">说明</h3>      <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">       <span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="methodname" style="color:#CC7832"><strong>array_shift</strong></span>        ( <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">&$array</span></span>       )</div>      <p class="para rdfs-comment">      <span class="function"><strong style="color:#CC7832">array_shift()</strong></span> 将      <span class="parameter" style="color:#2EACF9">array</span> 的第一个单元移出并作为结果返回，将      <span class="parameter" style="color:#2EACF9">array</span> 的长度减一并将所有其它单元向前移动一位。所有的数字键名将改为从零开始计数，文字键名将不变。     </p>     <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>: <span class="simpara">使用此函数后会重置（<span class="function">{@link reset()}</span>）<span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span> 指针。</span></p></blockquote>    </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-shift-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">array</span></dt>       <dd>        <p class="para">        输入的数组。       </p>      </dd>          </dl>    </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-shift-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回移出的值，如果 <span class="parameter" style="color:#2EACF9">array</span> 为 空或不是一个数组则返回 <strong><span>NULL</span></strong>。   </p>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-shift-examples">   <h3 class="title">范例</h3>   <span>     <div class="example" id="example-6060">      <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">array_shift()</strong></span> 例子</strong></p>      <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$stack&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">"orange"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"banana"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"apple"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"raspberry"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$fruit&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">array_shift</span><span style="color: #007700">(</span><span style="color: #9876AA">$stack</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$stack</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>      </div>       <div class="example-contents"><p>以上例程会输出：</p></div>      <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Array (     [0] =&gt; banana     [1] =&gt; apple     [2] =&gt; raspberry ) </span></div>      </div>      <div class="example-contents"><p>       并且 <em>orange</em> 被赋给了 <var class="varname"><var class="varname">$fruit</var></var>。      </p></div>     </div>   </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-shift-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link array_unshift()} - 在数组开头插入一个或多个单元</span></li>     <li class="member"><span class="function">{@link array_push()} - 将一个或多个单元压入数组的末尾（入栈）</span></li>     <li class="member"><span class="function">{@link array_pop()} - 弹出数组最后一个单元（出栈）</span></li>    </ul>   </span>  </div>    <div class="up"><a href="http://php.net/manual/zh/ref.array.php">数组 函数</a></div></div>
 * @return mixed the shifted value, or &null; if array is*/
function array_shift (array &$array) {}

/**
*<div id="function.array-unshift" class="refentry">    <div class="refnamediv">     <h1 class="refname">array_unshift</h1>     <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">array_unshift</span> &mdash; <span class="dc-title">      在数组开头插入一个或多个单元     </span></p>     </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-unshift-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">int</span> <span class="methodname" style="color:#CC7832"><strong>array_unshift</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">&$array</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#2EACF9">$...</span></span>   ] )</div>      <p class="para rdfs-comment">      <span class="function"><strong style="color:#CC7832">array_unshift()</strong></span> 将传入的单元插入到      <span class="parameter" style="color:#2EACF9">array</span> 数组的开头。注意单元是作为整体被插入的，因此传入单元将保持同样的顺序。所有的数值键名将修改为从零开始重新计数，所有的文字键名保持不变。     </p>    </div>      <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-unshift-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">array</span></dt>       <dd>        <p class="para">        输入的数组。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">...</span></dt>       <dd>        <p class="para">        插入的变量。       </p>      </dd>          </dl>    </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-unshift-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">     返回 <span class="parameter" style="color:#2EACF9">array</span> 数组新的单元数目。   </p>  </div>       <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.array-unshift-changelog">   <h3 class="title">更新日志</h3>   <span>    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>7.3.0</td>        <td>         现在可以只用一个参数来调用，之前至少需要两个参数。        </td>       </tr>       </tbody>         </table>    </span>  </div>       <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-unshift-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-6074">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">array_unshift()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$queue&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">"orange"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"banana"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">array_unshift</span><span style="color: #007700">(</span><span style="color: #9876AA">$queue</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"apple"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"raspberry"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$queue</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Array (     [0] =&gt; apple     [1] =&gt; raspberry     [2] =&gt; orange     [3] =&gt; banana ) </span></div>     </div>    </div>   </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-unshift-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link array_shift()} - 将数组开头的单元移出数组</span></li>     <li class="member"><span class="function">{@link array_push()} - 将一个或多个单元压入数组的末尾（入栈）</span></li>     <li class="member"><span class="function">{@link array_pop()} - 弹出数组最后一个单元（出栈）</span></li>    </ul>   </span>  </div>    <div class="up"><a href="http://php.net/manual/zh/ref.array.php">数组 函数</a></div></div>
 * @return int the new number of elements in the array.*/
function array_unshift (array &$array, $var, $_ = null) {}

/**
*<div id="function.array-splice" class="refentry">    <div class="refnamediv">     <h1 class="refname">array_splice</h1>     <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">array_splice</span> &mdash; <span class="dc-title">      去掉数组中的某一部分并用其它值取代     </span></p>     </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-splice-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">array</span> <span class="methodname" style="color:#CC7832"><strong>array_splice</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">&$input</span></span>    , <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#2EACF9">$offset</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#2EACF9">$length</span><span class="initializer"> = count($input)</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#2EACF9">$replacement</span><span class="initializer"> = array()</span></span>   ]] )</div>      <p class="para rdfs-comment">      把 <span class="parameter" style="color:#2EACF9">input</span> 数组中由      <span class="parameter" style="color:#2EACF9">offset</span> 和 <span class="parameter" style="color:#2EACF9">length</span>      指定的单元去掉，如果提供了 <span class="parameter" style="color:#2EACF9">replacement</span> 参数，则用其中的单元取代。   </p>   <p class="para">      注意      <span class="parameter" style="color:#2EACF9">input</span> 中的数字键名不被保留。     </p>     <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>:     <span class="simpara">     如果 <span class="parameter" style="color:#2EACF9">replacement</span> 不是数组，会被     <a href="http://php.net/manual/zh/language.types.array.php#language.types.array.casting" class="link">类型转换</a>    成数组 (例如： <span>(array) $replacement</span>)。     当传入的 <span class="parameter" style="color:#2EACF9">replacement</span> 是个对象或者 <strong><span>NULL</span></strong>，会导致未知的行为出现。    </span>   </p></blockquote>   </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-splice-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">input</span></dt>       <dd>        <p class="para">        输入的数组。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">offset</span></dt>       <dd>        <p class="para">        如果 <span class="parameter" style="color:#2EACF9">offset</span> 为正，则从 <span class="parameter" style="color:#2EACF9">input</span>      数组中该值指定的偏移量开始移除。如果 <span class="parameter" style="color:#2EACF9">offset</span>      为负，则从 <span class="parameter" style="color:#2EACF9">input</span> 末尾倒数该值指定的偏移量开始移除。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">length</span></dt>       <dd>        <p class="para">        如果省略 <span class="parameter" style="color:#2EACF9">length</span>，则移除数组中从 <span class="parameter" style="color:#2EACF9">offset</span>      到结尾的所有部分。如果指定了 <span class="parameter" style="color:#2EACF9">length</span>      并且为正值，则移除这么多单元。如果指定了 <span class="parameter" style="color:#2EACF9">length</span>      并且为负值，则移除从 <span class="parameter" style="color:#2EACF9">offset</span> 到数组末尾倒数      <span class="parameter" style="color:#2EACF9">length</span> 为止中间所有的单元。       如果设置了 <span class="parameter" style="color:#2EACF9">length</span> 为零，不会移除单元。        小窍门：当给出了      <span class="parameter" style="color:#2EACF9">replacement</span> 时要移除从 <span class="parameter" style="color:#2EACF9">offset</span>      到数组末尾所有单元时，用 <em>count($input)</em> 作为 <span class="parameter" style="color:#2EACF9">length</span>。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">replacement</span></dt>       <dd>        <p class="para">        如果给出了 <span class="parameter" style="color:#2EACF9">replacement</span> 数组，则被移除的单元被此数组中的单元替代。       </p>       <p class="para">        如果         <span class="parameter" style="color:#2EACF9">offset</span> 和 <span class="parameter" style="color:#2EACF9">length</span>         的组合结果是不会移除任何值，则 <span class="parameter" style="color:#2EACF9">replacement</span>         数组中的单元将被插入到 <span class="parameter" style="color:#2EACF9">offset</span>         指定的位置。 注意替换数组中的键名不保留。       </p>       <p class="para">        如果用来替换 <span class="parameter" style="color:#2EACF9">replacement</span> 只有一个单元，那么不需要给它加上         <em>array()</em>，除非该单元本身就是一个数组、一个对象或者 <strong><span>NULL</span></strong>。       </p>      </dd>          </dl>    </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-splice-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">     返回一个包含有被移除单元的数组。   </p>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-splice-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-6062">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">array_splice()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$input&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">"red"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"green"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"blue"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"yellow"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">array_splice</span><span style="color: #007700">(</span><span style="color: #9876AA">$input</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">2</span><span style="color: #007700">);<br /></span><span style="color: #FF8000">//&nbsp;$input&nbsp;is&nbsp;now&nbsp;array("red",&nbsp;"green")<br /><br /></span><span style="color: #9876AA">$input&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">"red"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"green"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"blue"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"yellow"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">array_splice</span><span style="color: #007700">(</span><span style="color: #9876AA">$input</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">1</span><span style="color: #007700">,&nbsp;-</span><span style="color: #9876AA">1</span><span style="color: #007700">);<br /></span><span style="color: #FF8000">//&nbsp;$input&nbsp;is&nbsp;now&nbsp;array("red",&nbsp;"yellow")<br /><br /></span><span style="color: #9876AA">$input&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">"red"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"green"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"blue"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"yellow"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">array_splice</span><span style="color: #007700">(</span><span style="color: #9876AA">$input</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">1</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">count</span><span style="color: #007700">(</span><span style="color: #9876AA">$input</span><span style="color: #007700">),&nbsp;</span><span style="color: #DD0000">"orange"</span><span style="color: #007700">);<br /></span><span style="color: #FF8000">//&nbsp;$input&nbsp;is&nbsp;now&nbsp;array("red",&nbsp;"orange")<br /><br /></span><span style="color: #9876AA">$input&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">"red"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"green"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"blue"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"yellow"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">array_splice</span><span style="color: #007700">(</span><span style="color: #9876AA">$input</span><span style="color: #007700">,&nbsp;-</span><span style="color: #9876AA">1</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">1</span><span style="color: #007700">,&nbsp;array(</span><span style="color: #DD0000">"black"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"maroon"</span><span style="color: #007700">));<br /></span><span style="color: #FF8000">//&nbsp;$input&nbsp;is&nbsp;now&nbsp;array("red",&nbsp;"green",<br />//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"blue",&nbsp;"black",&nbsp;"maroon")<br /><br /></span><span style="color: #9876AA">$input&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">"red"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"green"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"blue"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"yellow"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">array_splice</span><span style="color: #007700">(</span><span style="color: #9876AA">$input</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">3</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">0</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"purple"</span><span style="color: #007700">);<br /></span><span style="color: #FF8000">//&nbsp;$input&nbsp;is&nbsp;now&nbsp;array("red",&nbsp;"green",<br />//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"blue",&nbsp;"purple",&nbsp;"yellow");<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>     </div>   </span>   <p class="para">    <div class="example" id="example-6063">     <p><strong>Example #2 <span class="function"><strong style="color:#CC7832">array_splice()</strong></span> 例子</strong></p>     <div class="example-contents"><p>      以下表达式以同样方式修改了 <var class="varname"><var class="varname">$input</var></var>：     </p></div>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /><br /></span><span style="color: #FF8000">//&nbsp;添加两个新元素到&nbsp;$input<br /></span><span style="color: #9876AA">array_push</span><span style="color: #007700">(</span><span style="color: #9876AA">$input</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$x</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$y</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">array_splice</span><span style="color: #007700">(</span><span style="color: #9876AA">$input</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">count</span><span style="color: #007700">(</span><span style="color: #9876AA">$input</span><span style="color: #007700">),&nbsp;</span><span style="color: #9876AA">0</span><span style="color: #007700">,&nbsp;array(</span><span style="color: #9876AA">$x</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$y</span><span style="color: #007700">));<br /><br /></span><span style="color: #FF8000">//&nbsp;移除&nbsp;$input&nbsp;中的最后一个元素<br /></span><span style="color: #9876AA">array_pop</span><span style="color: #007700">(</span><span style="color: #9876AA">$input</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">array_splice</span><span style="color: #007700">(</span><span style="color: #9876AA">$input</span><span style="color: #007700">,&nbsp;-</span><span style="color: #9876AA">1</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">//&nbsp;移除&nbsp;&nbsp;$input&nbsp;中第一个元素<br /></span><span style="color: #9876AA">array_shift</span><span style="color: #007700">(</span><span style="color: #9876AA">$input</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">array_splice</span><span style="color: #007700">(</span><span style="color: #9876AA">$input</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">0</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">1</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">//&nbsp;在&nbsp;$input&nbsp;的开头插入一个元素<br /></span><span style="color: #9876AA">array_unshift</span><span style="color: #007700">(</span><span style="color: #9876AA">$input</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$x</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$y</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">array_splice</span><span style="color: #007700">(</span><span style="color: #9876AA">$input</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">0</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">0</span><span style="color: #007700">,&nbsp;array(</span><span style="color: #9876AA">$x</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$y</span><span style="color: #007700">));<br /><br /></span><span style="color: #FF8000">//&nbsp;在&nbsp;$input&nbsp;&nbsp;的索引&nbsp;&nbsp;$x&nbsp;处替换值<br /></span><span style="color: #9876AA">$input</span><span style="color: #007700">[</span><span style="color: #9876AA">$x</span><span style="color: #007700">]&nbsp;=&nbsp;</span><span style="color: #9876AA">$y</span><span style="color: #007700">;&nbsp;</span><span style="color: #FF8000">//&nbsp;对于键名和偏移量等值的数组<br /></span><span style="color: #9876AA">array_splice</span><span style="color: #007700">(</span><span style="color: #9876AA">$input</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$x</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">1</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$y</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>     </div>   </p>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-splice-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link array_slice()} - 从数组中取出一段</span></li>     <li class="member"><span class="function">{@link unset()} - 释放给定的变量</span></li>     <li class="member"><span class="function">{@link array_merge()} - 合并一个或多个数组</span></li>    </ul>   </span>  </div>      <div class="up"><a href="http://php.net/manual/zh/ref.array.php">数组 函数</a></div></div>
 * @return array the array consisting of the extracted elements.*/
function array_splice (array &$input, $offset, $length = null, $replacement = null) {}

/**
*<div id="function.array-slice" class="refentry">    <div class="refnamediv">     <h1 class="refname">array_slice</h1>     <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">array_slice</span> &mdash; <span class="dc-title">从数组中取出一段</span></p>     </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-slice-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">array</span> <span class="methodname" style="color:#CC7832"><strong>array_slice</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">$array</span></span>    , <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#2EACF9">$offset</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#2EACF9">$length</span><span class="initializer"> = <strong><span>NULL</span></strong></span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#2EACF9">$preserve_keys</span><span class="initializer"> = false</span></span>   ]] )</div>      <p class="para rdfs-comment">      <span class="function"><strong style="color:#CC7832">array_slice()</strong></span> 返回根据 <span class="parameter" style="color:#2EACF9">offset</span> 和      <span class="parameter" style="color:#2EACF9">length</span> 参数所指定的 <span class="parameter" style="color:#2EACF9">array</span>      数组中的一段序列。     </p>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-slice-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">array</span></dt>       <dd>        <p class="para">        输入的数组。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">offset</span></dt>       <dd>        <p class="para">         如果 <span class="parameter" style="color:#2EACF9">offset</span> 非负，则序列将从 <span class="parameter" style="color:#2EACF9">array</span>      中的此偏移量开始。如果 <span class="parameter" style="color:#2EACF9">offset</span> 为负，则序列将从      <span class="parameter" style="color:#2EACF9">array</span> 中距离末端这么远的地方开始。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">length</span></dt>       <dd>        <p class="para">        如果给出了 <span class="parameter" style="color:#2EACF9">length</span> 并且为正，则序列中将具有这么多的单元。如果给出了      <span class="parameter" style="color:#2EACF9">length</span> 并且为负，则序列将终止在距离数组末端这么远的地方。如果省略，则序列将从      <span class="parameter" style="color:#2EACF9">offset</span> 开始一直到 <span class="parameter" style="color:#2EACF9">array</span> 的末端。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">preserve_keys</span></dt>       <dd>        <p class="para">         注意 <span class="function"><strong style="color:#CC7832">array_slice()</strong></span> 默认会重新排序并重置数组的数字索引。你可以通过将      <span class="parameter" style="color:#2EACF9">preserve_keys</span> 设为 <strong><span>TRUE</span></strong> 来改变此行为。       </p>      </dd>          </dl>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-slice-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回其中一段。 如果 offset 参数大于 array 尺寸，就会返回空的 array。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.array-slice-changelog">   <h3 class="title">更新日志</h3>   <span>    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>5.2.4</td>        <td>         <span class="parameter" style="color:#2EACF9">length</span> 参数默认值改成 <em>NULL</em>。         现在 <span class="parameter" style="color:#2EACF9">length</span> 为 <em>NULL</em> 时，意思是说使用 <span class="parameter" style="color:#2EACF9">array</span> 的长度。         之前的版本里， <em>NULL</em> 的 <span class="parameter" style="color:#2EACF9">length</span>          的意思是长度为零（啥也不返回）。        </td>       </tr>        <tr>        <td>5.0.2</td>        <td>         增加了可选参数 <span class="parameter" style="color:#2EACF9">preserve_keys</span> 。        </td>       </tr>       </tbody>         </table>    </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-slice-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-6061">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">array_slice()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$input&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">"a"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"b"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"c"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"d"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"e"</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$output&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">array_slice</span><span style="color: #007700">(</span><span style="color: #9876AA">$input</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">2</span><span style="color: #007700">);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;returns&nbsp;"c",&nbsp;"d",&nbsp;and&nbsp;"e"<br /></span><span style="color: #9876AA">$output&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">array_slice</span><span style="color: #007700">(</span><span style="color: #9876AA">$input</span><span style="color: #007700">,&nbsp;-</span><span style="color: #9876AA">2</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">1</span><span style="color: #007700">);&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;returns&nbsp;"d"<br /></span><span style="color: #9876AA">$output&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">array_slice</span><span style="color: #007700">(</span><span style="color: #9876AA">$input</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">0</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">3</span><span style="color: #007700">);&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;returns&nbsp;"a",&nbsp;"b",&nbsp;and&nbsp;"c"<br /><br />//&nbsp;note&nbsp;the&nbsp;differences&nbsp;in&nbsp;the&nbsp;array&nbsp;keys<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">array_slice</span><span style="color: #007700">(</span><span style="color: #9876AA">$input</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">2</span><span style="color: #007700">,&nbsp;-</span><span style="color: #9876AA">1</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">array_slice</span><span style="color: #007700">(</span><span style="color: #9876AA">$input</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">2</span><span style="color: #007700">,&nbsp;-</span><span style="color: #9876AA">1</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">true</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Array (     [0] =&gt; c     [1] =&gt; d ) Array (     [2] =&gt; c     [3] =&gt; d ) </span></div>     </div>    </div>   </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-slice-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link array_splice()} - 去掉数组中的某一部分并用其它值取代</span></li>     <li class="member"><span class="function">{@link unset()} - 释放给定的变量</span></li>     <li class="member"><span class="function">{@link array_chunk()} - 将一个数组分割成多个</span></li>    </ul>   </span>  </div>    <div class="up"><a href="http://php.net/manual/zh/ref.array.php">数组 函数</a></div></div>
 * @return array the slice.*/
function array_slice (array $array, $offset, $length = null, $preserve_keys = false) {}

/**
*<div id="function.array-merge" class="refentry">    <div class="refnamediv">     <h1 class="refname">array_merge</h1>     <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">array_merge</span> &mdash; <span class="dc-title">合并一个或多个数组</span></p>     </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-merge-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">array</span> <span class="methodname" style="color:#CC7832"><strong>array_merge</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">$array1</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">$...</span></span>   ] )</div>      <p class="para rdfs-comment">      <span class="function"><strong style="color:#CC7832">array_merge()</strong></span> 将一个或多个数组的单元合并起来，一个数组中的值附加在前一个数组的后面。返回作为结果的数组。     </p>     <p class="para">      如果输入的数组中有相同的字符串键名，则该键名后面的值将覆盖前一个值。然而，如果数组包含数字键名，后面的值将<em class="emphasis">不会</em>覆盖原来的值，而是附加到后面。     </p>     <p class="para">      如果只给了一个数组并且该数组是数字索引的，则键名会以连续方式重新索引。     </p>    </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-merge-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">array1</span></dt>       <dd>        <p class="para">        要合并的第一个数组。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">...</span></dt>       <dd>        <p class="para">        要合并的数组列表。       </p>      </dd>          </dl>    </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-merge-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回结果数组。   </p>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-merge-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-6042">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">array_merge()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$array1&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">"color"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"red"</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">2</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">4</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$array2&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">"a"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"b"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"color"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"green"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"shape"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"trapezoid"</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">4</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$result&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">array_merge</span><span style="color: #007700">(</span><span style="color: #9876AA">$array1</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$array2</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$result</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Array (     [color] =&gt; green     [0] =&gt; 2     [1] =&gt; 4     [2] =&gt; a     [3] =&gt; b     [shape] =&gt; trapezoid     [4] =&gt; 4 ) </span></div>     </div>    </div>   </span>   <p class="para">    <div class="example" id="example-6043">     <p><strong>Example #2 Simple <span class="function"><strong style="color:#CC7832">array_merge()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$array1&nbsp;</span><span style="color: #007700">=&nbsp;array();<br /></span><span style="color: #9876AA">$array2&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #9876AA">1&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"data"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$result&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">array_merge</span><span style="color: #007700">(</span><span style="color: #9876AA">$array1</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$array2</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>      别忘了数字键名将会被重新编号！     </p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Array (     [0] =&gt; data ) </span></div>     </div>     <div class="example-contents"><p>      如果你想完全保留原有数组并只想新的数组附加到后面，用 <em>+</em> 运算符：     </p></div>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$array1&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #9876AA">0&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">'zero_a'</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">2&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">'two_a'</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">3&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">'three_a'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$array2&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #9876AA">1&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">'one_b'</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">3&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">'three_b'</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">4&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">'four_b'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$result&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">$array1&nbsp;</span><span style="color: #007700">+&nbsp;</span><span style="color: #9876AA">$array2</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$result</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>      第一个数组的键名将会被保留。在两个数组中存在相同的键名时，第一个数组中的同键名的元素将会被保留，第二个数组中的元素将会被忽略     </p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> array(5) {   [0]=&gt;   string(6) &quot;zero_a&quot;   [2]=&gt;   string(5) &quot;two_a&quot;   [3]=&gt;   string(7) &quot;three_a&quot;   [1]=&gt;   string(5) &quot;one_b&quot;   [4]=&gt;   string(6) &quot;four_b&quot; } </span></div>     </div>    </div>   </p>      <p class="para">    <div class="example" id="example-6044">     <p><strong>Example #3 <span class="function"><strong style="color:#CC7832">array_merge()</strong></span> 合并非数组的类型</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$beginning&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'foo'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$end&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #9876AA">1&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">'bar'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$result&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">array_merge</span><span style="color: #007700">((array)</span><span style="color: #9876AA">$beginning</span><span style="color: #007700">,&nbsp;(array)</span><span style="color: #9876AA">$end</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$result</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;">     <div class="cdata"><span>     Array     (         [0] =&gt; foo         [1] =&gt; bar     ) </span></div>     </div>    </div>   </p>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-merge-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link array_merge_recursive()} - 递归地合并一个或多个数组</span></li>     <li class="member"><span class="function">{@link array_replace()} - 使用传递的数组替换第一个数组的元素</span></li>     <li class="member"><span class="function">{@link array_combine()} - 创建一个数组，用一个数组的值作为其键名，另一个数组的值作为其值</span></li>     <li class="member"><a href="http://php.net/manual/zh/language.operators.array.php" class="link">array operators</a></li>    </ul>   </span>  </div>    <div class="up"><a href="http://php.net/manual/zh/ref.array.php">数组 函数</a></div></div>
 * @return array the resulting array.*/
function array_merge (array $array1, array $array2 = null, array $_ = null) {}

?>
