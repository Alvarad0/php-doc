<?php

// Start of Core v.5.3.6-13ubuntu3.2

/**
*<div id="function.zend-version" class="refentry">  <div class="refnamediv">   <h1 class="refname">zend_version</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">zend_version</span> &mdash; <span class="dc-title">获取当前 Zend 引擎的版本</span></p>   </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.zend-version-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">string</span> <span class="methodname" style="color:#CC7832"><strong>zend_version</strong></span>     ( <span class="methodparam">void</span>    )</div>    <p class="para rdfs-comment">        获取当前运行的 Zend 引擎的版本字符串。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.zend-version-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    获取 Zend 引擎的版本数字的字符串。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.zend-version-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-538">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">zend_version()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #DD0000">"Zend&nbsp;engine&nbsp;version:&nbsp;"&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #9876AA">zend_version</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程的输出类似于：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Zend engine version: 2.2.0 </span></div>     </div>    </div>   </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.zend-version-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link phpinfo()} - 输出关于 PHP 配置的信息</span></li>     <li class="member"><span class="function">{@link phpcredits()} - 打印 PHP 贡献者名单</span></li>     <li class="member"><span class="function">{@link php_logo_guid()} - 获取 logo 的 guid</span></li>     <li class="member"><span class="function">{@link phpversion()} - 获取当前的PHP版本</span></li>    </ul>   </span>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.info.php">PHP 选项/信息 函数</a></div></div>
 * @return string the Zend Engine version number, as a string.*/
function zend_version () {}

/**
*<div id="function.func-num-args" class="refentry">  <div class="refnamediv">   <h1 class="refname">func_num_args</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">func_num_args</span> &mdash; <span class="dc-title">Returns the number of arguments passed to the function</span></p>   </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.func-num-args-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">int</span> <span class="methodname" style="color:#CC7832"><strong>func_num_args</strong></span>     ( <span class="methodparam">void</span>    )</div>    <p class="para rdfs-comment">    Gets the number of arguments passed to the function.   </p>   <p class="para">    This function may be used in conjunction with     <span class="function">{@link func_get_arg()}</span> and <span class="function">{@link func_get_args()}</span>    to allow user-defined functions to accept variable-length argument lists.   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.func-num-args-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    Returns the number of arguments passed into the current user-defined    function.   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.func-num-args-changelog">   <h3 class="title">更新日志</h3>   <span>    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>5.3.0</td>        <td>         This function can now be used in parameter lists.        </td>       </tr>        <tr>        <td>5.3.0</td>        <td>         If this function is called from the outermost scope of a file         which has been included by calling <span class="function">{@link include}</span>         or <span class="function">{@link require}</span> from within a function in the         calling file, it now generates a warning and returns -1.        </td>       </tr>       </tbody>         </table>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-function.func-num-args-errors">   <h3 class="title">错误／异常</h3>   <p class="para">    Generates a warning if called from outside of a user-defined function.   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.func-num-args-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-6199">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">func_num_args()</strong></span> example</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function&nbsp;</span><span style="color: #9876AA">foo</span><span style="color: #007700">()<br />{<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$numargs&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">func_num_args</span><span style="color: #007700">();<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"Number&nbsp;of&nbsp;arguments:&nbsp;</span><span style="color: #9876AA">$numargs</span><span style="color: #DD0000">\n"</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">foo</span><span style="color: #007700">(</span><span style="color: #9876AA">1</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">2</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">3</span><span style="color: #007700">);&nbsp;&nbsp;&nbsp;<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Number of arguments: 3 </span></div>     </div>    </div>   </span>   <p class="para">    <div class="example" id="example-6200">     <p><strong>Example #2 <span class="function"><strong style="color:#CC7832">func_num_args()</strong></span> example before and     after PHP 5.3</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> test.php<br /><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function&nbsp;</span><span style="color: #9876AA">foo</span><span style="color: #007700">()&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;include&nbsp;</span><span style="color: #DD0000">'./fna.php'</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">foo</span><span style="color: #007700">(</span><span style="color: #DD0000">'First&nbsp;arg'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'Second&nbsp;arg'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;<br /></span><br />fna.php<br /><span style="color: #9876AA">&lt;?php<br /><br />$num_args&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">func_num_args</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">var_export</span><span style="color: #007700">(</span><span style="color: #9876AA">$num_args</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>      Output previous to PHP 5.3:     </p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> 2 </span></div>     </div>     <div class="example-contents"><p>      Output in PHP 5.3 and later will be something similar to:     </p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Warning: func_num_args():  Called from the global scope - no function context in /home/torben/Desktop/code/ml/fna.php on line 3 -1 </span></div>     </div>    </div>   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.func-num-args-notes">   <h3 class="title">注释</h3>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>: <p class="para">因为函数依赖于当前作用域以确定参数的细节，所以在 5.3.0 以前的版本中不能用作函数的参数。如必须传递此值时，可将结果赋与一个变量，然后用此变量进行传递。</p></p></blockquote>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.func-num-args-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link func_get_arg()} - 返回参数列表的某一项</span></li>     <li class="member"><span class="function">{@link func_get_args()} - 返回一个包含函数参数列表的数组</span></li>     <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::getNumberOfParameters()} - 获取参数数目</span></li>    </ul>   </span>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.funchand.php">函数处理 函数</a></div></div>
 * @return int the number of arguments passed into the current user-defined*/
function func_num_args () {}

/**
*<div id="function.func-get-arg" class="refentry">  <div class="refnamediv">   <h1 class="refname">func_get_arg</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">func_get_arg</span> &mdash; <span class="dc-title">返回参数列表的某一项</span></p>   </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.func-get-arg-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="methodname" style="color:#CC7832"><strong>func_get_arg</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#2EACF9">$arg_num</span></span>    )</div>    <p class="para rdfs-comment">    从用户自定义函数的参数列表中获取某个指定的参数。   </p>   <p class="para">    该函数可以配合    <span class="function">{@link func_get_args()}</span> 和 <span class="function">{@link func_num_args()}</span>    一起使用，从而使得用户自定义函数可以接受自定义个数的参数列表。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.func-get-arg-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">arg_num</span></dt>       <dd>        <p class="para">        参数的偏移量。函数的参数是从0开始计数的。       </p>      </dd>          </dl>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.func-get-arg-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回指定的参数，错误则返回 <strong><span>FALSE</span></strong> 。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.func-get-arg-changelog">   <h3 class="title">更新日志</h3>   <span>    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>5.3.0</td>        <td>         该函数可以在参数列表中使用。        </td>       </tr>        <tr>        <td>5.3.0</td>        <td>         If this function is called from the outermost scope of a file         which has been included by calling <span class="function">{@link include}</span>         or <span class="function">{@link require}</span> from within a function in the         calling file, it now generates a warning and returns <strong><span>FALSE</span></strong>.            （不知道如何翻译跟好，直接参考例2即可明白）        </td>       </tr>       </tbody>         </table>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-function.func-get-arg-errors">   <h3 class="title">错误／异常</h3>   <p class="para">    当在自定义函数的外面调用的该函数的时候会发出一个警告，    或者是当 <span class="parameter" style="color:#2EACF9">arg_num</span> 比实际传入的参数的数目大的时候也会发出一个警告。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.func-get-arg-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-6193">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">func_get_arg()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function&nbsp;</span><span style="color: #9876AA">foo</span><span style="color: #007700">()<br />{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$numargs&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">func_num_args</span><span style="color: #007700">();<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"Number&nbsp;of&nbsp;arguments:&nbsp;</span><span style="color: #9876AA">$numargs</span><span style="color: #DD0000">&lt;br&nbsp;/&gt;\n"</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(</span><span style="color: #9876AA">$numargs&nbsp;</span><span style="color: #007700">&gt;=&nbsp;</span><span style="color: #9876AA">2</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"Second&nbsp;argument&nbsp;is:&nbsp;"&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #9876AA">func_get_arg</span><span style="color: #007700">(</span><span style="color: #9876AA">1</span><span style="color: #007700">)&nbsp;.&nbsp;</span><span style="color: #DD0000">"&lt;br&nbsp;/&gt;\n"</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />}<br /><br /></span><span style="color: #9876AA">foo&nbsp;</span><span style="color: #007700">(</span><span style="color: #9876AA">1</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">2</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">3</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>     </div>   </span>   <p class="para">    <div class="example" id="example-6194">     <p><strong>Example #2 <span class="function"><strong style="color:#CC7832">func_get_arg()</strong></span> PHP 5.3 前后对比的例子</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> test.php<br /><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function&nbsp;</span><span style="color: #9876AA">foo</span><span style="color: #007700">()&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;include&nbsp;</span><span style="color: #DD0000">'./fga.inc'</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">foo</span><span style="color: #007700">(</span><span style="color: #DD0000">'First&nbsp;arg'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'Second&nbsp;arg'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;<br /></span><br />fga.inc<br /><span style="color: #9876AA">&lt;?php<br /><br />$arg&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">func_get_arg</span><span style="color: #007700">(</span><span style="color: #9876AA">1</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_export</span><span style="color: #007700">(</span><span style="color: #9876AA">$arg</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>      PHP 5.3 版本之前的输出：     </p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> &#039;Second arg&#039; </span></div>     </div>     <div class="example-contents"><p>      PHP 5.3 和之后的版本的输出:     </p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Warning: func_get_arg():  Called from the global scope - no function context in /home/torben/Desktop/code/ml/fga.inc on line 3 false </span></div>     </div>    </div>   </p>    <p class="para">    <div class="example" id="example-6195">     <p><strong>Example #3 <span class="function"><strong style="color:#CC7832">func_get_arg()</strong></span> example of byref and byval arguments</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function&nbsp;</span><span style="color: #9876AA">byVal</span><span style="color: #007700">(</span><span style="color: #9876AA">$arg</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">'As&nbsp;passed&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;'</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">var_export</span><span style="color: #007700">(</span><span style="color: #9876AA">func_get_arg</span><span style="color: #007700">(</span><span style="color: #9876AA">0</span><span style="color: #007700">)),&nbsp;</span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$arg&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'baz'</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">'After&nbsp;change&nbsp;&nbsp;:&nbsp;'</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">var_export</span><span style="color: #007700">(</span><span style="color: #9876AA">func_get_arg</span><span style="color: #007700">(</span><span style="color: #9876AA">0</span><span style="color: #007700">)),&nbsp;</span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />}<br /><br />function&nbsp;</span><span style="color: #9876AA">byRef</span><span style="color: #007700">(&amp;</span><span style="color: #9876AA">$arg</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">'As&nbsp;passed&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;'</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">var_export</span><span style="color: #007700">(</span><span style="color: #9876AA">func_get_arg</span><span style="color: #007700">(</span><span style="color: #9876AA">0</span><span style="color: #007700">)),&nbsp;</span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$arg&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'baz'</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">'After&nbsp;change&nbsp;&nbsp;:&nbsp;'</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">var_export</span><span style="color: #007700">(</span><span style="color: #9876AA">func_get_arg</span><span style="color: #007700">(</span><span style="color: #9876AA">0</span><span style="color: #007700">)),&nbsp;</span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">$arg&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'bar'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">byVal</span><span style="color: #007700">(</span><span style="color: #9876AA">$arg</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">byRef</span><span style="color: #007700">(</span><span style="color: #9876AA">$arg</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>       <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"><br /> As passed     : &#039;bar&#039;<br /> After change  : &#039;bar&#039;<br /> As passed     : &#039;bar&#039;<br /> After change  : &#039;baz&#039;<br />     </div>    </div>   </p>   </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.func-get-arg-notes">   <h3 class="title">注释</h3>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>: <p class="para">因为函数依赖于当前作用域以确定参数的细节，所以在 5.3.0 以前的版本中不能用作函数的参数。如必须传递此值时，可将结果赋与一个变量，然后用此变量进行传递。</p></p></blockquote>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>: <p class="para">如果参数以引用方式传递，函数对该参数的任何改变将在函数返回后保留。</p></p></blockquote>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>:     <span class="simpara">     This function returns a copy of the passed arguments only, and does not     account for default (non-passed) arguments.    </span>   </p></blockquote>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.func-get-arg-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link func_get_args()} - 返回一个包含函数参数列表的数组</span></li>     <li class="member"><span class="function">{@link func_num_args()} - Returns the number of arguments passed to the function</span></li>    </ul>   </span>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.funchand.php">函数处理 函数</a></div></div>
 * @return mixed the specified argument, or false on error.*/
function func_get_arg ($arg_num) {}

/**
*<div id="function.func-get-args" class="refentry">  <div class="refnamediv">   <h1 class="refname">func_get_args</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">func_get_args</span> &mdash; <span class="dc-title">返回一个包含函数参数列表的数组</span></p>   </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.func-get-args-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">array</span> <span class="methodname" style="color:#CC7832"><strong>func_get_args</strong></span>     ( <span class="methodparam">void</span>    )</div>    <p class="para rdfs-comment">    获取函数参数列表的数组。   </p>   <p class="para">    该函数可以配合    <span class="function">{@link func_get_arg()}</span> 和 <span class="function">{@link func_num_args()}</span>    一起使用，从而使得用户自定义函数可以接受自定义个数的参数列表。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.func-get-args-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回一个数组，其中每个元素都是目前用户自定义函数的参数列表的相应元素的副本。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.func-get-args-changelog">   <h3 class="title">更新日志</h3>   <span>    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>5.3.0</td>        <td>          该函数可以在参数列表中使用。        </td>       </tr>        <tr>        <td>5.3.0</td>        <td>         If this function is called from the outermost scope of a file         which has been included by calling <span class="function">{@link include}</span>         or <span class="function">{@link require}</span> from within a function in the         calling file, it now generates a warning and returns <strong><span>FALSE</span></strong>.            （不知道如何翻译跟好，直接参考例2即可明白）        </td>       </tr>       </tbody>         </table>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-function.func-get-args-errors">   <h3 class="title">错误／异常</h3>   <p class="para">    在用户自定义函数外调用则会出现错误警告。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.func-get-args-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-6196">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">func_get_args()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function&nbsp;</span><span style="color: #9876AA">foo</span><span style="color: #007700">()<br />{<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$numargs&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">func_num_args</span><span style="color: #007700">();<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"Number&nbsp;of&nbsp;arguments:&nbsp;</span><span style="color: #9876AA">$numargs</span><span style="color: #DD0000">&lt;br&nbsp;/&gt;\n"</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(</span><span style="color: #9876AA">$numargs&nbsp;</span><span style="color: #007700">&gt;=&nbsp;</span><span style="color: #9876AA">2</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"Second&nbsp;argument&nbsp;is:&nbsp;"&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #9876AA">func_get_arg</span><span style="color: #007700">(</span><span style="color: #9876AA">1</span><span style="color: #007700">)&nbsp;.&nbsp;</span><span style="color: #DD0000">"&lt;br&nbsp;/&gt;\n"</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;}<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$arg_list&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">func_get_args</span><span style="color: #007700">();<br />&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(</span><span style="color: #9876AA">$i&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">0</span><span style="color: #007700">;&nbsp;</span><span style="color: #9876AA">$i&nbsp;</span><span style="color: #007700">&lt;&nbsp;</span><span style="color: #9876AA">$numargs</span><span style="color: #007700">;&nbsp;</span><span style="color: #9876AA">$i</span><span style="color: #007700">++)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"Argument&nbsp;</span><span style="color: #9876AA">$i</span><span style="color: #DD0000">&nbsp;is:&nbsp;"&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #9876AA">$arg_list</span><span style="color: #007700">[</span><span style="color: #9876AA">$i</span><span style="color: #007700">]&nbsp;.&nbsp;</span><span style="color: #DD0000">"&lt;br&nbsp;/&gt;\n"</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;}<br />}<br /><br /></span><span style="color: #9876AA">foo</span><span style="color: #007700">(</span><span style="color: #9876AA">1</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">2</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">3</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Number of arguments: 3&lt;br /&gt; Second argument is: 2&lt;br /&gt; Argument 0 is: 1&lt;br /&gt; Argument 1 is: 2&lt;br /&gt; Argument 2 is: 3&lt;br /&gt; </span></div>     </div>    </div>   </span>   <p class="para">    <div class="example" id="example-6197">     <p><strong>Example #2  PHP 5.3 前后使用 <span class="function"><strong style="color:#CC7832">func_get_args()</strong></span> 在的对比</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> test.php<br /><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function&nbsp;</span><span style="color: #9876AA">foo</span><span style="color: #007700">()&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;include&nbsp;</span><span style="color: #DD0000">'./fga.inc'</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">foo</span><span style="color: #007700">(</span><span style="color: #DD0000">'First&nbsp;arg'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'Second&nbsp;arg'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;<br /></span><br />fga.inc<br /><span style="color: #9876AA">&lt;?php<br /><br />$args&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">func_get_args</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">var_export</span><span style="color: #007700">(</span><span style="color: #9876AA">$args</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>      PHP 5.3 版本之前的输出：     </p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> array (   0 =&gt; &#039;First arg&#039;,   1 =&gt; &#039;Second arg&#039;, ) </span></div>     </div>     <div class="example-contents"><p>      PHP 5.3 和之后的版本的输出:     </p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Warning: func_get_args():  Called from the global scope - no function context in /home/torben/Desktop/code/ml/fga.inc on line 3 false </span></div>     </div>    </div>   </p>   <p class="para">    <div class="example" id="example-6198">     <p><strong>Example #3 <span class="function"><strong style="color:#CC7832">func_get_args()</strong></span> example of byref and byval arguments</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function&nbsp;</span><span style="color: #9876AA">byVal</span><span style="color: #007700">(</span><span style="color: #9876AA">$arg</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">'As&nbsp;passed&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;'</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">var_export</span><span style="color: #007700">(</span><span style="color: #9876AA">func_get_args</span><span style="color: #007700">()),&nbsp;</span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$arg&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'baz'</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">'After&nbsp;change&nbsp;&nbsp;:&nbsp;'</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">var_export</span><span style="color: #007700">(</span><span style="color: #9876AA">func_get_args</span><span style="color: #007700">()),&nbsp;</span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />}<br /><br />function&nbsp;</span><span style="color: #9876AA">byRef</span><span style="color: #007700">(&amp;</span><span style="color: #9876AA">$arg</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">'As&nbsp;passed&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;'</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">var_export</span><span style="color: #007700">(</span><span style="color: #9876AA">func_get_args</span><span style="color: #007700">()),&nbsp;</span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$arg&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'baz'</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">'After&nbsp;change&nbsp;&nbsp;:&nbsp;'</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">var_export</span><span style="color: #007700">(</span><span style="color: #9876AA">func_get_args</span><span style="color: #007700">()),&nbsp;</span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">$arg&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'bar'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">byVal</span><span style="color: #007700">(</span><span style="color: #9876AA">$arg</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">byRef</span><span style="color: #007700">(</span><span style="color: #9876AA">$arg</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>       <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"><br /> As passed     : array (<br />   0 =&gt; &#039;bar&#039;,<br /> )<br /> After change  : array (<br />   0 =&gt; &#039;bar&#039;,<br /> )<br /> As passed     : array (<br />   0 =&gt; &#039;bar&#039;,<br /> )<br /> After change  : array (<br />   0 =&gt; &#039;baz&#039;,<br /> )<br />     </div>    </div>   </p>   </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.func-get-args-notes">   <h3 class="title">注释</h3>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>: <p class="para">因为函数依赖于当前作用域以确定参数的细节，所以在 5.3.0 以前的版本中不能用作函数的参数。如必须传递此值时，可将结果赋与一个变量，然后用此变量进行传递。</p></p></blockquote>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>: <p class="para">如果参数以引用方式传递，函数对该参数的任何改变将在函数返回后保留。</p></p></blockquote>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>:     <span class="simpara">     该函数仅仅是返回传递参数的一个副本，并且不包含没有传入的默认参数。    </span>   </p></blockquote>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.func-get-args-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link func_get_arg()} - 返回参数列表的某一项</span></li>     <li class="member"><span class="function">{@link func_num_args()} - Returns the number of arguments passed to the function</span></li>     <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::getParameters()} - 获取参数</span></li>    </ul>   </span>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.funchand.php">函数处理 函数</a></div></div>
 * @return array an array in which each element is a copy of the corresponding*/
function func_get_args () {}

/**
*<div id="function.strlen" class="refentry">  <div class="refnamediv">   <h1 class="refname">strlen</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">strlen</span> &mdash; <span class="dc-title">获取字符串长度</span></p>   </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.strlen-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">int</span> <span class="methodname" style="color:#CC7832"><strong>strlen</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#2EACF9">$string</span></span>    )</div>    <p class="para rdfs-comment">    返回给定的字符串 <span class="parameter" style="color:#2EACF9">string</span> 的长度。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.strlen-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">string</span></dt>       <dd>        <p class="para">        需要计算长度的<span class="type" style="color:#EAB766"><span class="type 字符串" style="color:#EAB766">字符串</span></span>。       </p>      </dd>          </dl>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.strlen-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    成功则返回字符串 <span class="parameter" style="color:#2EACF9">string</span> 的长度；如果 <span class="parameter" style="color:#2EACF9">string</span> 为空，则返回 0。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.strlen-changelog">   <h3 class="title">更新日志</h3>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>      </thead>      <tbody class="tbody">      <tr>       <td>5.3.0</td>       <td>        Prior versions treated arrays as the string <em>Array</em>, thus returning        a string length of <em>5</em> and emitting an <strong><span>E_NOTICE</span></strong> level error.       </td>      </tr>      </tbody>       </table>   </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.strlen-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-5967">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">strlen()</strong></span> 范例</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$str&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'abcdef'</span><span style="color: #007700">;<br />echo&nbsp;</span><span style="color: #9876AA">strlen</span><span style="color: #007700">(</span><span style="color: #9876AA">$str</span><span style="color: #007700">);&nbsp;</span><span style="color: #FF8000">//&nbsp;6<br /><br /></span><span style="color: #9876AA">$str&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'&nbsp;ab&nbsp;cd&nbsp;'</span><span style="color: #007700">;<br />echo&nbsp;</span><span style="color: #9876AA">strlen</span><span style="color: #007700">(</span><span style="color: #9876AA">$str</span><span style="color: #007700">);&nbsp;</span><span style="color: #FF8000">//&nbsp;7<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>     </div>   </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.strlen-notes">   <h3 class="title">注释</h3>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>:     <p class="para">     <span class="function"><strong style="color:#CC7832">strlen()</strong></span> returns the number of bytes rather than the number      of characters in a string.    </p>   </p></blockquote>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>:     <p class="para">     <span class="function"><strong style="color:#CC7832">strlen()</strong></span> returns <strong><span>NULL</span></strong> when executed on arrays, and     an <strong><span>E_WARNING</span></strong> level error is emitted.    </p>   </p></blockquote>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.strlen-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link count()} - 计算数组中的单元数目，或对象中的属性个数</span></li>     <li class="member"><span class="function">{@link mb_strlen()} - 获取字符串的长度</span></li>    </ul>   </span>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.strings.php">字符串 函数</a></div></div>
 * @return int The length of the <i>string</i> on success,*/
function strlen ($string) {}

/**
*<div id="function.strcmp" class="refentry">  <div class="refnamediv">   <h1 class="refname">strcmp</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">strcmp</span> &mdash; <span class="dc-title">二进制安全字符串比较</span></p>   </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.strcmp-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">int</span> <span class="methodname" style="color:#CC7832"><strong>strcmp</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#2EACF9">$str1</span></span>    , <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#2EACF9">$str2</span></span>    )</div>    <p class="simpara">    注意该比较区分大小写。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.strcmp-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">str1</span></dt>       <dd>        <p class="para">        第一个字符串。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">str2</span></dt>       <dd>        <p class="para">        第二个字符串。       </p>      </dd>          </dl>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.strcmp-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    如果 <span class="parameter" style="color:#2EACF9">str1</span> 小于    <span class="parameter" style="color:#2EACF9">str2</span> 返回 &lt; 0；    如果 <span class="parameter" style="color:#2EACF9">str1</span>    大于 <span class="parameter" style="color:#2EACF9">str2</span>    返回 &gt; 0；如果两者相等，返回 0。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.strcmp-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-5958">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">strcmp()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$var1&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">"Hello"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$var2&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">"hello"</span><span style="color: #007700">;<br />if&nbsp;(</span><span style="color: #9876AA">strcmp</span><span style="color: #007700">(</span><span style="color: #9876AA">$var1</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$var2</span><span style="color: #007700">)&nbsp;!==&nbsp;</span><span style="color: #9876AA">0</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">'$var1&nbsp;is&nbsp;not&nbsp;equal&nbsp;to&nbsp;$var2&nbsp;in&nbsp;a&nbsp;case&nbsp;sensitive&nbsp;string&nbsp;comparison'</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>     </div>      </span>  </div>     <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.strcmp-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link strcasecmp()} - 二进制安全比较字符串（不区分大小写）</span></li>     <li class="member"><span class="function">{@link preg_match()} - 执行匹配正则表达式</span></li>     <li class="member"><span class="function">{@link substr_compare()} - 二进制安全比较字符串（从偏移位置比较指定长度）</span></li>     <li class="member"><span class="function">{@link strncmp()} - 二进制安全比较字符串开头的若干个字符</span></li>     <li class="member"><span class="function">{@link strstr()} - 查找字符串的首次出现</span></li>     <li class="member"><span class="function">{@link substr()} - 返回字符串的子串</span></li>    </ul>   </span>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.strings.php">字符串 函数</a></div></div>
 * @return int &lt; 0 if <i>str1</i> is less than*/
function strcmp ($str1, $str2) {}

/**
*<div id="function.strncmp" class="refentry">  <div class="refnamediv">   <h1 class="refname">strncmp</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">strncmp</span> &mdash; <span class="dc-title">二进制安全比较字符串开头的若干个字符</span></p>   </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.strncmp-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">int</span> <span class="methodname" style="color:#CC7832"><strong>strncmp</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#2EACF9">$str1</span></span>    , <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#2EACF9">$str2</span></span>    , <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#2EACF9">$len</span></span>    )</div>    <p class="para rdfs-comment">    该函数与 <span class="function">{@link strcmp()}</span> 类似，不同之处在于你可以指定两个字符串比较时使用的长度（即最大比较长度）。   </p>   <p class="para">    注意该比较区分大小写。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.strncmp-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">str1</span></dt>       <dd>        <p class="para">        第一个字符串。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">str2</span></dt>       <dd>        <p class="para">        第二个字符串。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">len</span></dt>       <dd>        <p class="para">        最大比较长度。       </p>      </dd>          </dl>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.strncmp-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    如果 <span class="parameter" style="color:#2EACF9">str1</span> 小于    <span class="parameter" style="color:#2EACF9">str2</span> 返回 &lt; 0；    如果 <span class="parameter" style="color:#2EACF9">str1</span>    大于 <span class="parameter" style="color:#2EACF9">str2</span>    返回 &gt; 0；如果两者相等，返回 0。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.strncmp-seealso">   <h3 class="title">参见</h3>    <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link strncasecmp()} - 二进制安全比较字符串开头的若干个字符（不区分大小写）</span></li>     <li class="member"><span class="function">{@link preg_match()} - 执行匹配正则表达式</span></li>     <li class="member"><span class="function">{@link substr_compare()} - 二进制安全比较字符串（从偏移位置比较指定长度）</span></li>     <li class="member"><span class="function">{@link strcmp()} - 二进制安全字符串比较</span></li>     <li class="member"><span class="function">{@link strstr()} - 查找字符串的首次出现</span></li>     <li class="member"><span class="function">{@link substr()} - 返回字符串的子串</span></li>    </ul>   </span>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.strings.php">字符串 函数</a></div></div>
 * @return int &lt; 0 if <i>str1</i> is less than*/
function strncmp ($str1, $str2, $len) {}

/**
*<div id="function.strcasecmp" class="refentry">  <div class="refnamediv">   <h1 class="refname">strcasecmp</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">strcasecmp</span> &mdash; <span class="dc-title">二进制安全比较字符串（不区分大小写）</span></p>   </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.strcasecmp-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">int</span> <span class="methodname" style="color:#CC7832"><strong>strcasecmp</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#2EACF9">$str1</span></span>    , <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#2EACF9">$str2</span></span>    )</div>    <p class="para rdfs-comment">    二进制安全比较字符串（不区分大小写）。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.strcasecmp-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">str1</span></dt>       <dd>        <p class="para">        第一个字符串。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">str2</span></dt>       <dd>        <p class="para">        第二个字符串。       </p>      </dd>          </dl>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.strcasecmp-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    如果 <span class="parameter" style="color:#2EACF9">str1</span> 小于    <span class="parameter" style="color:#2EACF9">str2</span> 返回 &lt; 0；    如果 <span class="parameter" style="color:#2EACF9">str1</span>    大于 <span class="parameter" style="color:#2EACF9">str2</span>    返回 &gt; 0；如果两者相等，返回 0。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.strcasecmp-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-5957">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">strcasecmp()</strong></span> 范例</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$var1&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">"Hello"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$var2&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">"hello"</span><span style="color: #007700">;<br />if&nbsp;(</span><span style="color: #9876AA">strcasecmp</span><span style="color: #007700">(</span><span style="color: #9876AA">$var1</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$var2</span><span style="color: #007700">)&nbsp;==&nbsp;</span><span style="color: #9876AA">0</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">'$var1&nbsp;is&nbsp;equal&nbsp;to&nbsp;$var2&nbsp;in&nbsp;a&nbsp;case-insensitive&nbsp;string&nbsp;comparison'</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>     </div>      </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.strcasecmp-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link strcmp()} - 二进制安全字符串比较</span></li>     <li class="member"><span class="function">{@link preg_match()} - 执行匹配正则表达式</span></li>     <li class="member"><span class="function">{@link substr_compare()} - 二进制安全比较字符串（从偏移位置比较指定长度）</span></li>     <li class="member"><span class="function">{@link strncasecmp()} - 二进制安全比较字符串开头的若干个字符（不区分大小写）</span></li>     <li class="member"><span class="function">{@link stristr()} - strstr 函数的忽略大小写版本</span></li>     <li class="member"><span class="function">{@link substr()} - 返回字符串的子串</span></li>    </ul>   </span>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.strings.php">字符串 函数</a></div></div>
 * @return int &lt; 0 if <i>str1</i> is less than*/
function strcasecmp ($str1, $str2) {}

/**
*<div id="function.strncasecmp" class="refentry">  <div class="refnamediv">   <h1 class="refname">strncasecmp</h1>   <p class="verinfo">(PHP 4 &gt;= 4.0.2, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">strncasecmp</span> &mdash; <span class="dc-title">二进制安全比较字符串开头的若干个字符（不区分大小写）</span></p>   </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.strncasecmp-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">int</span> <span class="methodname" style="color:#CC7832"><strong>strncasecmp</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#2EACF9">$str1</span></span>    , <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#2EACF9">$str2</span></span>    , <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#2EACF9">$len</span></span>    )</div>    <p class="para rdfs-comment">    该函数与 <span class="function">{@link strcasecmp()}</span> 类似，不同之处在于你可以指定两个字符串比较时使用的长度（即最大比较长度）。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.strncasecmp-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">str1</span></dt>       <dd>        <p class="para">        第一个字符串。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">str2</span></dt>       <dd>        <p class="para">        第二个字符串。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">len</span></dt>       <dd>        <p class="para">        最大比较长度。       </p>      </dd>          </dl>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.strncasecmp-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    如果 <span class="parameter" style="color:#2EACF9">str1</span> 小于    <span class="parameter" style="color:#2EACF9">str2</span> 返回 &lt; 0；    如果 <span class="parameter" style="color:#2EACF9">str1</span>    大于 <span class="parameter" style="color:#2EACF9">str2</span>    返回 &gt; 0；如果两者相等，返回 0。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.strncasecmp-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link strncmp()} - 二进制安全比较字符串开头的若干个字符</span></li>     <li class="member"><span class="function">{@link preg_match()} - 执行匹配正则表达式</span></li>     <li class="member"><span class="function">{@link substr_compare()} - 二进制安全比较字符串（从偏移位置比较指定长度）</span></li>     <li class="member"><span class="function">{@link strcasecmp()} - 二进制安全比较字符串（不区分大小写）</span></li>     <li class="member"><span class="function">{@link stristr()} - strstr 函数的忽略大小写版本</span></li>     <li class="member"><span class="function">{@link substr()} - 返回字符串的子串</span></li>    </ul>   </span>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.strings.php">字符串 函数</a></div></div>
 * @return int &lt; 0 if <i>str1</i> is less than*/
function strncasecmp ($str1, $str2, $len) {}

/**
*<div id="function.each" class="refentry">    <div class="refnamediv">     <h1 class="refname">each</h1>     <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">each</span> &mdash; <span class="dc-title">返回数组中当前的键／值对并将数组指针向前移动一步</span></p>     </div>    <div id="function.each-refsynopsisdiv">   <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function has been <em class="emphasis">DEPRECATED</em> as of PHP 7.2.0. Relying on this function is highly discouraged.</p></div>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.each-description">   <h3 class="title">说明</h3>     <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">      <span class="type" style="color:#EAB766">array</span> <span class="methodname" style="color:#CC7832"><strong>each</strong></span>       ( <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">&$array</span></span>      )</div>    <p class="para rdfs-comment">        返回数组中当前的键／值对并将数组指针向前移动一步   </p>     <p class="para">      在执行 <span class="function"><strong style="color:#CC7832">each()</strong></span>      之后，数组指针将停留在数组中的下一个单元或者当碰到数组结尾时停留在最后一个单元。如果要再用      each 遍历数组，必须使用 <span class="function">{@link reset()}</span>。     </p>    </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.each-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">array</span></dt>       <dd>        <p class="para">        输入的数组。       </p>      </dd>          </dl>    </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.each-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">     返回 <span class="parameter" style="color:#2EACF9">array</span> 数组中当前指针位置的键／值对并向前移动数组指针。键值对被返回为四个单元的数组，键名为<em>0</em>，<em>1</em>，<em>key</em>和 <em>value</em>。单元 <em>0</em> 和      <em>key</em> 包含有数组单元的键名，<em>1</em> 和      <em>value</em> 包含有数据。   </p>   <p class="para">      如果内部指针越过了数组的末端，则 <span class="function"><strong style="color:#CC7832">each()</strong></span> 返回 <strong><span>FALSE</span></strong>。   </p>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.each-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-6088">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">each()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$foo&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">"bob"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"fred"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"jussi"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"jouni"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"egon"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"marliese"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$bar&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">each</span><span style="color: #007700">(</span><span style="color: #9876AA">$foo</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$bar</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>      <var class="varname"><var class="varname">$bar</var></var> 现在包含有如下的键／值对：     </p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Array (     [1] =&gt; bob     [value] =&gt; bob     [0] =&gt; 0     [key] =&gt; 0 ) </span></div>     </div>    </div>   </span>   <p class="para">    <div class="informalexample">     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$foo&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">"Robert"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"Bob"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"Seppo"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"Sepi"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$bar&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">each</span><span style="color: #007700">(</span><span style="color: #9876AA">$foo</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$bar</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <p class="para">      <var class="varname"><var class="varname">$bar</var></var> 现在包含有如下的键／值对：     </p>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Array (     [1] =&gt; Bob     [value] =&gt; Bob     [0] =&gt; Robert     [key] =&gt; Robert ) </span></div>     </div>    </div>   </p>   <p class="para">    <span class="function"><strong style="color:#CC7832">each()</strong></span> 经常和 <span class="function">{@link list()}</span>      结合使用来遍历数组，例如：    <div class="example" id="example-6089">     <p><strong>Example #2 用 <span class="function"><strong style="color:#CC7832">each()</strong></span> 遍历数组</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$fruit&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">'a'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">'apple'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'b'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">'banana'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'c'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">'cranberry'</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">reset</span><span style="color: #007700">(</span><span style="color: #9876AA">$fruit</span><span style="color: #007700">);<br />while&nbsp;(list(</span><span style="color: #9876AA">$key</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$val</span><span style="color: #007700">)&nbsp;=&nbsp;</span><span style="color: #9876AA">each</span><span style="color: #007700">(</span><span style="color: #9876AA">$fruit</span><span style="color: #007700">))&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"</span><span style="color: #9876AA">$key</span><span style="color: #DD0000">&nbsp;=&gt;&nbsp;</span><span style="color: #9876AA">$val</span><span style="color: #DD0000">\n"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> a =&gt; apple b =&gt; banana c =&gt; cranberry </span></div>     </div>    </div>   </p>   <div class="caution"><strong class="caution">Caution</strong>      <p class="para">       因为将一个数组赋值给另一个数组时会重置原来的数组指针，因此在上边的例子中如果我们在循环内部将       <var class="varname"><var class="varname">$fruit</var></var> 赋给了另一个变量的话将会导致无限循环。      </p>   </div>   <div class="warning"><strong class="warning">Warning</strong>    <p class="para">     <span class="function"><strong style="color:#CC7832">each()</strong></span> will also accept objects, but may return unexpected      results. Its therefore not recommended to iterate though object properties      with <span class="function"><strong style="color:#CC7832">each()</strong></span>.    </p>   </div>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.each-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link key()} - 从关联数组中取得键名</span></li>     <li class="member"><span class="function">{@link list()} - 把数组中的值赋给一组变量</span></li>     <li class="member"><span class="function">{@link current()} - 返回数组中的当前单元</span></li>     <li class="member"><span class="function">{@link reset()} - 将数组的内部指针指向第一个单元</span></li>     <li class="member"><span class="function">{@link next()} - 将数组中的内部指针向前移动一位</span></li>     <li class="member"><span class="function">{@link prev()} - 将数组的内部指针倒回一位</span></li>     <li class="member"><a href="http://php.net/manual/zh/control-structures.foreach.php" class="link">foreach</a></li>     <li class="member"><a href="http://php.net/manual/zh/language.oop5.iterations.php" class="link">Object Iteration</a></li>    </ul>   </span>  </div>    <div class="up"><a href="http://php.net/manual/zh/ref.array.php">数组 函数</a></div></div>
 * @return array the current key and value pair from the array*/
function each (array &$array) {}

/**
*<div id="function.error-reporting" class="refentry">  <div class="refnamediv">   <h1 class="refname">error_reporting</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">error_reporting</span> &mdash; <span class="dc-title">设置应该报告何种 PHP 错误</span></p>   </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.error-reporting-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">int</span> <span class="methodname" style="color:#CC7832"><strong>error_reporting</strong></span>     ([ <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#2EACF9">$level</span></span>   ] )</div>    <p class="para rdfs-comment">    <span class="function"><strong style="color:#CC7832">error_reporting()</strong></span> 函数能够在运行时设置 <a href="http://php.net/manual/zh/errorfunc.configuration.php#ini.error-reporting" class="link">error_reporting</a> 指令。    PHP 有诸多错误级别，使用该函数可以设置在脚本运行时的级别。    如果没有设置可选参数 <span class="parameter" style="color:#2EACF9">level</span>，    <span class="function"><strong style="color:#CC7832">error_reporting()</strong></span> 仅会返回当前的错误报告级别。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.error-reporting-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">level</span></dt>       <dd>        <p class="para">        新的 <a href="http://php.net/manual/zh/errorfunc.configuration.php#ini.error-reporting" class="link">error_reporting</a> 级别。        可以是一个位掩码也可以是一个已命名的常量。        强烈建议使用已命名的常量，以确保兼容将来的版本。        由于错误级别的添加、整数取值范围的增加，        较久的基于整数的错误级别不会总是和预期的表现一致。       </p>       <p class="para">        可用的错误级别常量及其实际含义描述在了         <a href="http://php.net/manual/zh/errorfunc.constants.php" class="link">predefined constants</a> 中。       </p>      </dd>          </dl>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.error-reporting-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回旧的 <a href="http://php.net/manual/zh/errorfunc.configuration.php#ini.error-reporting" class="link">error_reporting</a> 级别，或者在 <span class="parameter" style="color:#2EACF9">level</span> 参数未给出时返回当前的级别。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.error-reporting-changelog">   <h3 class="title">更新日志</h3>   <span>    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>5.4.0</td>        <td><strong><span>E_STRICT</span></strong> 成为 <strong><span>E_ALL</span></strong> 的一部分</td>       </tr>        <tr>        <td>5.3.0</td>        <td>引入 <strong><span>E_DEPRECATED</span></strong> 和 <strong><span>E_USER_DEPRECATED</span></strong>。</td>       </tr>        <tr>        <td>5.2.0</td>        <td>引入 <strong><span>E_RECOVERABLE_ERROR</span></strong>。</td>       </tr>        <tr>        <td>5.0.0</td>        <td>引入 <strong><span>E_STRICT</span></strong> (但不包括在 <strong><span>E_ALL</span></strong> 之内)。</td>       </tr>       </tbody>         </table>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.error-reporting-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-461">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">error_reporting()</strong></span> 范例</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /><br /></span><span style="color: #FF8000">//&nbsp;关闭所有PHP错误报告<br /></span><span style="color: #9876AA">error_reporting</span><span style="color: #007700">(</span><span style="color: #9876AA">0</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">//&nbsp;Report&nbsp;simple&nbsp;running&nbsp;errors<br /></span><span style="color: #9876AA">error_reporting</span><span style="color: #007700">(</span><span style="color: #9876AA">E_ERROR&nbsp;</span><span style="color: #007700">|&nbsp;</span><span style="color: #9876AA">E_WARNING&nbsp;</span><span style="color: #007700">|&nbsp;</span><span style="color: #9876AA">E_PARSE</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">//&nbsp;报告&nbsp;E_NOTICE也挺好&nbsp;(报告未初始化的变量<br />//&nbsp;或者捕获变量名的错误拼写)<br /></span><span style="color: #9876AA">error_reporting</span><span style="color: #007700">(</span><span style="color: #9876AA">E_ERROR&nbsp;</span><span style="color: #007700">|&nbsp;</span><span style="color: #9876AA">E_WARNING&nbsp;</span><span style="color: #007700">|&nbsp;</span><span style="color: #9876AA">E_PARSE&nbsp;</span><span style="color: #007700">|&nbsp;</span><span style="color: #9876AA">E_NOTICE</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">//&nbsp;除了&nbsp;E_NOTICE，报告其他所有错误<br /></span><span style="color: #9876AA">error_reporting</span><span style="color: #007700">(</span><span style="color: #9876AA">E_ALL&nbsp;</span><span style="color: #007700">^&nbsp;</span><span style="color: #9876AA">E_NOTICE</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">//&nbsp;报告所有&nbsp;PHP&nbsp;错误&nbsp;(参见&nbsp;changelog)<br /></span><span style="color: #9876AA">error_reporting</span><span style="color: #007700">(</span><span style="color: #9876AA">E_ALL</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">//&nbsp;报告所有&nbsp;PHP&nbsp;错误<br /></span><span style="color: #9876AA">error_reporting</span><span style="color: #007700">(-</span><span style="color: #9876AA">1</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">//&nbsp;和&nbsp;error_reporting(E_ALL);&nbsp;一样<br /></span><span style="color: #9876AA">ini_set</span><span style="color: #007700">(</span><span style="color: #DD0000">'error_reporting'</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">E_ALL</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>     </div>   </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.error-reporting-notes">   <h3 class="title">注释</h3>   <div class="warning"><strong class="warning">Warning</strong>    <p class="simpara">     虽然 <a href="http://php.net/manual/zh/errorfunc.configuration.php#ini.error-reporting" class="link">error_reporting</a> 增强了     包含 <strong><span>E_STRICT</span></strong> 错误的能力（反之亦然），但大多数      <strong><span>E_STRICT</span></strong> 的错误是在编译时被评估的，     所以不会在文件中被报告。    </p>   </div>   <div class="tip"><strong class="tip">Tip</strong>    <p class="simpara">     传入 <em>-1</em> 的值将尽可能显示所有错误，     甚至包括将来 PHP 可能加入的新的错误级别和常量。     至 PHP 5.4，常量 <strong><span>E_ALL</span></strong> 有同样的行为。    </p>   </div>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.error-reporting-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><a href="http://php.net/manual/zh/errorfunc.configuration.php#ini.display-errors" class="link">display_errors</a> 指令</li>     <li class="member"><a href="http://php.net/manual/zh/errorfunc.configuration.php#ini.php-errors" class="link">html_errors</a> 指令</li>     <li class="member"><a href="http://php.net/manual/zh/errorfunc.configuration.php#ini.xmlrpc-errors" class="link">xmlrpc_errors</a> 指令</li>     <li class="member"><span class="function">{@link ini_set()} - 为一个配置选项设置值</span></li>    </ul>   </span>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.errorfunc.php">错误处理 函数</a></div></div>
 * @return int the old error_reporting*/
function error_reporting ($level = null) {}

/**
*<div id="function.define" class="refentry">  <div class="refnamediv">   <h1 class="refname">define</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">define</span> &mdash; <span class="dc-title">定义一个常量</span></p>   </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.define-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">bool</span> <span class="methodname" style="color:#CC7832"><strong>define</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#2EACF9">$name</span></span>    , <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#2EACF9">$value</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#2EACF9">$case_insensitive</span><span class="initializer"> = false</span></span>   ] )</div>    <p class="para rdfs-comment">   在运行时定义一个常量。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.define-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">name</span></dt>       <dd>        <p class="para">        常量名。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">value</span></dt>       <dd>        <p class="para">       常量的值；在 PHP 5 中，<span class="parameter" style="color:#2EACF9">value</span> 必须是标量( <span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.types.integer.php" class="type integer" style="color:#EAB766">integer</a></span>、        <span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.types.float.php" class="type float" style="color:#EAB766">float</a></span>、<span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>、<span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.types.boolean.php" class="type boolean" style="color:#EAB766">boolean</a></span>、<strong><span>NULL</span></strong>）在 PHP 7 中还允许是个 <span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span> 的值。       </p>       <div class="warning"><strong class="warning">Warning</strong>        <p class="para">         常量还可以定义为 <span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.types.resource.php" class="type resource" style="color:#EAB766">resource</a></span> 类型，但并不推荐这样做，因为可能会有不可预知的行为发生。        </p>       </div>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">case_insensitive</span></dt>       <dd>        <p class="para">        如果设置为 <strong><span>TRUE</span></strong>，该常量则大小写不敏感。默认是大小写敏感的。比如，        <em>CONSTANT</em> 和 <em>Constant</em> 代表了不同的值。       </p>       <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>:         <p class="para">         大小写不敏感的常量以小写的方式储存。        </p>       </p></blockquote>      </dd>          </dl>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.define-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    成功时返回 <strong><span>TRUE</span></strong>， 或者在失败时返回 <strong><span>FALSE</span></strong>。   </p>  </div>      <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.define-changelog">   <h3 class="title">更新日志</h3>   <span>    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>7.0.0</td>        <td>         允许 <span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span> 的值。        </td>       </tr>       </tbody>         </table>    </span>  </div>       <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.define-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-4528">     <p><strong>Example #1 定义常量</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />define</span><span style="color: #007700">(</span><span style="color: #DD0000">"CONSTANT"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"Hello&nbsp;world."</span><span style="color: #007700">);<br />echo&nbsp;</span><span style="color: #9876AA">CONSTANT</span><span style="color: #007700">;&nbsp;</span><span style="color: #FF8000">//&nbsp;输出&nbsp;"Hello&nbsp;world."<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #9876AA">Constant</span><span style="color: #007700">;&nbsp;</span><span style="color: #FF8000">//&nbsp;输出&nbsp;"Constant"&nbsp;并导致&nbsp;Notice<br /><br /></span><span style="color: #9876AA">define</span><span style="color: #007700">(</span><span style="color: #DD0000">"GREETING"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"Hello&nbsp;you."</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">true</span><span style="color: #007700">);<br />echo&nbsp;</span><span style="color: #9876AA">GREETING</span><span style="color: #007700">;&nbsp;</span><span style="color: #FF8000">//&nbsp;输出&nbsp;"Hello&nbsp;you."<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #9876AA">Greeting</span><span style="color: #007700">;&nbsp;</span><span style="color: #FF8000">//&nbsp;输出&nbsp;"Hello&nbsp;you."<br /><br />//&nbsp;&nbsp;PHP&nbsp;7&nbsp;起就可以运行了<br /></span><span style="color: #9876AA">define</span><span style="color: #007700">(</span><span style="color: #DD0000">'ANIMALS'</span><span style="color: #007700">,&nbsp;array(<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #DD0000">'dog'</span><span style="color: #007700">,<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #DD0000">'cat'</span><span style="color: #007700">,<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #DD0000">'bird'<br /></span><span style="color: #007700">));<br />echo&nbsp;</span><span style="color: #9876AA">ANIMALS</span><span style="color: #007700">[</span><span style="color: #9876AA">1</span><span style="color: #007700">];&nbsp;</span><span style="color: #FF8000">//&nbsp;输出&nbsp;"cat"<br /><br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>     </div>   </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.define-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link defined()} - 检查某个名称的常量是否存在</span></li>     <li class="member"><span class="function">{@link constant()} - 返回一个常量的值</span></li>     <li class="member"><a href="http://php.net/manual/zh/language.constants.php" class="link">Constants</a>这一节</li>    </ul>   </span>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.misc.php">杂项 函数</a></div></div>
 * @return bool true on success or false on failure.*/
function define ($name, $value, $case_insensitive = false) {}

/**
*<div id="function.defined" class="refentry">  <div class="refnamediv">   <h1 class="refname">defined</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">defined</span> &mdash; <span class="dc-title">检查某个名称的常量是否存在</span></p>   </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.defined-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">bool</span> <span class="methodname" style="color:#CC7832"><strong>defined</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#2EACF9">$name</span></span>    )</div>    <p class="para rdfs-comment">    检查该名称的常量是否已定义。   </p>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>:     <p class="para">     如果你要检查一个变量是否存在，请使用 <span class="function">{@link isset()}</span>。       <span class="function"><strong style="color:#CC7832">defined()</strong></span> 函数仅对 <a href="http://php.net/manual/zh/language.constants.php" class="link">constants</a> 有效。如果你要检测某个函数是否存在，使用 <span class="function">{@link function_exists()}</span>。    </p>   </p></blockquote>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.defined-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">name</span></dt>       <dd>        <p class="para">        常量的名称。       </p>      </dd>          </dl>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.defined-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">   如果名称 <span class="parameter" style="color:#2EACF9">name</span> 的常量已定义，返回 <strong><span>TRUE</span></strong>；未定义则返回 <strong><span>FALSE</span></strong>。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.defined-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-4529">     <p><strong>Example #1 检查常量</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">//&nbsp;Note&nbsp;the&nbsp;use&nbsp;of&nbsp;quotes,&nbsp;this&nbsp;is&nbsp;important.&nbsp;&nbsp;This&nbsp;example&nbsp;is&nbsp;checking<br />&nbsp;*&nbsp;if&nbsp;the&nbsp;string&nbsp;'TEST'&nbsp;is&nbsp;the&nbsp;name&nbsp;of&nbsp;a&nbsp;constant&nbsp;named&nbsp;TEST&nbsp;<br /></span><span style="color: #007700">if&nbsp;(</span><span style="color: #9876AA">defined</span><span style="color: #007700">(</span><span style="color: #DD0000">'TEST'</span><span style="color: #007700">))&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #9876AA">TEST</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>     </div>   </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.defined-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link define()} - 定义一个常量</span></li>     <li class="member"><span class="function">{@link constant()} - 返回一个常量的值</span></li>     <li class="member"><span class="function">{@link get_defined_constants()} - 返回所有常量的关联数组，键是常量名，值是常量值</span></li>     <li class="member"><span class="function">{@link function_exists()} - 如果给定的函数已经被定义就返回 TRUE</span></li>     <li class="member">章节 <a href="http://php.net/manual/zh/language.constants.php" class="link">Constants</a></li>    </ul>   </span>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.misc.php">杂项 函数</a></div></div>
 * @return bool true if the named constant given by <i>name</i>*/
function defined ($name) {}

/**
*<div id="function.get-class" class="refentry">  <div class="refnamediv">   <h1 class="refname">get_class</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">get_class</span> &mdash; <span class="dc-title">返回对象的类名</span></p>   </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.get-class-description">   <h3 class="title">说明</h3> <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">string</span> <span class="methodname" style="color:#CC7832"><strong>get_class</strong></span>     ([ <span class="methodparam"><span class="type" style="color:#EAB766">object</span> <span class="parameter" style="color:#2EACF9">$object</span><span class="initializer"> = <strong><span>NULL</span></strong></span></span>   ] )</div>    <p class="para rdfs-comment">    返回对象实例 <span class="parameter" style="color:#2EACF9">object</span> 所属类的名字。   </p>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.get-class-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">object</span></dt>       <dd>        <p class="para">        要测试的对象。如果在类里，此参数可以省略。       </p>      </dd>          </dl>    </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.get-class-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回对象实例 <span class="parameter" style="color:#2EACF9">object</span>    所属类的名字。    如果 <span class="parameter" style="color:#2EACF9">object</span> 不是一个对象则返回 <strong><span>FALSE</span></strong>。   </p>   <p class="para">    如果在一个类里，省略了参数 <span class="parameter" style="color:#2EACF9">object</span>，    则返回当前所在类的名称。   </p>   <p class="para">     如果 <span class="parameter" style="color:#2EACF9">object</span> 是命名空间中某个类的实例，则会返回带上命名空间的类名。   </p>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-function.get-class-errors">   <h3 class="title">错误／异常</h3>   <p class="para">    如果用其他类型调用 <span class="function"><strong style="color:#CC7832">get_class()</strong></span>，而不是一个对象的话，就会产生 <strong><span>E_WARNING</span></strong> 级别的错误。   </p>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.get-class-changelog">   <h3 class="title">更新日志</h3>   <span>    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>5.3.0 起</td>        <td>         <span class="parameter" style="color:#2EACF9">object</span> 默认参数现在是 <strong><span>NULL</span></strong> ，所以，现在传入 <strong><span>NULL</span></strong> 到 <span class="parameter" style="color:#2EACF9">object</span> 参数时，和没传参数的结果一样。        </td>       </tr>       </tbody>         </table>    </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.get-class-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="function.usort.examples.object">     <p><strong>Example #1 使用 <span class="function"><strong style="color:#CC7832">get_class()</strong></span></strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /><br /></span><span style="color: #007700">class&nbsp;</span><span style="color: #9876AA">foo&nbsp;</span><span style="color: #007700">{<br />&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;</span><span style="color: #9876AA">name</span><span style="color: #007700">()<br />&nbsp;&nbsp;&nbsp;&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"My&nbsp;name&nbsp;is&nbsp;"&nbsp;</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">get_class</span><span style="color: #007700">(</span><span style="color: #9876AA">$this</span><span style="color: #007700">)&nbsp;,&nbsp;</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;}<br />}<br /><br /></span><span style="color: #FF8000">//&nbsp;create&nbsp;an&nbsp;object<br /></span><span style="color: #9876AA">$bar&nbsp;</span><span style="color: #007700">=&nbsp;new&nbsp;</span><span style="color: #9876AA">foo</span><span style="color: #007700">();<br /><br /></span><span style="color: #FF8000">//&nbsp;external&nbsp;call<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #DD0000">"Its&nbsp;name&nbsp;is&nbsp;"&nbsp;</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">get_class</span><span style="color: #007700">(</span><span style="color: #9876AA">$bar</span><span style="color: #007700">)&nbsp;,&nbsp;</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /><br /></span><span style="color: #FF8000">//&nbsp;internal&nbsp;call<br /></span><span style="color: #9876AA">$bar</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">name</span><span style="color: #007700">();<br /><br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Its name is foo My name is foo </span></div>     </div>    </div>    <div class="example" id="function.usort.examples.closure">     <p><strong>Example #2 超类中使用 <span class="function"><strong style="color:#CC7832">get_class()</strong></span></strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /><br /></span><span style="color: #007700">abstract&nbsp;class&nbsp;</span><span style="color: #9876AA">bar&nbsp;</span><span style="color: #007700">{<br />&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;function&nbsp;</span><span style="color: #9876AA">__construct</span><span style="color: #007700">()<br />&nbsp;&nbsp;&nbsp;&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">get_class</span><span style="color: #007700">(</span><span style="color: #9876AA">$this</span><span style="color: #007700">));<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">get_class</span><span style="color: #007700">());<br />&nbsp;&nbsp;&nbsp;&nbsp;}<br />}<br /><br />class&nbsp;</span><span style="color: #9876AA">foo&nbsp;</span><span style="color: #007700">extends&nbsp;</span><span style="color: #9876AA">bar&nbsp;</span><span style="color: #007700">{<br />}<br /><br />new&nbsp;</span><span style="color: #9876AA">foo</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> string(3) &quot;foo&quot; string(3) &quot;bar&quot; </span></div>     </div>    </div>    <div class="example" id="example-6134">     <p><strong>Example #3 命名空间中的类使用 <span class="function"><strong style="color:#CC7832">get_class()</strong></span></strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /><br /></span><span style="color: #007700">namespace&nbsp;</span><span style="color: #9876AA">Foo</span><span style="color: #007700">\</span><span style="color: #9876AA">Bar</span><span style="color: #007700">;<br /><br />class&nbsp;</span><span style="color: #9876AA">Baz&nbsp;</span><span style="color: #007700">{<br />&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;function&nbsp;</span><span style="color: #9876AA">__construct</span><span style="color: #007700">()<br />&nbsp;&nbsp;&nbsp;&nbsp;{<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;}<br />}<br /><br /></span><span style="color: #9876AA">$baz&nbsp;</span><span style="color: #007700">=&nbsp;new&nbsp;\</span><span style="color: #9876AA">Foo</span><span style="color: #007700">\</span><span style="color: #9876AA">Bar</span><span style="color: #007700">\</span><span style="color: #9876AA">Baz</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">get_class</span><span style="color: #007700">(</span><span style="color: #9876AA">$baz</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> string(11) &quot;Foo\Bar\Baz&quot; </span></div>     </div>    </div>   </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.get-class-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link get_called_class()} - 后期静态绑定（&quot;Late Static Binding&quot;）类的名称</span></li>     <li class="member"><span class="function">{@link get_parent_class()} - 返回对象或类的父类名</span></li>     <li class="member"><span class="function">{@link gettype()} - 获取变量的类型</span></li>     <li class="member"><span class="function">{@link is_subclass_of()} - 如果此对象是该类的子类，则返回 TRUE</span></li>    </ul>   </span>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.classobj.php">类/对象 函数</a></div></div>
 * @return string the name of the class of which <i>object</i> is an*/
function get_class ($object = null) {}

/**
*<div id="function.get-called-class" class="refentry">  <div class="refnamediv">   <h1 class="refname">get_called_class</h1>   <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7)</p><p class="refpurpose"><span class="refname">get_called_class</span> &mdash; <span class="dc-title">后期静态绑定（&quot;Late Static Binding&quot;）类的名称</span></p>   </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.get-called-class-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">string</span> <span class="methodname" style="color:#CC7832"><strong>get_called_class</strong></span>     ( <span class="methodparam">void</span>    )</div>    <p class="para rdfs-comment">    获取静态方法调用的类名。   </p>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.get-called-class-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回类的名称，如果不是在类中调用则返回 <strong><span>FALSE</span></strong>。   </p>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.get-called-class-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-6128">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">get_called_class()</strong></span> 的使用</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /><br /></span><span style="color: #007700">class&nbsp;</span><span style="color: #9876AA">foo&nbsp;</span><span style="color: #007700">{<br />&nbsp;&nbsp;&nbsp;&nbsp;static&nbsp;public&nbsp;function&nbsp;</span><span style="color: #9876AA">test</span><span style="color: #007700">()&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">get_called_class</span><span style="color: #007700">());<br />&nbsp;&nbsp;&nbsp;&nbsp;}<br />}<br /><br />class&nbsp;</span><span style="color: #9876AA">bar&nbsp;</span><span style="color: #007700">extends&nbsp;</span><span style="color: #9876AA">foo&nbsp;</span><span style="color: #007700">{<br />}<br /><br /></span><span style="color: #9876AA">foo</span><span style="color: #007700">::</span><span style="color: #9876AA">test</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">bar</span><span style="color: #007700">::</span><span style="color: #9876AA">test</span><span style="color: #007700">();<br /><br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> string(3) &quot;foo&quot; string(3) &quot;bar&quot; </span></div>     </div>    </div>   </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.get-called-class-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link get_parent_class()} - 返回对象或类的父类名</span></li>     <li class="member"><span class="function">{@link get_class()} - 返回对象的类名</span></li>     <li class="member"><span class="function">{@link is_subclass_of()} - 如果此对象是该类的子类，则返回 TRUE</span></li>    </ul>   </span>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.classobj.php">类/对象 函数</a></div></div>
 * @return string the class name. Returns false if called from outside a class.*/
function get_called_class () {}

/**
*<div id="function.get-parent-class" class="refentry">  <div class="refnamediv">   <h1 class="refname">get_parent_class</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">get_parent_class</span> &mdash; <span class="dc-title">返回对象或类的父类名</span></p>   </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.get-parent-class-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">string</span> <span class="methodname" style="color:#CC7832"><strong>get_parent_class</strong></span>     ([ <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#2EACF9">$obj</span></span>   ] )</div>    <p class="para rdfs-comment">    如果 <span class="parameter" style="color:#2EACF9">obj</span>    是对象，则返回对象实例 <span class="parameter" style="color:#2EACF9">obj</span>    所属类的父类名。   </p>   <p class="para">    如果 <span class="parameter" style="color:#2EACF9">obj</span>    是字符串，则返回以此字符串为名的类的父类名。此功能是在    PHP 4.0.5 中增加的。   </p>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>:     <p class="para">     自 PHP 5 起，如果在对象的方法内调用，则 <span class="parameter" style="color:#2EACF9">obj</span> 为可选项。    </p>   </p></blockquote>   <p class="para">    <div class="example" id="example-6139">     <p><strong>Example #1 使用 <span class="function"><strong style="color:#CC7832">get_parent_class()</strong></span></strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /><br /></span><span style="color: #007700">class&nbsp;</span><span style="color: #9876AA">dad&nbsp;</span><span style="color: #007700">{<br />&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;</span><span style="color: #9876AA">dad</span><span style="color: #007700">()<br />&nbsp;&nbsp;&nbsp;&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;implements&nbsp;some&nbsp;logic<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #007700">}<br />}<br /><br />class&nbsp;</span><span style="color: #9876AA">child&nbsp;</span><span style="color: #007700">extends&nbsp;</span><span style="color: #9876AA">dad&nbsp;</span><span style="color: #007700">{<br />&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;</span><span style="color: #9876AA">child</span><span style="color: #007700">()<br />&nbsp;&nbsp;&nbsp;&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"I'm&nbsp;"&nbsp;</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">get_parent_class</span><span style="color: #007700">(</span><span style="color: #9876AA">$this</span><span style="color: #007700">)&nbsp;,&nbsp;</span><span style="color: #DD0000">"'s&nbsp;son\n"</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;}<br />}<br /><br />class&nbsp;</span><span style="color: #9876AA">child2&nbsp;</span><span style="color: #007700">extends&nbsp;</span><span style="color: #9876AA">dad&nbsp;</span><span style="color: #007700">{<br />&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;</span><span style="color: #9876AA">child2</span><span style="color: #007700">()<br />&nbsp;&nbsp;&nbsp;&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"I'm&nbsp;"&nbsp;</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">get_parent_class</span><span style="color: #007700">(</span><span style="color: #DD0000">'child2'</span><span style="color: #007700">)&nbsp;,&nbsp;</span><span style="color: #DD0000">"'s&nbsp;son&nbsp;too\n"</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;}<br />}<br /><br /></span><span style="color: #9876AA">$foo&nbsp;</span><span style="color: #007700">=&nbsp;new&nbsp;</span><span style="color: #9876AA">child</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$bar&nbsp;</span><span style="color: #007700">=&nbsp;new&nbsp;</span><span style="color: #9876AA">child2</span><span style="color: #007700">();<br /><br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> I&#039;m dad&#039;s son I&#039;m dad&#039;s son too </span></div>     </div>    </div>   </p>   <p class="para">    参见 <span class="function">{@link get_class()}</span> 和    <span class="function">{@link is_subclass_of()}</span>。   </p>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.get-parent-class-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">object</span></dt>       <dd>        <p class="para">        The tested object or class name       </p>      </dd>          </dl>    </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.get-parent-class-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    Returns the name of the parent class of the class of which    <span class="parameter" style="color:#2EACF9">object</span> is an instance or the name.   </p>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>:     <p class="para">     If the object does not have a parent or the class given does not exist <strong><span>FALSE</span></strong> will be returned.    </p>   </p></blockquote>   <p class="para">    If called without parameter outside object, this function returns <strong><span>FALSE</span></strong>.   </p>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.get-parent-class-changelog">   <h3 class="title">更新日志</h3>   <span>    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>Before 5.1.0</td>        <td>         If called without parameter outside object, this function would have         returned <strong><span>NULL</span></strong> with a warning.        </td>       </tr>        <tr>        <td>Since 5.0.0</td>        <td>         The <span class="parameter" style="color:#2EACF9">object</span> parameter is optional if called         from the object&#039;s method.        </td>       </tr>        <tr>        <td>Since 4.0.5</td>        <td>         If <span class="parameter" style="color:#2EACF9">object</span> is a string, returns the name of the         parent class of the class with that name.        </td>       </tr>       </tbody>         </table>    </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.get-parent-class-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-6140">     <p><strong>Example #2 Using <span class="function"><strong style="color:#CC7832">get_parent_class()</strong></span></strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /><br /></span><span style="color: #007700">class&nbsp;</span><span style="color: #9876AA">dad&nbsp;</span><span style="color: #007700">{<br />&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;</span><span style="color: #9876AA">dad</span><span style="color: #007700">()<br />&nbsp;&nbsp;&nbsp;&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;implements&nbsp;some&nbsp;logic<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #007700">}<br />}<br /><br />class&nbsp;</span><span style="color: #9876AA">child&nbsp;</span><span style="color: #007700">extends&nbsp;</span><span style="color: #9876AA">dad&nbsp;</span><span style="color: #007700">{<br />&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;</span><span style="color: #9876AA">child</span><span style="color: #007700">()<br />&nbsp;&nbsp;&nbsp;&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"I'm&nbsp;"&nbsp;</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">get_parent_class</span><span style="color: #007700">(</span><span style="color: #9876AA">$this</span><span style="color: #007700">)&nbsp;,&nbsp;</span><span style="color: #DD0000">"'s&nbsp;son\n"</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;}<br />}<br /><br />class&nbsp;</span><span style="color: #9876AA">child2&nbsp;</span><span style="color: #007700">extends&nbsp;</span><span style="color: #9876AA">dad&nbsp;</span><span style="color: #007700">{<br />&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;</span><span style="color: #9876AA">child2</span><span style="color: #007700">()<br />&nbsp;&nbsp;&nbsp;&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"I'm&nbsp;"&nbsp;</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">get_parent_class</span><span style="color: #007700">(</span><span style="color: #DD0000">'child2'</span><span style="color: #007700">)&nbsp;,&nbsp;</span><span style="color: #DD0000">"'s&nbsp;son&nbsp;too\n"</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;}<br />}<br /><br /></span><span style="color: #9876AA">$foo&nbsp;</span><span style="color: #007700">=&nbsp;new&nbsp;</span><span style="color: #9876AA">child</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$bar&nbsp;</span><span style="color: #007700">=&nbsp;new&nbsp;</span><span style="color: #9876AA">child2</span><span style="color: #007700">();<br /><br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> I&#039;m dad&#039;s son I&#039;m dad&#039;s son too </span></div>     </div>    </div>   </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.get-parent-class-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link get_class()} - 返回对象的类名</span></li>     <li class="member"><span class="function">{@link is_subclass_of()} - 如果此对象是该类的子类，则返回 TRUE</span></li>    </ul>   </span>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.classobj.php">类/对象 函数</a></div></div>
 * @return string the name of the parent class of the class of which*/
function get_parent_class ($object = null) {}

/**
*<div id="function.method-exists" class="refentry">  <div class="refnamediv">   <h1 class="refname">method_exists</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">method_exists</span> &mdash; <span class="dc-title">检查类的方法是否存在</span></p>   </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.method-exists-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">bool</span> <span class="methodname" style="color:#CC7832"><strong>method_exists</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#2EACF9">$object</span></span>    , <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#2EACF9">$method_name</span></span>    )</div>    <p class="para rdfs-comment">    检查类的方法是否存在于指定的 <span class="parameter" style="color:#2EACF9">object</span>中。   </p>  </div>     <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.method-exists-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">object</span></dt>       <dd>        <p class="para">        对象示例或者类名。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">method_name</span></dt>       <dd>        <p class="para">        方法名。       </p>      </dd>          </dl>    </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.method-exists-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">       如果 <span class="parameter" style="color:#2EACF9">method_name</span>    所指的方法在 <span class="parameter" style="color:#2EACF9">object</span>    所指的对象类中已定义，则返回 <strong><span>TRUE</span></strong>，否则返回 <strong><span>FALSE</span></strong>。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.method-exists-notes">   <h3 class="title">注释</h3>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>: <p class="para">如果此类不是已知类，使用此函数会使用任何已注册的 <a href="http://php.net/manual/zh/language.oop5.autoload.php" class="link">autoloader</a>。</p></p></blockquote>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.method-exists-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-6146">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">method_exists()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$directory&nbsp;</span><span style="color: #007700">=&nbsp;new&nbsp;</span><span style="color: #9876AA">Directory</span><span style="color: #007700">(</span><span style="color: #DD0000">'.'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">method_exists</span><span style="color: #007700">(</span><span style="color: #9876AA">$directory</span><span style="color: #007700">,</span><span style="color: #DD0000">'read'</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> bool(true) </span></div>     </div>    </div>    <div class="example" id="example-6147">     <p><strong>Example #2 Static <span class="function"><strong style="color:#CC7832">method_exists()</strong></span>  例子     </strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">method_exists</span><span style="color: #007700">(</span><span style="color: #DD0000">'Directory'</span><span style="color: #007700">,</span><span style="color: #DD0000">'read'</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> bool(true) </span></div>     </div>    </div>   </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.method-exists-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link function_exists()} - 如果给定的函数已经被定义就返回 TRUE</span></li>     <li class="member"><span class="function">{@link is_callable()} - 检测参数是否为合法的可调用结构</span></li>     <li class="member"><span class="function">{@link class_exists()} - 检查类是否已定义</span></li>    </ul>   </span>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.classobj.php">类/对象 函数</a></div></div>
 * @return bool true if the method given by <i>method_name</i>*/
function method_exists ($object, $method_name) {}

/**
*<div id="function.property-exists" class="refentry">  <div class="refnamediv">   <h1 class="refname">property_exists</h1>   <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7)</p><p class="refpurpose"><span class="refname">property_exists</span> &mdash; <span class="dc-title">检查对象或类是否具有该属性</span></p>   </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.property-exists-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">bool</span> <span class="methodname" style="color:#CC7832"><strong>property_exists</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#2EACF9">$class</span></span>    , <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#2EACF9">$property</span></span>    )</div>    <p class="para rdfs-comment">    本函数检查给出的 <span class="parameter" style="color:#2EACF9">property</span> 是否存在于指定的类中（以及是否能在当前范围内访问）。   </p>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>:     <p class="para">     As opposed with <span class="function">{@link isset()}</span>,     <span class="function"><strong style="color:#CC7832">property_exists()</strong></span> returns <strong><span>TRUE</span></strong> even if the property     has the value <strong><span>NULL</span></strong>.    </p>   </p></blockquote>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.property-exists-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">class</span></dt>        <dd>         <p class="para">         字符串形式的类名或要检查的类的一个对象        </p>       </dd>                  <dt> <span class="parameter" style="color:#2EACF9">property</span></dt>        <dd>         <p class="para">         属性的名字        </p>       </dd>           </dl>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.property-exists-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    如果该属性存在则返回 <strong><span>TRUE</span></strong>，如果不存在则返回 <strong><span>FALSE</span></strong>，出错返回 <strong><span>NULL</span></strong>。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.property-exists-notes">   <h3 class="title">注释</h3>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>: <p class="para">如果此类不是已知类，使用此函数会使用任何已注册的 <a href="http://php.net/manual/zh/language.oop5.autoload.php" class="link">autoloader</a>。</p></p></blockquote>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>:     <p class="para">     The <span class="function"><strong style="color:#CC7832">property_exists()</strong></span> function cannot detect properties     that are magically accessible using the <a href="http://php.net/manual/zh/language.oop5.overloading.php#language.oop5.overloading.members" class="link"><em>__get</em></a>     magic method.    </p>   </p></blockquote>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.property-exists-changelog">   <h3 class="title">更新日志</h3>   <span>    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>5.3.0</td>        <td>         This function checks the existence of a property independent of          accessibility.        </td>       </tr>       </tbody>         </table>    </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.property-exists-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-6148">     <p><strong>Example #1 A <span class="function"><strong style="color:#CC7832">property_exists()</strong></span> example</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /><br /></span><span style="color: #007700">class&nbsp;</span><span style="color: #9876AA">myClass&nbsp;</span><span style="color: #007700">{<br />&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;</span><span style="color: #9876AA">$mine</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;</span><span style="color: #9876AA">$xpto</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;static&nbsp;protected&nbsp;</span><span style="color: #9876AA">$test</span><span style="color: #007700">;<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;static&nbsp;function&nbsp;</span><span style="color: #9876AA">test</span><span style="color: #007700">()&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">property_exists</span><span style="color: #007700">(</span><span style="color: #DD0000">'myClass'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'xpto'</span><span style="color: #007700">));&nbsp;</span><span style="color: #FF8000">//true<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #007700">}<br />}<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">property_exists</span><span style="color: #007700">(</span><span style="color: #DD0000">'myClass'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'mine'</span><span style="color: #007700">));&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//true<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">property_exists</span><span style="color: #007700">(new&nbsp;</span><span style="color: #9876AA">myClass</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'mine'</span><span style="color: #007700">));&nbsp;</span><span style="color: #FF8000">//true<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">property_exists</span><span style="color: #007700">(</span><span style="color: #DD0000">'myClass'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'xpto'</span><span style="color: #007700">));&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//true,&nbsp;as&nbsp;of&nbsp;PHP&nbsp;5.3.0<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">property_exists</span><span style="color: #007700">(</span><span style="color: #DD0000">'myClass'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'bar'</span><span style="color: #007700">));&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//false<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">property_exists</span><span style="color: #007700">(</span><span style="color: #DD0000">'myClass'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'test'</span><span style="color: #007700">));&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//true,&nbsp;as&nbsp;of&nbsp;PHP&nbsp;5.3.0<br /></span><span style="color: #9876AA">myClass</span><span style="color: #007700">::</span><span style="color: #9876AA">test</span><span style="color: #007700">();<br /><br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>     </div>   </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.property-exists-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link method_exists()} - 检查类的方法是否存在</span></li>    </ul>   </span>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.classobj.php">类/对象 函数</a></div></div>
 * @return bool true if the property exists, false if it doesn't exist or*/
function property_exists ($class, $property) {}

/**
*<div id="function.trait-exists" class="refentry">  <div class="refnamediv">   <h1 class="refname">trait_exists</h1>   <p class="verinfo">(PHP 5 &gt;= 5.4.0, PHP 7)</p><p class="refpurpose"><span class="refname">trait_exists</span> &mdash; <span class="dc-title">检查指定的 trait 是否存在</span></p>   </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.trait-exists-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">bool</span> <span class="methodname" style="color:#CC7832"><strong>trait_exists</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#2EACF9">$traitname</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#2EACF9">$autoload</span></span>   ] )</div>    <p class="para rdfs-comment">    </p>   </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.trait-exists-parameters">   <h3 class="title">参数</h3>   <dl>          <dt> <span class="parameter" style="color:#2EACF9">traitname</span></dt>      <dd>       <span>       待检查的 trait 的名称      </span>     </dd>              <dt> <span class="parameter" style="color:#2EACF9">autoload</span></dt>      <dd>       <p class="para">       如果尚未加载，是否使用自动加载（autoload）。      </p>     </dd>        </dl>   </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.trait-exists-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    如果 trait 存在返回 <strong><span>TRUE</span></strong>，不存在则返回 <strong><span>FALSE</span></strong>。发生错误的时候返回 <strong><span>NULL</span></strong>。   </p>  </div>    <div class="up"><a href="http://php.net/manual/zh/ref.classobj.php">类/对象 函数</a></div></div>
 * @return boolean Returns TRUE if trait exists, FALSE if not, NULL in case of an error.*/
function trait_exists($traitname, $autoload ) {}

/**
*<div id="function.class-exists" class="refentry">  <div class="refnamediv">   <h1 class="refname">class_exists</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">class_exists</span> &mdash; <span class="dc-title">检查类是否已定义</span></p>   </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.class-exists-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">bool</span> <span class="methodname" style="color:#CC7832"><strong>class_exists</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#2EACF9">$class_name</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#2EACF9">$autoload</span><span class="initializer"> = true</span></span>   ] )</div>    <p class="para rdfs-comment">    检查指定的类是否已定义。   </p>  </div>     <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.class-exists-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">class_name</span></dt>       <dd>        <p class="para">        类名。名字的匹配是不分区大小写的。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">autoload</span></dt>       <dd>        <p class="para">        是否默认调用 <a href="http://php.net/manual/zh/language.oop5.autoload.php" class="link">__autoload</a>。       </p>      </dd>          </dl>    </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.class-exists-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    如果由 <span class="parameter" style="color:#2EACF9">class_name</span>    所指的类已经定义，此函数返回     <strong><span>TRUE</span></strong>，否则返回 <strong><span>FALSE</span></strong>。   </p>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.class-exists-changelog">   <h3 class="title">更新日志</h3>   <span>    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>5.0.2</td>        <td>         不再为已定义的 interface 返回 <strong><span>TRUE</span></strong>。请使用         <span class="function">{@link interface_exists()}</span>。        </td>       </tr>       </tbody>         </table>    </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.class-exists-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-6126">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">class_exists()</strong></span>  例子</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">//&nbsp;使用前检查类是否存在<br /></span><span style="color: #007700">if&nbsp;(</span><span style="color: #9876AA">class_exists</span><span style="color: #007700">(</span><span style="color: #DD0000">'MyClass'</span><span style="color: #007700">))&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$myclass&nbsp;</span><span style="color: #007700">=&nbsp;new&nbsp;</span><span style="color: #9876AA">MyClass</span><span style="color: #007700">();<br />}<br /><br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>     </div>    <div class="example" id="example-6127">     <p><strong>Example #2 <span class="parameter" style="color:#2EACF9">autoload</span> parameter  例子</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function&nbsp;</span><span style="color: #9876AA">__autoload</span><span style="color: #007700">(</span><span style="color: #9876AA">$class</span><span style="color: #007700">)<br />{<br />&nbsp;&nbsp;&nbsp;&nbsp;include(</span><span style="color: #9876AA">$class&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #DD0000">'.php'</span><span style="color: #007700">);<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;Check&nbsp;to&nbsp;see&nbsp;whether&nbsp;the&nbsp;include&nbsp;declared&nbsp;the&nbsp;class<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #007700">if&nbsp;(!</span><span style="color: #9876AA">class_exists</span><span style="color: #007700">(</span><span style="color: #9876AA">$class</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">false</span><span style="color: #007700">))&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">trigger_error</span><span style="color: #007700">(</span><span style="color: #DD0000">"Unable&nbsp;to&nbsp;load&nbsp;class:&nbsp;</span><span style="color: #9876AA">$class</span><span style="color: #DD0000">"</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">E_USER_WARNING</span><span style="color: #007700">);<br />&nbsp;&nbsp;&nbsp;&nbsp;}<br />}<br /><br />if&nbsp;(</span><span style="color: #9876AA">class_exists</span><span style="color: #007700">(</span><span style="color: #DD0000">'MyClass'</span><span style="color: #007700">))&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$myclass&nbsp;</span><span style="color: #007700">=&nbsp;new&nbsp;</span><span style="color: #9876AA">MyClass</span><span style="color: #007700">();<br />}<br /><br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>     </div>   </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.class-exists-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link function_exists()} - 如果给定的函数已经被定义就返回 TRUE</span></li>     <li class="member"><span class="function">{@link interface_exists()} - 检查接口是否已被定义</span></li>     <li class="member"><span class="function">{@link get_declared_classes()} - 返回由已定义类的名字所组成的数组</span></li>    </ul>   </span>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.classobj.php">类/对象 函数</a></div></div>
 * @return bool true if <i>class_name</i> is a defined class,*/
function class_exists ($class_name, $autoload = true) {}

/**
*<div id="function.interface-exists" class="refentry">  <div class="refnamediv">   <h1 class="refname">interface_exists</h1>   <p class="verinfo">(PHP 5 &gt;= 5.0.2, PHP 7)</p><p class="refpurpose"><span class="refname">interface_exists</span> &mdash; <span class="dc-title">检查接口是否已被定义</span></p>   </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.interface-exists-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">bool</span> <span class="methodname" style="color:#CC7832"><strong>interface_exists</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#2EACF9">$interface_name</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#2EACF9">$autoload</span><span class="initializer"> = true</span></span>   ] )</div>    <p class="para rdfs-comment">    检查接口是否已被定义。   </p>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.interface-exists-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">interface_name</span></dt>       <dd>        <p class="para">        接口名。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">autoload</span></dt>       <dd>        <p class="para">        默认是否调用 <a href="http://php.net/manual/zh/language.oop5.autoload.php" class="link">__autoload</a>。       </p>      </dd>          </dl>    </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.interface-exists-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    本函数在由 <span class="parameter" style="color:#2EACF9">interface_name</span>    给出的接口已定义时返回 <strong><span>TRUE</span></strong>，否则返回 <strong><span>FALSE</span></strong>。   </p>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.interface-exists-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-6141">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">interface_exists()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">//&nbsp;在尝试使用前先检查接口是否存在<br /></span><span style="color: #007700">if&nbsp;(</span><span style="color: #9876AA">interface_exists</span><span style="color: #007700">(</span><span style="color: #DD0000">'MyInterface'</span><span style="color: #007700">))&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;class&nbsp;</span><span style="color: #9876AA">MyClass&nbsp;</span><span style="color: #007700">implements&nbsp;</span><span style="color: #9876AA">MyInterface<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #007700">{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;Methods<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #007700">}<br />}<br /><br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>     </div>   </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.interface-exists-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link get_declared_interfaces()} - 返回一个数组包含所有已声明的接口</span></li>     <li class="member"><span class="function">{@link class_implements()} - 返回指定的类实现的所有接口。</span></li>     <li class="member"><span class="function">{@link class_exists()} - 检查类是否已定义</span></li>    </ul>   </span>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.classobj.php">类/对象 函数</a></div></div>
 * @return bool true if the interface given by */
function interface_exists ($interface_name, $autoload = true) {}

/**
*<div id="function.function-exists" class="refentry">  <div class="refnamediv">   <h1 class="refname">function_exists</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">function_exists</span> &mdash; <span class="dc-title">如果给定的函数已经被定义就返回 <strong><span>TRUE</span></strong> </span></p>   </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.function-exists-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">bool</span> <span class="methodname" style="color:#CC7832"><strong>function_exists</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#2EACF9">$function_name</span></span>    )</div>    <p class="para rdfs-comment">    在已经定义的函数列表（包括系统自带的函数和用户自定义的函数）中查找 <span class="parameter" style="color:#2EACF9">function_name</span>。    </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.function-exists-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">function_name</span></dt>       <dd>        <p class="para">        函数名，必须为一个字符串。       </p>      </dd>          </dl>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.function-exists-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    如果 <span class="parameter" style="color:#2EACF9">function_name</span> 存在且的确是一个函数就返回 <strong><span>TRUE</span></strong> ，反之则返回 <strong><span>FALSE</span></strong> 。   </p>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>:     <p class="para">     对于语法结构的判断，例如 <span class="function">{@link include_once}</span> 和 <span class="function">{@link echo}</span> 将会返回 <strong><span>FALSE</span></strong> 。    </p>   </p></blockquote>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.function-exists-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-6201">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">function_exists()</strong></span> 的例子</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">if&nbsp;(</span><span style="color: #9876AA">function_exists</span><span style="color: #007700">(</span><span style="color: #DD0000">'imap_open'</span><span style="color: #007700">))&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"IMAP&nbsp;functions&nbsp;are&nbsp;available.&lt;br&nbsp;/&gt;\n"</span><span style="color: #007700">;<br />}&nbsp;else&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"IMAP&nbsp;functions&nbsp;are&nbsp;not&nbsp;available.&lt;br&nbsp;/&gt;\n"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>     </div>   </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.function-exists-notes">   <h3 class="title">注释</h3>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>:     <p class="para">     当本配置或者编译或编译选项禁用某函数时，该函数名也可能存在（ <a href="http://php.net/manual/zh/ref.image.php" class="link">image</a> 就是一个现成的例子）    </p>   </p></blockquote>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.function-exists-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link method_exists()} - 检查类的方法是否存在</span></li>     <li class="member"><span class="function">{@link is_callable()} - 检测参数是否为合法的可调用结构</span></li>     <li class="member"><span class="function">{@link get_defined_functions()} - 返回所有已定义函数的数组</span></li>     <li class="member"><span class="function">{@link class_exists()} - 检查类是否已定义</span></li>     <li class="member"><span class="function">{@link extension_loaded()} - 检查一个扩展是否已经加载</span></li>    </ul>   </span>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.funchand.php">函数处理 函数</a></div></div>
 * @return bool true if <i>function_name</i> exists and is a*/
function function_exists ($function_name) {}

/**
*<div id="function.class-alias" class="refentry">  <div class="refnamediv">   <h1 class="refname">class_alias</h1>   <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7)</p><p class="refpurpose"><span class="refname">class_alias</span> &mdash; <span class="dc-title">为一个类创建别名</span></p>   </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.class-alias-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">bool</span> <span class="methodname" style="color:#CC7832"><strong>class_alias</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#2EACF9">$original</span></span>    , <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#2EACF9">$alias</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#2EACF9">$autoload</span><span class="initializer"> = <strong><span>TRUE</span></strong></span></span>   ] )</div>    <p class="para rdfs-comment">    基于用户定义的类 <span class="parameter" style="color:#2EACF9">original</span> 创建别名 <span class="parameter" style="color:#2EACF9">alias</span>。    这个别名类和原有的类完全相同。   </p>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.class-alias-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">original</span></dt>       <dd>        <p class="para">        原有的类。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">alias</span></dt>       <dd>        <p class="para">        类的别名。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">autoload</span></dt>       <dd>        <p class="para">        如果原始类没有加载，是否使用自动加载（autoload）。       </p>      </dd>          </dl>    </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.class-alias-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    成功时返回 <strong><span>TRUE</span></strong>， 或者在失败时返回 <strong><span>FALSE</span></strong>。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.class-alias-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-6125">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">class_alias()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /><br /></span><span style="color: #007700">class&nbsp;</span><span style="color: #9876AA">foo&nbsp;</span><span style="color: #007700">{&nbsp;}<br /><br /></span><span style="color: #9876AA">class_alias</span><span style="color: #007700">(</span><span style="color: #DD0000">'foo'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'bar'</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$a&nbsp;</span><span style="color: #007700">=&nbsp;new&nbsp;</span><span style="color: #9876AA">foo</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$b&nbsp;</span><span style="color: #007700">=&nbsp;new&nbsp;</span><span style="color: #9876AA">bar</span><span style="color: #007700">;<br /><br /></span><span style="color: #FF8000">//&nbsp;the&nbsp;objects&nbsp;are&nbsp;the&nbsp;same<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$a&nbsp;</span><span style="color: #007700">==&nbsp;</span><span style="color: #9876AA">$b</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$a&nbsp;</span><span style="color: #007700">===&nbsp;</span><span style="color: #9876AA">$b</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$a&nbsp;</span><span style="color: #007700">instanceof&nbsp;</span><span style="color: #9876AA">$b</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">//&nbsp;the&nbsp;classes&nbsp;are&nbsp;the&nbsp;same<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$a&nbsp;</span><span style="color: #007700">instanceof&nbsp;</span><span style="color: #9876AA">foo</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$a&nbsp;</span><span style="color: #007700">instanceof&nbsp;</span><span style="color: #9876AA">bar</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$b&nbsp;</span><span style="color: #007700">instanceof&nbsp;</span><span style="color: #9876AA">foo</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$b&nbsp;</span><span style="color: #007700">instanceof&nbsp;</span><span style="color: #9876AA">bar</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> bool(true) bool(false) bool(true) bool(true) bool(true) bool(true) bool(true) </span></div>     </div>    </div>   </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.class-alias-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link get_parent_class()} - 返回对象或类的父类名</span></li>     <li class="member"><span class="function">{@link is_subclass_of()} - 如果此对象是该类的子类，则返回 TRUE</span></li>    </ul>   </span>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.classobj.php">类/对象 函数</a></div></div>
 * @return bool true on success or false on failure.*/
function class_alias ($original, $alias, $autoload = TRUE) {}

/**
*<div id="function.get-included-files" class="refentry">  <div class="refnamediv">   <h1 class="refname">get_included_files</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">get_included_files</span> &mdash; <span class="dc-title">返回被 include 和 require 文件名的 array</span></p>   </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.get-included-files-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">array</span> <span class="methodname" style="color:#CC7832"><strong>get_included_files</strong></span>     ( <span class="methodparam">void</span>    )</div>    <p class="para rdfs-comment">    返回所有被    <span class="function">{@link include}</span>、 <span class="function">{@link include_once}</span>、    <span class="function">{@link require}</span> 和 <span class="function">{@link require_once}</span>    的文件名。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.get-included-files-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回所有文件名称的 array。   </p>   <p class="para">    脚本最初被称为”被包含的文件“，所以脚本自身也会和 <span class="function">{@link include}</span> 系列函数引用的脚本列在一起。   </p>   <p class="para">    被多次 include 和 require 的文件在返回的 array 里只会列出一次。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.get-included-files-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-498">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">get_included_files()</strong></span> 范例</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">//&nbsp;本文件是&nbsp;abc.php<br /><br /></span><span style="color: #007700">include&nbsp;</span><span style="color: #DD0000">'test1.php'</span><span style="color: #007700">;<br />include_once&nbsp;</span><span style="color: #DD0000">'test2.php'</span><span style="color: #007700">;<br />require&nbsp;</span><span style="color: #DD0000">'test3.php'</span><span style="color: #007700">;<br />require_once&nbsp;</span><span style="color: #DD0000">'test4.php'</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">$included_files&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">get_included_files</span><span style="color: #007700">();<br /><br />foreach&nbsp;(</span><span style="color: #9876AA">$included_files&nbsp;</span><span style="color: #007700">as&nbsp;</span><span style="color: #9876AA">$filename</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"</span><span style="color: #9876AA">$filename</span><span style="color: #DD0000">\n"</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> /path/to/abc.php /path/to/test1.php /path/to/test2.php /path/to/test3.php /path/to/test4.php </span></div>     </div>    </div>   </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.get-included-files-notes">   <h3 class="title">注释</h3>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>:     <p class="para">     使用 <em>auto_prepend_file</em> 配置指令所包含的文件不会包含在返回的数组里。    </p>   </p></blockquote>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.get-included-files-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link include} - include</span></li>     <li class="member"><span class="function">{@link include_once} - include_once</span></li>     <li class="member"><span class="function">{@link require} - require</span></li>     <li class="member"><span class="function">{@link require_once} - require_once</span></li>     <li class="member"><span class="function">{@link get_required_files()} - 别名 get_included_files</span></li>    </ul>   </span>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.info.php">PHP 选项/信息 函数</a></div></div>
 * @return string[] an array of the names of all files.*/
function get_included_files () {}

/**
*<div id="function.get-required-files" class="refentry">  <div class="refnamediv">   <h1 class="refname">get_required_files</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">get_required_files</span> &mdash; <span class="dc-title">别名 <span class="function">{@link get_included_files()}</span></span></p>   </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.get-required-files-description">   <h3 class="title">说明</h3>   <p class="simpara">    此函数是该函数的别名： <span class="function">{@link get_included_files()}</span>.   </p>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.info.php">PHP 选项/信息 函数</a></div></div>
 * @return string[]*/
function get_required_files () {}

/**
*<div id="function.is-subclass-of" class="refentry">  <div class="refnamediv">   <h1 class="refname">is_subclass_of</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">is_subclass_of</span> &mdash; <span class="dc-title">如果此对象是该类的子类，则返回 <strong><span>TRUE</span></strong></span></p>   </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.is-subclass-of-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">bool</span> <span class="methodname" style="color:#CC7832"><strong>is_subclass_of</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">object</span> <span class="parameter" style="color:#2EACF9">$object</span></span>    , <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#2EACF9">$class_name</span></span>    )</div>    <p class="para rdfs-comment">    如果对象 <span class="parameter" style="color:#2EACF9">object</span>    所属类是类 <span class="parameter" style="color:#2EACF9">class_name</span>    的子类，则返回 <strong><span>TRUE</span></strong>，否则返回 <strong><span>FALSE</span></strong>。   </p>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>:     <p class="para">     自 PHP 5.0.3 起也可以用一个字符串来指定 <span class="parameter" style="color:#2EACF9">object</span>     参数（类名）。    </p>   </p></blockquote>   <p class="para">    <div class="example" id="example-6144">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">is_subclass_of()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">//&nbsp;define&nbsp;a&nbsp;class<br /></span><span style="color: #007700">class&nbsp;</span><span style="color: #9876AA">WidgetFactory<br /></span><span style="color: #007700">{<br />&nbsp;&nbsp;var&nbsp;</span><span style="color: #9876AA">$oink&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'moo'</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #FF8000">//&nbsp;define&nbsp;a&nbsp;child&nbsp;class<br /></span><span style="color: #007700">class&nbsp;</span><span style="color: #9876AA">WidgetFactory_Child&nbsp;</span><span style="color: #007700">extends&nbsp;</span><span style="color: #9876AA">WidgetFactory<br /></span><span style="color: #007700">{<br />&nbsp;&nbsp;var&nbsp;</span><span style="color: #9876AA">$oink&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'oink'</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #FF8000">//&nbsp;create&nbsp;a&nbsp;new&nbsp;object<br /></span><span style="color: #9876AA">$WF&nbsp;</span><span style="color: #007700">=&nbsp;new&nbsp;</span><span style="color: #9876AA">WidgetFactory</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$WFC&nbsp;</span><span style="color: #007700">=&nbsp;new&nbsp;</span><span style="color: #9876AA">WidgetFactory_Child</span><span style="color: #007700">();<br /><br />if&nbsp;(</span><span style="color: #9876AA">is_subclass_of</span><span style="color: #007700">(</span><span style="color: #9876AA">$WFC</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'WidgetFactory'</span><span style="color: #007700">))&nbsp;{<br />&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"yes,&nbsp;\$WFC&nbsp;is&nbsp;a&nbsp;subclass&nbsp;of&nbsp;WidgetFactory\n"</span><span style="color: #007700">;<br />}&nbsp;else&nbsp;{<br />&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"no,&nbsp;\$WFC&nbsp;is&nbsp;not&nbsp;a&nbsp;subclass&nbsp;of&nbsp;WidgetFactory\n"</span><span style="color: #007700">;<br />}<br /><br />if&nbsp;(</span><span style="color: #9876AA">is_subclass_of</span><span style="color: #007700">(</span><span style="color: #9876AA">$WF</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'WidgetFactory'</span><span style="color: #007700">))&nbsp;{<br />&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"yes,&nbsp;\$WF&nbsp;is&nbsp;a&nbsp;subclass&nbsp;of&nbsp;WidgetFactory\n"</span><span style="color: #007700">;<br />}&nbsp;else&nbsp;{<br />&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"no,&nbsp;\$WF&nbsp;is&nbsp;not&nbsp;a&nbsp;subclass&nbsp;of&nbsp;WidgetFactory\n"</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #FF8000">//&nbsp;usable&nbsp;only&nbsp;since&nbsp;PHP&nbsp;5.0.3<br /></span><span style="color: #007700">if&nbsp;(</span><span style="color: #9876AA">is_subclass_of</span><span style="color: #007700">(</span><span style="color: #DD0000">'WidgetFactory_Child'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'WidgetFactory'</span><span style="color: #007700">))&nbsp;{<br />&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"yes,&nbsp;WidgetFactory_Child&nbsp;is&nbsp;a&nbsp;subclass&nbsp;of&nbsp;WidgetFactory\n"</span><span style="color: #007700">;<br />}&nbsp;else&nbsp;{<br />&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"no,&nbsp;WidgetFactory_Child&nbsp;is&nbsp;not&nbsp;a&nbsp;subclass&nbsp;of&nbsp;WidgetFactory\n"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> yes, $WFC is a subclass of WidgetFactory no, $WF is not a subclass of WidgetFactory yes, WidgetFactory_Child is a subclass of WidgetFactory </span></div>     </div>    </div>   </p>   <p class="simpara">    参见 <span class="function">{@link get_class()}</span>、     <span class="function">{@link get_parent_class()}</span> 和     <span class="function">{@link is_a()}</span>。   </p>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.is-subclass-of-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">object</span></dt>       <dd>        <p class="para">        A class name or an object instance       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">class_name</span></dt>       <dd>        <p class="para">        The class name       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">allow_string</span></dt>       <dd>        <p class="para">        If this parameter set to false, string class name as <span class="parameter" style="color:#2EACF9">object</span>        is not allowed. This also prevents from calling autoloader if the class doesn&#039;t exist.       </p>      </dd>          </dl>    </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.is-subclass-of-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    This function returns <strong><span>TRUE</span></strong> if the object <span class="parameter" style="color:#2EACF9">object</span>,    belongs to a class which is a subclass of     <span class="parameter" style="color:#2EACF9">class_name</span>, <strong><span>FALSE</span></strong> otherwise.   </p>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.is-subclass-of-changelog">   <h3 class="title">更新日志</h3>   <span>    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>5.3.9</td>        <td>         Added <span class="parameter" style="color:#2EACF9">allow_string</span> parameter        </td>       </tr>        <tr>        <td>5.0.3</td>        <td>         You may also specify the <span class="parameter" style="color:#2EACF9">object</span> parameter as a         string (the name of the class)        </td>       </tr>       </tbody>         </table>    </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.is-subclass-of-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-6145">     <p><strong>Example #2 <span class="function"><strong style="color:#CC7832">is_subclass_of()</strong></span> example</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">//&nbsp;define&nbsp;a&nbsp;class<br /></span><span style="color: #007700">class&nbsp;</span><span style="color: #9876AA">WidgetFactory<br /></span><span style="color: #007700">{<br />&nbsp;&nbsp;var&nbsp;</span><span style="color: #9876AA">$oink&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'moo'</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #FF8000">//&nbsp;define&nbsp;a&nbsp;child&nbsp;class<br /></span><span style="color: #007700">class&nbsp;</span><span style="color: #9876AA">WidgetFactory_Child&nbsp;</span><span style="color: #007700">extends&nbsp;</span><span style="color: #9876AA">WidgetFactory<br /></span><span style="color: #007700">{<br />&nbsp;&nbsp;var&nbsp;</span><span style="color: #9876AA">$oink&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'oink'</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #FF8000">//&nbsp;create&nbsp;a&nbsp;new&nbsp;object<br /></span><span style="color: #9876AA">$WF&nbsp;</span><span style="color: #007700">=&nbsp;new&nbsp;</span><span style="color: #9876AA">WidgetFactory</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$WFC&nbsp;</span><span style="color: #007700">=&nbsp;new&nbsp;</span><span style="color: #9876AA">WidgetFactory_Child</span><span style="color: #007700">();<br /><br />if&nbsp;(</span><span style="color: #9876AA">is_subclass_of</span><span style="color: #007700">(</span><span style="color: #9876AA">$WFC</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'WidgetFactory'</span><span style="color: #007700">))&nbsp;{<br />&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"yes,&nbsp;</span><span style="color: #9876AA">$WFC</span><span style="color: #DD0000">&nbsp;is&nbsp;a&nbsp;subclass&nbsp;of&nbsp;WidgetFactory\n"</span><span style="color: #007700">;<br />}&nbsp;else&nbsp;{<br />&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"no,&nbsp;</span><span style="color: #9876AA">$WFC</span><span style="color: #DD0000">&nbsp;is&nbsp;not&nbsp;a&nbsp;subclass&nbsp;of&nbsp;WidgetFactory\n"</span><span style="color: #007700">;<br />}<br /><br /><br />if&nbsp;(</span><span style="color: #9876AA">is_subclass_of</span><span style="color: #007700">(</span><span style="color: #9876AA">$WF</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'WidgetFactory'</span><span style="color: #007700">))&nbsp;{<br />&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"yes,&nbsp;</span><span style="color: #9876AA">$WF</span><span style="color: #DD0000">&nbsp;is&nbsp;a&nbsp;subclass&nbsp;of&nbsp;WidgetFactory\n"</span><span style="color: #007700">;<br />}&nbsp;else&nbsp;{<br />&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"no,&nbsp;</span><span style="color: #9876AA">$WF</span><span style="color: #DD0000">&nbsp;is&nbsp;not&nbsp;a&nbsp;subclass&nbsp;of&nbsp;WidgetFactory\n"</span><span style="color: #007700">;<br />}<br /><br /><br /></span><span style="color: #FF8000">//&nbsp;usable&nbsp;only&nbsp;since&nbsp;PHP&nbsp;5.0.3<br /></span><span style="color: #007700">if&nbsp;(</span><span style="color: #9876AA">is_subclass_of</span><span style="color: #007700">(</span><span style="color: #DD0000">'WidgetFactory_Child'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'WidgetFactory'</span><span style="color: #007700">))&nbsp;{<br />&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"yes,&nbsp;WidgetFactory_Child&nbsp;is&nbsp;a&nbsp;subclass&nbsp;of&nbsp;WidgetFactory\n"</span><span style="color: #007700">;<br />}&nbsp;else&nbsp;{<br />&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"no,&nbsp;WidgetFactory_Child&nbsp;is&nbsp;not&nbsp;a&nbsp;subclass&nbsp;of&nbsp;WidgetFactory\n"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> yes, $WFC is a subclass of WidgetFactory no, $WF is not a subclass of WidgetFactory yes, WidgetFactory_Child is a subclass of WidgetFactory </span></div>     </div>    </div>   </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.is-subclass-of-notes">   <h3 class="title">注释</h3>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>: <p class="para">如果此类不是已知类，使用此函数会使用任何已注册的 <a href="http://php.net/manual/zh/language.oop5.autoload.php" class="link">autoloader</a>。</p></p></blockquote>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.is-subclass-of-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link get_class()} - 返回对象的类名</span></li>     <li class="member"><span class="function">{@link get_parent_class()} - 返回对象或类的父类名</span></li>     <li class="member"><span class="function">{@link is_a()} - 如果对象属于该类或该类是此对象的父类则返回 TRUE</span></li>     <li class="member"><span class="function">{@link class_parents()} - 返回指定类的父类。</span></li>    </ul>   </span>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.classobj.php">类/对象 函数</a></div></div>
 * @return bool This function returns true if the object <i>object</i>,*/
function is_subclass_of ($object, $class_name, $allow_string = TRUE) {}

/**
*<div id="function.is-a" class="refentry">  <div class="refnamediv">   <h1 class="refname">is_a</h1>   <p class="verinfo">(PHP 4 &gt;= 4.2.0, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">is_a</span> &mdash; <span class="dc-title">如果对象属于该类或该类是此对象的父类则返回 <strong><span>TRUE</span></strong></span></p>   </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.is-a-description">     <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">bool</span> <span class="methodname" style="color:#CC7832"><strong>is_a</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">object</span> <span class="parameter" style="color:#2EACF9">$object</span></span>    , <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#2EACF9">$class_name</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#2EACF9">$allow_string</span><span class="initializer"> = <strong><span>FALSE</span></strong></span></span>   ] )</div>    <p class="para rdfs-comment">    如果 <span class="parameter" style="color:#2EACF9">object</span> 是该类或该类是此对象的父类。   </p>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.is-a-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">object</span></dt>       <dd>        <p class="para">        The tested object       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">class_name</span></dt>       <dd>        <p class="para">        The class name       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">allow_string</span></dt>       <dd>        <p class="para">        If this parameter set to <strong><span>FALSE</span></strong>, string class name as <span class="parameter" style="color:#2EACF9">object</span>        is not allowed. This also prevents from calling autoloader if the class doesn&#039;t exist.       </p>      </dd>          </dl>    </span>  </div>     <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.is-a-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    Returns <strong><span>TRUE</span></strong> if the object is of this class or has this class as one of    its parents, <strong><span>FALSE</span></strong> otherwise.   </p>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.is-a-changelog">   <h3 class="title">更新日志</h3>   <span>    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>5.3.9</td>        <td>         Added <span class="parameter" style="color:#2EACF9">allow_string</span> parameter        </td>       </tr>        <tr>        <td>5.3.0</td>        <td>         This function is no longer deprecated, and will therefore          no longer throw <strong><span>E_STRICT</span></strong> warnings.        </td>       </tr>        <tr>        <td>5.0.0</td>        <td>         This function became deprecated in favour of the          <a href="http://php.net/manual/zh/language.operators.type.php" class="link">instanceof</a>          operator. Calling this function will result in an          <strong><span>E_STRICT</span></strong> warning.        </td>       </tr>       </tbody>         </table>    </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.is-a-examples">   <h3 class="title">范例</h3>   <span>     <div class="example" id="example-6142">       <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">is_a()</strong></span> 例子</strong></p>       <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">//&nbsp;define&nbsp;a&nbsp;class<br /></span><span style="color: #007700">class&nbsp;</span><span style="color: #9876AA">WidgetFactory<br /></span><span style="color: #007700">{<br />&nbsp;&nbsp;var&nbsp;</span><span style="color: #9876AA">$oink&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'moo'</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #FF8000">//&nbsp;create&nbsp;a&nbsp;new&nbsp;object<br /></span><span style="color: #9876AA">$WF&nbsp;</span><span style="color: #007700">=&nbsp;new&nbsp;</span><span style="color: #9876AA">WidgetFactory</span><span style="color: #007700">();<br /><br />if&nbsp;(</span><span style="color: #9876AA">is_a</span><span style="color: #007700">(</span><span style="color: #9876AA">$WF</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'WidgetFactory'</span><span style="color: #007700">))&nbsp;{<br />&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"yes,&nbsp;\$WF&nbsp;is&nbsp;still&nbsp;a&nbsp;WidgetFactory\n"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>       </div>      </div>    <div class="example" id="example-6143">     <p><strong>Example #2 在 PHP 5 中使用 <em class="emphasis">instanceof</em> 运算符</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">if&nbsp;(</span><span style="color: #9876AA">$WF&nbsp;</span><span style="color: #007700">instanceof&nbsp;</span><span style="color: #9876AA">WidgetFactory</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">'Yes,&nbsp;$WF&nbsp;is&nbsp;a&nbsp;WidgetFactory'</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>     </div>   </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.is-a-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link get_class()} - 返回对象的类名</span></li>     <li class="member"><span class="function">{@link get_parent_class()} - 返回对象或类的父类名</span></li>     <li class="member"><span class="function">{@link is_subclass_of()} - 如果此对象是该类的子类，则返回 TRUE</span></li>    </ul>   </span>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.classobj.php">类/对象 函数</a></div></div>
 * @return bool <b>TRUE</b> if the object is of this class or has this class as one of*/
function is_a ($object, $class_name, $allow_string = FALSE) {}

/**
*<div id="function.get-class-vars" class="refentry">  <div class="refnamediv">   <h1 class="refname">get_class_vars</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">get_class_vars</span> &mdash; <span class="dc-title">返回由类的默认属性组成的数组</span></p>   </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.get-class-vars-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">array</span> <span class="methodname" style="color:#CC7832"><strong>get_class_vars</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#2EACF9">$class_name</span></span>    )</div>    <p class="para rdfs-comment">    返回由类的默认公有属性组成的关联数组。   </p>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.get-class-vars-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">class_name</span></dt>       <dd>        <p class="para">        类名       </p>      </dd>          </dl>    </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.get-class-vars-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    Returns an associative array of declared properties visible from the    current scope, with their default value.    The resulting array elements are in the form of     <em>varname =&gt; value</em>.    In case of an error, it returns <strong><span>FALSE</span></strong>.   </p>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.get-class-vars-changelog">   <h3 class="title">更新日志</h3>   <span>    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>5.0.3</td>        <td>         <span class="function"><strong style="color:#CC7832">get_class_vars()</strong></span> will          only return the properties that can be accessed from the current          scope.        </td>       </tr>        <tr>        <td>5.0.2</td>        <td>         Calling <span class="function"><strong style="color:#CC7832">get_class_vars()</strong></span> will now expose          all the properties as an array, unlike previous behaviour where          protected and private properties were prefixed with nul bytes.        </td>       </tr>        <tr>        <td>5.0.1</td>        <td>         Calling <span class="function"><strong style="color:#CC7832">get_class_vars()</strong></span> will expose all          properties, as when converting an object to a class.        </td>       </tr>       </tbody>         </table>    </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.get-class-vars-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="function.usort.examples.basic">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">get_class_vars()</strong></span> example</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /><br /></span><span style="color: #007700">class&nbsp;</span><span style="color: #9876AA">myclass&nbsp;</span><span style="color: #007700">{<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;</span><span style="color: #9876AA">$var1</span><span style="color: #007700">;&nbsp;</span><span style="color: #FF8000">//&nbsp;this&nbsp;has&nbsp;no&nbsp;default&nbsp;value...<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #007700">var&nbsp;</span><span style="color: #9876AA">$var2&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">"xyz"</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;</span><span style="color: #9876AA">$var3&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">100</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;</span><span style="color: #9876AA">$var4</span><span style="color: #007700">;<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;constructor<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #007700">function&nbsp;</span><span style="color: #9876AA">__construct</span><span style="color: #007700">()&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;change&nbsp;some&nbsp;properties<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">var1&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">"foo"</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">var2&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">"bar"</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;</span><span style="color: #9876AA">true</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;}<br /><br />}<br /><br /></span><span style="color: #9876AA">$my_class&nbsp;</span><span style="color: #007700">=&nbsp;new&nbsp;</span><span style="color: #9876AA">myclass</span><span style="color: #007700">();<br /><br /></span><span style="color: #9876AA">$class_vars&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">get_class_vars</span><span style="color: #007700">(</span><span style="color: #9876AA">get_class</span><span style="color: #007700">(</span><span style="color: #9876AA">$my_class</span><span style="color: #007700">));<br /><br />foreach&nbsp;(</span><span style="color: #9876AA">$class_vars&nbsp;</span><span style="color: #007700">as&nbsp;</span><span style="color: #9876AA">$name&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">$value</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"</span><span style="color: #9876AA">$name</span><span style="color: #DD0000">&nbsp;:&nbsp;</span><span style="color: #9876AA">$value</span><span style="color: #DD0000">\n"</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> var1 : var2 : xyz var3 : 100 </span></div>     </div>    </div>   </span>   <p class="para">    <div class="example" id="function.usort.examples.multi">     <p><strong>Example #2 <span class="function"><strong style="color:#CC7832">get_class_vars()</strong></span> and scoping behaviour</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function&nbsp;</span><span style="color: #9876AA">format</span><span style="color: #007700">(</span><span style="color: #9876AA">$array</span><span style="color: #007700">)<br />{<br />&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;</span><span style="color: #9876AA">implode</span><span style="color: #007700">(</span><span style="color: #DD0000">'|'</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">array_keys</span><span style="color: #007700">(</span><span style="color: #9876AA">$array</span><span style="color: #007700">))&nbsp;.&nbsp;</span><span style="color: #DD0000">"\r\n"</span><span style="color: #007700">;<br />}<br /><br />class&nbsp;</span><span style="color: #9876AA">TestCase<br /></span><span style="color: #007700">{<br />&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;</span><span style="color: #9876AA">$a&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">1</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;protected&nbsp;</span><span style="color: #9876AA">$b&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">2</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;</span><span style="color: #9876AA">$c&nbsp;&nbsp;&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">3</span><span style="color: #007700">;<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;function&nbsp;</span><span style="color: #9876AA">expose</span><span style="color: #007700">()<br />&nbsp;&nbsp;&nbsp;&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #9876AA">format</span><span style="color: #007700">(</span><span style="color: #9876AA">get_class_vars</span><span style="color: #007700">(</span><span style="color: #9876AA">__CLASS__</span><span style="color: #007700">));<br />&nbsp;&nbsp;&nbsp;&nbsp;}<br />}<br /><br /></span><span style="color: #9876AA">TestCase</span><span style="color: #007700">::</span><span style="color: #9876AA">expose</span><span style="color: #007700">();<br />echo&nbsp;</span><span style="color: #9876AA">format</span><span style="color: #007700">(</span><span style="color: #9876AA">get_class_vars</span><span style="color: #007700">(</span><span style="color: #DD0000">'TestCase'</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> // 5.0.0 a| * b| TestCase c a| * b| TestCase c  // 5.0.1 - 5.0.2 a|b|c a|b|c  // 5.0.3 + a|b|c a </span></div>     </div>    </div>   </p>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.get-class-vars-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link get_class_methods()} - 返回由类的方法名组成的数组</span></li>     <li class="member"><span class="function">{@link get_object_vars()} - 返回由对象属性组成的关联数组</span></li>    </ul>   </span>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.classobj.php">类/对象 函数</a></div></div>
 * @return array an associative array of declared properties visible from the*/
function get_class_vars ($class_name) {}

/**
*<div id="function.get-object-vars" class="refentry">  <div class="refnamediv">   <h1 class="refname">get_object_vars</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">get_object_vars</span> &mdash; <span class="dc-title">返回由对象属性组成的关联数组</span></p>   </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.get-object-vars-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">array</span> <span class="methodname" style="color:#CC7832"><strong>get_object_vars</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">object</span> <span class="parameter" style="color:#2EACF9">$obj</span></span>    )</div>    <p class="para rdfs-comment">    返回由 <span class="parameter" style="color:#2EACF9">obj</span>     指定的对象中定义的属性组成的关联数组。   </p>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>:     <p class="para">     在 PHP 4.2.0 之前的版本中，如果在 <span class="parameter" style="color:#2EACF9">obj</span>     对象实例中声明的变量没有被赋值，则它们将不会在返回的数组中。而在     PHP 4.2.0 之后，这些变量作为键名将被赋予 <strong><span>NULL</span></strong> 值。    </p>   </p></blockquote>   <p class="para">    <div class="example" id="example-6137">     <p><strong>Example #1 使用 <span class="function"><strong style="color:#CC7832">get_object_vars()</strong></span></strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">class&nbsp;</span><span style="color: #9876AA">Point2D&nbsp;</span><span style="color: #007700">{<br />&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;</span><span style="color: #9876AA">$x</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$y</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;</span><span style="color: #9876AA">$label</span><span style="color: #007700">;<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;</span><span style="color: #9876AA">Point2D</span><span style="color: #007700">(</span><span style="color: #9876AA">$x</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$y</span><span style="color: #007700">)<br />&nbsp;&nbsp;&nbsp;&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">x&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">$x</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">y&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">$y</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;}<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;</span><span style="color: #9876AA">setLabel</span><span style="color: #007700">(</span><span style="color: #9876AA">$label</span><span style="color: #007700">)<br />&nbsp;&nbsp;&nbsp;&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">label&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">$label</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;}<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;</span><span style="color: #9876AA">getPoint</span><span style="color: #007700">()<br />&nbsp;&nbsp;&nbsp;&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;array(</span><span style="color: #DD0000">"x"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">x</span><span style="color: #007700">,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #DD0000">"y"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">y</span><span style="color: #007700">,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #DD0000">"label"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">label</span><span style="color: #007700">);<br />&nbsp;&nbsp;&nbsp;&nbsp;}<br />}<br /><br /></span><span style="color: #FF8000">//&nbsp;"$label"&nbsp;is&nbsp;declared&nbsp;but&nbsp;not&nbsp;defined<br /></span><span style="color: #9876AA">$p1&nbsp;</span><span style="color: #007700">=&nbsp;new&nbsp;</span><span style="color: #9876AA">Point2D</span><span style="color: #007700">(</span><span style="color: #9876AA">1.233</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">3.445</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">get_object_vars</span><span style="color: #007700">(</span><span style="color: #9876AA">$p1</span><span style="color: #007700">));<br /><br /></span><span style="color: #9876AA">$p1</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setLabel</span><span style="color: #007700">(</span><span style="color: #DD0000">"point&nbsp;#1"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">get_object_vars</span><span style="color: #007700">(</span><span style="color: #9876AA">$p1</span><span style="color: #007700">));<br /><br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>      <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span>  Array  (      [x] =&gt; 1.233      [y] =&gt; 3.445      [label] =&gt;  )   Array  (      [x] =&gt; 1.233      [y] =&gt; 3.445      [label] =&gt; point #1  ) </span></div>     </div>    </div>   </p>   <p class="simpara">    参见 <span class="function">{@link get_class_methods()}</span> 和    <span class="function">{@link get_class_vars()}</span>。   </p>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.get-object-vars-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">object</span></dt>       <dd>        <p class="para">        An object instance.       </p>      </dd>          </dl>    </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.get-object-vars-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    Returns an associative array of defined object accessible non-static properties     for the specified <span class="parameter" style="color:#2EACF9">object</span> in scope. If a property have     not been assigned a value, it will be returned with a <strong><span>NULL</span></strong> value.   </p>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.get-object-vars-changelog">   <h3 class="title">更新日志</h3>   <span>    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>5.3.0</td>        <td>         This function now returns <span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.types.null.php" class="type NULL" style="color:#EAB766">NULL</a></span> if the          <span class="parameter" style="color:#2EACF9">object</span> isn&#039;t an object.        </td>       </tr>        <tr>        <td>prior to 5.3.0</td>        <td>         If the <span class="parameter" style="color:#2EACF9">object</span> isn&#039;t an object, then          <span class="function"><strong style="color:#CC7832">get_object_vars()</strong></span> would return <strong><span>FALSE</span></strong>        </td>       </tr>        <tr>        <td>prior to 4.2.0</td>        <td>         If the variables declared in the class of which the         <span class="parameter" style="color:#2EACF9">object</span> is an instance, have not been assigned a         value, those will not be returned in the array        </td>       </tr>       </tbody>         </table>    </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.get-object-vars-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-6138">     <p><strong>Example #2 Use of <span class="function"><strong style="color:#CC7832">get_object_vars()</strong></span></strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /><br /></span><span style="color: #007700">class&nbsp;</span><span style="color: #9876AA">foo&nbsp;</span><span style="color: #007700">{<br />&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;</span><span style="color: #9876AA">$a</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;</span><span style="color: #9876AA">$b&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">1</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;</span><span style="color: #9876AA">$c</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;</span><span style="color: #9876AA">$d</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;static&nbsp;</span><span style="color: #9876AA">$e</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;function&nbsp;</span><span style="color: #9876AA">test</span><span style="color: #007700">()&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">get_object_vars</span><span style="color: #007700">(</span><span style="color: #9876AA">$this</span><span style="color: #007700">));<br />&nbsp;&nbsp;&nbsp;&nbsp;}<br />}<br /><br /></span><span style="color: #9876AA">$test&nbsp;</span><span style="color: #007700">=&nbsp;new&nbsp;</span><span style="color: #9876AA">foo</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">get_object_vars</span><span style="color: #007700">(</span><span style="color: #9876AA">$test</span><span style="color: #007700">));<br /><br /></span><span style="color: #9876AA">$test</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">test</span><span style="color: #007700">();<br /><br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> array(2) {   [&quot;b&quot;]=&gt;   int(1)   [&quot;c&quot;]=&gt;   NULL } array(4) {   [&quot;a&quot;]=&gt;   NULL   [&quot;b&quot;]=&gt;   int(1)   [&quot;c&quot;]=&gt;   NULL   [&quot;d&quot;]=&gt;   NULL } </span></div>     </div>    </div>   </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.get-object-vars-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link get_class_methods()} - 返回由类的方法名组成的数组</span></li>     <li class="member"><span class="function">{@link get_class_vars()} - 返回由类的默认属性组成的数组</span></li>    </ul>   </span>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.classobj.php">类/对象 函数</a></div></div>
 * @return array an associative array of defined object accessible non-static properties */
function get_object_vars ($object) {}

/**
*<div id="function.get-class-methods" class="refentry">  <div class="refnamediv">   <h1 class="refname">get_class_methods</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">get_class_methods</span> &mdash; <span class="dc-title">返回由类的方法名组成的数组</span></p>   </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.get-class-methods-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">array</span> <span class="methodname" style="color:#CC7832"><strong>get_class_methods</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#2EACF9">$class_name</span></span>    )</div>    <p class="para rdfs-comment">    返回由类的方法名组成的数组。   </p>  </div>     <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.get-class-methods-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">class_name</span></dt>       <dd>        <p class="para">        类名或者对象实例。       </p>      </dd>          </dl>    </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.get-class-methods-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回由 <span class="parameter" style="color:#2EACF9">class_name</span>    指定的类中定义的方法名所组成的数组。如果出错，则返回 <strong><span>NULL</span></strong>。   </p>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.get-class-methods-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-6129">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">get_class_methods()</strong></span> 示例</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /><br /></span><span style="color: #007700">class&nbsp;</span><span style="color: #9876AA">myclass&nbsp;</span><span style="color: #007700">{<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;constructor<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #007700">function&nbsp;</span><span style="color: #9876AA">myclass</span><span style="color: #007700">()<br />&nbsp;&nbsp;&nbsp;&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(</span><span style="color: #9876AA">true</span><span style="color: #007700">);<br />&nbsp;&nbsp;&nbsp;&nbsp;}<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;method&nbsp;1<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #007700">function&nbsp;</span><span style="color: #9876AA">myfunc1</span><span style="color: #007700">()<br />&nbsp;&nbsp;&nbsp;&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(</span><span style="color: #9876AA">true</span><span style="color: #007700">);<br />&nbsp;&nbsp;&nbsp;&nbsp;}<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;method&nbsp;2<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #007700">function&nbsp;</span><span style="color: #9876AA">myfunc2</span><span style="color: #007700">()<br />&nbsp;&nbsp;&nbsp;&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(</span><span style="color: #9876AA">true</span><span style="color: #007700">);<br />&nbsp;&nbsp;&nbsp;&nbsp;}<br />}<br /><br /></span><span style="color: #9876AA">$class_methods&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">get_class_methods</span><span style="color: #007700">(</span><span style="color: #DD0000">'myclass'</span><span style="color: #007700">);<br /></span><span style="color: #FF8000">//&nbsp;or<br /></span><span style="color: #9876AA">$class_methods&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">get_class_methods</span><span style="color: #007700">(new&nbsp;</span><span style="color: #9876AA">myclass</span><span style="color: #007700">());<br /><br />foreach&nbsp;(</span><span style="color: #9876AA">$class_methods&nbsp;</span><span style="color: #007700">as&nbsp;</span><span style="color: #9876AA">$method_name</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"</span><span style="color: #9876AA">$method_name</span><span style="color: #DD0000">\n"</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> myclass myfunc1 myfunc2 </span></div>     </div>    </div>   </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.get-class-methods-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link get_class()} - 返回对象的类名</span></li>     <li class="member"><span class="function">{@link get_class_vars()} - 返回由类的默认属性组成的数组</span></li>     <li class="member"><span class="function">{@link get_object_vars()} - 返回由对象属性组成的关联数组</span></li>    </ul>   </span>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.classobj.php">类/对象 函数</a></div></div>
 * @return array an array of method names defined for the class specified by*/
function get_class_methods ($class_name) {}

/**
*<div id="function.trigger-error" class="refentry">  <div class="refnamediv">   <h1 class="refname">trigger_error</h1>   <p class="verinfo">(PHP 4 &gt;= 4.0.1, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">trigger_error</span> &mdash; <span class="dc-title">产生一个用户级别的 error/warning/notice 信息</span></p>   </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.trigger-error-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">bool</span> <span class="methodname" style="color:#CC7832"><strong>trigger_error</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#2EACF9">$error_msg</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#2EACF9">$error_type</span><span class="initializer"> = E_USER_NOTICE</span></span>   ] )</div>    <p class="para rdfs-comment">    用于触发一个用户级别的错误条件，它能结合内置的错误处理器所关联，或者可以使用用户定义的函数作为新的错误处理程序(<span class="function">{@link set_error_handler()}</span>)。   </p>   <p class="para">    该函数在你运行出现异常时，需要产生一个特定的响应时非常有用。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.trigger-error-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">error_msg</span></dt>       <dd>        <p class="para">        该 error 的特定错误信息，长度限制在了 1024 个字节。超过 1024 字节的字符都会被截断。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">error_type</span></dt>       <dd>        <p class="para">        该 error 所特定的错误类型。仅 E_USER 系列常量对其有效，默认是 <strong><span>E_USER_NOTICE</span></strong>。       </p>      </dd>          </dl>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.trigger-error-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    如果指定了错误的 <span class="parameter" style="color:#2EACF9">error_type</span> 会返回 <strong><span>FALSE</span></strong> ，正确则返回 <strong><span>TRUE</span></strong>。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.trigger-error-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-466">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">trigger_error()</strong></span> 示例</strong></p>     <div class="example-contents"><p>      <span class="function">{@link set_error_handler()}</span> 可见到更多详细的例子。     </p></div>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">if&nbsp;(</span><span style="color: #9876AA">$divisor&nbsp;</span><span style="color: #007700">==&nbsp;</span><span style="color: #9876AA">0</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">trigger_error</span><span style="color: #007700">(</span><span style="color: #DD0000">"Cannot&nbsp;divide&nbsp;by&nbsp;zero"</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">E_USER_ERROR</span><span style="color: #007700">);<br />}<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>     </div>   </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.trigger-error-notes">   <h3 class="title">注释</h3>   <div class="warning"><strong class="warning">Warning</strong>    <p class="para">      在 <span class="parameter" style="color:#2EACF9">error_msg</span> 里的HTML实体 并不会被转义。      如果错误消息要显示在浏览器里，需要对错误消息使用 <span class="function">{@link htmlentities()}</span>。    </p>   </div>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.trigger-error-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link error_reporting()} - 设置应该报告何种 PHP 错误</span></li>     <li class="member"><span class="function">{@link set_error_handler()} - 设置用户自定义的错误处理函数</span></li>     <li class="member"><span class="function">{@link restore_error_handler()} - 还原之前的错误处理函数</span></li>     <li class="member">The <a href="http://php.net/manual/zh/errorfunc.constants.php" class="link">错误级别常量</a></li>    </ul>   </span>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.errorfunc.php">错误处理 函数</a></div></div>
 * @return bool This function returns false if wrong <i>error_type</i> is*/
function trigger_error ($error_msg, $error_type = E_USER_NOTICE) {}

/**
*<div id="function.user-error" class="refentry">  <div class="refnamediv">   <h1 class="refname">user_error</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">user_error</span> &mdash; <span class="dc-title"><span class="function">{@link trigger_error()}</span> 的别名</span></p>   </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.user-error-description">   <h3 class="title">说明</h3>   <p class="para">    此函数是该函数的别名： <span class="function">{@link trigger_error()}</span>.   </p>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.errorfunc.php">错误处理 函数</a></div></div>
*/
function user_error ($message, $error_type) {}

/**
*<div id="function.set-error-handler" class="refentry">  <div class="refnamediv">   <h1 class="refname">set_error_handler</h1>   <p class="verinfo">(PHP 4 &gt;= 4.0.1, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">set_error_handler</span> &mdash; <span class="dc-title">设置用户自定义的错误处理函数</span></p>   </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.set-error-handler-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="methodname" style="color:#CC7832"><strong>set_error_handler</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#2EACF9">$error_handler</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#2EACF9">$error_types</span><span class="initializer"> = E_ALL | E_STRICT</span></span>   ] )</div>    <p class="para rdfs-comment">    设置用户的函数 (<span class="parameter" style="color:#2EACF9">error_handler</span>) 来处理脚本中出现的错误。   </p>   <p class="para">    本函数可以用你自己定义的方式来处理运行中的错误，    例如，在应用程序中严重错误发生时，或者在特定条件下触发了一个错误(使用    <span class="function">{@link trigger_error()}</span>)，你需要对数据/文件做清理回收。   </p>   <p class="para">    重要的是要记住 <span class="parameter" style="color:#2EACF9">error_types</span> 里指定的错误类型都会绕过 PHP 标准错误处理程序，    除非回调函数返回了 <strong><span>FALSE</span></strong>。    <span class="function">{@link error_reporting()}</span> 设置将不会起到作用而你的错误处理函数继续会被调用    —— 不过你仍然可以获取 <a href="http://php.net/manual/zh/errorfunc.configuration.php#ini.error-reporting" class="link">error_reporting</a> 的当前值，并做适当处理。    需要特别注意的是带 <a href="http://php.net/manual/zh/language.operators.errorcontrol.php" class="link">@ error-control    operator</a> 前缀的语句发生错误时，这个值会是 0。   </p>   <p class="para">    同时注意，在需要时你有责任使用 <span class="function">{@link die()}</span>。    如果错误处理程序返回了，脚本将会继续执行发生错误的后一行。   </p>   <p class="para">    以下级别的错误不能由用户定义的函数来处理：    <strong><span>E_ERROR</span></strong>、 <strong><span>E_PARSE</span></strong>、    <strong><span>E_CORE_ERROR</span></strong>、 <strong><span>E_CORE_WARNING</span></strong>、    <strong><span>E_COMPILE_ERROR</span></strong>、    <strong><span>E_COMPILE_WARNING</span></strong>，和在    调用 <span class="function"><strong style="color:#CC7832">set_error_handler()</strong></span> 函数所在文件中产生的大多数    <strong><span>E_STRICT</span></strong>。   </p>   <p class="para">    如果错误发生在脚本执行之前（比如文件上传时），将不会    调用自定义的错误处理程序因为它尚未在那时注册。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.set-error-handler-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">error_handler</span></dt>       <dd>        <p class="para">        以下格式的回调（callback）：        可以传入 <strong><span>NULL</span></strong> 重置处理程序到默认状态。        除了可以传入函数名，还可以传入引用对象和对象方法名的数组。       </p>       <p class="para">        <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">         <span class="type" style="color:#EAB766">bool</span> <span class="methodname" style="color:#CC7832"><span class="replaceable">handler</span></span>          ( <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#2EACF9">$errno</span></span>         , <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#2EACF9">$errstr</span></span>         [, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#2EACF9">$errfile</span></span>         [, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#2EACF9">$errline</span></span>         [, <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#2EACF9">$errcontext</span></span>        ]]] )</div>         <dl>                    <dt> <span class="parameter" style="color:#2EACF9">errno</span></dt>           <dd>            <span class="simpara">            第一个参数 <span class="parameter" style="color:#2EACF9">errno</span>，包含了错误的级别，是一个 integer。           </span>          </dd>                             <dt> <span class="parameter" style="color:#2EACF9">errstr</span></dt>           <dd>            <span class="simpara">            第二个参数 <span class="parameter" style="color:#2EACF9">errstr</span>，包含了错误的信息，是一个 string。           </span>          </dd>                             <dt> <span class="parameter" style="color:#2EACF9">errfile</span></dt>           <dd>            <span class="simpara">            第三个参数是可选的，<span class="parameter" style="color:#2EACF9">errfile</span>，            包含了发生错误的文件名，是一个 string。           </span>          </dd>                             <dt> <span class="parameter" style="color:#2EACF9">errline</span></dt>           <dd>            <span class="simpara">            第四个参数是一个可选项， <span class="parameter" style="color:#2EACF9">errline</span>，            包含了错误发生的行号，是一个 integer。           </span>          </dd>                             <dt> <span class="parameter" style="color:#2EACF9">errcontext</span></dt>           <dd>            <span class="simpara">            第五个可选参数， <span class="parameter" style="color:#2EACF9">errcontext</span>，            是一个指向错误发生时活动符号表的 array。            也就是说，<span class="parameter" style="color:#2EACF9">errcontext</span>            会包含错误触发处作用域内所有变量的数组。            用户的错误处理程序不应该修改错误上下文（context）。           </span>           <div class="warning"><strong class="warning">Warning</strong>            <p class="simpara">             PHP 7.2.0 后此参数被<em class="emphasis">弃用</em>了。             极其不建议依赖它。            </p>           </div>          </dd>                  </dl>        </p>       <p class="para">        如果函数返回 <strong><span>FALSE</span></strong>，标准错误处理处理程序将会继续调用。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">error_types</span></dt>       <dd>        <p class="para">        就像<a href="http://php.net/manual/zh/errorfunc.configuration.php#ini.error-reporting" class="link">error_reporting</a> 的 ini 设置能够控制错误的显示一样，         此参数能够用于屏蔽 <span class="parameter" style="color:#2EACF9">error_handler</span> 的触发。        如果没有该掩码，        无论 <a href="http://php.net/manual/zh/errorfunc.configuration.php#ini.error-reporting" class="link">error_reporting</a> 是如何设置的，        <span class="parameter" style="color:#2EACF9">error_handler</span> 都会在每个错误发生时被调用。       </p>      </dd>          </dl>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.set-error-handler-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    如果之前有定义过错误处理程序，则返回该程序名称的 string；如果是内置的错误处理程序，则返回 <strong><span>NULL</span></strong>。    如果你指定了一个无效的回调函数，同样会返回 <strong><span>NULL</span></strong>。    如果之前的错误处理程序是一个类的方法，此函数会返回一个带类和方法名的索引数组(indexed array)。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.set-error-handler-changelog">   <h3 class="title">更新日志</h3>   <span>    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>7.2.0</td>        <td>         <span class="parameter" style="color:#2EACF9">errcontext</span> 被废弃。         使用此参数时会导致 <strong><span>E_DEPRECATED</span></strong> 提醒。        </td>       </tr>        <tr>        <td>5.5.0</td>        <td>         <span class="parameter" style="color:#2EACF9">error_handler</span> 可接收 <strong><span>NULL</span></strong>。        </td>       </tr>        <tr>        <td>5.2.0</td>        <td>         错误处理器必须返回 <strong><span>FALSE</span></strong> 来显示         <var class="varname"><var class="varname"><a href="http://php.net/manual/zh/reserved.variables.phperrormsg.php" class="classname">$php_errormsg</a></var></var>。        </td>       </tr>       </tbody>         </table>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.set-error-handler-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-464">     <p><strong>Example #1 用 <span class="function"><strong style="color:#CC7832">set_error_handler()</strong></span> 和 <span class="function">{@link trigger_error()}</span> 进行错误处理</strong></p>     <div class="example-contents"><p>      以下示例展示了通过触发错误并以用户自定义的程序来进行内部异常的处理。     </p></div>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">//&nbsp;error&nbsp;handler&nbsp;function<br /></span><span style="color: #007700">function&nbsp;</span><span style="color: #9876AA">myErrorHandler</span><span style="color: #007700">(</span><span style="color: #9876AA">$errno</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$errstr</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$errfile</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$errline</span><span style="color: #007700">)<br />{<br />&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!(</span><span style="color: #9876AA">error_reporting</span><span style="color: #007700">()&nbsp;&amp;&nbsp;</span><span style="color: #9876AA">$errno</span><span style="color: #007700">))&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;This&nbsp;error&nbsp;code&nbsp;is&nbsp;not&nbsp;included&nbsp;in&nbsp;error_reporting,&nbsp;so&nbsp;let&nbsp;it&nbsp;fall<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;through&nbsp;to&nbsp;the&nbsp;standard&nbsp;PHP&nbsp;error&nbsp;handler<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #007700">return&nbsp;</span><span style="color: #9876AA">false</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;}<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;switch&nbsp;(</span><span style="color: #9876AA">$errno</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;</span><span style="color: #9876AA">E_USER_ERROR</span><span style="color: #007700">:<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"&lt;b&gt;My&nbsp;ERROR&lt;/b&gt;&nbsp;[</span><span style="color: #9876AA">$errno</span><span style="color: #DD0000">]&nbsp;</span><span style="color: #9876AA">$errstr</span><span style="color: #DD0000">&lt;br&nbsp;/&gt;\n"</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"&nbsp;&nbsp;Fatal&nbsp;error&nbsp;on&nbsp;line&nbsp;</span><span style="color: #9876AA">$errline</span><span style="color: #DD0000">&nbsp;in&nbsp;file&nbsp;</span><span style="color: #9876AA">$errfile</span><span style="color: #DD0000">"</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">",&nbsp;PHP&nbsp;"&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #9876AA">PHP_VERSION&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #DD0000">"&nbsp;("&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #9876AA">PHP_OS&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #DD0000">")&lt;br&nbsp;/&gt;\n"</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"Aborting...&lt;br&nbsp;/&gt;\n"</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit(</span><span style="color: #9876AA">1</span><span style="color: #007700">);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;</span><span style="color: #9876AA">E_USER_WARNING</span><span style="color: #007700">:<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"&lt;b&gt;My&nbsp;WARNING&lt;/b&gt;&nbsp;[</span><span style="color: #9876AA">$errno</span><span style="color: #DD0000">]&nbsp;</span><span style="color: #9876AA">$errstr</span><span style="color: #DD0000">&lt;br&nbsp;/&gt;\n"</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;</span><span style="color: #9876AA">E_USER_NOTICE</span><span style="color: #007700">:<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"&lt;b&gt;My&nbsp;NOTICE&lt;/b&gt;&nbsp;[</span><span style="color: #9876AA">$errno</span><span style="color: #DD0000">]&nbsp;</span><span style="color: #9876AA">$errstr</span><span style="color: #DD0000">&lt;br&nbsp;/&gt;\n"</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;default:<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"Unknown&nbsp;error&nbsp;type:&nbsp;[</span><span style="color: #9876AA">$errno</span><span style="color: #DD0000">]&nbsp;</span><span style="color: #9876AA">$errstr</span><span style="color: #DD0000">&lt;br&nbsp;/&gt;\n"</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br />&nbsp;&nbsp;&nbsp;&nbsp;}<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;Don't&nbsp;execute&nbsp;PHP&nbsp;internal&nbsp;error&nbsp;handler&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #007700">return&nbsp;</span><span style="color: #9876AA">true</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #FF8000">//&nbsp;function&nbsp;to&nbsp;test&nbsp;the&nbsp;error&nbsp;handling<br /></span><span style="color: #007700">function&nbsp;</span><span style="color: #9876AA">scale_by_log</span><span style="color: #007700">(</span><span style="color: #9876AA">$vect</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$scale</span><span style="color: #007700">)<br />{<br />&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!</span><span style="color: #9876AA">is_numeric</span><span style="color: #007700">(</span><span style="color: #9876AA">$scale</span><span style="color: #007700">)&nbsp;||&nbsp;</span><span style="color: #9876AA">$scale&nbsp;</span><span style="color: #007700">&lt;=&nbsp;</span><span style="color: #9876AA">0</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">trigger_error</span><span style="color: #007700">(</span><span style="color: #DD0000">"log(x)&nbsp;for&nbsp;x&nbsp;&lt;=&nbsp;0&nbsp;is&nbsp;undefined,&nbsp;you&nbsp;used:&nbsp;scale&nbsp;=&nbsp;</span><span style="color: #9876AA">$scale</span><span style="color: #DD0000">"</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">E_USER_ERROR</span><span style="color: #007700">);<br />&nbsp;&nbsp;&nbsp;&nbsp;}<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!</span><span style="color: #9876AA">is_array</span><span style="color: #007700">(</span><span style="color: #9876AA">$vect</span><span style="color: #007700">))&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">trigger_error</span><span style="color: #007700">(</span><span style="color: #DD0000">"Incorrect&nbsp;input&nbsp;vector,&nbsp;array&nbsp;of&nbsp;values&nbsp;expected"</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">E_USER_WARNING</span><span style="color: #007700">);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;</span><span style="color: #9876AA">null</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;}<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$temp&nbsp;</span><span style="color: #007700">=&nbsp;array();<br />&nbsp;&nbsp;&nbsp;&nbsp;foreach(</span><span style="color: #9876AA">$vect&nbsp;</span><span style="color: #007700">as&nbsp;</span><span style="color: #9876AA">$pos&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #9876AA">$value</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!</span><span style="color: #9876AA">is_numeric</span><span style="color: #007700">(</span><span style="color: #9876AA">$value</span><span style="color: #007700">))&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">trigger_error</span><span style="color: #007700">(</span><span style="color: #DD0000">"Value&nbsp;at&nbsp;position&nbsp;</span><span style="color: #9876AA">$pos</span><span style="color: #DD0000">&nbsp;is&nbsp;not&nbsp;a&nbsp;number,&nbsp;using&nbsp;0&nbsp;(zero)"</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">E_USER_NOTICE</span><span style="color: #007700">);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$value&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">0</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$temp</span><span style="color: #007700">[</span><span style="color: #9876AA">$pos</span><span style="color: #007700">]&nbsp;=&nbsp;</span><span style="color: #9876AA">log</span><span style="color: #007700">(</span><span style="color: #9876AA">$scale</span><span style="color: #007700">)&nbsp;*&nbsp;</span><span style="color: #9876AA">$value</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;}<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;</span><span style="color: #9876AA">$temp</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #FF8000">//&nbsp;set&nbsp;to&nbsp;the&nbsp;user&nbsp;defined&nbsp;error&nbsp;handler<br /></span><span style="color: #9876AA">$old_error_handler&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">set_error_handler</span><span style="color: #007700">(</span><span style="color: #DD0000">"myErrorHandler"</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">//&nbsp;trigger&nbsp;some&nbsp;errors,&nbsp;first&nbsp;define&nbsp;a&nbsp;mixed&nbsp;array&nbsp;with&nbsp;a&nbsp;non-numeric&nbsp;item<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #DD0000">"vector&nbsp;a\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$a&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #9876AA">2</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">3</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"foo"</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">5.5</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">43.3</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">21.11</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">//&nbsp;now&nbsp;generate&nbsp;second&nbsp;array<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #DD0000">"----\nvector&nbsp;b&nbsp;-&nbsp;a&nbsp;notice&nbsp;(b&nbsp;=&nbsp;log(PI)&nbsp;*&nbsp;a)\n"</span><span style="color: #007700">;<br /></span><span style="color: #FF8000">//&nbsp;Value&nbsp;at&nbsp;position&nbsp;$pos&nbsp;is&nbsp;not&nbsp;a&nbsp;number,&nbsp;using&nbsp;0&nbsp;(zero)&nbsp;<br /></span><span style="color: #9876AA">$b&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">scale_by_log</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">M_PI</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$b</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">//&nbsp;this&nbsp;is&nbsp;trouble,&nbsp;we&nbsp;pass&nbsp;a&nbsp;string&nbsp;instead&nbsp;of&nbsp;an&nbsp;array<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #DD0000">"----\nvector&nbsp;c&nbsp;-&nbsp;a&nbsp;warning\n"</span><span style="color: #007700">;<br /></span><span style="color: #FF8000">//&nbsp;Incorrect&nbsp;input&nbsp;vector,&nbsp;array&nbsp;of&nbsp;values&nbsp;expected&nbsp;<br /></span><span style="color: #9876AA">$c&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">scale_by_log</span><span style="color: #007700">(</span><span style="color: #DD0000">"not&nbsp;array"</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">2.3</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$c</span><span style="color: #007700">);&nbsp;</span><span style="color: #FF8000">//&nbsp;NULL<br /><br />//&nbsp;this&nbsp;is&nbsp;a&nbsp;critical&nbsp;error,&nbsp;log&nbsp;of&nbsp;zero&nbsp;or&nbsp;negative&nbsp;number&nbsp;is&nbsp;undefined<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #DD0000">"----\nvector&nbsp;d&nbsp;-&nbsp;fatal&nbsp;error\n"</span><span style="color: #007700">;<br /></span><span style="color: #FF8000">//&nbsp;log(x)&nbsp;for&nbsp;x&nbsp;&lt;=&nbsp;0&nbsp;is&nbsp;undefined,&nbsp;you&nbsp;used:&nbsp;scale&nbsp;=&nbsp;$scale"&nbsp;<br /></span><span style="color: #9876AA">$d&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">scale_by_log</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">,&nbsp;-</span><span style="color: #9876AA">2.5</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$d</span><span style="color: #007700">);&nbsp;</span><span style="color: #FF8000">//&nbsp;Never&nbsp;reached<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程的输出类似于：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> vector a Array (     [0] =&gt; 2     [1] =&gt; 3     [2] =&gt; foo     [3] =&gt; 5.5     [4] =&gt; 43.3     [5] =&gt; 21.11 ) ---- vector b - a notice (b = log(PI) * a) &lt;b&gt;My NOTICE&lt;/b&gt; [1024] Value at position 2 is not a number, using 0 (zero)&lt;br /&gt; Array (     [0] =&gt; 2.2894597716988     [1] =&gt; 3.4341896575482     [2] =&gt; 0     [3] =&gt; 6.2960143721717     [4] =&gt; 49.566804057279     [5] =&gt; 24.165247890281 ) ---- vector c - a warning &lt;b&gt;My WARNING&lt;/b&gt; [512] Incorrect input vector, array of values expected&lt;br /&gt; NULL ---- vector d - fatal error &lt;b&gt;My ERROR&lt;/b&gt; [256] log(x) for x &lt;= 0 is undefined, you used: scale = -2.5&lt;br /&gt;   Fatal error on line 35 in file trigger_error.php, PHP 5.2.1 (FreeBSD)&lt;br /&gt; Aborting...&lt;br /&gt; </span></div>     </div>    </div>   </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.set-error-handler-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><a href="http://php.net/manual/zh/class.errorexception.php" class="classname">ErrorException</a></li>     <li class="member"><span class="function">{@link error_reporting()} - 设置应该报告何种 PHP 错误</span></li>     <li class="member"><span class="function">{@link restore_error_handler()} - 还原之前的错误处理函数</span></li>     <li class="member"><span class="function">{@link trigger_error()} - 产生一个用户级别的 error/warning/notice 信息</span></li>     <li class="member"><a href="http://php.net/manual/zh/errorfunc.constants.php" class="link">error level constants</a></li>     <li class="member"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.callback" class="link">callback</a> 类型的信息</li>    </ul>   </span>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.errorfunc.php">错误处理 函数</a></div></div>
 * @return mixed a string containing the previously defined error handler (if any). If*/
function set_error_handler ($error_handler, $error_types = E_ALL | E_STRICT) {}

/**
*<div id="function.restore-error-handler" class="refentry">  <div class="refnamediv">   <h1 class="refname">restore_error_handler</h1>   <p class="verinfo">(PHP 4 &gt;= 4.0.1, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">restore_error_handler</span> &mdash; <span class="dc-title">还原之前的错误处理函数</span></p>   </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.restore-error-handler-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">bool</span> <span class="methodname" style="color:#CC7832"><strong>restore_error_handler</strong></span>     ( <span class="methodparam">void</span>    )</div>    <p class="para rdfs-comment">        在使用 <span class="function">{@link set_error_handler()}</span> 改变错误处理函数之后，此函数可以    用于还原之前的错误处理程序(可以是内置的或者也可以是用户所定义的函数)。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.restore-error-handler-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    该函数总是返回 <strong><span>TRUE</span></strong>。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.restore-error-handler-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-462">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">restore_error_handler()</strong></span> 范例</strong></p>     <div class="example-contents"><p>      如果是 <span class="function">{@link unserialize()}</span> 导致了一个错误，接下来      会恢复原来的错误处理函数。     </p></div>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function&nbsp;</span><span style="color: #9876AA">unserialize_handler</span><span style="color: #007700">(</span><span style="color: #9876AA">$errno</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$errstr</span><span style="color: #007700">)<br />{<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"Invalid&nbsp;serialized&nbsp;value.\n"</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">$serialized&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'foo'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">set_error_handler</span><span style="color: #007700">(</span><span style="color: #DD0000">'unserialize_handler'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$original&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">unserialize</span><span style="color: #007700">(</span><span style="color: #9876AA">$serialized</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">restore_error_handler</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Invalid serialized value. </span></div>     </div>    </div>   </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.restore-error-handler-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link error_reporting()} - 设置应该报告何种 PHP 错误</span></li>     <li class="member"><span class="function">{@link set_error_handler()} - 设置用户自定义的错误处理函数</span></li>     <li class="member"><span class="function">{@link restore_exception_handler()} - 恢复之前定义过的异常处理函数。</span></li>     <li class="member"><span class="function">{@link trigger_error()} - 产生一个用户级别的 error/warning/notice 信息</span></li>    </ul>   </span>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.errorfunc.php">错误处理 函数</a></div></div>
 * @return bool This function always returns true.*/
function restore_error_handler () {}

/**
*<div id="function.set-exception-handler" class="refentry">  <div class="refnamediv">   <h1 class="refname">set_exception_handler</h1>   <p class="verinfo">(PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">set_exception_handler</span> &mdash; <span class="dc-title">    设置用户自定义的异常处理函数   </span></p>   </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.set-exception-handler-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="methodname" style="color:#CC7832"><strong>set_exception_handler</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#2EACF9">$exception_handler</span></span>    )</div>    <p class="para rdfs-comment">    设置默认的异常处理程序，用于没有用 try/catch 块来捕获的异常。    在 <span class="parameter" style="color:#2EACF9">exception_handler</span> 调用后异常会中止。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.set-exception-handler-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">exception_handler</span></dt>       <dd>        <p class="para">        当一个未捕获的异常发生时所调用函数的名称。        该处理函数需要接受一个参数，该参数是一个抛出的异常对象。        PHP 7 以前的异常处理程序签名：       </p>       <p class="para">        <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">         <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span> <span class="methodname" style="color:#CC7832"><span class="replaceable">handler</span></span>          ( <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/class.exception.php" class="type Exception" style="color:#EAB766">Exception</a></span> <span class="parameter" style="color:#2EACF9">$ex</span></span>         )</div>        </p>       <p class="para">        自 PHP 7 以来，大多数错误抛出  <strong class="classname">Error</strong> 异常，也能被捕获。                <strong class="classname">Error</strong>        和 <a href="http://php.net/manual/zh/class.exception.php" class="classname">Exception</a> 都实现了 <strong class="classname">Throwable</strong> 接口。        PHP 7 起，处理程序的签名：       </p>       <p class="para">        <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">         <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span> <span class="methodname" style="color:#CC7832"><span class="replaceable">handler</span></span>          ( <span class="methodparam"><span class="type" style="color:#EAB766"><span class="type Throwable" style="color:#EAB766">Throwable</span></span> <span class="parameter" style="color:#2EACF9">$ex</span></span>         )</div>        </p>        <p class="para">         也可以传递 <strong><span>NULL</span></strong> 值用于重置异常处理函数为默认值。        </p>       <div class="caution"><strong class="caution">Caution</strong>        <p class="para">         注意，如果在用户回调里将 <span class="parameter" style="color:#2EACF9">ex</span> 参数的类型明确约束为<a href="http://php.net/manual/zh/class.exception.php" class="classname">Exception</a>， PHP 7 中由于异常类型的变化，将会产生问题。        </p>       </div>      </dd>          </dl>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.set-exception-handler-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回之前定义的异常处理程序的名称，或者在错误时返回 <strong><span>NULL</span></strong>。    如果之前没有定义错误处理程序，也会返回 <strong><span>NULL</span></strong>。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.set-exception-handler-changelog">   <h3 class="title">更新日志</h3>   <span>    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>7.0.0</td>        <td>         传入 <span class="parameter" style="color:#2EACF9">exception_handler</span> 的参数从 <a href="http://php.net/manual/zh/class.exception.php" class="classname">Exception</a> 改为 <strong class="classname">Throwable</strong>        </td>       </tr>        <tr>        <td>5.5.0</td>        <td>         之前版本里，如果传入 <strong><span>NULL</span></strong> ，函数会返回 <strong><span>TRUE</span></strong>。         自 PHP 5.5.0 后，会返回上一次的异常处理器。        </td>       </tr>       </tbody>         </table>    </span>  </div>     <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.set-exception-handler-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-465">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">set_exception_handler()</strong></span> 范例</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function&nbsp;</span><span style="color: #9876AA">exception_handler</span><span style="color: #007700">(</span><span style="color: #9876AA">$exception</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"Uncaught&nbsp;exception:&nbsp;"&nbsp;</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$exception</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getMessage</span><span style="color: #007700">(),&nbsp;</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">set_exception_handler</span><span style="color: #007700">(</span><span style="color: #DD0000">'exception_handler'</span><span style="color: #007700">);<br /><br />throw&nbsp;new&nbsp;</span><span style="color: #9876AA">Exception</span><span style="color: #007700">(</span><span style="color: #DD0000">'Uncaught&nbsp;Exception'</span><span style="color: #007700">);<br />echo&nbsp;</span><span style="color: #DD0000">"Not&nbsp;Executed\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>     </div>   </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.set-exception-handler-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link restore_exception_handler()} - 恢复之前定义过的异常处理函数。</span></li>     <li class="member"><span class="function">{@link restore_error_handler()} - 还原之前的错误处理函数</span></li>     <li class="member"><span class="function">{@link error_reporting()} - 设置应该报告何种 PHP 错误</span></li>     <li class="member"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.callback" class="link">callback</a> 类型的信息</li>     <li class="member"><a href="http://php.net/manual/zh/language.exceptions.php" class="link">PHP 5 异常</a></li>    </ul>   </span>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.errorfunc.php">错误处理 函数</a></div></div>
 * @return callable|null the name of the previously defined exception handler, or null on error. If*/
function set_exception_handler ($exception_handler) {}

/**
*<div id="function.restore-exception-handler" class="refentry">  <div class="refnamediv">   <h1 class="refname">restore_exception_handler</h1>   <p class="verinfo">(PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">restore_exception_handler</span> &mdash; <span class="dc-title">    恢复之前定义过的异常处理函数。   </span></p>   </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.restore-exception-handler-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">bool</span> <span class="methodname" style="color:#CC7832"><strong>restore_exception_handler</strong></span>     ( <span class="methodparam">void</span>    )</div>    <p class="para rdfs-comment">    在使用 <span class="function">{@link set_exception_handler()}</span> 改变异常处理函数之后，此函数可以    用于还原之前的异常处理程序(可以是内置的或者也可以是用户所定义的函数)。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.restore-exception-handler-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    该函数总是返回 <strong><span>TRUE</span></strong>。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.restore-exception-handler-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-463">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">restore_exception_handler()</strong></span> 范例</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #007700">function&nbsp;</span><span style="color: #9876AA">exception_handler_1</span><span style="color: #007700">(</span><span style="color: #9876AA">Exception&nbsp;$e</span><span style="color: #007700">)<br />&nbsp;&nbsp;&nbsp;&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">'['&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #9876AA">__FUNCTION__&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #DD0000">']&nbsp;'&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #9876AA">$e</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getMessage</span><span style="color: #007700">();<br />&nbsp;&nbsp;&nbsp;&nbsp;}<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;</span><span style="color: #9876AA">exception_handler_2</span><span style="color: #007700">(</span><span style="color: #9876AA">Exception&nbsp;$e</span><span style="color: #007700">)<br />&nbsp;&nbsp;&nbsp;&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">'['&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #9876AA">__FUNCTION__&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #DD0000">']&nbsp;'&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #9876AA">$e</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getMessage</span><span style="color: #007700">();<br />&nbsp;&nbsp;&nbsp;&nbsp;}<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">set_exception_handler</span><span style="color: #007700">(</span><span style="color: #DD0000">'exception_handler_1'</span><span style="color: #007700">);<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">set_exception_handler</span><span style="color: #007700">(</span><span style="color: #DD0000">'exception_handler_2'</span><span style="color: #007700">);<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">restore_exception_handler</span><span style="color: #007700">();<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;</span><span style="color: #9876AA">Exception</span><span style="color: #007700">(</span><span style="color: #DD0000">'This&nbsp;triggers&nbsp;the&nbsp;first&nbsp;exception&nbsp;handler...'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> [exception_handler_1] This triggers the first exception handler... </span></div>     </div>    </div>   </span>  </div>     <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.restore-exception-handler-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link set_exception_handler()} - 设置用户自定义的异常处理函数</span></li>     <li class="member"><span class="function">{@link set_error_handler()} - 设置用户自定义的错误处理函数</span></li>     <li class="member"><span class="function">{@link restore_error_handler()} - 还原之前的错误处理函数</span></li>     <li class="member"><span class="function">{@link error_reporting()} - 设置应该报告何种 PHP 错误</span></li>    </ul>   </span>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.errorfunc.php">错误处理 函数</a></div></div>
 * @return bool This function always returns true.*/
function restore_exception_handler () {}

/**
*<div id="function.get-declared-classes" class="refentry">  <div class="refnamediv">   <h1 class="refname">get_declared_classes</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">get_declared_classes</span> &mdash; <span class="dc-title">返回由已定义类的名字所组成的数组</span></p>   </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.get-declared-classes-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">array</span> <span class="methodname" style="color:#CC7832"><strong>get_declared_classes</strong></span>     ( <span class="methodparam">void</span>    )</div>    <p class="para rdfs-comment">    返回由当前脚本中已定义类的名字组成的数组。   </p>  </div>     <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.get-declared-classes-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">     返回由当前脚本中已定义类的名字组成的数组。   </p>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>:     <p class="para">     需要注意的是额外类的出现依赖于你已编译到 PHP      中的库。这意味着你不能使用这些类名定义自己的类。在附录的     <a href="http://php.net/manual/zh/reserved.classes.php" class="link">预定义类</a>     部分有预定义类的列表。    </p>   </p></blockquote>  </div>     <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.get-declared-classes-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-6135">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">get_declared_classes()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">get_declared_classes</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程的输出类似于：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Array (     [0] =&gt; stdClass     [1] =&gt; __PHP_Incomplete_Class     [2] =&gt; Directory ) </span></div>     </div>    </div>   </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.get-declared-classes-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link class_exists()} - 检查类是否已定义</span></li>     <li class="member"><span class="function">{@link get_declared_interfaces()} - 返回一个数组包含所有已声明的接口</span></li>     <li class="member"><span class="function">{@link get_defined_functions()} - 返回所有已定义函数的数组</span></li>    </ul>   </span>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.classobj.php">类/对象 函数</a></div></div>
 * @return array an array of the names of the declared classes in the current*/
function get_declared_classes () {}

/**
*<div id="function.get-declared-interfaces" class="refentry">  <div class="refnamediv">   <h1 class="refname">get_declared_interfaces</h1>   <p class="verinfo">(PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">get_declared_interfaces</span> &mdash; <span class="dc-title">返回一个数组包含所有已声明的接口</span></p>   </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.get-declared-interfaces-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">array</span> <span class="methodname" style="color:#CC7832"><strong>get_declared_interfaces</strong></span>     ( <span class="methodparam">void</span>    )</div>    <p class="para rdfs-comment">    返回一个数组包含所有已声明的接口。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.get-declared-interfaces-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    本函数返回一个数组，其内容是当前脚本中所有已声明的接口的名字。   </p>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.get-declared-interfaces-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-6136">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">get_declared_interfaces()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">get_declared_interfaces</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程的输出类似于：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Array (     [0] =&gt; Traversable     [1] =&gt; IteratorAggregate     [2] =&gt; Iterator     [3] =&gt; ArrayAccess     [4] =&gt; reflector     [5] =&gt; RecursiveIterator     [6] =&gt; SeekableIterator ) </span></div>     </div>    </div>   </span>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.get-declared-interfaces-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link interface_exists()} - 检查接口是否已被定义</span></li>     <li class="member"><span class="function">{@link get_declared_classes()} - 返回由已定义类的名字所组成的数组</span></li>     <li class="member"><span class="function">{@link class_implements()} - 返回指定的类实现的所有接口。</span></li>    </ul>   </span>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.classobj.php">类/对象 函数</a></div></div>
 * @return array an array of the names of the declared interfaces in the current*/
function get_declared_interfaces () {}

/**
*<div id="function.get-declared-traits" class="refentry">  <div class="refnamediv">   <h1 class="refname">get_declared_traits</h1>   <p class="verinfo">(PHP 5 &gt;= 5.4.0, PHP 7)</p><p class="refpurpose"><span class="refname">get_declared_traits</span> &mdash; <span class="dc-title">返回所有已定义的 traits 的数组</span></p>   </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.get-declared-traits-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">array</span> <span class="methodname" style="color:#CC7832"><strong>get_declared_traits</strong></span>     ( <span class="methodparam">void</span>    )</div>    <p class="para rdfs-comment">    </p>   </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.get-declared-traits-parameters">   <h3 class="title">参数</h3>   <span>此函数没有参数。</span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.get-declared-traits-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回一个数组，其值包含了所有已定义的 traits 的名称。    在失败的情况下返回 <strong><span>NULL</span></strong>。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.get-declared-traits-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link class_uses()} - Return the traits used by the given class</span></li>    </ul>   </span>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.classobj.php">类/对象 函数</a></div></div>
 * @return array with names of all declared traits in values. Returns NULL in case of a failure.*/
function get_declared_traits() {}

/**
*<div id="function.get-defined-functions" class="refentry">  <div class="refnamediv">   <h1 class="refname">get_defined_functions</h1>   <p class="verinfo">(PHP 4 &gt;= 4.0.4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">get_defined_functions</span> &mdash; <span class="dc-title">返回所有已定义函数的数组</span></p>   </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.get-defined-functions-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">array</span> <span class="methodname" style="color:#CC7832"><strong>get_defined_functions</strong></span>     ([ <span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#2EACF9">$exclude_disabled</span><span class="initializer"> = <strong><span>FALSE</span></strong></span></span>   ] )</div>    <p class="para rdfs-comment">    获取所有已定义函数的数组。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.get-defined-functions-parameters">   <h3 class="title">参数</h3>   <dl>          <dt> <span class="parameter" style="color:#2EACF9">exclude_disabled</span></dt>      <dd>       <span>       禁用的函数是否应该在返回的数据里排除。      </span>     </dd>        </dl>   </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.get-defined-functions-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回数组，包含了所有已定义的函数，包括内置(internal) 和用户定义的函数。 可通过<var class="varname"><var class="varname">$arr["internal"]</var></var>来访问系统内置函数， 通过<var class="varname"><var class="varname">$arr["user"]</var></var>来访问用户自定义函数 (参见示例)。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.get-defined-functions-changelog">   <h3 class="title">更新日志</h3>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>      </thead>      <tbody class="tbody">      <tr>       <td>PHP 7.0.15, PHP 7.1.1</td>       <td>        增加 <span class="parameter" style="color:#2EACF9">exclude_disabled</span> 参数。       </td>      </tr>      </tbody>       </table>   </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.get-defined-functions-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-6202">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">get_defined_functions()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function&nbsp;</span><span style="color: #9876AA">myrow</span><span style="color: #007700">(</span><span style="color: #9876AA">$id</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$data</span><span style="color: #007700">)<br />{<br />&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;</span><span style="color: #DD0000">"&lt;tr&gt;&lt;th&gt;</span><span style="color: #9876AA">$id</span><span style="color: #DD0000">&lt;/th&gt;&lt;td&gt;</span><span style="color: #9876AA">$data</span><span style="color: #DD0000">&lt;/td&gt;&lt;/tr&gt;\n"</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">$arr&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">get_defined_functions</span><span style="color: #007700">();<br /><br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$arr</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程的输出类似于：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Array (     [internal] =&gt; Array         (             [0] =&gt; zend_version             [1] =&gt; func_num_args             [2] =&gt; func_get_arg             [3] =&gt; func_get_args             [4] =&gt; strlen             [5] =&gt; strcmp             [6] =&gt; strncmp             ...             [750] =&gt; bcscale             [751] =&gt; bccomp         )      [user] =&gt; Array         (             [0] =&gt; myrow         )  ) </span></div>     </div>    </div>   </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.get-defined-functions-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link function_exists()} - 如果给定的函数已经被定义就返回 TRUE</span></li>     <li class="member"><span class="function">{@link get_defined_vars()} - 返回由所有已定义变量所组成的数组</span></li>     <li class="member"><span class="function">{@link get_defined_constants()} - 返回所有常量的关联数组，键是常量名，值是常量值</span></li>     <li class="member"><span class="function">{@link get_declared_classes()} - 返回由已定义类的名字所组成的数组</span></li>    </ul>   </span>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.funchand.php">函数处理 函数</a></div></div>
 * @return array an multidimensional array containing a list of all defined*/
function get_defined_functions ($exclude_disabled = FALSE) {}

/**
*<div id="function.get-defined-vars" class="refentry">    <div class="refnamediv">     <h1 class="refname">get_defined_vars</h1>     <p class="verinfo">(PHP 4 &gt;= 4.0.4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">get_defined_vars</span> &mdash; <span class="dc-title">      返回由所有已定义变量所组成的数组     </span></p>     </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 unknown-unknown-seealsq" id="refsect1-function.get-defined-vars-unknown-unknown-seealsq">     <h3 class="title">描述</h3>      <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">       <span class="type" style="color:#EAB766">array</span> <span class="methodname" style="color:#CC7832"><strong>get_defined_vars</strong></span>        ( <span class="methodparam">void</span>       )</div>      <p class="para rdfs-comment">      此函数返回一个包含所有已定义变量列表的多维数组，这些变量包括环境变量、服务器变量和用户定义的变量。      <div class="informalexample">       <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$b&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #9876AA">1</span><span style="color: #007700">,</span><span style="color: #9876AA">1</span><span style="color: #007700">,</span><span style="color: #9876AA">2</span><span style="color: #007700">,</span><span style="color: #9876AA">3</span><span style="color: #007700">,</span><span style="color: #9876AA">5</span><span style="color: #007700">,</span><span style="color: #9876AA">8</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$arr&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">get_defined_vars</span><span style="color: #007700">();<br /><br /></span><span style="color: #FF8000">//&nbsp;打印&nbsp;$b<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$arr</span><span style="color: #007700">[</span><span style="color: #DD0000">"b"</span><span style="color: #007700">]);<br /><br /></span><span style="color: #FF8000">//&nbsp;打印&nbsp;PHP&nbsp;解释程序的路径（如果&nbsp;PHP&nbsp;作为&nbsp;CGI&nbsp;使用的话）<br />//&nbsp;例如：/usr/local/bin/php<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #9876AA">$arr</span><span style="color: #007700">[</span><span style="color: #DD0000">"_"</span><span style="color: #007700">];<br /><br /></span><span style="color: #FF8000">//&nbsp;打印命令行参数（如果有的话）<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$arr</span><span style="color: #007700">[</span><span style="color: #DD0000">"argv"</span><span style="color: #007700">]);<br /><br /></span><span style="color: #FF8000">//&nbsp;打印所有服务器变量<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$arr</span><span style="color: #007700">[</span><span style="color: #DD0000">"_SERVER"</span><span style="color: #007700">]);<br /><br /></span><span style="color: #FF8000">//&nbsp;打印变量数组的所有可用键值<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">array_keys</span><span style="color: #007700">(</span><span style="color: #9876AA">get_defined_vars</span><span style="color: #007700">()));<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>       </div>       </div>     </p>     <p class="para">      参见 <span class="function">{@link get_defined_functions()}</span> 和      <span class="function">{@link get_defined_constants()}</span>。     </p>    </div>    <div class="up"><a href="http://php.net/manual/zh/ref.var.php">Variable handling 函数</a></div></div>
 * @return array A multidimensional array with all the variables.*/
function get_defined_vars () {}

/**
*<div id="function.create-function" class="refentry">  <div class="refnamediv">   <h1 class="refname">create_function</h1>   <p class="verinfo">(PHP 4 &gt;= 4.0.1, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">create_function</span> &mdash; <span class="dc-title">Create an anonymous (lambda-style) function</span></p>   </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.create-function-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">string</span> <span class="methodname" style="color:#CC7832"><strong>create_function</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#2EACF9">$args</span></span>    , <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#2EACF9">$code</span></span>    )</div>    <p class="para rdfs-comment">    Creates an anonymous function from the parameters passed, and    returns a unique name for it.   </p>   <div class="caution"><strong class="caution">Caution</strong>    <p class="para">     This function internally performs an <span class="function">{@link eval()}</span> and as such has the     same security issues as <span class="function">{@link eval()}</span>. Additionally it has bad performance     and memory usage characteristics.    </p>    <p class="para">     If you are using PHP 5.3.0 or newer a native     <a href="http://php.net/manual/zh/functions.anonymous.php" class="link">anonymous function</a> should be used instead.    </p>   </div>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.create-function-parameters">   <h3 class="title">参数</h3>   <span>    Usually these parameters will be passed as single quote delimited strings.    The reason for using single quoted strings, is to protect the variable    names from parsing, otherwise, if you use double quotes there will be a    need to escape the variable names, e.g. <em>\$avar</em>.    <dl>            <dt> <span class="parameter" style="color:#2EACF9">args</span></dt>       <dd>        <p class="para">        The function arguments.       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">code</span></dt>       <dd>        <p class="para">        The function code.       </p>      </dd>          </dl>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.create-function-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    Returns a unique function name as a string, or <strong><span>FALSE</span></strong> on error.   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.create-function-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-6188">     <p><strong>Example #1       Creating an anonymous function with <span class="function"><strong style="color:#CC7832">create_function()</strong></span>     </strong></p>     <div class="example-contents"><p>      You can use this function, to (for example) create a function from      information gathered at run time:     </p></div>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$newfunc&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">create_function</span><span style="color: #007700">(</span><span style="color: #DD0000">'$a,$b'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'return&nbsp;"ln($a)&nbsp;+&nbsp;ln($b)&nbsp;=&nbsp;"&nbsp;.&nbsp;log($a&nbsp;*&nbsp;$b);'</span><span style="color: #007700">);<br />echo&nbsp;</span><span style="color: #DD0000">"New&nbsp;anonymous&nbsp;function:&nbsp;</span><span style="color: #9876AA">$newfunc</span><span style="color: #DD0000">\n"</span><span style="color: #007700">;<br />echo&nbsp;</span><span style="color: #9876AA">$newfunc</span><span style="color: #007700">(</span><span style="color: #9876AA">2</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">M_E</span><span style="color: #007700">)&nbsp;.&nbsp;</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /></span><span style="color: #FF8000">//&nbsp;outputs<br />//&nbsp;New&nbsp;anonymous&nbsp;function:&nbsp;lambda_1<br />//&nbsp;ln(2)&nbsp;+&nbsp;ln(2.718281828459)&nbsp;=&nbsp;1.6931471805599<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>     </div>   </span>   <p class="para">    Or, perhaps to have general handler function that can apply a set    of operations to a list of parameters:   </p>   <p class="para">    <div class="example" id="example-6189">     <p><strong>Example #2       Making a general processing function with      <span class="function"><strong style="color:#CC7832">create_function()</strong></span>     </strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function&nbsp;</span><span style="color: #9876AA">process</span><span style="color: #007700">(</span><span style="color: #9876AA">$var1</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$var2</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$farr</span><span style="color: #007700">)<br />{<br />&nbsp;&nbsp;&nbsp;&nbsp;foreach&nbsp;(</span><span style="color: #9876AA">$farr&nbsp;</span><span style="color: #007700">as&nbsp;</span><span style="color: #9876AA">$f</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #9876AA">$f</span><span style="color: #007700">(</span><span style="color: #9876AA">$var1</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$var2</span><span style="color: #007700">)&nbsp;.&nbsp;</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;}<br />}<br /><br /></span><span style="color: #FF8000">//&nbsp;create&nbsp;a&nbsp;bunch&nbsp;of&nbsp;math&nbsp;functions<br /></span><span style="color: #9876AA">$f1&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'if&nbsp;($a&nbsp;&gt;=0)&nbsp;{return&nbsp;"b*a^2&nbsp;=&nbsp;".$b*sqrt($a);}&nbsp;else&nbsp;{return&nbsp;false;}'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$f2&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">"return&nbsp;\"min(b^2+a,&nbsp;a^2,b)&nbsp;=&nbsp;\".min(\$a*\$a+\$b,\$b*\$b+\$a);"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$f3&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'if&nbsp;($a&nbsp;&gt;&nbsp;0&nbsp;&amp;&amp;&nbsp;$b&nbsp;!=&nbsp;0)&nbsp;{return&nbsp;"ln(a)/b&nbsp;=&nbsp;".log($a)/$b;&nbsp;}&nbsp;else&nbsp;{&nbsp;return&nbsp;false;&nbsp;}'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$farr&nbsp;</span><span style="color: #007700">=&nbsp;array(<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">create_function</span><span style="color: #007700">(</span><span style="color: #DD0000">'$x,$y'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'return&nbsp;"some&nbsp;trig:&nbsp;".(sin($x)&nbsp;+&nbsp;$x*cos($y));'</span><span style="color: #007700">),<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">create_function</span><span style="color: #007700">(</span><span style="color: #DD0000">'$x,$y'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'return&nbsp;"a&nbsp;hypotenuse:&nbsp;".sqrt($x*$x&nbsp;+&nbsp;$y*$y);'</span><span style="color: #007700">),<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">create_function</span><span style="color: #007700">(</span><span style="color: #DD0000">'$a,$b'</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$f1</span><span style="color: #007700">),<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">create_function</span><span style="color: #007700">(</span><span style="color: #DD0000">'$a,$b'</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$f2</span><span style="color: #007700">),<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">create_function</span><span style="color: #007700">(</span><span style="color: #DD0000">'$a,$b'</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$f3</span><span style="color: #007700">)<br />&nbsp;&nbsp;&nbsp;&nbsp;);<br /><br />echo&nbsp;</span><span style="color: #DD0000">"\nUsing&nbsp;the&nbsp;first&nbsp;array&nbsp;of&nbsp;anonymous&nbsp;functions\n"</span><span style="color: #007700">;<br />echo&nbsp;</span><span style="color: #DD0000">"parameters:&nbsp;2.3445,&nbsp;M_PI\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">process</span><span style="color: #007700">(</span><span style="color: #9876AA">2.3445</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">M_PI</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$farr</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">//&nbsp;now&nbsp;make&nbsp;a&nbsp;bunch&nbsp;of&nbsp;string&nbsp;processing&nbsp;functions<br /></span><span style="color: #9876AA">$garr&nbsp;</span><span style="color: #007700">=&nbsp;array(<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">create_function</span><span style="color: #007700">(</span><span style="color: #DD0000">'$b,$a'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'if&nbsp;(strncmp($a,&nbsp;$b,&nbsp;3)&nbsp;==&nbsp;0)&nbsp;return&nbsp;"**&nbsp;\"$a\"&nbsp;'</span><span style="color: #007700">.<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #DD0000">'and&nbsp;\"$b\"\n**&nbsp;Look&nbsp;the&nbsp;same&nbsp;to&nbsp;me!&nbsp;(looking&nbsp;at&nbsp;the&nbsp;first&nbsp;3&nbsp;chars)";'</span><span style="color: #007700">),<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">create_function</span><span style="color: #007700">(</span><span style="color: #DD0000">'$a,$b'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">';&nbsp;return&nbsp;"CRCs:&nbsp;"&nbsp;.&nbsp;crc32($a)&nbsp;.&nbsp;",&nbsp;".crc32($b);'</span><span style="color: #007700">),<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">create_function</span><span style="color: #007700">(</span><span style="color: #DD0000">'$a,$b'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">';&nbsp;return&nbsp;"similar(a,b)&nbsp;=&nbsp;"&nbsp;.&nbsp;similar_text($a,&nbsp;$b,&nbsp;&amp;$p)&nbsp;.&nbsp;"($p%)";'</span><span style="color: #007700">)<br />&nbsp;&nbsp;&nbsp;&nbsp;);<br />echo&nbsp;</span><span style="color: #DD0000">"\nUsing&nbsp;the&nbsp;second&nbsp;array&nbsp;of&nbsp;anonymous&nbsp;functions\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">process</span><span style="color: #007700">(</span><span style="color: #DD0000">"Twas&nbsp;brilling&nbsp;and&nbsp;the&nbsp;slithy&nbsp;toves"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"Twas&nbsp;the&nbsp;night"</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$garr</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Using the first array of anonymous functions parameters: 2.3445, M_PI some trig: -1.6291725057799 a hypotenuse: 3.9199852871011 b*a^2 = 4.8103313314525 min(b^2+a, a^2,b) = 8.6382729035898 ln(a)/b = 0.27122299212594  Using the second array of anonymous functions ** &quot;Twas the night&quot; and &quot;Twas brilling and the slithy toves&quot; ** Look the same to me! (looking at the first 3 chars) CRCs: -725381282, 342550513 similar(a,b) = 11(45.833333333333%) </span></div>     </div>    </div>   </p>   <p class="para">    But perhaps the most common use for of lambda-style (anonymous) functions    is to create callback functions, for example when using    <span class="function">{@link array_walk()}</span> or <span class="function">{@link usort()}</span>   </p>   <p class="para">    <div class="example" id="example-6190">     <p><strong>Example #3 Using anonymous functions as callback functions</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$av&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">"the&nbsp;"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"a&nbsp;"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"that&nbsp;"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"this&nbsp;"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">array_walk</span><span style="color: #007700">(</span><span style="color: #9876AA">$av</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">create_function</span><span style="color: #007700">(</span><span style="color: #DD0000">'&amp;$v,$k'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'$v&nbsp;=&nbsp;$v&nbsp;.&nbsp;"mango";'</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$av</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Array (   [0] =&gt; the mango   [1] =&gt; a mango   [2] =&gt; that mango   [3] =&gt; this mango ) </span></div>     </div>     <div class="example-contents"><p>      an array of strings ordered from shorter to longer     </p></div>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /><br />$sv&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">"small"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"larger"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"a&nbsp;big&nbsp;string"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"it&nbsp;is&nbsp;a&nbsp;string&nbsp;thing"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$sv</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Array (   [0] =&gt; small   [1] =&gt; larger   [2] =&gt; a big string   [3] =&gt; it is a string thing ) </span></div>     </div>     <div class="example-contents"><p>      sort it from longer to shorter     </p></div>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /><br />usort</span><span style="color: #007700">(</span><span style="color: #9876AA">$sv</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">create_function</span><span style="color: #007700">(</span><span style="color: #DD0000">'$a,$b'</span><span style="color: #007700">,</span><span style="color: #DD0000">'return&nbsp;strlen($b)&nbsp;-&nbsp;strlen($a);'</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$sv</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Array (   [0] =&gt; it is a string thing   [1] =&gt; a big string   [2] =&gt; larger   [3] =&gt; small ) </span></div>     </div>    </div>   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.create-function-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><a href="http://php.net/manual/zh/functions.anonymous.php" class="link">Anonymous functions</a></li>    </ul>   </span>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.funchand.php">函数处理 函数</a></div></div>
 * @return string a unique function name as a string, or false on error.*/
function create_function ($args, $code) {}

/**
*<div id="function.get-resource-type" class="refentry">    <div class="refnamediv">     <h1 class="refname">get_resource_type</h1>     <p class="verinfo">(PHP 4 &gt;= 4.0.2, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">get_resource_type</span> &mdash; <span class="dc-title">      返回资源（resource）类型     </span></p>     </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 unknown-unknown-unknown-seealsr" id="refsect1-function.get-resource-type-unknown-unknown-unknown-seealsr">     <h3 class="title">描述</h3>      <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">       <span class="type" style="color:#EAB766">string</span> <span class="methodname" style="color:#CC7832"><strong>get_resource_type</strong></span>        ( <span class="methodparam"><span class="type" style="color:#EAB766">resource</span> <span class="parameter" style="color:#2EACF9">$handle</span></span>       )</div>      <p class="para rdfs-comment">      此函数返回一个字符串，用于表示传递给它的 <span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.types.resource.php" class="type resource" style="color:#EAB766">resource</a></span> 的类型。如果参数不是合法的 <span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.types.resource.php" class="type resource" style="color:#EAB766">resource</a></span>，将产生错误。      <div class="informalexample">       <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$c&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">mysql_connect</span><span style="color: #007700">();<br />echo&nbsp;</span><span style="color: #9876AA">get_resource_type</span><span style="color: #007700">(</span><span style="color: #9876AA">$c</span><span style="color: #007700">).</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /></span><span style="color: #FF8000">//&nbsp;打印：mysql&nbsp;link<br /><br /></span><span style="color: #9876AA">$fp&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">fopen</span><span style="color: #007700">(</span><span style="color: #DD0000">"foo"</span><span style="color: #007700">,</span><span style="color: #DD0000">"w"</span><span style="color: #007700">);<br />echo&nbsp;</span><span style="color: #9876AA">get_resource_type</span><span style="color: #007700">(</span><span style="color: #9876AA">$fp</span><span style="color: #007700">).</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /></span><span style="color: #FF8000">//&nbsp;打印：file<br /><br /></span><span style="color: #9876AA">$doc&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">new_xmldoc</span><span style="color: #007700">(</span><span style="color: #DD0000">"1.0"</span><span style="color: #007700">);<br />echo&nbsp;</span><span style="color: #9876AA">get_resource_type</span><span style="color: #007700">(</span><span style="color: #9876AA">$doc</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">doc</span><span style="color: #007700">).</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /></span><span style="color: #FF8000">//&nbsp;打印：domxml&nbsp;document<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>       </div>       </div>     </p>    </div>    <div class="up"><a href="http://php.net/manual/zh/ref.var.php">Variable handling 函数</a></div></div>
 * @return string If the given <i>handle</i> is a resource, this function*/
function get_resource_type ($handle) {}

/**
*<div id="function.get-loaded-extensions" class="refentry">  <div class="refnamediv">   <h1 class="refname">get_loaded_extensions</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">get_loaded_extensions</span> &mdash; <span class="dc-title">返回所有编译并加载模块名的 array</span></p>   </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.get-loaded-extensions-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">array</span> <span class="methodname" style="color:#CC7832"><strong>get_loaded_extensions</strong></span>     ([ <span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#2EACF9">$zend_extensions</span><span class="initializer"> = false</span></span>   ] )</div>    <p class="para rdfs-comment">    该函数返回了 PHP 解析器里所有编译并加载的模块名。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.get-loaded-extensions-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">zend_extensions</span></dt>       <dd>        <p class="para">        只返回 Zend 扩展，并非类似 mysqli 的普通扩展。默认是 <strong><span>FALSE</span></strong> (返回普通扩展)。       </p>      </dd>          </dl>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.get-loaded-extensions-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回所有模块名的一个索引数组(array)。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.get-loaded-extensions-changelog">   <h3 class="title">更新日志</h3>   <span>    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>5.2.4</td>        <td>         添加了可选的 <span class="parameter" style="color:#2EACF9">zend_extensions</span> 参数。        </td>       </tr>       </tbody>         </table>    </span>  </div>     <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.get-loaded-extensions-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-499">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">get_loaded_extensions()</strong></span> 范例</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">get_loaded_extensions</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程的输出类似于：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Array (    [0] =&gt; xml    [1] =&gt; wddx    [2] =&gt; standard    [3] =&gt; session    [4] =&gt; posix    [5] =&gt; pgsql    [6] =&gt; pcre    [7] =&gt; gd    [8] =&gt; ftp    [9] =&gt; db    [10] =&gt; calendar    [11] =&gt; bcmath ) </span></div>     </div>    </div>   </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.get-loaded-extensions-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link get_extension_funcs()} - 返回模块函数名称的数组</span></li>     <li class="member"><span class="function">{@link extension_loaded()} - 检查一个扩展是否已经加载</span></li>     <li class="member"><span class="function">{@link dl()} - 运行时载入一个 PHP 扩展</span></li>     <li class="member"><span class="function">{@link phpinfo()} - 输出关于 PHP 配置的信息</span></li>    </ul>   </span>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.info.php">PHP 选项/信息 函数</a></div></div>
 * @return array an indexed array of all the modules names.*/
function get_loaded_extensions ($zend_extensions = false) {}

/**
*<div id="function.extension-loaded" class="refentry">  <div class="refnamediv">   <h1 class="refname">extension_loaded</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">extension_loaded</span> &mdash; <span class="dc-title">检查一个扩展是否已经加载</span></p>   </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.extension-loaded-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">bool</span> <span class="methodname" style="color:#CC7832"><strong>extension_loaded</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#2EACF9">$name</span></span>    )</div>    <p class="para rdfs-comment">    检查一个扩展是否已经加载。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.extension-loaded-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">name</span></dt>       <dd>        <p class="para">        扩展名称，大小写不敏感。       </p>       <p class="para">        你可以用 <span class="function">{@link phpinfo()}</span> 来查看一系列扩展名称，而在 <em>CGI</em> 或 <em>CLI</em> 的 PHP 版本里你可以使用 <strong class="option unknown">-m</strong>  参数来列出所有有效的扩展：        <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> $ php -m [PHP Modules] xml tokenizer standard sockets session posix pcre overload mysql mbstring ctype  [Zend Modules] </span></div>        </div>       </p>      </dd>          </dl>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.extension-loaded-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    如果 <span class="parameter" style="color:#2EACF9">name</span> 指定的扩展已加载，返回<strong><span>TRUE</span></strong>，否则返回 <strong><span>FALSE</span></strong>。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.extension-loaded-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-492">    <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">extension_loaded()</strong></span> 例子</strong></p>    <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">if&nbsp;(!</span><span style="color: #9876AA">extension_loaded</span><span style="color: #007700">(</span><span style="color: #DD0000">'gd'</span><span style="color: #007700">))&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!</span><span style="color: #9876AA">dl</span><span style="color: #007700">(</span><span style="color: #DD0000">'gd.so'</span><span style="color: #007700">))&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit;<br />&nbsp;&nbsp;&nbsp;&nbsp;}<br />}<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>     </div>   </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.extension-loaded-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link get_loaded_extensions()} - 返回所有编译并加载模块名的 array</span></li>     <li class="member"><span class="function">{@link get_extension_funcs()} - 返回模块函数名称的数组</span></li>     <li class="member"><span class="function">{@link phpinfo()} - 输出关于 PHP 配置的信息</span></li>     <li class="member"><span class="function">{@link dl()} - 运行时载入一个 PHP 扩展</span></li>     <li class="member"><span class="function">{@link function_exists()} - 如果给定的函数已经被定义就返回 TRUE</span></li>    </ul>   </span>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.info.php">PHP 选项/信息 函数</a></div></div>
 * @return bool true if the extension identified by <i>name</i>*/
function extension_loaded ($name) {}

/**
*<div id="function.get-extension-funcs" class="refentry">  <div class="refnamediv">   <h1 class="refname">get_extension_funcs</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">get_extension_funcs</span> &mdash; <span class="dc-title">返回模块函数名称的数组</span></p>   </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.get-extension-funcs-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">array</span> <span class="methodname" style="color:#CC7832"><strong>get_extension_funcs</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#2EACF9">$module_name</span></span>    )</div>    <p class="para rdfs-comment">    该函数根据 <span class="parameter" style="color:#2EACF9">module_name</span> 返回模块内定义的所有函数的名称。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.get-extension-funcs-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">module_name</span></dt>       <dd>        <p class="para">        模块名称。       </p>       <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">Note</strong>:         <p class="para">         这个参数必须是<em class="emphasis">小写（lowercase）</em>的。        </p>       </p></blockquote>      </dd>          </dl>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.get-extension-funcs-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回包含所有函数名的数组，如果 <span class="parameter" style="color:#2EACF9">module_name</span> 不是一个有效的扩展则返回 <strong><span>FALSE</span></strong>。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.get-extension-funcs-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-496">     <p><strong>Example #1 打印 XML 函数</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">get_extension_funcs</span><span style="color: #007700">(</span><span style="color: #DD0000">"xml"</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程的输出类似于：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Array (     [0] =&gt; xml_parser_create     [1] =&gt; xml_parser_create_ns     [2] =&gt; xml_set_object     [3] =&gt; xml_set_element_handler     [4] =&gt; xml_set_character_data_handler     [5] =&gt; xml_set_processing_instruction_handler     [6] =&gt; xml_set_default_handler     [7] =&gt; xml_set_unparsed_entity_decl_handler     [8] =&gt; xml_set_notation_decl_handler     [9] =&gt; xml_set_external_entity_ref_handler     [10] =&gt; xml_set_start_namespace_decl_handler     [11] =&gt; xml_set_end_namespace_decl_handler     [12] =&gt; xml_parse     [13] =&gt; xml_parse_into_struct     [14] =&gt; xml_get_error_code     [15] =&gt; xml_error_string     [16] =&gt; xml_get_current_line_number     [17] =&gt; xml_get_current_column_number     [18] =&gt; xml_get_current_byte_index     [19] =&gt; xml_parser_free     [20] =&gt; xml_parser_set_option     [21] =&gt; xml_parser_get_option     [22] =&gt; utf8_encode     [23] =&gt; utf8_decode ) </span></div>     </div>    </div>   </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.get-extension-funcs-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link get_loaded_extensions()} - 返回所有编译并加载模块名的 array</span></li>     <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionExtension::getFunctions()} - 获取扩展中的函数</span></li>    </ul>   </span>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.info.php">PHP 选项/信息 函数</a></div></div>
 * @return array an array with all the functions, or false if */
function get_extension_funcs ($module_name) {}

/**
*<div id="function.get-defined-constants" class="refentry">  <div class="refnamediv">   <h1 class="refname">get_defined_constants</h1>   <p class="verinfo">(PHP 4 &gt;= 4.1.0, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">get_defined_constants</span> &mdash; <span class="dc-title">返回所有常量的关联数组，键是常量名，值是常量值</span></p>   </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.get-defined-constants-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">array</span> <span class="methodname" style="color:#CC7832"><strong>get_defined_constants</strong></span>     ([ <span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#2EACF9">$categorize</span><span class="initializer"> = false</span></span>   ] )</div>    <p class="para rdfs-comment">    返回当前所有已定义的常量名和值。    这包含 <span class="function">{@link define()}</span> 函数所创建的，也包含了所有扩展所创建的。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.get-defined-constants-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">categorize</span></dt>       <dd>        <p class="para">        让此函数返回一个多维数组，分类为第一维的键名，常量和它们的值位于第二维。        <div class="informalexample">         <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />define</span><span style="color: #007700">(</span><span style="color: #DD0000">"MY_CONSTANT"</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">1</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">get_defined_constants</span><span style="color: #007700">(</span><span style="color: #9876AA">true</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>         </div>          <p class="para">以上例程的输出类似于：</p>         <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Array (     [Core] =&gt; Array         (             [E_ERROR] =&gt; 1             [E_WARNING] =&gt; 2             [E_PARSE] =&gt; 4             [E_NOTICE] =&gt; 8             [E_CORE_ERROR] =&gt; 16             [E_CORE_WARNING] =&gt; 32             [E_COMPILE_ERROR] =&gt; 64             [E_COMPILE_WARNING] =&gt; 128             [E_USER_ERROR] =&gt; 256             [E_USER_WARNING] =&gt; 512             [E_USER_NOTICE] =&gt; 1024             [E_ALL] =&gt; 2047             [TRUE] =&gt; 1         )      [pcre] =&gt; Array         (             [PREG_PATTERN_ORDER] =&gt; 1             [PREG_SET_ORDER] =&gt; 2             [PREG_OFFSET_CAPTURE] =&gt; 256             [PREG_SPLIT_NO_EMPTY] =&gt; 1             [PREG_SPLIT_DELIM_CAPTURE] =&gt; 2             [PREG_SPLIT_OFFSET_CAPTURE] =&gt; 4             [PREG_GREP_INVERT] =&gt; 1         )      [user] =&gt; Array         (             [MY_CONSTANT] =&gt; 1         )  ) </span></div>         </div>        </div>       </p>      </dd>          </dl>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.get-defined-constants-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">     返回的数组为 常量名 =&gt; 常量值，也可以按注册变量的扩展名称来分组。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.get-defined-constants-changelog">   <h3 class="title">更新日志</h3>   <span>    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>5.3.1</td>        <td>         仅作用于 Windows：内核常量归类到 <em>Core</em>，之前是 <em>mhash</em>。        </td>       </tr>        <tr>        <td>5.3.0</td>        <td>         内核常量归类为 <em>Core</em>，之前是 <em>internal</em>。在 Windows 上，内核常量归类到 <em>mhash</em>。        </td>       </tr>        <tr>        <td>5.2.11</td>        <td>         <span class="parameter" style="color:#2EACF9">categorize</span> 参数现在可以合适得被处理。         在此之前，<span class="parameter" style="color:#2EACF9">categorize</span> 被解释为 <em>!is_null($categorize)</em>，导致任何非 <strong><span>NULL</span></strong> 的值会强制常量分类。        </td>       </tr>       </tbody>         </table>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.get-defined-constants-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-495">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">get_defined_constants()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">get_defined_constants</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程的输出类似于：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Array (     [E_ERROR] =&gt; 1     [E_WARNING] =&gt; 2     [E_PARSE] =&gt; 4     [E_NOTICE] =&gt; 8     [E_CORE_ERROR] =&gt; 16     [E_CORE_WARNING] =&gt; 32     [E_COMPILE_ERROR] =&gt; 64     [E_COMPILE_WARNING] =&gt; 128     [E_USER_ERROR] =&gt; 256     [E_USER_WARNING] =&gt; 512     [E_USER_NOTICE] =&gt; 1024     [E_ALL] =&gt; 2047     [TRUE] =&gt; 1 ) </span></div>     </div>    </div>   </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.get-defined-constants-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link defined()} - 检查某个名称的常量是否存在</span></li>     <li class="member"><span class="function">{@link get_loaded_extensions()} - 返回所有编译并加载模块名的 array</span></li>     <li class="member"><span class="function">{@link get_defined_functions()} - 返回所有已定义函数的数组</span></li>     <li class="member"><span class="function">{@link get_defined_vars()} - 返回由所有已定义变量所组成的数组</span></li>    </ul>   </span>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.info.php">PHP 选项/信息 函数</a></div></div>
 * @return array */
function get_defined_constants ($categorize = false) {}

/**
*<div id="function.debug-backtrace" class="refentry">  <div class="refnamediv">   <h1 class="refname">debug_backtrace</h1>   <p class="verinfo">(PHP 4 &gt;= 4.3.0, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">debug_backtrace</span> &mdash; <span class="dc-title">产生一条回溯跟踪(backtrace)</span></p>   </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.debug-backtrace-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">array</span> <span class="methodname" style="color:#CC7832"><strong>debug_backtrace</strong></span>     ([ <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#2EACF9">$options</span><span class="initializer"> = DEBUG_BACKTRACE_PROVIDE_OBJECT</span></span>    [, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#2EACF9">$limit</span><span class="initializer"> = 0</span></span>   ]] )</div>    <p class="para rdfs-comment">    <span class="function"><strong style="color:#CC7832">debug_backtrace()</strong></span> 产生一条 PHP 的回溯跟踪(backtrace)。   </p>  </div>     <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.debug-backtrace-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">options</span></dt>       <dd>        <p class="para">        截至 5.3.6，这个参数是以下选项的位掩码：        <table class="doctable table">         <caption><strong><span class="function"><strong style="color:#CC7832">debug_backtrace()</strong></span> 选项</strong></caption>                   <tbody class="tbody">           <tr>            <td>DEBUG_BACKTRACE_PROVIDE_OBJECT</td>            <td>             是否填充 &quot;object&quot; 的索引。            </td>           </tr>            <tr>            <td>DEBUG_BACKTRACE_IGNORE_ARGS</td>            <td>             是否忽略 &quot;args&quot; 的索引，包括所有的 function/method 的参数，能够节省内存开销。            </td>           </tr>           </tbody>                 </table>         在 5.3.6 之前，仅仅能使用的值是 <strong><span>TRUE</span></strong> 或者 <strong><span>FALSE</span></strong>，分别等于是否设置 <strong><span>DEBUG_BACKTRACE_PROVIDE_OBJECT</span></strong> 选项。       </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">limit</span></dt>       <dd>        <p class="para">        截至 5.4.0，这个参数能够用于限制返回堆栈帧的数量。        默认为 (<span class="parameter" style="color:#2EACF9">limit</span>=<em>0</em>) ，返回所有的堆栈帧。       </p>      </dd>          </dl>    </span>  </div>     <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.debug-backtrace-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回一个包含众多关联数组的 <span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span>。    以为为有可能返回的元素：   </p>   <p class="para">    <table class="doctable table">     <caption><strong>有可能从 <span class="function"><strong style="color:#CC7832">debug_backtrace()</strong></span> 返回的元素</strong></caption>           <thead>       <tr>        <th>名字</th>        <th>类型</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>function</td>        <td><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></td>        <td>         当前的函数名，参见：         <a href="http://php.net/manual/zh/language.constants.predefined.php" class="link">__FUNCTION__</a>。        </td>       </tr>        <tr>        <td>line</td>        <td><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.types.integer.php" class="type integer" style="color:#EAB766">integer</a></span></td>        <td>         当前的行号。参见：         <a href="http://php.net/manual/zh/language.constants.predefined.php" class="link">__LINE__</a>。        </td>       </tr>        <tr>        <td>file</td>        <td><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></td>        <td>         当前的文件名。参见：         <a href="http://php.net/manual/zh/language.constants.predefined.php" class="link">__FILE__</a>。        </td>       </tr>        <tr>        <td>class</td>        <td><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></td>        <td>         当前 <a href="http://php.net/manual/zh/language.oop5.php" class="link">class</a> 的名称。参见         <a href="http://php.net/manual/zh/language.constants.predefined.php" class="link">__CLASS__</a>        </td>       </tr>        <tr>        <td>object</td>        <td><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.types.object.php" class="type object" style="color:#EAB766">object</a></span></td>        <td>         当前的 <a href="http://php.net/manual/zh/language.oop5.php" class="link">object</a>。        </td>       </tr>        <tr>        <td>type</td>        <td><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></td>        <td>         当前调用的类型。如果是一个方法，会返回 &quot;-&gt;&quot;。如果是一个静态方法，会返回 &quot;::&quot;。         如果是一个函数调用，则返回空。        </td>       </tr>        <tr>        <td>args</td>        <td><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span></td>        <td>         如果在一个函数里，这会列出函数的参数。         如果是在一个被包含的文件里，会列出包含的文件名。        </td>       </tr>       </tbody>         </table>    </p>  </div>     <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.debug-backtrace-changelog">   <h3 class="title">更新日志</h3>   <span>    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>5.4.0</td>        <td>         添加了可选的参数 <span class="parameter" style="color:#2EACF9">limit</span>。        </td>       </tr>        <tr>        <td>5.3.6</td>        <td>         参数 <span class="parameter" style="color:#2EACF9">provide_object</span> 改成 <span class="parameter" style="color:#2EACF9">options</span>，并且增加了可选参数         <strong><span>DEBUG_BACKTRACE_IGNORE_ARGS</span></strong>。        </td>       </tr>        <tr>        <td>5.2.5</td>        <td>         添加了可选参数 <span class="parameter" style="color:#2EACF9">provide_object</span>。        </td>       </tr>        <tr>        <td>5.1.1</td>        <td>         添加了当前的 <span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.types.object.php" class="type object" style="color:#EAB766">object</a></span> 为可能返回的元素。        </td>       </tr>       </tbody>         </table>    </span>  </div>     <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.debug-backtrace-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-456">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">debug_backtrace()</strong></span> 范例</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">//&nbsp;filename:&nbsp;/tmp/a.php<br /><br /></span><span style="color: #007700">function&nbsp;</span><span style="color: #9876AA">a_test</span><span style="color: #007700">(</span><span style="color: #9876AA">$str</span><span style="color: #007700">)<br />{<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"\nHi:&nbsp;</span><span style="color: #9876AA">$str</span><span style="color: #DD0000">"</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">debug_backtrace</span><span style="color: #007700">());<br />}<br /><br /></span><span style="color: #9876AA">a_test</span><span style="color: #007700">(</span><span style="color: #DD0000">'friend'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;<br /></span><br /><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">//&nbsp;filename:&nbsp;/tmp/b.php<br /></span><span style="color: #007700">include_once&nbsp;</span><span style="color: #DD0000">'/tmp/a.php'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>      执行 <var class="filename">/tmp/b.php</var> 返回的结果类似于以下：     </p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> Hi: friend array(2) { [0]=&gt; array(4) {     [&quot;file&quot;] =&gt; string(10) &quot;/tmp/a.php&quot;     [&quot;line&quot;] =&gt; int(10)     [&quot;function&quot;] =&gt; string(6) &quot;a_test&quot;     [&quot;args&quot;]=&gt;     array(1) {       [0] =&gt; &amp;string(6) &quot;friend&quot;     } } [1]=&gt; array(4) {     [&quot;file&quot;] =&gt; string(10) &quot;/tmp/b.php&quot;     [&quot;line&quot;] =&gt; int(2)     [&quot;args&quot;] =&gt;     array(1) {       [0] =&gt; string(10) &quot;/tmp/a.php&quot;     }     [&quot;function&quot;] =&gt; string(12) &quot;include_once&quot;   } } </span></div>     </div>    </div>   </span>  </div>     <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.debug-backtrace-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link trigger_error()} - 产生一个用户级别的 error/warning/notice 信息</span></li>     <li class="member"><span class="function">{@link debug_print_backtrace()} - 打印一条回溯。</span></li>    </ul>   </span>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.errorfunc.php">错误处理 函数</a></div></div>
 * @return array an array of associative arrays. The possible returned elements*/
function debug_backtrace ($options = DEBUG_BACKTRACE_PROVIDE_OBJECT, $limit = 0) {}

/**
*<div id="function.error-clear-last" class="refentry">  <div class="refnamediv">   <h1 class="refname">error_clear_last</h1>   <p class="verinfo">(PHP 7)</p><p class="refpurpose"><span class="refname">error_clear_last</span> &mdash; <span class="dc-title">清除最近一次错误</span></p>   </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.error-clear-last-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span> <span class="methodname" style="color:#CC7832"><strong>error_clear_last</strong></span>     ( <span class="methodparam">void</span>    )</div>    <p class="para rdfs-comment">   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.error-clear-last-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    清除最近一次错误，使它无法通过     <span class="function">{@link error_get_last()}</span> 获取。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.error-clear-last-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-458">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">error_clear_last()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">error_get_last</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">error_clear_last</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">error_get_last</span><span style="color: #007700">());<br /><br />@</span><span style="color: #9876AA">$a&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">$b</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">error_get_last</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">error_clear_last</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">error_get_last</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>      <div class="example-contents"><p>以上例程的输出类似于：</p></div>     <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> NULL NULL array(4) {   [&quot;type&quot;]=&gt;   int(8)   [&quot;message&quot;]=&gt;   string(21) &quot;Undefined variable: b&quot;   [&quot;file&quot;]=&gt;   string(9) &quot;%s&quot;   [&quot;line&quot;]=&gt;   int(6) } NULL </span></div>     </div>    </div>   </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.error-clear-last-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><a href="http://php.net/manual/zh/errorfunc.constants.php" class="link">Error 常量</a></li>    </ul>   </span>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.errorfunc.php">错误处理 函数</a></div></div>
*/
function error_clear_last () {}
const DEBUG_BACKTRACE_PROVIDE_OBJECT = 0;
const DEBUG_BACKTRACE_IGNORE_ARGS = 0;

/**
*<div id="function.debug-print-backtrace" class="refentry">    <div class="refnamediv">     <h1 class="refname">debug_print_backtrace</h1>     <p class="verinfo">(PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">debug_print_backtrace</span> &mdash; <span class="dc-title">      打印一条回溯。     </span></p>     </div>       <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.debug-print-backtrace-description">     <h3 class="title">说明</h3>     <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">      <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span> <span class="methodname" style="color:#CC7832"><strong>debug_print_backtrace</strong></span>       ([ <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#2EACF9">$options</span><span class="initializer"> = 0</span></span>      [, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#2EACF9">$limit</span><span class="initializer"> = 0</span></span>     ]] )</div>      <p class="para rdfs-comment">      <span class="function"><strong style="color:#CC7832">debug_print_backtrace()</strong></span> 打印了一条 PHP 回溯。它打印了函数调用、被 included/required 的文件和      <span class="function">{@link eval()}</span> 的代码。     </p>    </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.debug-print-backtrace-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">options</span></dt>       <dd>        <p class="para">        从 5.3.6 开始，这个参数是以下选项的位掩码：        <table class="doctable table">         <caption><strong><span class="function"><strong style="color:#CC7832">debug_print_backtrace()</strong></span> 选项</strong></caption>                   <tbody class="tbody">           <tr>            <td>DEBUG_BACKTRACE_IGNORE_ARGS</td>            <td>             是否忽略 &quot;args&quot; 的索引，包括所有的 function/method 的参数，能够节省内存开销。            </td>           </tr>           </tbody>                 </table>        </p>      </dd>                 <dt> <span class="parameter" style="color:#2EACF9">limit</span></dt>       <dd>        <p class="para">        从 5.4.0 开始，这个参数能够用于限制返回堆栈帧的数量。        默认为 (<span class="parameter" style="color:#2EACF9">limit</span>=<em>0</em>) ，返回所有的堆栈帧。       </p>      </dd>          </dl>    </span>  </div>      <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.debug-print-backtrace-returnvalues">     <h3 class="title">返回值</h3>     <p class="para">      没有返回值。     </p>    </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.debug-print-backtrace-changelog">   <h3 class="title">更新日志</h3>   <span>    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>5.4.0</td>        <td>         添加了可选的参数 <span class="parameter" style="color:#2EACF9">limit</span>。        </td>       </tr>        <tr>        <td>5.3.6</td>        <td>         添加了可选的参数 <span class="parameter" style="color:#2EACF9">options</span>。        </td>       </tr>       </tbody>         </table>    </span>  </div>      <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.debug-print-backtrace-examples">     <h3 class="title">范例</h3>     <span>      <div class="example" id="example-457">       <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">debug_print_backtrace()</strong></span> 范例</strong></p>       <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">//&nbsp;include.php&nbsp;file<br /><br /></span><span style="color: #007700">function&nbsp;</span><span style="color: #9876AA">a</span><span style="color: #007700">()&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">b</span><span style="color: #007700">();<br />}<br /><br />function&nbsp;</span><span style="color: #9876AA">b</span><span style="color: #007700">()&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">c</span><span style="color: #007700">();<br />}<br /><br />function&nbsp;</span><span style="color: #9876AA">c</span><span style="color: #007700">(){<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">debug_print_backtrace</span><span style="color: #007700">();<br />}<br /><br /></span><span style="color: #9876AA">a</span><span style="color: #007700">();<br /><br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>       </div>        <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">//&nbsp;文件&nbsp;test.php<br />//&nbsp;这是你应该运行的文件<br /><br /></span><span style="color: #007700">include&nbsp;</span><span style="color: #DD0000">'include.php'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>      </div>       <div class="example-contents"><p>以上例程的输出类似于：</p></div>      <div class="example-contents screen" style="background:black;padding-left:5px;"> <div class="cdata"><span> #0  c() called at [/tmp/include.php:10] #1  b() called at [/tmp/include.php:6] #2  a() called at [/tmp/include.php:17] #3  include(/tmp/include.php) called at [/tmp/test.php:3] </span></div>      </div>     </div>    </span>   </div>     <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.debug-print-backtrace-seealso">    <h3 class="title">参见</h3>    <span>     <ul class="simplelist">      <li class="member"><span class="function">{@link debug_backtrace()} - 产生一条回溯跟踪(backtrace)</span></li>     </ul>    </span>   </div>   <div class="up"><a href="http://php.net/manual/zh/ref.errorfunc.php">错误处理 函数</a></div></div>
 * @return void*/
function debug_print_backtrace ($options = 0, $limit = 0) {}

/**
*<div id="function.gc-collect-cycles" class="refentry">  <div class="refnamediv">   <h1 class="refname">gc_collect_cycles</h1>   <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7)</p><p class="refpurpose"><span class="refname">gc_collect_cycles</span> &mdash; <span class="dc-title">强制收集所有现存的垃圾循环周期</span></p>   </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.gc-collect-cycles-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">int</span> <span class="methodname" style="color:#CC7832"><strong>gc_collect_cycles</strong></span>     ( <span class="methodparam">void</span>    )</div>    <p class="para rdfs-comment">    强制收集所有现存的垃圾循环周期。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.gc-collect-cycles-parameters">   <h3 class="title">参数</h3>   <span>此函数没有参数。</span>  </div>     <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.gc-collect-cycles-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回收集的循环数量。   </p>  </div>             <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.gc-collect-cycles-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><a href="http://php.net/manual/zh/features.gc.php" class="link">垃圾回收机制</a></li>    </ul>   </span>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.info.php">PHP 选项/信息 函数</a></div></div>
 * @return int number of collected cycles.*/
function gc_collect_cycles () {}

/**
*<div id="function.gc-enabled" class="refentry">  <div class="refnamediv">   <h1 class="refname">gc_enabled</h1>   <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7)</p><p class="refpurpose"><span class="refname">gc_enabled</span> &mdash; <span class="dc-title">返回循环引用计数器的状态</span></p>   </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.gc-enabled-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">bool</span> <span class="methodname" style="color:#CC7832"><strong>gc_enabled</strong></span>     ( <span class="methodparam">void</span>    )</div>    <p class="para rdfs-comment">    返回循环引用计数器的状态。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.gc-enabled-parameters">   <h3 class="title">参数</h3>   <span>此函数没有参数。</span>  </div>     <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.gc-enabled-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    如果垃圾收集器已启用则返回 <strong><span>TRUE</span></strong>，否则返回 <strong><span>FALSE</span></strong>。   </p>  </div>          <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.gc-enabled-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-493">     <p><strong>Example #1 一个 <span class="function"><strong style="color:#CC7832">gc_enabled()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">if(</span><span style="color: #9876AA">gc_enabled</span><span style="color: #007700">())&nbsp;</span><span style="color: #9876AA">gc_collect_cycles</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>     </div>   </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.gc-enabled-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><a href="http://php.net/manual/zh/features.gc.php" class="link">垃圾回收机制</a></li>    </ul>   </span>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.info.php">PHP 选项/信息 函数</a></div></div>
 * @return bool true if the garbage collector is enabled, false otherwise.*/
function gc_enabled () {}

/**
*<div id="function.gc-enable" class="refentry">  <div class="refnamediv">   <h1 class="refname">gc_enable</h1>   <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7)</p><p class="refpurpose"><span class="refname">gc_enable</span> &mdash; <span class="dc-title">激活循环引用收集器</span></p>   </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.gc-enable-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span> <span class="methodname" style="color:#CC7832"><strong>gc_enable</strong></span>     ( <span class="methodparam">void</span>    )</div>    <p class="para rdfs-comment">    设置 <a href="http://php.net/manual/zh/info.configuration.php#ini.zend.enable-gc" class="link">zend.enable_gc</a> 为 <em>1</em>，    激活循环引用收集器。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.gc-enable-parameters">   <h3 class="title">参数</h3>   <span>此函数没有参数。</span>  </div>     <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.gc-enable-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    没有返回值。   </p>  </div>             <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.gc-enable-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><a href="http://php.net/manual/zh/features.gc.php" class="link">垃圾回收机制</a></li>    </ul>   </span>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.info.php">PHP 选项/信息 函数</a></div></div>
 * @return void */
function gc_enable () {}

/**
*<div id="function.gc-disable" class="refentry">  <div class="refnamediv">   <h1 class="refname">gc_disable</h1>   <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7)</p><p class="refpurpose"><span class="refname">gc_disable</span> &mdash; <span class="dc-title">停用循环引用收集器</span></p>   </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.gc-disable-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span> <span class="methodname" style="color:#CC7832"><strong>gc_disable</strong></span>     ( <span class="methodparam">void</span>    )</div>    <p class="para rdfs-comment">    停用循环引用收集器，设置    <a href="http://php.net/manual/zh/info.configuration.php#ini.zend.enable-gc" class="link">zend.enable_gc</a> 为 <em>0</em>。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.gc-disable-parameters">   <h3 class="title">参数</h3>   <span>此函数没有参数。</span>  </div>     <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.gc-disable-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    没有返回值。   </p>  </div>             <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.gc-disable-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><a href="http://php.net/manual/zh/features.gc.php" class="link">垃圾回收机制</a></li>    </ul>   </span>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.info.php">PHP 选项/信息 函数</a></div></div>
 * @return void */
function gc_disable () {}

/**
*<div id="function.sapi-windows-cp-get" class="refentry">  <div class="refnamediv">   <h1 class="refname">sapi_windows_cp_get</h1>   <p class="verinfo">(PHP 7 &gt;= 7.1.0)</p><p class="refpurpose"><span class="refname">sapi_windows_cp_get</span> &mdash; <span class="dc-title">Get process codepage</span></p>   </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.sapi-windows-cp-get-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">int</span> <span class="methodname" style="color:#CC7832"><strong>sapi_windows_cp_get</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#2EACF9">$kind</span></span>    )</div>    <p class="para rdfs-comment">    Get the identifier of the codepage of the current process.   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.sapi-windows-cp-get-parameters">   <h3 class="title">参数</h3>   <dl>          <dt> <span class="parameter" style="color:#2EACF9">kind</span></dt>      <dd>       <span>       The kind of codepage: either <em>&#039;ansi&#039;</em> or <em>&#039;oem&#039;</em>.      </span>     </dd>        </dl>   </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.sapi-windows-cp-get-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    Returns the codepage identifier.   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.sapi-windows-cp-get-seealso">   <h3 class="title">参见</h3>   <ul class="simplelist">    <li class="member"><span class="function">{@link sapi_windows_cp_set()} - Set process codepage</span></li>   </ul>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.misc.php">杂项 函数</a></div></div>
 * @return int*/
function sapi_windows_cp_get($kind) {

}

/**
*<div id="function.sapi-windows-cp-set" class="refentry">  <div class="refnamediv">   <h1 class="refname">sapi_windows_cp_set</h1>   <p class="verinfo">(PHP 7 &gt;= 7.1.0)</p><p class="refpurpose"><span class="refname">sapi_windows_cp_set</span> &mdash; <span class="dc-title">Set process codepage</span></p>   </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.sapi-windows-cp-set-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">bool</span> <span class="methodname" style="color:#CC7832"><strong>sapi_windows_cp_set</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#2EACF9">$cp</span></span>    )</div>    <p class="para rdfs-comment">    Set the codepage of the current process.   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.sapi-windows-cp-set-parameters">   <h3 class="title">参数</h3>   <dl>          <dt> <span class="parameter" style="color:#2EACF9">cp</span></dt>      <dd>       <span>       A codepage identifier.      </span>     </dd>        </dl>   </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.sapi-windows-cp-set-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    成功时返回 <strong><span>TRUE</span></strong>， 或者在失败时返回 <strong><span>FALSE</span></strong>。   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.sapi-windows-cp-set-seealso">   <h3 class="title">参见</h3>   <ul class="simplelist">    <li class="member"><span class="function">{@link sapi_windows_cp_get()} - Get process codepage</span></li>   </ul>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.misc.php">杂项 函数</a></div></div>
 * @return bool*/
function sapi_windows_cp_set($cp) {

}

/**
*<div id="function.sapi-windows-cp-conv" class="refentry">  <div class="refnamediv">   <h1 class="refname">sapi_windows_cp_conv</h1>   <p class="verinfo">(PHP 7 &gt;= 7.1.0)</p><p class="refpurpose"><span class="refname">sapi_windows_cp_conv</span> &mdash; <span class="dc-title">Convert string from one codepage to another</span></p>   </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.sapi-windows-cp-conv-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">string</span> <span class="methodname" style="color:#CC7832"><strong>sapi_windows_cp_conv</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766"><span class="type int|string" style="color:#EAB766">int|string</span></span> <span class="parameter" style="color:#2EACF9">$in_codepage</span></span>    , <span class="methodparam"><span class="type" style="color:#EAB766"><span class="type int|string" style="color:#EAB766">int|string</span></span> <span class="parameter" style="color:#2EACF9">$out_codepage</span></span>    , <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#2EACF9">$subject</span></span>    )</div>    <p class="para rdfs-comment">    Convert string from one codepage to another.   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.sapi-windows-cp-conv-parameters">   <h3 class="title">参数</h3>   <dl>          <dt> <span class="parameter" style="color:#2EACF9">in_codepage</span></dt>      <dd>       <span>       The codepage of the <span class="parameter" style="color:#2EACF9">subject</span> string.       Either the codepage name or identifier.      </span>     </dd>              <dt> <span class="parameter" style="color:#2EACF9">out_codepage</span></dt>      <dd>       <p class="para">       The codepage to convert the <span class="parameter" style="color:#2EACF9">subject</span> string to.       Either the codepage name or identifier.      </p>     </dd>              <dt> <span class="parameter" style="color:#2EACF9">subject</span></dt>      <dd>       <p class="para">       The string to convert.      </p>     </dd>        </dl>   </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.sapi-windows-cp-conv-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    The <span class="parameter" style="color:#2EACF9">subject</span> string converted to    <span class="parameter" style="color:#2EACF9">out_codepage</span>, or <strong><span>NULL</span></strong> on failure.   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-function.sapi-windows-cp-conv-errors">   <h3 class="title">错误／异常</h3>   <p class="para">    This function issues E_WARNING level errors, if invalid codepages are given,    or if the subject is not valid for <span class="parameter" style="color:#2EACF9">in_codepage</span>.   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.sapi-windows-cp-conv-seealso">   <h3 class="title">参见</h3>   <ul class="simplelist">    <li class="member"><span class="function">{@link sapi_windows_cp_get()} - Get process codepage</span></li>    <li class="member"><span class="function">{@link iconv()} - 字符串按要求的字符编码来转换</span></li>   </ul>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.misc.php">杂项 函数</a></div></div>
 * @return string*/
function sapi_windows_cp_conv($in_codepage, $out_codepage, $subject) {}

/**
*<div id="function.sapi-windows-cp-is-utf8" class="refentry">  <div class="refnamediv">   <h1 class="refname">sapi_windows_cp_is_utf8</h1>   <p class="verinfo">(PHP 7 &gt;= 7.1.0)</p><p class="refpurpose"><span class="refname">sapi_windows_cp_is_utf8</span> &mdash; <span class="dc-title">Indicates whether the codepage is UTF-8 compatible</span></p>   </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.sapi-windows-cp-is-utf8-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">bool</span> <span class="methodname" style="color:#CC7832"><strong>sapi_windows_cp_is_utf8</strong></span>     ( <span class="methodparam">void</span>    )</div>    <p class="para rdfs-comment">    Indicates whether the codepage of the current process is UTF-8 compatible.   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.sapi-windows-cp-is-utf8-parameters">   <h3 class="title">参数</h3>   <span>此函数没有参数。</span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.sapi-windows-cp-is-utf8-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    Returns whether the codepage of the current process is UTF-8 compatible.   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.sapi-windows-cp-is-utf8-seealso">   <h3 class="title">参见</h3>   <ul class="simplelist">    <li class="member"><span class="function">{@link sapi_windows_cp_get()} - Get process codepage</span></li>   </ul>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.misc.php">杂项 函数</a></div></div>
 * @return bool*/
function sapi_windows_cp_is_utf8() {

}

/**
*<div id="function.is-iterable" class="refentry">  <div class="refnamediv">   <h1 class="refname">is_iterable</h1>   <p class="verinfo">(PHP 7 &gt;= 7.1.0)</p><p class="refpurpose"><span class="refname">is_iterable</span> &mdash; <span class="dc-title">    Verify that the contents of a variable is an iterable value   </span></p>   </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.is-iterable-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">    <span class="type" style="color:#EAB766">bool</span> <span class="methodname" style="color:#CC7832"><strong>is_iterable</strong></span>     ( <span class="methodparam"><span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#2EACF9">$var</span></span>    )</div>    <p class="para rdfs-comment">    Verify that the contents of a variable is accepted by the    <span class="type" style="color:#EAB766"><span class="type iterable" style="color:#EAB766">iterable</span></span> pseudo-type, i.e. that it is an <span class="type" style="color:#EAB766"><a href="http://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span> or    an object implementing <strong class="classname">Traversable</strong>   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.is-iterable-parameters">   <h3 class="title">参数</h3>   <span>    <dl>            <dt> <span class="parameter" style="color:#2EACF9">var</span></dt>       <dd>        <p class="para">        The value to check       </p>      </dd>          </dl>    </span>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.is-iterable-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    Returns <strong><span>TRUE</span></strong> if <span class="parameter" style="color:#2EACF9">var</span> is iterable, <strong><span>FALSE</span></strong>     otherwise.   </p>  </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.is-iterable-examples">   <h3 class="title">范例</h3>   <span>    <div class="example" id="example-6357">     <p><strong>Example #1 <span class="function"><strong style="color:#CC7832">is_iterable()</strong></span> examples</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /><br />var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">is_iterable</span><span style="color: #007700">([</span><span style="color: #9876AA">1</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">2</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">3</span><span style="color: #007700">]));&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;bool(true)<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">is_iterable</span><span style="color: #007700">(new&nbsp;</span><span style="color: #9876AA">ArrayIterator</span><span style="color: #007700">([</span><span style="color: #9876AA">1</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">2</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">3</span><span style="color: #007700">])));&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;bool(true)<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">is_iterable</span><span style="color: #007700">((function&nbsp;()&nbsp;{&nbsp;</span><span style="color: #9876AA">yield&nbsp;1</span><span style="color: #007700">;&nbsp;})()));&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;bool(true)<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">is_iterable</span><span style="color: #007700">(</span><span style="color: #9876AA">1</span><span style="color: #007700">));&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;bool(false)<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">is_iterable</span><span style="color: #007700">(new&nbsp;</span><span style="color: #9876AA">stdClass</span><span style="color: #007700">()));&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;bool(false)<br /><br /></span><span style="color: #9876AA">?&gt;</span> </span> </span></div>     </div>     </div>      </span>     </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.is-iterable-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link is_array()} - 检测变量是否是数组</span></li>    </ul>   </span>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.var.php">Variable handling 函数</a></div></div>
 * @return true*/
function is_iterable($value) {}

/**
*<div id="function.utf8-encode" class="refentry">    <div class="refnamediv">     <h1 class="refname">utf8_encode</h1>     <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">utf8_encode</span> &mdash; <span class="dc-title">将 ISO-8859-1 编码的字符串转换为 UTF-8 编码</span></p>     </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 unknown-unknown-returnvalueu" id="refsect1-function.utf8-encode-unknown-unknown-returnvalueu">     <h3 class="title">描述</h3>     <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">      <span class="type" style="color:#EAB766">string</span> <span class="methodname" style="color:#CC7832"><strong>utf8_encode</strong></span>       ( <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#2EACF9">$data</span></span>      )</div>      <p class="para rdfs-comment">      该函数将 <span class="parameter" style="color:#2EACF9">data</span> 字符串转换为 <em>UTF-8</em> 编码，并返回编码后的字符串。<em>UTF-8</em> 是一种用于将<span class="glossterm">宽字符</span>值转换为字节流的 <acronym title="Unique, Universal, and Uniform character enCoding">Unicode</acronym> 的标准机制。<em>UTF-8</em> 对于纯 <abbr class="abbrev">ASCII</abbr> 字符来说是透明的，且是自同步的（也就是说这使得程序能够得知字符从字节流的何处开始），并可被普通字符串比较函数用以比较等操作。PHP 可将 <em>UTF-8</em> 编码为多达四个字节的字符，如：      <table class="doctable table">       <caption><strong>UTF-8 编码</strong></caption>               <thead>         <tr>          <th>字节（bytes）</th>          <th>位（bits）</th>          <th>表 示</th>         </tr>         </thead>         <tbody class="tbody">         <tr>          <td>1</td>          <td>7</td>          <td>0bbbbbbb</td>         </tr>          <tr>          <td>2</td>          <td>11</td>          <td>110bbbbb 10bbbbbb</td>         </tr>          <tr>          <td>3</td>          <td>16</td>          <td>1110bbbb 10bbbbbb 10bbbbbb</td>         </tr>          <tr>          <td>4</td>          <td>21</td>          <td>11110bbb 10bbbbbb 10bbbbbb 10bbbbbb</td>         </tr>         </tbody>             </table>      </p>     <p class="para">      每个 <em>UTF-8</em> 表示一个能被用以储存字符数据的位。     </p>    </div>    <div class="up"><a href="http://php.net/manual/zh/ref.xml.php">XML 解析器函数</a></div></div>
 * @return string the UTF-8 translation of <i>data</i>.*/
function utf8_encode ($data) {}

/**
 * Converts a string with ISO-8859-1 characters encoded with UTF-8
 * @since 4.0
 * @since 5.0
to single-byte ISO-8859-1
/**
*<div id="function.utf8-decode" class="refentry">    <div class="refnamediv">     <h1 class="refname">utf8_decode</h1>      <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">utf8_decode</span> &mdash; <span class="dc-title">      将用 UTF-8 方式编码的 ISO-8859-1 字符串转换成单字节的 ISO-8859-1 字符串。     </span></p>     </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 unknown-returnvaluet" id="refsect1-function.utf8-decode-unknown-returnvaluet">     <h3 class="title">描述</h3>     <div class="methodsynopsis dc-description" style="border:1px gray;padding-left:5px;background:#232525">      <span class="type" style="color:#EAB766">string</span> <span class="methodname" style="color:#CC7832"><strong>utf8_decode</strong></span>       ( <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#2EACF9">$data</span></span>      )</div>      <p class="para rdfs-comment">      该函数将用 <em>UTF-8</em> 编码的数据解码为 <em>ISO-8859-1</em> 编码。     </p>     <p class="para">      请参阅 <span class="function">{@link utf8_encode()}</span> 以查看关于 UTF-8 编码的解释。     </p>    </div>    <div class="up"><a href="http://php.net/manual/zh/ref.xml.php">XML 解析器函数</a></div></div>
 * @return string the ISO-8859-1 translation of <i>data</i>.*/
function utf8_decode ($data) {}
