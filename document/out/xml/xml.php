<?php

// Start of xml v.

/**
*<div id="function.xml-parser-create" class="refentry">    <div class="refnamediv">     <h1 class="refname">xml_parser_create</h1>     <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">xml_parser_create</span> &mdash; <span class="dc-title">建立一个 XML 解析器</span></p>     </div>    <div class="refsect1 unknown-unknown-returnvalueu" id="refsect1-function.xml-parser-create-unknown-unknown-returnvalueu">     <h3 class="title">描述</h3>     <div class="methodsynopsis dc-description">      <span class="type">resource</span> <span class="methodname"><strong>xml_parser_create</strong></span>       ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code></span>     ] )</div>      <p class="para rdfs-comment">      函数 <span class="function"><strong>xml_parser_create()</strong></span> 建立一个新的 XML 解析器并返回可被其它 XML 函数使用的资源句柄。     </p>       <p class="para">        可选参数 <code class="parameter">encoding</code> 在 PHP 4 中用来指定要被解析的 XML 输入的字符编码方式。PHP 5 开始，自动侦测输入的 XML 的编码，因此 <code class="parameter">encoding</code> 参数仅用来指定解析后输出数据的编码。在 PHP 4 总，默认输出的编码与输入数据的编码是相同的。如果传递了空字符串，解析器会尝试搜索头 3 或 4 个字节以确定文档的编码。在 PHP 5.0.0 和 5.0.1 总，默认输出的字符编码是 ISO-8859-1，而 PHP 5.0.2 及以上版本是 UTF-8。解析器支持的编码有 <em>ISO-8859-1</em>, <em>UTF-8</em> 和 <em>US-ASCII</em>。     </p>       <p class="para">        请参阅函数 <span class="function">{@link xml_parser_create_ns()}</span> 和 <span class="function">{@link xml_parser_free()}</span>。     </p>    </div>    <div class="up"><a href="http://php.net/manual/zh/ref.xml.php">XML 解析器函数</a></div></div>
 * @return resource a resource handle for the new XML parser.*/
function xml_parser_create ($encoding = null) {}

/**
*<div id="function.xml-parser-create-ns" class="refentry">    <div class="refnamediv">     <h1 class="refname">xml_parser_create_ns</h1>     <p class="verinfo">(PHP 4 &gt;= 4.0.5, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">xml_parser_create_ns</span> &mdash; <span class="dc-title">      生成一个支持命名空间的 XML 解析器     </span></p>     </div>    <div class="refsect1 unknown-returnvaluet" id="refsect1-function.xml-parser-create-ns-unknown-returnvaluet">     <h3 class="title">描述</h3>     <div class="methodsynopsis dc-description">      <span class="type">resource</span> <span class="methodname"><strong>xml_parser_create_ns</strong></span>       ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code></span>      [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$sep</code></span>     ]] )</div>      <p class="para rdfs-comment">      函数 <span class="function"><strong>xml_parser_create_ns()</strong></span> 建立一个新的支持 XML 命名空间的解析器并返回可被其它 XML 函数使用的资源句柄。     </p>       <p class="para">        通过有命名空间支持的解析器，传递给各种各样句柄函数的标签参数将由命名空间和标签名组成。命名空间和标签名的分隔符由 <code class="parameter">seperator</code> 参数制定的字符串决定，其默认值为“:”。     </p>       <p class="para">        可选参数 <code class="parameter">encoding</code> 在 PHP 4 中用来指定要被解析的 XML 输入的字符编码方式。PHP 5 开始，自动侦测输入的 XML 的编码，因此 <code class="parameter">encoding</code> 参数仅用来指定解析后输出数据的编码。在 PHP 4 总，默认输出的编码与输入数据的编码是相同的。如果传递了空字符串，解析器会尝试搜索头 3 或 4 个字节以确定文档的编码。在 PHP 5.0.0 和 5.0.1 总，默认输出的字符编码是 ISO-8859-1，而 PHP 5.0.2 及以上版本是 UTF-8。解析器支持的编码有 <em>ISO-8859-1</em>, <em>UTF-8</em> 和 <em>US-ASCII</em>。     </p>       <p class="para">        请参阅函数 <span class="function">{@link xml_parser_create()}</span> 和 <span class="function">{@link xml_parser_free()}</span>。     </p>    </div>    <div class="up"><a href="http://php.net/manual/zh/ref.xml.php">XML 解析器函数</a></div></div>
 * @return resource a resource handle for the new XML parser.*/
function xml_parser_create_ns ($encoding = null, $separator = ':') {}

/**
*<div id="function.xml-set-object" class="refentry">    <div class="refnamediv">     <h1 class="refname">xml_set_object</h1>     <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">xml_set_object</span> &mdash; <span class="dc-title">在对象中使用 XML 解析器</span></p>     </div>    <div class="refsect1 unknown-returnvaluet" id="refsect1-function.xml-set-object-unknown-returnvaluet">     <h3 class="title">描述</h3>      <div class="methodsynopsis dc-description">       <span class="type"><a href="http://php.net/manual/zh/class.pool.php" class="type pool">pool</a></span> <span class="methodname"><strong>xml_set_object</strong></span>        ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$parser</code></span>       , <span class="methodparam"><span class="type">object</span> <code class="parameter reference">&$object</code></span>       )</div>      <p class="para rdfs-comment">      该函数使得 <code class="parameter">parser</code> 指定的解析器可以被用在 <code class="parameter">object</code> 对象中。所有的回叫函数（callback function）都可以由 <span class="function">{@link xml_set_element_handler()}</span> 等函数来设置，它们被假定为 <code class="parameter">object</code> 对象的方法。     </p>     <p class="para">      <div class="example" id="example-6597">       <p><strong>Example #1 <span class="function"><strong>xml_set_object()</strong></span> 示例</strong></p>       <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">class&nbsp;</span><span style="color: #9876AA">xml&nbsp;&nbsp;</span><span style="color: #007700">{<br />&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;</span><span style="color: #9876AA">$parser</span><span style="color: #007700">;<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;</span><span style="color: #9876AA">xml</span><span style="color: #007700">()&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">parser&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">xml_parser_create</span><span style="color: #007700">();<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">xml_set_object</span><span style="color: #007700">(</span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">parser</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$this</span><span style="color: #007700">);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">xml_set_element_handler</span><span style="color: #007700">(</span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">parser</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"tag_open"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"tag_close"</span><span style="color: #007700">);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">xml_set_character_data_handler</span><span style="color: #007700">(</span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">parser</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"cdata"</span><span style="color: #007700">);<br />&nbsp;&nbsp;&nbsp;&nbsp;}<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;</span><span style="color: #9876AA">parse</span><span style="color: #007700">(</span><span style="color: #9876AA">$data</span><span style="color: #007700">)&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">xml_parse</span><span style="color: #007700">(</span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">parser</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$data</span><span style="color: #007700">);<br />&nbsp;&nbsp;&nbsp;&nbsp;}<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;</span><span style="color: #9876AA">tag_open</span><span style="color: #007700">(</span><span style="color: #9876AA">$parser</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$tag</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$attributes</span><span style="color: #007700">)&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$parser</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$tag</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$attributes</span><span style="color: #007700">);&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;}<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;</span><span style="color: #9876AA">cdata</span><span style="color: #007700">(</span><span style="color: #9876AA">$parser</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$cdata</span><span style="color: #007700">)&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$parser</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$cdata</span><span style="color: #007700">);<br />&nbsp;&nbsp;&nbsp;&nbsp;}<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;</span><span style="color: #9876AA">tag_close</span><span style="color: #007700">(</span><span style="color: #9876AA">$parser</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$tag</span><span style="color: #007700">)&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$parser</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$tag</span><span style="color: #007700">);<br />&nbsp;&nbsp;&nbsp;&nbsp;}<br /><br />}&nbsp;</span><span style="color: #FF8000">//&nbsp;end&nbsp;of&nbsp;class&nbsp;xml<br /><br /></span><span style="color: #9876AA">$xml_parser&nbsp;</span><span style="color: #007700">=&nbsp;new&nbsp;</span><span style="color: #9876AA">xml</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$xml_parser</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">parse</span><span style="color: #007700">(</span><span style="color: #DD0000">"&lt;A&nbsp;ID='hallo'&gt;PHP&lt;/A&gt;"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>       </div>       </div>     </p>    </div>    <div class="up"><a href="http://php.net/manual/zh/ref.xml.php">XML 解析器函数</a></div></div>
 * @return bool <b>TRUE</b> on success or <b>FALSE</b> on failure.*/
function xml_set_object ($parser, &$object) {}

/**
*<div id="function.xml-set-element-handler" class="refentry">    <div class="refnamediv">     <h1 class="refname">xml_set_element_handler</h1>     <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">xml_set_element_handler</span> &mdash; <span class="dc-title">建立起始和终止元素处理器</span></p>     </div>      <div class="refsect1 description" id="refsect1-function.xml-set-element-handler-description">   <h3 class="title">说明</h3>     <div class="methodsynopsis dc-description">    <span class="type">bool</span> <span class="methodname"><strong>xml_set_element_handler</strong></span>     ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$parser</code></span>    , <span class="methodparam"><span class="type"><a href="http://php.net/manual/zh/language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$start_element_handler</code></span>    , <span class="methodparam"><span class="type"><a href="http://php.net/manual/zh/language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$end_element_handler</code></span>    )</div>      <p class="para rdfs-comment">      为 <code class="parameter">parser</code> 参数指定的 XML 解析器建立元素处理器函数。参数 <code class="parameter">start_element_handler</code> 和 <code class="parameter">end_element_handler</code> 为表示函数名称的字符串，这些函数必须在为 <code class="parameter">parser</code> 指定的解析器调用 <span class="function">{@link xml_parse()}</span> 函数时已存在。     </p>  </div>    <div class="refsect1 parameters" id="refsect1-function.xml-set-element-handler-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">parser</code></dt>       <dd>        <p class="para">        XML 解析器的引用，用于建立起始和终止元素处理器。       </p>      </dd>                 <dt> <code class="parameter">start_element_handler</code></dt>       <dd>        <p class="para">             由 <code class="parameter">start_element_handler</code> 参数命名的函数名必须接受三个参数：        <div class="methodsynopsis dc-description">         <span class="methodname"><span class="replaceable">start_element_handler</span></span>          ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$parser</code></span>         , <span class="methodparam"><span class="type">string</span> <code class="parameter">$name</code></span>         , <span class="methodparam"><span class="type">array</span> <code class="parameter">$attribs</code></span>         )</div>         <dl>                    <dt> <code class="parameter">parser</code></dt>            <dd>            <span class="simpara">            第一个参数 <span class="replaceable">parser</span> 为指向要调用处理器的 XML 解析器的指针。           </span>          </dd>                             <dt> <code class="parameter">name</code></dt>           <dd>            <span class="simpara">            第二个参数 <code class="parameter">name</code> 为该处理器为之被调用的元素名。如果<a href="http://php.net/manual/zh/xml.case-folding.php" class="link">大小写折叠（case-folding）</a>对该解析器有效，元素名将用大写字母表示。           </span>          </dd>                             <dt> <code class="parameter">attribs</code></dt>           <dd>            <span class="simpara">            第三个参数 <code class="parameter">attribs</code> 为一个包含有对应元素的属性的数组（如果该元素有属性）。数组元素的下标为属性名，元素的值即为属性的值。属性名将以和元素名同样的标准进行<a href="http://php.net/manual/zh/xml.case-folding.php" class="link">大小写折叠（case-folded）</a>，其值<em class="emphasis">不</em>进行大小写折叠。           </span>           <span class="simpara">            属性的原始顺序将会被参数保留，用 <span class="function">{@link each()}</span> 函数遍历 <code class="parameter">attribs</code> 时，该数组下表的顺序和属性的顺序相同。           </span>          </dd>                  </dl>        </p>       <blockquote class="note"><p><strong class="note">Note</strong>: <span class="simpara">除了函数名，含有对象引用的数组和方法名也可以作为参数。</span></p></blockquote>      </dd>                 <dt> <code class="parameter">end_element_handler</code></dt>       <dd>        <p class="para">             由 <code class="parameter">end_element_handler</code> 参数命名的函数名必须接受两个参数：        <div class="methodsynopsis dc-description">         <span class="methodname"><span class="replaceable">end_element_handler</span></span>          ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$parser</code></span>         , <span class="methodparam"><span class="type">string</span> <code class="parameter">$name</code></span>         )</div>         <dl>                    <dt> <code class="parameter">parser</code></dt>            <dd>            <span class="simpara">            第一个参数 <span class="replaceable">parser</span> 为指向要调用处理器的 XML 解析器的指针。           </span>          </dd>                             <dt> <code class="parameter">name</code></dt>           <dd>            <span class="simpara">           第二个参数 <code class="parameter">name</code> 为该处理器为之被调用的元素名。如果<a href="http://php.net/manual/zh/xml.case-folding.php" class="link">大小写折叠（case-folding）</a>对该解析器有效，元素名将用大写字母表示。           </span>          </dd>                  </dl>        </p>       <p class="para">        如果处理器函数名被设置为空字符串或者 <strong><code>FALSE</code></strong>，则该有问题的处理器将被屏蔽。       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.xml-set-element-handler-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    成功时返回 <strong><code>TRUE</code></strong>， 或者在失败时返回 <strong><code>FALSE</code></strong>。   </p>  </div>    <div class="up"><a href="http://php.net/manual/zh/ref.xml.php">XML 解析器函数</a></div></div>
 * @return bool <b>TRUE</b> on success or <b>FALSE</b> on failure.*/
function xml_set_element_handler ($parser, callable $start_element_handler, callable $end_element_handler) {}

/**
*<div id="function.xml-set-character-data-handler" class="refentry">    <div class="refnamediv">     <h1 class="refname">xml_set_character_data_handler</h1>     <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">xml_set_character_data_handler</span> &mdash; <span class="dc-title">建立字符数据处理器</span></p>     </div>      <div class="refsect1 description" id="refsect1-function.xml-set-character-data-handler-description">   <h3 class="title">说明</h3>     <div class="methodsynopsis dc-description">      <span class="type">bool</span> <span class="methodname"><strong>xml_set_character_data_handler</strong></span>       ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$parser</code></span>    , <span class="methodparam"><span class="type"><a href="http://php.net/manual/zh/language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$handler</code></span>      )</div>      <p class="para rdfs-comment">      为 <code class="parameter">parser</code> 变量指向的 XML 解析器指定字符数据处理函数。     </p>    </div>    <div class="refsect1 parameters" id="refsect1-function.xml-set-character-data-handler-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">parser</code></dt>       <dd>        <p class="para">        XML 解析器的引用，用于建立字符数据处理器。       </p>      </dd>                 <dt> <code class="parameter">handler</code></dt>       <dd>        <p class="para">        <code class="parameter">handler</code> 为表示一个函数名称的字符串，该函数必须在为 <code class="parameter">parser</code> 指定的解析器调用 <span class="function">{@link xml_parse()}</span> 函数时已存在。       </p>       <p class="para">         由 <code class="parameter">handler</code> 参数命名的函数名必须接受两个参数：        <div class="methodsynopsis dc-description">         <span class="methodname"><span class="replaceable">handler</span></span>          ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$parser</code></span>         , <span class="methodparam"><span class="type">string</span> <code class="parameter">$data</code></span>         )</div>         <dl>                    <dt> <code class="parameter">parser</code></dt>           <dd>            <span class="simpara">             第一个参数 <span class="replaceable">parser</span> 为指向要调用处理器的 XML 解析器的指针。           </span>          </dd>                             <dt> <code class="parameter">data</code></dt>           <dd>            <span class="simpara">            第二个参数 <code class="parameter">data</code> 为包含有字符数据的字符串。           </span>          </dd>                  </dl>        </p>       <p class="para">        Character data handler is called for every piece of a text in the XML        document. It can be called multiple times inside each fragment (e.g.        for non-ASCII strings).       </p>       <p class="para">        如果处理器函数名被设置为空字符串或者 <strong><code>FALSE</code></strong>，则该有问题的处理器将被屏蔽。       </p>       <blockquote class="note"><p><strong class="note">Note</strong>: <span class="simpara">除了函数名，含有对象引用的数组和方法名也可以作为参数。</span></p></blockquote>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.xml-set-character-data-handler-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    成功时返回 <strong><code>TRUE</code></strong>， 或者在失败时返回 <strong><code>FALSE</code></strong>。   </p>  </div>    <div class="up"><a href="http://php.net/manual/zh/ref.xml.php">XML 解析器函数</a></div></div>
 * @return bool <b>TRUE</b> on success or <b>FALSE</b> on failure.*/
function xml_set_character_data_handler ($parser, callable $handler) {}

/**
*<div id="function.xml-set-processing-instruction-handler" class="refentry">    <div class="refnamediv">     <h1 class="refname">xml_set_processing_instruction_handler</h1>     <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">xml_set_processing_instruction_handler</span> &mdash; <span class="dc-title">      建立处理指令（PI）处理器     </span></p>     </div>      <div class="refsect1 description" id="refsect1-function.xml-set-processing-instruction-handler-description">   <h3 class="title">说明</h3>     <div class="methodsynopsis dc-description">      <span class="type">bool</span> <span class="methodname"><strong>xml_set_processing_instruction_handler</strong></span>       ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$parser</code></span>    , <span class="methodparam"><span class="type"><a href="http://php.net/manual/zh/language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$handler</code></span>      )</div>      <p class="para rdfs-comment">      为 <code class="parameter">parser</code> 参数指定的 XML 解析器建立处理指令（PI）处理器函数。     </p>     <p class="para">      处理指令有如下格式：      <div class="informalexample">       <div class="example-contents"><div class="cdata"><pre>&lt;?</pre></div><span class="replaceable">target</span>    <span class="replaceable">data</span><div class="cdata"><pre>?&gt;       </pre></div></div>       </div>      您可以将 PHP 代码放置在类似的标识符中，但要注意一个限制：在 XML 处理指令（PI）中，PI 的终止符（<em>?&gt;</em>）不能被引号引用，因此该字符序列不应该在您用 PI 嵌入到 XML 文档中的 PHP 代码中出现。否则，剩下的 PHP 代码，包括“真正”的 PI 终止符将被当作字符数据处理。     </p>  </div>    <div class="refsect1 parameters" id="refsect1-function.xml-set-processing-instruction-handler-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">parser</code></dt>       <dd>        <p class="para">        XML 解析器的引用，用于建立处理指令（PI）处理器。       </p>      </dd>                 <dt> <code class="parameter">handler</code></dt>       <dd>        <p class="para">        参数 <code class="parameter">handler</code> 为表示函数名称的字符串，函数必须在为 <code class="parameter">parser</code> 指定的解析器调用 <span class="function">{@link xml_parse()}</span> 函数时已存在。       </p>       <p class="para">        由 <code class="parameter">handler</code> 参数命名的函数名必须接受三个参数：        <div class="methodsynopsis dc-description">         <span class="methodname"><span class="replaceable">handler</span></span>          ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$parser</code></span>         , <span class="methodparam"><span class="type">string</span> <code class="parameter">$target</code></span>         , <span class="methodparam"><span class="type">string</span> <code class="parameter">$data</code></span>         )</div>         <dl>                    <dt> <code class="parameter">parser</code></dt>           <dd>            <span class="simpara">            第一个参数 <span class="replaceable">parser</span> 为指向要调用处理器的 XML 解析器的指针。           </span>          </dd>                             <dt> <code class="parameter">target</code></dt>           <dd>            <span class="simpara">            第二个参数 <code class="parameter">target</code> 为 PI 对象（PI target）。           </span>          </dd>                             <dt> <code class="parameter">data</code></dt>           <dd>            <span class="simpara">            第三个参数 <code class="parameter">data</code> 包含了 PI 数据。           </span>          </dd>                  </dl>        </p>       <p class="para">        如果处理器函数名被设置为空字符串或者 <strong><code>FALSE</code></strong>，则该有问题的处理器将被屏蔽。       </p>       <blockquote class="note"><p><strong class="note">Note</strong>: <span class="simpara">除了函数名，含有对象引用的数组和方法名也可以作为参数。</span></p></blockquote>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.xml-set-processing-instruction-handler-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    成功时返回 <strong><code>TRUE</code></strong>， 或者在失败时返回 <strong><code>FALSE</code></strong>。   </p>  </div>    <div class="up"><a href="http://php.net/manual/zh/ref.xml.php">XML 解析器函数</a></div></div>
 * @return bool <b>TRUE</b> on success or <b>FALSE</b> on failure.*/
function xml_set_processing_instruction_handler ($parser, callable $handler) {}

/**
*<div id="function.xml-set-default-handler" class="refentry">    <div class="refnamediv">     <h1 class="refname">xml_set_default_handler</h1>     <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">xml_set_default_handler</span> &mdash; <span class="dc-title">建立默认处理器</span></p>     </div>  <div class="refsect1 description" id="refsect1-function.xml-set-default-handler-description">   <h3 class="title">说明</h3>     <div class="methodsynopsis dc-description">      <span class="type">bool</span> <span class="methodname"><strong>xml_set_default_handler</strong></span>       ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$parser</code></span>    , <span class="methodparam"><span class="type"><a href="http://php.net/manual/zh/language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$handler</code></span>      )</div>      <p class="para rdfs-comment">      为 <code class="parameter">parser</code> 指定的 XML 处理器建立默认处理函数。           </p>   </div>    <div class="refsect1 parameters" id="refsect1-function.xml-set-default-handler-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">parser</code></dt>       <dd>        <p class="para">        XML 解析器的引用，用于建立默认处理器函数。       </p>      </dd>                 <dt> <code class="parameter">handler</code></dt>       <dd>        <p class="para">        <code class="parameter">handler</code> 为表示一个函数名称的字符串，该函数必须在为 <code class="parameter">parser</code> 指定的解析器调用 <span class="function">{@link xml_parse()}</span> 函数时已存在。       </p>       <p class="para">        由 <code class="parameter">handler</code> 参数命名的函数名必须接受两个参数：        <div class="methodsynopsis dc-description">         <span class="methodname"><span class="replaceable">handler</span></span>          ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$parser</code></span>         , <span class="methodparam"><span class="type">string</span> <code class="parameter">$data</code></span>         )</div>         <dl>                    <dt>            <code class="parameter">parser</code>          </dt>            <dd>            <span class="simpara">            第一个参数 <span class="replaceable">parser</span> 为指向要调用处理器的 XML 解析器的指针。           </span>          </dd>                             <dt>            <code class="parameter">data</code>          </dt>           <dd>            <span class="simpara">            第二个参数 <code class="parameter">data</code> 为包含有字符数据的字符串。其内容可以是 XML 声明、文档类型声明、实体名或者其它没有已存在处理器的地数据。           </span>          </dd>                  </dl>        </p>       <p class="para">        如果处理器函数名被设置为空字符串或者 <strong><code>FALSE</code></strong>，则该有问题的处理器将被屏蔽。       </p>       <blockquote class="note"><p><strong class="note">Note</strong>: <span class="simpara">除了函数名，含有对象引用的数组和方法名也可以作为参数。</span></p></blockquote>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.xml-set-default-handler-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    成功时返回 <strong><code>TRUE</code></strong>， 或者在失败时返回 <strong><code>FALSE</code></strong>。   </p>  </div>    <div class="up"><a href="http://php.net/manual/zh/ref.xml.php">XML 解析器函数</a></div></div>
 * @return bool <b>TRUE</b> on success or <b>FALSE</b> on failure.*/
function xml_set_default_handler ($parser, callable $handler) {}

/**
*<div id="function.xml-set-unparsed-entity-decl-handler" class="refentry">    <div class="refnamediv">     <h1 class="refname">xml_set_unparsed_entity_decl_handler</h1>     <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">xml_set_unparsed_entity_decl_handler</span> &mdash; <span class="dc-title">      建立未解析实体定义声明处理器     </span></p>     </div>  <div class="refsect1 description" id="refsect1-function.xml-set-unparsed-entity-decl-handler-description">   <h3 class="title">说明</h3>     <div class="methodsynopsis dc-description">      <span class="type">bool</span> <span class="methodname"><strong>xml_set_unparsed_entity_decl_handler</strong></span>       ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$parser</code></span>    , <span class="methodparam"><span class="type"><a href="http://php.net/manual/zh/language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$handler</code></span>      )</div>      <p class="para rdfs-comment">      为 <code class="parameter">parser</code> 参数指定的 XML 解析器建立未解析实体定义声明处理器函数。           </p>     <p class="para">      当 XML 解析器遇到如下含有 NDATA 声明的外部实体定义声明时，该 <code class="parameter">handler</code> 处理器将被调用：      <div class="example-contents"> <div class="xmlcode"><pre class="xmlcode">&lt;!ENTITY &lt;parameter&gt;name&lt;/parameter&gt; {&lt;parameter&gt;publicId&lt;/parameter&gt; | &lt;parameter&gt;systemId&lt;/parameter&gt;}          NDATA &lt;parameter&gt;notationName&lt;/parameter&gt;</pre> </div>      </div>      </p>     <p class="para">      请参阅 <a href="http://www.w3.org/TR/1998/REC-xml-19980210#sec-external-ent" class="link external">&raquo;&nbsp;XML 1.0 参考的第 4.2.2 节</a>以获取有关已声明外部实体注释定义的信息。     </p>   </div>    <div class="refsect1 parameters" id="refsect1-function.xml-set-unparsed-entity-decl-handler-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">parser</code></dt>       <dd>        <p class="para">        XML 解析器的引用，用于建立未解析实体定义声明处理器。       </p>      </dd>                 <dt> <code class="parameter">handler</code></dt>       <dd>        <p class="para">        参数<code class="parameter">handler</code> 为表示函数名称的字符串，这个函数必须在为 <code class="parameter">parser</code> 指定的解析器调用 <span class="function">{@link xml_parse()}</span> 函数时已存在。       </p>       <p class="para">        由 <code class="parameter">handler</code> 参数命名的函数名必须接受六个参数：        <div class="methodsynopsis dc-description">         <span class="methodname"><span class="replaceable">handler</span></span>          ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$parser</code></span>         , <span class="methodparam"><span class="type">string</span> <code class="parameter">$entity_name</code></span>         , <span class="methodparam"><span class="type">string</span> <code class="parameter">$base</code></span>         , <span class="methodparam"><span class="type">string</span> <code class="parameter">$system_id</code></span>         , <span class="methodparam"><span class="type">string</span> <code class="parameter">$public_id</code></span>         , <span class="methodparam"><span class="type">string</span> <code class="parameter">$notation_name</code></span>         )</div>         <dl>                    <dt> <code class="parameter">parser</code></dt>           <dd>            <span class="simpara">            第一个参数 <span class="replaceable">parser</span> 为指向要调用处理器的 XML 解析器的指针。           </span>          </dd>                             <dt> <code class="parameter">entity_name</code></dt>           <dd>            <span class="simpara">            将被定义的实体名。           </span>          </dd>                             <dt> <code class="parameter">base</code></dt>           <dd>            <span class="simpara">            这个参数是解析外部实体的系统标识符（<code class="parameter">system_id</code>）的基础。当前该参数通常都被设置为空字符串。           </span>          </dd>                             <dt> <code class="parameter">system_id</code></dt>           <dd>            <span class="simpara">            外部实体的系统标识符。           </span>          </dd>                             <dt> <code class="parameter">public_id</code></dt>           <dd>            <span class="simpara">             外部实体的公共标识符。           </span>          </dd>                             <dt> <code class="parameter">notation_name</code></dt>           <dd>            <span class="simpara">             该实体的注释名（请参阅 <span class="function">{@link xml_set_notation_decl_handler()}</span>）。           </span>          </dd>                  </dl>        </p>       <p class="para">       如果处理器函数名被设置为空字符串或者 <strong><code>FALSE</code></strong>，则该有问题的处理器将被屏蔽。       </p>       <blockquote class="note"><p><strong class="note">Note</strong>: <span class="simpara">除了函数名，含有对象引用的数组和方法名也可以作为参数。</span></p></blockquote>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.xml-set-unparsed-entity-decl-handler-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    成功时返回 <strong><code>TRUE</code></strong>， 或者在失败时返回 <strong><code>FALSE</code></strong>。   </p>  </div>    <div class="up"><a href="http://php.net/manual/zh/ref.xml.php">XML 解析器函数</a></div></div>
 * @return bool <b>TRUE</b> on success or <b>FALSE</b> on failure.*/
function xml_set_unparsed_entity_decl_handler ($parser, callable $handler) {}

/**
*<div id="function.xml-set-notation-decl-handler" class="refentry">    <div class="refnamediv">     <h1 class="refname">xml_set_notation_decl_handler</h1>     <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">xml_set_notation_decl_handler</span> &mdash; <span class="dc-title">建立注释声明处理器</span></p>     </div>  <div class="refsect1 description" id="refsect1-function.xml-set-notation-decl-handler-description">   <h3 class="title">说明</h3>     <div class="methodsynopsis dc-description">      <span class="type">bool</span> <span class="methodname"><strong>xml_set_notation_decl_handler</strong></span>       ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$parser</code></span>    , <span class="methodparam"><span class="type"><a href="http://php.net/manual/zh/language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$handler</code></span>      )</div>      <p class="para rdfs-comment">      为 <code class="parameter">parser</code> 参数指定的 XML 解析器建立注释声明处理器函数。     </p>     <p class="para">      注释声明是文档 DTD 的一部分，并有如下格式：      <div class="example-contents"> <div class="xmlcode"><pre class="xmlcode">&lt;!NOTATION &lt;parameter&gt;name&lt;/parameter&gt; {&lt;parameter&gt;system_id&lt;/parameter&gt; | &lt;parameter&gt;public_id&lt;/parameter&gt;}?&gt;</pre> </div>      </div> 。请参考 <a href="http://www.w3.org/TR/1998/REC-xml-19980210#Notations" class="link external">&raquo;&nbsp;XML 1.0 参考的第 4.7 节</a>以了解注释声明的定义。     </p>    </div>    <div class="refsect1 parameters" id="refsect1-function.xml-set-notation-decl-handler-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">parser</code></dt>       <dd>        <p class="para">        XML 解析器的引用，用于设置声明处理器函数。       </p>      </dd>                 <dt> <code class="parameter">handler</code></dt>       <dd>        <p class="para">        <code class="parameter">handler</code> 为表示函数名称的字符串，函数必须在为 <code class="parameter">parser</code> 指定的解析器调用 <span class="function">{@link xml_parse()}</span> 函数时已存在。       </p>       <p class="para">        由 <code class="parameter">handler</code> 参数命名的函数名必须接受五个参数：        <div class="methodsynopsis dc-description">         <span class="methodname"><span class="replaceable">handler</span></span>          ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$parser</code></span>         , <span class="methodparam"><span class="type">string</span> <code class="parameter">$notation_name</code></span>         , <span class="methodparam"><span class="type">string</span> <code class="parameter">$base</code></span>         , <span class="methodparam"><span class="type">string</span> <code class="parameter">$system_id</code></span>         , <span class="methodparam"><span class="type">string</span> <code class="parameter">$public_id</code></span>         )</div>         <dl>                    <dt>            <code class="parameter">parser</code>          </dt>            <dd>            <span class="simpara">            第一个参数 <span class="replaceable">parser</span> 为指向要调用处理器的 XML 解析器的指针。           </span>          </dd>                             <dt> <code class="parameter">notation_name</code></dt>           <dd>            <span class="simpara">            该参数为以上注释格式定义中的 <code class="parameter">name</code> 参数。           </span>          </dd>                             <dt>            <code class="parameter">base</code>          </dt>           <dd>            <span class="simpara">            这个参数是解析注释声明的系统标识符（<code class="parameter">system_id</code>）的基础。当前该参数通常都被设置为空字符串。           </span>          </dd>                             <dt> <code class="parameter">system_id</code></dt>           <dd>            <span class="simpara">            外部注释声明的系统标识符。           </span>          </dd>                             <dt>            <code class="parameter">public_id</code>          </dt>           <dd>            <span class="simpara">            外部注释声明的公共标识符。           </span>          </dd>                  </dl>        </p>       <p class="para">        如果处理器函数名被设置为空字符串或者 <strong><code>FALSE</code></strong>，则该有问题的处理器将被屏蔽。       </p>       <blockquote class="note"><p><strong class="note">Note</strong>: <span class="simpara">除了函数名，含有对象引用的数组和方法名也可以作为参数。</span></p></blockquote>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.xml-set-notation-decl-handler-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    成功时返回 <strong><code>TRUE</code></strong>， 或者在失败时返回 <strong><code>FALSE</code></strong>。   </p>  </div>    <div class="up"><a href="http://php.net/manual/zh/ref.xml.php">XML 解析器函数</a></div></div>
 * @return bool <b>TRUE</b> on success or <b>FALSE</b> on failure.*/
function xml_set_notation_decl_handler ($parser, callable $handler) {}

/**
*<div id="function.xml-set-external-entity-ref-handler" class="refentry">    <div class="refnamediv">     <h1 class="refname">xml_set_external_entity_ref_handler</h1>     <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">xml_set_external_entity_ref_handler</span> &mdash; <span class="dc-title">建立外部实体指向处理器</span></p>     </div>      <div class="refsect1 description" id="refsect1-function.xml-set-external-entity-ref-handler-description">   <h3 class="title">说明</h3>     <div class="methodsynopsis dc-description">      <span class="type">bool</span> <span class="methodname"><strong>xml_set_external_entity_ref_handler</strong></span>       ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$parser</code></span>    , <span class="methodparam"><span class="type"><a href="http://php.net/manual/zh/language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$handler</code></span>      )</div>      <p class="para rdfs-comment">      为 <code class="parameter">parser</code> 参数指定的 XML 解析器建立外部实体指向处理器函数。     </p>    </div>    <div class="refsect1 parameters" id="refsect1-function.xml-set-external-entity-ref-handler-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">parser</code></dt>       <dd>        <p class="para">        XML 解析器的引用，用于建立外部实体指向处理器。       </p>      </dd>                 <dt> <code class="parameter">handler</code></dt>       <dd>        <p class="para">        参数 <code class="parameter">handler</code> 为表示函数名称的字符串，函数必须在为 <code class="parameter">parser</code> 指定的解析器调用 <span class="function">{@link xml_parse()}</span> 函数时已存在。       </p>       <p class="para">        由 <code class="parameter">handler</code> 参数命名的函数名必须接受五个参数，并应该返回一个整型值。如果处理器的返回值为 <strong><code>FALSE</code></strong>（这也是函数没有确定返回值时的返回值），XML 解析器将停止解析， <span class="function">{@link xml_get_error_code()}</span> 函数将返回  <strong><code>XML_ERROR_EXTERNAL_ENTITY_HANDLING</code></strong>。        <div class="methodsynopsis dc-description">         <span class="methodname"><span class="replaceable">handler</span></span>          ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$parser</code></span>         , <span class="methodparam"><span class="type">string</span> <code class="parameter">$open_entity_names</code></span>         , <span class="methodparam"><span class="type">string</span> <code class="parameter">$base</code></span>         , <span class="methodparam"><span class="type">string</span> <code class="parameter">$system_id</code></span>         , <span class="methodparam"><span class="type">string</span> <code class="parameter">$public_id</code></span>         )</div>         <dl>                    <dt> <code class="parameter">parser</code></dt>           <dd>            <span class="simpara">             第一个参数 <span class="replaceable">parser</span> 为指向要调用处理器的 XML 解析器的指针。           </span>          </dd>                             <dt> <code class="parameter">open_entity_names</code></dt>           <dd>            <span class="simpara">            第二个参数 <code class="parameter">open_entity_names</code> 是为该实体的解析开放的实体名列表（包括被指向的实体名），这些实体名由空格隔开。           </span>          </dd>                             <dt> <code class="parameter">base</code></dt>           <dd>            <span class="simpara">           这个参数是解析外部实体的系统标识符（<code class="parameter">system_id</code>）的基础。当前该参数通常都被设置为空字符串。           </span>          </dd>                             <dt> <code class="parameter">system_id</code></dt>           <dd>            <span class="simpara">            第四个参数 <code class="parameter">system_id</code> 是在实体定义声明中指定的系统标识符。           </span>          </dd>                             <dt> <code class="parameter">public_id</code></dt>           <dd>            <span class="simpara">            第五个参数 <code class="parameter">public_id</code> 是在实体定义声明中指定的公共标识符，如果未指定任何标识符，则该字符串为空。公共标识符中的空格将按照 XML 的要求被正常化。           </span>          </dd>                  </dl>        </p>       <p class="para">        如果处理器函数名被设置为空字符串或者 <strong><code>FALSE</code></strong>，则该有问题的处理器将被屏蔽。       </p>       <blockquote class="note"><p><strong class="note">Note</strong>: <span class="simpara">除了函数名，含有对象引用的数组和方法名也可以作为参数。</span></p></blockquote>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.xml-set-external-entity-ref-handler-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    成功时返回 <strong><code>TRUE</code></strong>， 或者在失败时返回 <strong><code>FALSE</code></strong>。   </p>  </div>    <div class="up"><a href="http://php.net/manual/zh/ref.xml.php">XML 解析器函数</a></div></div>
 * @return bool <b>TRUE</b> on success or <b>FALSE</b> on failure.*/
function xml_set_external_entity_ref_handler ($parser, callable $handler) {}

/**
*<div id="function.xml-set-start-namespace-decl-handler" class="refentry">    <div class="refnamediv">     <h1 class="refname">xml_set_start_namespace_decl_handler</h1>     <p class="verinfo">(PHP 4 &gt;= 4.0.5, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">xml_set_start_namespace_decl_handler</span> &mdash; <span class="dc-title">      建立起始命名空间声明处理器     </span></p>     </div>    <div class="refsect1 description" id="refsect1-function.xml-set-start-namespace-decl-handler-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">bool</span> <span class="methodname"><strong>xml_set_start_namespace_decl_handler</strong></span>     ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$parser</code></span>    , <span class="methodparam"><span class="type"><a href="http://php.net/manual/zh/language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$handler</code></span>    )</div>    <p class="para rdfs-comment">    Set a handler to be called when a namespace is declared. Namespace    declarations occur inside start tags. But the namespace declaration start    handler is called before the start tag handler for each namespace declared    in that start tag.   </p>  </div>    <div class="refsect1 parameters" id="refsect1-function.xml-set-start-namespace-decl-handler-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">parser</code></dt>       <dd>        <p class="para">        A reference to the XML parser.       </p>      </dd>                 <dt> <code class="parameter">handler</code></dt>       <dd>        <p class="para">        <code class="parameter">handler</code> is a string containing the name of a        function that must exist when <span class="function">{@link xml_parse()}</span> is called        for <code class="parameter">parser</code>.       </p>       <p class="para">        The function named by <code class="parameter">handler</code> must accept        three parameters, and should return an integer value. If the        value returned from the handler is <strong><code>FALSE</code></strong> (which it will be if no        value is returned), the XML parser will stop parsing and        <span class="function">{@link xml_get_error_code()}</span> will return        <strong><code>XML_ERROR_EXTERNAL_ENTITY_HANDLING</code></strong>.        <div class="methodsynopsis dc-description">         <span class="methodname"><span class="replaceable">handler</span></span>          ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$parser</code></span>         , <span class="methodparam"><span class="type">string</span> <code class="parameter">$prefix</code></span>         , <span class="methodparam"><span class="type">string</span> <code class="parameter">$uri</code></span>         )</div>         <dl>                    <dt> <code class="parameter">parser</code></dt>           <dd>            <span class="simpara">            The first parameter, <span class="replaceable">parser</span>, is a            reference to the XML parser calling the handler.           </span>          </dd>                             <dt> <code class="parameter">prefix</code></dt>           <dd>            <span class="simpara">            The prefix is a string used to reference the namespace within an XML object.           </span>          </dd>                             <dt> <code class="parameter">uri</code></dt>           <dd>            <span class="simpara">            Uniform Resource Identifier (URI) of namespace.           </span>          </dd>                  </dl>        </p>       <p class="para">        If a handler function is set to an empty string, or <strong><code>FALSE</code></strong>, the handler        in question is disabled.       </p>       <blockquote class="note"><p><strong class="note">Note</strong>: <span class="simpara">除了函数名，含有对象引用的数组和方法名也可以作为参数。</span></p></blockquote>      </dd>          </dl>    </p>  </div>   <div class="refsect1 returnvalues" id="refsect1-function.xml-set-start-namespace-decl-handler-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    成功时返回 <strong><code>TRUE</code></strong>， 或者在失败时返回 <strong><code>FALSE</code></strong>。   </p>  </div>   <div class="refsect1 seealso" id="refsect1-function.xml-set-start-namespace-decl-handler-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link xml_set_end_namespace_decl_handler()} - 建立终止命名空间声明处理器</span></li>    </ul>   </p>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.xml.php">XML 解析器函数</a></div></div>
 * @return bool <b>TRUE</b> on success or <b>FALSE</b> on failure.*/
function xml_set_start_namespace_decl_handler ($parser, callable $handler) {}

/**
*<div id="function.xml-set-end-namespace-decl-handler" class="refentry">  <div class="refnamediv">   <h1 class="refname">xml_set_end_namespace_decl_handler</h1>   <p class="verinfo">(PHP 4 &gt;= 4.0.5, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">xml_set_end_namespace_decl_handler</span> &mdash; <span class="dc-title">    建立终止命名空间声明处理器   </span></p>   </div>    <div class="refsect1 description" id="refsect1-function.xml-set-end-namespace-decl-handler-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">bool</span> <span class="methodname"><strong>xml_set_end_namespace_decl_handler</strong></span>     ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$parser</code></span>    , <span class="methodparam"><span class="type"><a href="http://php.net/manual/zh/language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$handler</code></span>    )</div>    <p class="para rdfs-comment">    Set a handler to be called when leaving the scope of a namespace    declaration. This will be called, for each namespace declaration, after    the handler for the end tag of the element in which the namespace was    declared.   </p>  </div>    <div class="refsect1 parameters" id="refsect1-function.xml-set-end-namespace-decl-handler-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">parser</code></dt>       <dd>        <p class="para">        A reference to the XML parser.       </p>      </dd>                 <dt> <code class="parameter">handler</code></dt>       <dd>        <p class="para">        <code class="parameter">handler</code> is a string containing the name of a        function that must exist when <span class="function">{@link xml_parse()}</span> is called        for <code class="parameter">parser</code>.       </p>       <p class="para">        The function named by <code class="parameter">handler</code> must accept        two parameters, and should return an integer value. If the        value returned from the handler is <strong><code>FALSE</code></strong> (which it will be if no        value is returned), the XML parser will stop parsing and        <span class="function">{@link xml_get_error_code()}</span> will return        <strong><code>XML_ERROR_EXTERNAL_ENTITY_HANDLING</code></strong>.        <div class="methodsynopsis dc-description">         <span class="methodname"><span class="replaceable">handler</span></span>          ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$parser</code></span>         , <span class="methodparam"><span class="type">string</span> <code class="parameter">$prefix</code></span>         )</div>         <dl>                    <dt> <code class="parameter">parser</code></dt>           <dd>            <span class="simpara">            The first parameter, <span class="replaceable">parser</span>, is a            reference to the XML parser calling the handler.           </span>          </dd>                             <dt> <code class="parameter">prefix</code></dt>           <dd>            <span class="simpara">            The prefix is a string used to reference the namespace within an XML object.           </span>          </dd>                  </dl>        </p>       <p class="para">        If a handler function is set to an empty string, or <strong><code>FALSE</code></strong>, the handler        in question is disabled.       </p>       <blockquote class="note"><p><strong class="note">Note</strong>: <span class="simpara">除了函数名，含有对象引用的数组和方法名也可以作为参数。</span></p></blockquote>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.xml-set-end-namespace-decl-handler-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    成功时返回 <strong><code>TRUE</code></strong>， 或者在失败时返回 <strong><code>FALSE</code></strong>。   </p>  </div>    <div class="refsect1 notes" id="refsect1-function.xml-set-end-namespace-decl-handler-notes">   <h3 class="title">注释</h3>   <blockquote class="note"><p><strong class="note">Note</strong>:     <p class="para">     This event is not supported under LibXML.    </p>   </p></blockquote>  </div>    <div class="refsect1 seealso" id="refsect1-function.xml-set-end-namespace-decl-handler-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link xml_set_start_namespace_decl_handler()} - 建立起始命名空间声明处理器</span></li>    </ul>   </p>  </div>   <div class="up"><a href="http://php.net/manual/zh/ref.xml.php">XML 解析器函数</a></div></div>
 * @return bool <b>TRUE</b> on success or <b>FALSE</b> on failure.*/
function xml_set_end_namespace_decl_handler ($parser, callable $handler) {}

/**
*<div id="function.xml-parse" class="refentry">    <div class="refnamediv">     <h1 class="refname">xml_parse</h1>     <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">xml_parse</span> &mdash; <span class="dc-title">开始解析一个 XML 文档</span></p>     </div>    <div class="refsect1 description" id="refsect1-function.xml-parse-description">     <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">int</span> <span class="methodname"><strong>xml_parse</strong></span>     ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$parser</code></span>    , <span class="methodparam"><span class="type">string</span> <code class="parameter">$data</code></span>    [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$is_final</code><span class="initializer"> = false</span></span>     ] )</div>      <p class="para rdfs-comment">      <span class="function"><strong>xml_parse()</strong></span> 解析 XML 文档。已配置事件的处理器根据需要被无限次调用。     </p>    </div>       <div class="refsect1 parameters" id="refsect1-function.xml-parse-parameters">     <h3 class="title">参数</h3>     <p class="para">      <dl>                <dt> <code class="parameter">parser</code></dt>         <dd>          <p class="para">           一个指向将要使用的 XML 解析器的指针         </p>        </dd>                       <dt> <code class="parameter">data</code></dt>         <dd>          <p class="para">         需要解析的数据集。您可以多次对新的数据调用 <span class="function"><strong>xml_parse()</strong></span> 函数来分段解析一个文档；只要在解析最后一段数据时将 <code class="parameter">is_final</code> 参数设置为 <strong><code>TRUE</code></strong>。         </p>        </dd>                       <dt> <code class="parameter">is_final</code></dt>         <dd>          <p class="para">          如果被设置为 <strong><code>TRUE</code></strong>，则 <code class="parameter">data</code> 为当前解析中最后一段数据。         </p>        </dd>              </dl>      </p>    </div>     <div class="refsect1 returnvalues" id="refsect1-function.xml-parse-returnvalues">     <h3 class="title">返回值</h3>     <p class="para">      成功时返回1，失败时返回0     </p>     <p class="para">      若解析失败，可以使用如下函数获取错误信息：      <span class="function">{@link xml_get_error_code()}</span>,      <span class="function">{@link xml_error_string()}</span>,      <span class="function">{@link xml_get_current_line_number()}</span>,      <span class="function">{@link xml_get_current_column_number()}</span> 和      <span class="function">{@link xml_get_current_byte_index()}</span>。     </p>     <blockquote class="note"><p><strong class="note">Note</strong>:       <p class="para">       将 <code class="parameter">is_final</code> 参数设置为 <strong><code>TRUE</code></strong>，项目的错误将会报告在数据的末尾。      </p>     </p></blockquote>    </div>    <div class="up"><a href="http://php.net/manual/zh/ref.xml.php">XML 解析器函数</a></div></div>
 * @return int 1 on success or 0 on failure.*/
function xml_parse ($parser, $data, $is_final = false) {}

/**
*<div id="function.xml-parse-into-struct" class="refentry">    <div class="refnamediv">     <h1 class="refname">xml_parse_into_struct</h1>     <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">xml_parse_into_struct</span> &mdash; <span class="dc-title">将 XML 数据解析到数组中</span></p>     </div>    <div class="refsect1 unknown-seealsp" id="refsect1-function.xml-parse-into-struct-unknown-seealsp">     <h3 class="title">说明</h3>     <div class="methodsynopsis dc-description">      <span class="type">int</span> <span class="methodname"><strong>xml_parse_into_struct</strong></span>       ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$parser</code></span>      , <span class="methodparam"><span class="type">string</span> <code class="parameter">$data</code></span>      , <span class="methodparam"><span class="type">array</span> <code class="parameter reference">&$values</code></span>      [, <span class="methodparam"><span class="type">array</span> <code class="parameter reference">&$index</code></span>     ] )</div>      <p class="para rdfs-comment">      该函数将 XML 文件解析到两个对应的数组中，<code class="parameter">index</code>      参数含有指向 <code class="parameter">values</code>      数组中对应值的指针。最后两个数组参数可由指针传递给函数。     </p>     <blockquote class="note"><p><strong class="note">Note</strong>:       <p class="para">       <span class="function"><strong>xml_parse_into_struct()</strong></span> 失败返回 0，成功返回       1。这和 <strong><code>FALSE</code></strong> 与       <strong><code>TRUE</code></strong> 不同，使用例如 === 的运算符时要注意。      </p>     </p></blockquote>     <p class="para">      以下范例显示了由该函数生成的数组的内部结构。我们简单地将一个      <em>note</em> 嵌入到一个 <em>para</em>      标记中，解析后我们可以打印出生成的数组的结构：      <div class="example" id="example-6594">       <p><strong>Example #1 <span class="function"><strong>xml_parse_into_struct()</strong></span> 示例</strong></p>       <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$simple&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">"&lt;para&gt;&lt;note&gt;simple&nbsp;note&lt;/note&gt;&lt;/para&gt;"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$p&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">xml_parser_create</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">xml_parse_into_struct</span><span style="color: #007700">(</span><span style="color: #9876AA">$p</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$simple</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$vals</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$index</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">xml_parser_free</span><span style="color: #007700">(</span><span style="color: #9876AA">$p</span><span style="color: #007700">);<br />echo&nbsp;</span><span style="color: #DD0000">"Index&nbsp;array\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$index</span><span style="color: #007700">);<br />echo&nbsp;</span><span style="color: #DD0000">"\nVals&nbsp;array\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$vals</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>       </div>       <div class="example-contents"><p>      运行以上代码，我们得到的输出将是：      </p></div>       <div class="example-contents screen"> <div class="cdata"><pre> Index array Array (     [PARA] =&gt; Array         (             [0] =&gt; 0             [1] =&gt; 2         )      [NOTE] =&gt; Array         (             [0] =&gt; 1         )  )  Vals array Array (     [0] =&gt; Array         (             [tag] =&gt; PARA             [type] =&gt; open             [level] =&gt; 1         )      [1] =&gt; Array         (             [tag] =&gt; NOTE             [type] =&gt; complete             [level] =&gt; 2             [value] =&gt; simple note         )      [2] =&gt; Array         (             [tag] =&gt; PARA             [type] =&gt; close             [level] =&gt; 1         )  ) </pre></div>       </div>      </div>     </p>     <p class="para">      如果您的 XML 文档很复杂，基于该文档的事件处理（Event-driven）解析（基于 expat 扩展库）也会对应的变得复杂。该函数生成的并非 DOM 风格的对象，而是横向的树状结构。因此，我们能够方便的建立表达 XML 文件数据的对象。我们假设以下 XML 文件表示一个关于氨基酸信息的小型数据库：      <div class="example" id="example-6595">       <p><strong>Example #2 moldb.xml - 分子信息的小型数据库</strong></p>       <div class="example-contents"> <div class="xmlcode"><pre class="xmlcode">&lt;?xml version=&quot;1.0&quot;?&gt; &lt;moldb&gt;      &lt;molecule&gt;         &lt;name&gt;Alanine&lt;/name&gt;         &lt;symbol&gt;ala&lt;/symbol&gt;         &lt;code&gt;A&lt;/code&gt;         &lt;type&gt;hydrophobic&lt;/type&gt;     &lt;/molecule&gt;      &lt;molecule&gt;         &lt;name&gt;Lysine&lt;/name&gt;         &lt;symbol&gt;lys&lt;/symbol&gt;         &lt;code&gt;K&lt;/code&gt;         &lt;type&gt;charged&lt;/type&gt;     &lt;/molecule&gt;  &lt;/moldb&gt;</pre> </div>       </div>       </div>      以下是解析该文档并生成相应对象的代码：      <div class="example" id="example-6596">       <p><strong>Example #3         parsemoldb.php - 将 moldb.xml 解析到分子（molecular）对象的数组中       </strong></p>       <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /><br /></span><span style="color: #007700">class&nbsp;</span><span style="color: #9876AA">AminoAcid&nbsp;</span><span style="color: #007700">{<br />&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;</span><span style="color: #9876AA">$name</span><span style="color: #007700">;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;aa&nbsp;姓名<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #007700">var&nbsp;</span><span style="color: #9876AA">$symbol</span><span style="color: #007700">;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;三字母符号<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #007700">var&nbsp;</span><span style="color: #9876AA">$code</span><span style="color: #007700">;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;单字母代码<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #007700">var&nbsp;</span><span style="color: #9876AA">$type</span><span style="color: #007700">;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;hydrophobic,&nbsp;charged&nbsp;或&nbsp;neutral<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #007700">function&nbsp;</span><span style="color: #9876AA">AminoAcid&nbsp;</span><span style="color: #007700">(</span><span style="color: #9876AA">$aa</span><span style="color: #007700">)<br />&nbsp;&nbsp;&nbsp;&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;foreach&nbsp;(</span><span style="color: #9876AA">$aa&nbsp;</span><span style="color: #007700">as&nbsp;</span><span style="color: #9876AA">$k</span><span style="color: #007700">=&gt;</span><span style="color: #9876AA">$v</span><span style="color: #007700">)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">$k&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">$aa</span><span style="color: #007700">[</span><span style="color: #9876AA">$k</span><span style="color: #007700">];<br />&nbsp;&nbsp;&nbsp;&nbsp;}<br />}<br /><br />function&nbsp;</span><span style="color: #9876AA">readDatabase</span><span style="color: #007700">(</span><span style="color: #9876AA">$filename</span><span style="color: #007700">)<br />{<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;读取&nbsp;aminoacids&nbsp;的&nbsp;XML&nbsp;数据<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$data&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">implode</span><span style="color: #007700">(</span><span style="color: #DD0000">""</span><span style="color: #007700">,</span><span style="color: #9876AA">file</span><span style="color: #007700">(</span><span style="color: #9876AA">$filename</span><span style="color: #007700">));<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$parser&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">xml_parser_create</span><span style="color: #007700">();<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">xml_parser_set_option</span><span style="color: #007700">(</span><span style="color: #9876AA">$parser</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">XML_OPTION_CASE_FOLDING</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">0</span><span style="color: #007700">);<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">xml_parser_set_option</span><span style="color: #007700">(</span><span style="color: #9876AA">$parser</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">XML_OPTION_SKIP_WHITE</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">1</span><span style="color: #007700">);<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">xml_parse_into_struct</span><span style="color: #007700">(</span><span style="color: #9876AA">$parser</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$data</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$values</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$tags</span><span style="color: #007700">);<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">xml_parser_free</span><span style="color: #007700">(</span><span style="color: #9876AA">$parser</span><span style="color: #007700">);<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;遍历&nbsp;XML&nbsp;结构<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #007700">foreach&nbsp;(</span><span style="color: #9876AA">$tags&nbsp;</span><span style="color: #007700">as&nbsp;</span><span style="color: #9876AA">$key</span><span style="color: #007700">=&gt;</span><span style="color: #9876AA">$val</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(</span><span style="color: #9876AA">$key&nbsp;</span><span style="color: #007700">==&nbsp;</span><span style="color: #DD0000">"molecule"</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$molranges&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">$val</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;each&nbsp;contiguous&nbsp;pair&nbsp;of&nbsp;array&nbsp;entries&nbsp;are&nbsp;the<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;lower&nbsp;and&nbsp;upper&nbsp;range&nbsp;for&nbsp;each&nbsp;molecule&nbsp;definition<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #007700">for&nbsp;(</span><span style="color: #9876AA">$i</span><span style="color: #007700">=</span><span style="color: #9876AA">0</span><span style="color: #007700">;&nbsp;</span><span style="color: #9876AA">$i&nbsp;</span><span style="color: #007700">&lt;&nbsp;</span><span style="color: #9876AA">count</span><span style="color: #007700">(</span><span style="color: #9876AA">$molranges</span><span style="color: #007700">);&nbsp;</span><span style="color: #9876AA">$i</span><span style="color: #007700">+=</span><span style="color: #9876AA">2</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$offset&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">$molranges</span><span style="color: #007700">[</span><span style="color: #9876AA">$i</span><span style="color: #007700">]&nbsp;+&nbsp;</span><span style="color: #9876AA">1</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$len&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">$molranges</span><span style="color: #007700">[</span><span style="color: #9876AA">$i&nbsp;</span><span style="color: #007700">+&nbsp;</span><span style="color: #9876AA">1</span><span style="color: #007700">]&nbsp;-&nbsp;</span><span style="color: #9876AA">$offset</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$tdb</span><span style="color: #007700">[]&nbsp;=&nbsp;</span><span style="color: #9876AA">parseMol</span><span style="color: #007700">(</span><span style="color: #9876AA">array_slice</span><span style="color: #007700">(</span><span style="color: #9876AA">$values</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$offset</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$len</span><span style="color: #007700">));<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />&nbsp;&nbsp;&nbsp;&nbsp;}<br />&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;</span><span style="color: #9876AA">$tdb</span><span style="color: #007700">;<br />}<br /><br />function&nbsp;</span><span style="color: #9876AA">parseMol</span><span style="color: #007700">(</span><span style="color: #9876AA">$mvalues</span><span style="color: #007700">)<br />{<br />&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(</span><span style="color: #9876AA">$i</span><span style="color: #007700">=</span><span style="color: #9876AA">0</span><span style="color: #007700">;&nbsp;</span><span style="color: #9876AA">$i&nbsp;</span><span style="color: #007700">&lt;&nbsp;</span><span style="color: #9876AA">count</span><span style="color: #007700">(</span><span style="color: #9876AA">$mvalues</span><span style="color: #007700">);&nbsp;</span><span style="color: #9876AA">$i</span><span style="color: #007700">++)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$mol</span><span style="color: #007700">[</span><span style="color: #9876AA">$mvalues</span><span style="color: #007700">[</span><span style="color: #9876AA">$i</span><span style="color: #007700">][</span><span style="color: #DD0000">"tag"</span><span style="color: #007700">]]&nbsp;=&nbsp;</span><span style="color: #9876AA">$mvalues</span><span style="color: #007700">[</span><span style="color: #9876AA">$i</span><span style="color: #007700">][</span><span style="color: #DD0000">"value"</span><span style="color: #007700">];<br />&nbsp;&nbsp;&nbsp;&nbsp;}<br />&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;new&nbsp;</span><span style="color: #9876AA">AminoAcid</span><span style="color: #007700">(</span><span style="color: #9876AA">$mol</span><span style="color: #007700">);<br />}<br /><br /></span><span style="color: #9876AA">$db&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">readDatabase</span><span style="color: #007700">(</span><span style="color: #DD0000">"moldb.xml"</span><span style="color: #007700">);<br />echo&nbsp;</span><span style="color: #DD0000">"**&nbsp;Database&nbsp;of&nbsp;AminoAcid&nbsp;objects:\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$db</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>       </div>       </div>      在执行完 <var class="filename">parsemoldb.php</var> 后，变量 <var class="varname"><var class="varname">$db</var></var> 将包含有一个由 <strong class="classname">AminoAcid</strong> 对象组成的数组，该脚本的输出如下：      <div class="informalexample">       <div class="example-contents screen"> <div class="cdata"><pre> ** Database of AminoAcid objects: Array (     [0] =&gt; aminoacid Object         (             [name] =&gt; Alanine             [symbol] =&gt; ala             [code] =&gt; A             [type] =&gt; hydrophobic         )      [1] =&gt; aminoacid Object         (             [name] =&gt; Lysine             [symbol] =&gt; lys             [code] =&gt; K             [type] =&gt; charged         )  ) </pre></div>       </div>      </div>     </p>    </div>    <div class="up"><a href="http://php.net/manual/zh/ref.xml.php">XML 解析器函数</a></div></div>
 * @return int <b>xml_parse_into_struct</b> returns 0 for failure and 1 for*/
function xml_parse_into_struct ($parser, $data, array &$values, array &$index = null) {}

/**
*<div id="function.xml-get-error-code" class="refentry">    <div class="refnamediv">     <h1 class="refname">xml_get_error_code</h1>     <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">xml_get_error_code</span> &mdash; <span class="dc-title">获取 XML 解析器错误代码</span></p>     </div>    <div class="refsect1 description" id="refsect1-function.xml-get-error-code-description">     <h3 class="title">说明</h3>     <div class="methodsynopsis dc-description">      <span class="type">int</span> <span class="methodname"><strong>xml_get_error_code</strong></span>       ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$parser</code></span>      )</div>      <p class="para rdfs-comment">      获取 XML 解析器错误代码。     </p>    </div>     <div class="refsect1 parameters" id="refsect1-function.xml-get-error-code-parameters">     <h3 class="title">参数</h3>     <p class="para">      <dl>                <dt> <code class="parameter">parser</code></dt>         <dd>          <p class="para">          一个指向要返回错误代码的 XML 解析器的指针         </p>        </dd>              </dl>      </p>    </div>     <div class="refsect1 returnvalues" id="refsect1-function.xml-get-error-code-returnvalues">     <h3 class="title">返回值</h3>     <p class="para">      如果 <code class="parameter">parser</code> 参数没有指向一个合法的解析器，该函数将返回 <strong><code>FALSE</code></strong>，否则将返回<a href="http://php.net/manual/zh/xml.error-codes.php" class="link">错误代码</a>列表中的一个错误代码。     </p>    </div>     <div class="refsect1 seealso" id="refsect1-function.xml-get-error-code-seealso">     <h3 class="title">参见</h3>     <p class="para">      <ul class="simplelist">       <li class="member"><span class="function">{@link xml_error_string()} - 获取 XML 解析器的错误字符串</span></li>      </ul>     </p>    </div>    <div class="up"><a href="http://php.net/manual/zh/ref.xml.php">XML 解析器函数</a></div></div>
 * @return int This function returns <b>FALSE</b> if <i>parser</i> does*/
function xml_get_error_code ($parser) {}

/**
*<div id="function.xml-error-string" class="refentry">    <div class="refnamediv">     <h1 class="refname">xml_error_string</h1>     <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">xml_error_string</span> &mdash; <span class="dc-title">获取 XML 解析器的错误字符串</span></p>     </div>    <div class="refsect1 description" id="refsect1-function.xml-error-string-description">     <h3 class="title">说明</h3>     <div class="methodsynopsis dc-description">      <span class="type">string</span> <span class="methodname"><strong>xml_error_string</strong></span>       ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$code</code></span>      )</div>      <p class="para rdfs-comment">      根据给定的 <code class="parameter">code</code> 获得 XML 解析器错误字符串。     </p>    </div>     <div class="refsect1 parameters" id="refsect1-function.xml-error-string-parameters">     <h3 class="title">参数</h3>     <p class="para">      <dl>                <dt> <code class="parameter">code</code></dt>         <dd>          <p class="para">          由 <span class="function">{@link xml_get_error_code()}</span> 返回的错误代码。         </p>        </dd>              </dl>      </p>    </div>     <div class="refsect1 returnvalues" id="refsect1-function.xml-error-string-returnvalues">     <h3 class="title">返回值</h3>    <p class="para">      返回与 <code class="parameter">code</code> 描述的错误代码参数对应的文本描述字符串，若没有与之对应的描述，则返回 <strong><code>FALSE</code></strong>。     </p>    </div>     <div class="refsect1 seealso" id="refsect1-function.xml-error-string-seealso">     <h3 class="title">参见</h3>     <p class="para">      <ul class="simplelist">       <li class="member"><span class="function">{@link xml_get_error_code()} - 获取 XML 解析器错误代码</span></li>      </ul>     </p>    </div>    <div class="up"><a href="http://php.net/manual/zh/ref.xml.php">XML 解析器函数</a></div></div>
 * @return string a string with a textual description of the error*/
function xml_error_string ($code) {}

/**
*<div id="function.xml-get-current-line-number" class="refentry">    <div class="refnamediv">     <h1 class="refname">xml_get_current_line_number</h1>     <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">xml_get_current_line_number</span> &mdash; <span class="dc-title">获取 XML 解析器的当前行号</span></p>     </div>    <div class="refsect1 description" id="refsect1-function.xml-get-current-line-number-description">     <h3 class="title">说明</h3>     <div class="methodsynopsis dc-description">      <span class="type">int</span> <span class="methodname"><strong>xml_get_current_line_number</strong></span>       ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$parser</code></span>      )</div>      <p class="para rdfs-comment">      获取指定 XML 解析器当前的行号。     </p>    </div>     <div class="refsect1 parameters" id="refsect1-function.xml-get-current-line-number-parameters">     <h3 class="title">参数</h3>     <p class="para">      <dl>                <dt> <code class="parameter">parser</code></dt>         <dd>          <p class="para">          一个指向要获取当前行号的 XML 解析器的指针。         </p>        </dd>              </dl>      </p>    </div>     <div class="refsect1 returnvalues" id="refsect1-function.xml-get-current-line-number-returnvalues">     <h3 class="title">返回值</h3>     <p class="para">      如果 <code class="parameter">parser</code> 参数没有指向一个合法的解析器，该函数将返回 <strong><code>FALSE</code></strong>，否则将返回指定解析器在其缓存中的当前行号。     </p>    </div>     <div class="refsect1 seealso" id="refsect1-function.xml-get-current-line-number-seealso">     <h3 class="title">参见</h3>     <p class="para">      <ul class="simplelist">       <li class="member"><span class="function"><strong>xml_get_current_column_index()</strong></span></li>       <li class="member"><span class="function">{@link xml_get_current_byte_index()} - 获取 XML 解析器的当前字节索引</span></li>      </ul>     </p>    </div>    <div class="up"><a href="http://php.net/manual/zh/ref.xml.php">XML 解析器函数</a></div></div>
 * @return int This function returns <b>FALSE</b> if <i>parser</i> does*/
function xml_get_current_line_number ($parser) {}

/**
*<div id="function.xml-get-current-column-number" class="refentry">    <div class="refnamediv">     <h1 class="refname">xml_get_current_column_number</h1>      <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">xml_get_current_column_number</span> &mdash; <span class="dc-title">      获取 XML 解析器的当前列号     </span></p>     </div>    <div class="refsect1 description" id="refsect1-function.xml-get-current-column-number-description">     <h3 class="title">说明</h3>     <div class="methodsynopsis dc-description">      <span class="type">int</span> <span class="methodname"><strong>xml_get_current_column_number</strong></span>       ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$parser</code></span>      )</div>      <p class="para rdfs-comment">      获得指定 XML 解析器当前的列号。     </p>    </div>     <div class="refsect1 parameters" id="refsect1-function.xml-get-current-column-number-parameters">     <h3 class="title">参数</h3>     <p class="para">      <dl>                <dt> <code class="parameter">parser</code></dt>         <dd>          <p class="para">          一个指向要获取列号的 XML 解析器的指针。         </p>        </dd>              </dl>      </p>    </div>     <div class="refsect1 returnvalues" id="refsect1-function.xml-get-current-column-number-returnvalues">     <h3 class="title">返回值</h3>     <p class="para">      如果 <code class="parameter">parser</code> 参数没有指向一个合法的解析器，该函数将返回 <strong><code>FALSE</code></strong>，否则将返回指定解析器所在行（由函数 <span class="function">{@link xml_get_current_line_number()}</span> 给定）的当前列号。     </p>    </div>     <div class="refsect1 seealso" id="refsect1-function.xml-get-current-column-number-seealso">     <h3 class="title">参见</h3>     <p class="para">      <ul class="simplelist">       <li class="member"><span class="function">{@link xml_get_current_byte_index()} - 获取 XML 解析器的当前字节索引</span></li>       <li class="member"><span class="function"><strong>xml_get_current_line_index()</strong></span></li>      </ul>     </p>    </div>    <div class="up"><a href="http://php.net/manual/zh/ref.xml.php">XML 解析器函数</a></div></div>
 * @return int This function returns <b>FALSE</b> if <i>parser</i> does*/
function xml_get_current_column_number ($parser) {}

/**
*<div id="function.xml-get-current-byte-index" class="refentry">    <div class="refnamediv">     <h1 class="refname">xml_get_current_byte_index</h1>     <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">xml_get_current_byte_index</span> &mdash; <span class="dc-title">获取 XML 解析器的当前字节索引</span></p>     </div>    <div class="refsect1 description" id="refsect1-function.xml-get-current-byte-index-description">     <h3 class="title">说明</h3>     <div class="methodsynopsis dc-description">      <span class="type">int</span> <span class="methodname"><strong>xml_get_current_byte_index</strong></span>       ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$parser</code></span>      )</div>      <p class="para rdfs-comment">      获取指定的 XML 解析器的当前字节索引（current byte index）。     </p>    </div>     <div class="refsect1 parameters" id="refsect1-function.xml-get-current-byte-index-parameters">     <h3 class="title">参数</h3>     <p class="para">      <dl>                <dt> <code class="parameter">parser</code></dt>         <dd>          <p class="para">    指向要取得字节索引的 XML 解析器的引用。         </p>        </dd>              </dl>      </p>    </div>     <div class="refsect1 returnvalues" id="refsect1-function.xml-get-current-byte-index-returnvalues">     <h3 class="title">返回值</h3>     <p class="para">   如果 <code class="parameter">parser</code> 没有指向一个合法的解析器，该函数将返回   <strong><code>FALSE</code></strong>，否则将返回解析器当前在其数据缓冲区中的字节索引（起始值为 0）。     </p>    </div>      <div class="refsect1 notes" id="refsect1-function.xml-get-current-byte-index-notes">   <h3 class="title">注释</h3>   <div class="warning"><strong class="warning">Warning</strong>    <p class="para">     该函数将返回根据UTF-8编码的文本的字节索引，而不论输入是否是其他的编码。    </p>   </div>  </div>       <div class="refsect1 seealso" id="refsect1-function.xml-get-current-byte-index-seealso">     <h3 class="title">参见</h3>     <p class="para">      <ul class="simplelist">       <li class="member"><span class="function"><strong>xml_get_current_column_index()</strong></span></li>       <li class="member"><span class="function"><strong>xml_get_current_line_index()</strong></span></li>      </ul>     </p>    </div>    <div class="up"><a href="http://php.net/manual/zh/ref.xml.php">XML 解析器函数</a></div></div>
 * @return int This function returns <b>FALSE</b> if <i>parser</i> does*/
function xml_get_current_byte_index ($parser) {}

/**
*<div id="function.xml-parser-free" class="refentry">    <div class="refnamediv">     <h1 class="refname">xml_parser_free</h1>     <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">xml_parser_free</span> &mdash; <span class="dc-title">释放指定的 XML 解析器</span></p>     </div>    <div class="refsect1 unknown-unknown-unknown-returnvaluev" id="refsect1-function.xml-parser-free-unknown-unknown-unknown-returnvaluev">     <h3 class="title">描述</h3>     <div class="methodsynopsis dc-description">      <span class="type">bool</span> <span class="methodname"><strong>xml_parser_free</strong></span>       ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$parser</code></span>      )</div>      <p class="para rdfs-comment">      <dl>                <dt> <code class="parameter">parser</code></dt>         <dd>          <span class="simpara">          指向要释放的 XML 解析器的指针。         </span>        </dd>              </dl> </p>     <p class="para">      如果 <code class="parameter">parser</code> 参数没有指向一个合法的解析器，该函数将返回 <strong><code>FALSE</code></strong>，否则将释放指定的解析器并返回 <strong><code>TRUE</code></strong>。     </p>    </div>    <div class="up"><a href="http://php.net/manual/zh/ref.xml.php">XML 解析器函数</a></div></div>
 * @return bool This function returns <b>FALSE</b> if <i>parser</i> does not*/
function xml_parser_free ($parser) {}

/**
*<div id="function.xml-parser-set-option" class="refentry">    <div class="refnamediv">     <h1 class="refname">xml_parser_set_option</h1>     <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">xml_parser_set_option</span> &mdash; <span class="dc-title">为指定 XML 解析进行选项设置</span></p>     </div>    <div class="refsect1 unknown-unknown-unknown-unknown-unknown-returnvaluex" id="refsect1-function.xml-parser-set-option-unknown-unknown-unknown-unknown-unknown-returnvaluex">     <h3 class="title">说明</h3>     <div class="methodsynopsis dc-description">      <span class="type">bool</span> <span class="methodname"><strong>xml_parser_set_option</strong></span>       ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$parser</code></span>      , <span class="methodparam"><span class="type">int</span> <code class="parameter">$option</code></span>      , <span class="methodparam"><span class="type"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$value</code></span>      )</div>      <p class="para rdfs-comment">      <dl>                <dt> <code class="parameter">parser</code></dt>         <dd>          <span class="simpara">          指向要设置选项信息的 XML 解析器的指针。         </span>        </dd>                       <dt> <code class="parameter">option</code></dt>         <dd>          <span class="simpara">          要设置的选项名称。请参考下文。         </span>        </dd>                       <dt> <code class="parameter">value</code></dt>         <dd>          <span class="simpara">          要给选项设置的新值。         </span>        </dd>              </dl>      </p>     <p class="para">      如果 <code class="parameter">parser</code> 参数没有指向一个合法的解析器或者指定的选项无法设置，该函数将返回 <strong><code>FALSE</code></strong>，否则将会把选项设置为指定的值并返回 <strong><code>TRUE</code></strong>。     </p>     <p class="para">      可被设置的选项如下：      <table class="doctable table">       <caption><strong>XML 解析器选项</strong></caption>               <thead>         <tr>          <th>选项常量</th>          <th>数据类型</th>          <th>描述</th>         </tr>         </thead>         <tbody class="tbody">         <tr>          <td>XML_OPTION_CASE_FOLDING</td>          <td>integer</td>          <td>           控制在该 XML 解析器中 <a href="http://php.net/manual/zh/xml.case-folding.php" class="link">大小写折叠（case-folding）</a> 是否有效。其默认值为有效。          </td>         </tr>          <tr>          <td>XML_OPTION_SKIP_TAGSTART</td>          <td>integer</td>          <td>           指明在一个标记名前应略过几个字符。          </td>         </tr>          <tr>          <td>XML_OPTION_SKIP_WHITE</td>          <td>integer</td>          <td>           是否略过由白空字符组成的值。          </td>         </tr>          <tr>          <td>XML_OPTION_TARGET_ENCODING</td>          <td>string</td>          <td>           设置该 XML 解析器所使用的<a href="http://php.net/manual/zh/xml.encoding.php" class="link">目标编码（target encoding）</a>方式。其默认值和由  <span class="function">{@link xml_parser_create()}</span> 函数设置的源编码（source encoding）方式相同。支持的目标编码方式有  <em>ISO-8859-1</em>、<em>US-ASCII</em> 和 <em>UTF-8</em>。          </td>         </tr>         </tbody>             </table>      </p>    </div>    <div class="up"><a href="http://php.net/manual/zh/ref.xml.php">XML 解析器函数</a></div></div>
 * @return bool This function returns <b>FALSE</b> if <i>parser</i> does not*/
function xml_parser_set_option ($parser, $option, $value) {}

/**
*<div id="function.xml-parser-get-option" class="refentry">    <div class="refnamediv">     <h1 class="refname">xml_parser_get_option</h1>     <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">xml_parser_get_option</span> &mdash; <span class="dc-title">从 XML 解析器获取选项设置信息</span></p>     </div>    <div class="refsect1 unknown-unknown-unknown-unknown-returnvaluew" id="refsect1-function.xml-parser-get-option-unknown-unknown-unknown-unknown-returnvaluew">     <h3 class="title">描述</h3>     <div class="methodsynopsis dc-description">      <span class="type"><a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>xml_parser_get_option</strong></span>       ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$parser</code></span>      , <span class="methodparam"><span class="type">int</span> <code class="parameter">$option</code></span>      )</div>      <p class="para rdfs-comment">      <dl>                <dt> <code class="parameter">parser</code></dt>         <dd>          <span class="simpara">          指向要获取设置信息的 XML 解析器的指针。         </span>        </dd>                       <dt> <code class="parameter">option</code></dt>         <dd>          <span class="simpara">          要获取的设置选项名称。可以使用          <strong><code>XML_OPTION_CASE_FOLDING</code></strong> 和          <strong><code>XML_OPTION_TARGET_ENCODING</code></strong>          常量。其说明见 <span class="function">{@link xml_parser_set_option()}</span>。         </span>        </dd>              </dl>      </p>     <p class="para">      如果 <code class="parameter">parser</code> 参数没有指向一个合法的解析器或者      <code class="parameter">option</code> 参数无效，该函数将返回 <strong><code>FALSE</code></strong>（同时产生      <strong><code>E_WARNING</code></strong> 警告）。否则将返回指定设置选项的值。     </p>    </div>    <div class="up"><a href="http://php.net/manual/zh/ref.xml.php">XML 解析器函数</a></div></div>
 * @return mixed This function returns <b>FALSE</b> if <i>parser</i> does*/
function xml_parser_get_option ($parser, $option) {}

define ('XML_ERROR_NONE', 0);
define ('XML_ERROR_NO_MEMORY', 1);
define ('XML_ERROR_SYNTAX', 2);
define ('XML_ERROR_NO_ELEMENTS', 3);
define ('XML_ERROR_INVALID_TOKEN', 4);
define ('XML_ERROR_UNCLOSED_TOKEN', 5);
define ('XML_ERROR_PARTIAL_CHAR', 6);
define ('XML_ERROR_TAG_MISMATCH', 7);
define ('XML_ERROR_DUPLICATE_ATTRIBUTE', 8);
define ('XML_ERROR_JUNK_AFTER_DOC_ELEMENT', 9);
define ('XML_ERROR_PARAM_ENTITY_REF', 10);
define ('XML_ERROR_UNDEFINED_ENTITY', 11);
define ('XML_ERROR_RECURSIVE_ENTITY_REF', 12);
define ('XML_ERROR_ASYNC_ENTITY', 13);
define ('XML_ERROR_BAD_CHAR_REF', 14);
define ('XML_ERROR_BINARY_ENTITY_REF', 15);
define ('XML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_REF', 16);
define ('XML_ERROR_MISPLACED_XML_PI', 17);
define ('XML_ERROR_UNKNOWN_ENCODING', 18);
define ('XML_ERROR_INCORRECT_ENCODING', 19);
define ('XML_ERROR_UNCLOSED_CDATA_SECTION', 20);
define ('XML_ERROR_EXTERNAL_ENTITY_HANDLING', 21);
define ('XML_OPTION_CASE_FOLDING', 1);
define ('XML_OPTION_TARGET_ENCODING', 2);
define ('XML_OPTION_SKIP_TAGSTART', 3);
define ('XML_OPTION_SKIP_WHITE', 4);

/**
*      指定 SAX 实现方法。可为 <em>libxml</em> 或 <em>expat</em>.     
*/
define ('XML_SAX_IMPL', "libxml");

// End of xml v.
?>
