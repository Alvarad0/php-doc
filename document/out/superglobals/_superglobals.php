<?php
/**
 * <div id="reserved.variables.globals" class="refentry">  <div class="refnamediv">   <h1 class="refname">$GLOBALS</h1>   <p class="refpurpose"><span class="refname">$GLOBALS</span> &mdash; <span class="dc-title">引用全局作用域中可用的全部变量</span></p>   </div>    <div class="refsect1 description" id="refsect1-reserved.variables.globals-description">   <h3 class="title">说明</h3>   <p class="para">    一个包含了全部变量的全局组合<span class="type"><span class="type 数组">数组</span></span>。变量的名字就是数组的键。   </p>  </div>     <div class="refsect1 examples" id="refsect1-reserved.variables.globals-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-294">     <p><strong>Example #1 <var class="varname"><var class="varname">$GLOBALS</var></var> 范例</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function&nbsp;</span><span style="color: #9876AA">test</span><span style="color: #007700">()&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">$foo&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">"local&nbsp;variable"</span><span style="color: #007700">;<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">'$foo&nbsp;in&nbsp;global&nbsp;scope:&nbsp;'&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #9876AA">$GLOBALS</span><span style="color: #007700">[</span><span style="color: #DD0000">"foo"</span><span style="color: #007700">]&nbsp;.&nbsp;</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">'$foo&nbsp;in&nbsp;current&nbsp;scope:&nbsp;'&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #9876AA">$foo&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">$foo&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">"Example&nbsp;content"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">test</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>      <div class="example-contents"><p>以上例程的输出类似于：</p></div>     <div class="example-contents screen"> <div class="cdata"><pre> $foo in global scope: Example content $foo in current scope: local variable </pre></div>     </div>    </div>   </p>  </div>     <div class="refsect1 notes" id="refsect1-reserved.variables.globals-notes">   <h3 class="title">注释</h3>   <blockquote class="note"><p><strong class="note">Note</strong>: <p class="para">“Superglobal”也称为自动化的全局变量。这就表示其在脚本的所有作用域中都是可用的。不需要在函数或方法中用 <strong class="command">global $variable;</strong> 来访问它。</p></p></blockquote>   <blockquote class="note"><p><strong class="note">Note</strong>:     <strong>变量可用性</strong><br />    <p class="para">     与所有其他<a href="http://php.net/manual/zh/language.variables.superglobals.php" class="link">超全局变量</a>不同，<var class="varname"><var class="varname">$GLOBALS</var></var>在PHP中总是可用的。    </p>   </p></blockquote>  </div>    <div class="up"><a href="http://php.net/manual/zh/reserved.variables.php">预定义变量</a></div></div>
 */
$GLOBALS = array();

/**
 * <div id="reserved.variables.cookies" class="refentry">  <div class="refnamediv">   <h1 class="refname">$_COOKIE</h1>   <h1 class="refname">$HTTP_COOKIE_VARS [已弃用]</h1>   <p class="refpurpose"><span class="refname">$_COOKIE</span> -- <span class="refname">$HTTP_COOKIE_VARS [已弃用]</span> &mdash; <span class="dc-title">HTTP Cookies</span></p>   </div>    <div class="refsect1 description" id="refsect1-reserved.variables.cookies-description">   <h3 class="title">说明</h3>   <p class="para">    通过 HTTP Cookies 方式传递给当前脚本的变量的<span class="type"><span class="type 数组">数组</span></span>。   </p>    <p class="simpara">    <var class="varname"><var class="varname">$HTTP_COOKIE_VARS</var></var> 包含相同的信息，但它不是一个<a href="http://php.net/manual/zh/language.variables.superglobals.php" class="link">超全局变量</a>。    (注意 <var class="varname"><var class="varname">$HTTP_COOKIE_VARS</var></var> 和 <var class="varname"><var class="varname">$_COOKIE</var></var> 是不同的变量，PHP 处理它们的方式不同)   </p>   </div>      <div class="refsect1 changelog" id="refsect1-reserved.variables.cookies-changelog">   <h3 class="title">更新日志</h3>   <p class="para">    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>4.1.0</td>        <td>         引入 <var class="varname"><var class="varname">$_COOKIE</var></var>，弃用 <var class="varname"><var class="varname">$HTTP_COOKIE_VARS</var></var>。        </td>       </tr>       </tbody>         </table>    </p>  </div>     <div class="refsect1 examples" id="refsect1-reserved.variables.cookies-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-299">     <p><strong>Example #1 <var class="varname"><var class="varname">$_COOKIE</var></var> 范例</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #DD0000">'Hello&nbsp;'&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #9876AA">htmlspecialchars</span><span style="color: #007700">(</span><span style="color: #9876AA">$_COOKIE</span><span style="color: #007700">[</span><span style="color: #DD0000">"name"</span><span style="color: #007700">])&nbsp;.&nbsp;</span><span style="color: #DD0000">'!'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>      <div class="example-contents"><p>      假设之前发送了 &quot;name&quot; Cookie     </p></div>     <div class="example-contents"><p>以上例程的输出类似于：</p></div>     <div class="example-contents screen"> <div class="cdata"><pre> Hello Hannes! </pre></div>     </div>    </div>   </p>  </div>     <div class="refsect1 notes" id="refsect1-reserved.variables.cookies-notes">   <h3 class="title">注释</h3>   <blockquote class="note"><p><strong class="note">Note</strong>: <p class="para">“Superglobal”也称为自动化的全局变量。这就表示其在脚本的所有作用域中都是可用的。不需要在函数或方法中用 <strong class="command">global $variable;</strong> 来访问它。</p></p></blockquote>  </div>    <div class="refsect1 seealso" id="refsect1-reserved.variables.cookies-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link setcookie()} - 发送 Cookie</span></li>     <li class="member"><a href="http://php.net/manual/zh/language.variables.external.php" class="link">处理外部变量</a></li>     <li class="member"><a href="http://php.net/manual/zh/book.filter.php" class="link">过滤器扩展</a></li>    </ul>   </p>  </div>   <div class="up"><a href="http://php.net/manual/zh/reserved.variables.php">预定义变量</a></div></div>
 */
$_COOKIE = array();

/**
 * <div id="reserved.variables.environment" class="refentry">  <div class="refnamediv">   <h1 class="refname">$_ENV</h1>   <h1 class="refname">$HTTP_ENV_VARS [已弃用]</h1>   <p class="refpurpose"><span class="refname">$_ENV</span> -- <span class="refname">$HTTP_ENV_VARS [已弃用]</span> &mdash; <span class="dc-title">环境变量</span></p>   </div>    <div class="refsect1 description" id="refsect1-reserved.variables.environment-description">   <h3 class="title">说明</h3>   <p class="para">    通过环境方式传递给当前脚本的变量的<span class="type"><span class="type 数组">数组</span></span>。   </p>    <p class="simpara">    这些变量被从 PHP 解析器的运行环境导入到 PHP 的全局命名空间。很多是由支持 PHP 运行的 Shell 提供的，并且不同的系统很可能运行着不同种类的 Shell，所以不可能有一份确定的列表。请查看你的 Shell 文档来获取定义的环境变量列表。   </p>    <p class="simpara">    其他环境变量包含了 CGI 变量，而不管 PHP 是以服务器模块还是 CGI 处理器的方式运行。   </p>    <p class="simpara">    <var class="varname"><var class="varname">$HTTP_ENV_VARS</var></var> 包含相同的信息，但它不是一个<a href="http://php.net/manual/zh/language.variables.superglobals.php" class="link">超全局变量</a>。    (注意 <var class="varname"><var class="varname">$HTTP_ENV_VARS</var></var> 和 <var class="varname"><var class="varname">$_ENV</var></var> 是不同的变量，PHP 处理它们的方式不同)   </p>   </div>      <div class="refsect1 changelog" id="refsect1-reserved.variables.environment-changelog">   <h3 class="title">更新日志</h3>   <p class="para">    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>4.1.0</td>        <td>         引入 <var class="varname"><var class="varname">$_ENV</var></var>，弃用 <var class="varname"><var class="varname">$HTTP_ENV_VARS</var></var>。        </td>       </tr>       </tbody>         </table>    </p>  </div>     <div class="refsect1 examples" id="refsect1-reserved.variables.environment-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-298">     <p><strong>Example #1 <var class="varname"><var class="varname">$_ENV</var></var> 范例</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #DD0000">'My&nbsp;username&nbsp;is&nbsp;'&nbsp;</span><span style="color: #007700">.</span><span style="color: #9876AA">$_ENV</span><span style="color: #007700">[</span><span style="color: #DD0000">"USER"</span><span style="color: #007700">]&nbsp;.&nbsp;</span><span style="color: #DD0000">'!'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>      <div class="example-contents"><p>      假设 &quot;bjori&quot; 运行此段脚本     </p></div>     <div class="example-contents"><p>以上例程的输出类似于：</p></div>     <div class="example-contents screen"> <div class="cdata"><pre> My username is bjori! </pre></div>     </div>    </div>   </p>  </div>     <div class="refsect1 notes" id="refsect1-reserved.variables.environment-notes">   <h3 class="title">注释</h3>   <blockquote class="note"><p><strong class="note">Note</strong>: <p class="para">“Superglobal”也称为自动化的全局变量。这就表示其在脚本的所有作用域中都是可用的。不需要在函数或方法中用 <strong class="command">global $variable;</strong> 来访问它。</p></p></blockquote>  </div>    <div class="refsect1 seealso" id="refsect1-reserved.variables.environment-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link getenv()} - 获取一个环境变量的值</span></li>     <li class="member"><a href="http://php.net/manual/zh/book.filter.php" class="link">过滤器扩展</a></li>    </ul>   </p>  </div>   <div class="up"><a href="http://php.net/manual/zh/reserved.variables.php">预定义变量</a></div></div>
 */
$_ENV = array();
/**
 * @deprecated 4.1.0
 */
$HTTP_ENV_VARS = array();

/**
 * <div id="reserved.variables.files" class="refentry">  <div class="refnamediv">   <h1 class="refname">$_FILES</h1>   <h1 class="refname">$HTTP_POST_FILES [已弃用]</h1>   <p class="refpurpose"><span class="refname">$_FILES</span> -- <span class="refname">$HTTP_POST_FILES [已弃用]</span> &mdash; <span class="dc-title">HTTP 文件上传变量</span></p>   </div>    <div class="refsect1 description" id="refsect1-reserved.variables.files-description">   <h3 class="title">说明</h3>   <p class="para">    通过 HTTP POST 方式上传到当前脚本的项目的<span class="type"><span class="type 数组">数组</span></span>。    此数组的概况在     <a href="http://php.net/manual/zh/features.file-upload.post-method.php" class="link">POST 方法上传</a> 章节中有描述。   </p>    <p class="simpara">    <var class="varname"><var class="varname">$HTTP_POST_FILES</var></var> 包含相同的信息，但它不是一个<a href="http://php.net/manual/zh/language.variables.superglobals.php" class="link">超全局变量</a>。    (注意 <var class="varname"><var class="varname">$HTTP_POST_FILES</var></var> 和 <var class="varname"><var class="varname">$_FILES</var></var> 是不同的变量，PHP 处理它们的方式不同)   </p>   </div>      <div class="refsect1 changelog" id="refsect1-reserved.variables.files-changelog">   <h3 class="title">更新日志</h3>   <p class="para">    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>4.1.0</td>        <td>         引入 <var class="varname"><var class="varname">$_FILES</var></var>，弃用 <var class="varname"><var class="varname">$HTTP_POST_FILES</var></var>。        </td>       </tr>       </tbody>         </table>    </p>  </div>     <div class="refsect1 notes" id="refsect1-reserved.variables.files-notes">   <h3 class="title">注释</h3>   <blockquote class="note"><p><strong class="note">Note</strong>: <p class="para">“Superglobal”也称为自动化的全局变量。这就表示其在脚本的所有作用域中都是可用的。不需要在函数或方法中用 <strong class="command">global $variable;</strong> 来访问它。</p></p></blockquote>  </div>    <div class="refsect1 seealso" id="refsect1-reserved.variables.files-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link move_uploaded_file()} - 将上传的文件移动到新位置</span></li>     <li class="member"><a href="http://php.net/manual/zh/features.file-upload.php" class="link">处理文件上传</a></li>    </ul>   </p>  </div>   <div class="up"><a href="http://php.net/manual/zh/reserved.variables.php">预定义变量</a></div></div>
 */
$_FILES = array();
/**
 * @deprecated 4.1.0
 */
$HTTP_POST_FILES = array();


/**
 * <div id="reserved.variables.get" class="refentry">  <div class="refnamediv">   <h1 class="refname">$_GET</h1>   <h1 class="refname">$HTTP_GET_VARS [已弃用]</h1>   <p class="refpurpose"><span class="refname">$_GET</span> -- <span class="refname">$HTTP_GET_VARS [已弃用]</span> &mdash; <span class="dc-title">HTTP GET 变量</span></p>   </div>    <div class="refsect1 description" id="refsect1-reserved.variables.get-description">   <h3 class="title">说明</h3>   <p class="para">   通过 URL 参数传递给当前脚本的变量的数组。   </p>    <p class="simpara">    <var class="varname"><var class="varname">$HTTP_GET_VARS</var></var> 包含相同的信息， 但它不是一个<a href="http://php.net/manual/zh/language.variables.superglobals.php" class="link">超全局变量</a>。    (注意 <var class="varname"><var class="varname">$HTTP_GET_VARS</var></var> 和 <var class="varname"><var class="varname">$_GET</var></var> 是不同的变量，PHP 处理它们的方式不同)   </p>   </div>      <div class="refsect1 changelog" id="refsect1-reserved.variables.get-changelog">   <h3 class="title">更新日志</h3>   <p class="para">    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>4.1.0</td>        <td>         引入 <var class="varname"><var class="varname">$_GET</var></var>，弃用 <var class="varname"><var class="varname">$HTTP_GET_VARS</var></var>。        </td>       </tr>       </tbody>         </table>    </p>  </div>     <div class="refsect1 examples" id="refsect1-reserved.variables.get-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-296">     <p><strong>Example #1 <var class="varname"><var class="varname">$_GET</var></var> 范例</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #DD0000">'Hello&nbsp;'&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #9876AA">htmlspecialchars</span><span style="color: #007700">(</span><span style="color: #9876AA">$_GET</span><span style="color: #007700">[</span><span style="color: #DD0000">"name"</span><span style="color: #007700">])&nbsp;.&nbsp;</span><span style="color: #DD0000">'!'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>      <div class="example-contents"><p>      假设用户访问的是 http://example.com/?name=Hannes     </p></div>     <div class="example-contents"><p>以上例程的输出类似于：</p></div>     <div class="example-contents screen"> <div class="cdata"><pre> Hello Hannes! </pre></div>     </div>    </div>   </p>  </div>     <div class="refsect1 notes" id="refsect1-reserved.variables.get-notes">   <h3 class="title">注释</h3>   <blockquote class="note"><p><strong class="note">Note</strong>: <p class="para">“Superglobal”也称为自动化的全局变量。这就表示其在脚本的所有作用域中都是可用的。不需要在函数或方法中用 <strong class="command">global $variable;</strong> 来访问它。</p></p></blockquote>   <blockquote class="note"><p><strong class="note">Note</strong>:     <p class="para">     GET 是通过 <span class="function">{@link urldecode()}</span> 传递的。    </p>   </p></blockquote>  </div>    <div class="refsect1 seealso" id="refsect1-reserved.variables.get-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><a href="http://php.net/manual/zh/language.variables.external.php" class="link">处理外部变量</a></li>     <li class="member"><a href="http://php.net/manual/zh/book.filter.php" class="link">过滤器扩展</a></li>    </ul>   </p>  </div>   <div class="up"><a href="http://php.net/manual/zh/reserved.variables.php">预定义变量</a></div></div>
 */
$_GET = array();
/**
 * @deprecated 4.1.0
 */
$HTTP_GET_VARS = array();

/**
 * <div id="reserved.variables.post" class="refentry">  <div class="refnamediv">   <h1 class="refname">$_POST</h1>   <h1 class="refname">$HTTP_POST_VARS [已弃用]</h1>   <p class="refpurpose"><span class="refname">$_POST</span> -- <span class="refname">$HTTP_POST_VARS [已弃用]</span> &mdash; <span class="dc-title">HTTP POST 变量</span></p>   </div>    <div class="refsect1 description" id="refsect1-reserved.variables.post-description">   <h3 class="title">说明</h3>   <p class="para">    当  HTTP POST 请求的 Content-Type 是 <em>application/x-www-form-urlencoded</em> 或 <em>multipart/form-data</em> 时，会将变量以关联数组形式传入当前脚本。   </p>    <p class="simpara">    <var class="varname"><var class="varname">$HTTP_POST_VARS</var></var> 包含相同的信息，但它不是一个<a href="http://php.net/manual/zh/language.variables.superglobals.php" class="link">超全局变量</a>。    (注意 <var class="varname"><var class="varname">$HTTP_POST_VARS</var></var> 和 <var class="varname"><var class="varname">$_POST</var></var> 是不同的变量，PHP 处理它们的方式不同)   </p>   </div>      <div class="refsect1 changelog" id="refsect1-reserved.variables.post-changelog">   <h3 class="title">更新日志</h3>   <p class="para">    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>4.1.0</td>        <td>         引入 <var class="varname"><var class="varname">$_POST</var></var>，弃用 <var class="varname"><var class="varname">$HTTP_POST_VARS</var></var>。        </td>       </tr>       </tbody>         </table>    </p>  </div>     <div class="refsect1 examples" id="refsect1-reserved.variables.post-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-297">     <p><strong>Example #1 <var class="varname"><var class="varname">$_POST</var></var> 范例</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #DD0000">'Hello&nbsp;'&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #9876AA">htmlspecialchars</span><span style="color: #007700">(</span><span style="color: #9876AA">$_POST</span><span style="color: #007700">[</span><span style="color: #DD0000">"name"</span><span style="color: #007700">])&nbsp;.&nbsp;</span><span style="color: #DD0000">'!'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>      <div class="example-contents"><p>      假设用户通过 HTTP POST 方式传递了参数 name=Hannes     </p></div>     <div class="example-contents"><p>以上例程的输出类似于：</p></div>     <div class="example-contents screen"> <div class="cdata"><pre> Hello Hannes! </pre></div>     </div>    </div>   </p>  </div>     <div class="refsect1 notes" id="refsect1-reserved.variables.post-notes">   <h3 class="title">注释</h3>   <blockquote class="note"><p><strong class="note">Note</strong>: <p class="para">“Superglobal”也称为自动化的全局变量。这就表示其在脚本的所有作用域中都是可用的。不需要在函数或方法中用 <strong class="command">global $variable;</strong> 来访问它。</p></p></blockquote>  </div>    <div class="refsect1 seealso" id="refsect1-reserved.variables.post-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><a href="http://php.net/manual/zh/language.variables.external.php" class="link">处理外部变量</a></li>     <li class="member"><a href="http://php.net/manual/zh/book.filter.php" class="link">过滤器扩展</a></li>    </ul>   </p>  </div>   <div class="up"><a href="http://php.net/manual/zh/reserved.variables.php">预定义变量</a></div></div>
 */
$_POST = array();
/**
 * @deprecated 4.1.0
 */
$HTTP_POST_VARS = array();

/**
 * <div id="reserved.variables.request" class="refentry">  <div class="refnamediv">   <h1 class="refname">$_REQUEST</h1>   <p class="refpurpose"><span class="refname">$_REQUEST</span> &mdash; <span class="dc-title">HTTP Request 变量</span></p>   </div>    <div class="refsect1 description" id="refsect1-reserved.variables.request-description">   <h3 class="title">说明</h3>   <p class="para">    默认情况下包含了 <var class="varname"><var class="varname"><a href="http://php.net/manual/zh/reserved.variables.get.php" class="classname">$_GET</a></var></var>，<var class="varname"><var class="varname"><a href="http://php.net/manual/zh/reserved.variables.post.php" class="classname">$_POST</a></var></var>  和  <var class="varname"><var class="varname"><a href="http://php.net/manual/zh/reserved.variables.cookies.php" class="classname">$_COOKIE</a></var></var> 的<span class="type"><span class="type 数组">数组</span></span>。   </p>  </div>      <div class="refsect1 changelog" id="refsect1-reserved.variables.request-changelog">   <h3 class="title">更新日志</h3>   <p class="para">    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>5.3.0</td>        <td>         引入 <a href="http://php.net/manual/zh/ini.core.php#ini.request-order" class="link">request_order</a>。该指令会影响 <var class="varname"><var class="varname">$_REQUEST</var></var> 的内容。        </td>       </tr>        <tr>        <td>4.3.0</td>        <td>         <var class="varname"><var class="varname"><a href="http://php.net/manual/zh/reserved.variables.files.php" class="classname">$_FILES</a></var></var> 信息被从 <var class="varname"><var class="varname">$_REQUEST</var></var> 中移除。        </td>       </tr>        <tr>        <td>4.1.0</td>        <td>         引入 <var class="varname"><var class="varname">$_REQUEST</var></var>。        </td>       </tr>       </tbody>         </table>    </p>  </div>     <div class="refsect1 notes" id="refsect1-reserved.variables.request-notes">   <h3 class="title">注释</h3>   <blockquote class="note"><p><strong class="note">Note</strong>: <p class="para">“Superglobal”也称为自动化的全局变量。这就表示其在脚本的所有作用域中都是可用的。不需要在函数或方法中用 <strong class="command">global $variable;</strong> 来访问它。</p></p></blockquote>   <blockquote class="note"><p><strong class="note">Note</strong>:     <p class="para">     以<a href="http://php.net/manual/zh/features.commandline.php" class="link">命令行</a>方式运行时，将<em class="emphasis">不</em>包含 <a href="http://php.net/manual/zh/reserved.variables.argv.php" class="link">argv</a> 和 <a href="http://php.net/manual/zh/reserved.variables.argc.php" class="link">argc</a> 信息；它们将存在于 <var class="varname"><var class="varname"><a href="http://php.net/manual/zh/reserved.variables.server.php" class="classname">$_SERVER</a></var></var> <span class="type"><span class="type 数组">数组</span></span>。    </p>   </p></blockquote>   <blockquote class="note"><p><strong class="note">Note</strong>:     <p class="para">     由于 <var class="varname"><var class="varname">$_REQUEST</var></var> 中的变量通过 GET，POST 和 COOKIE 输入机制传递给脚本文件，因此可以被远程用户篡改而并不可信。这个数组的项目及其顺序依赖于 PHP 的 <a href="http://php.net/manual/zh/ini.core.php#ini.variables-order" class="link">variables_order</a> 指令的配置。    </p>   </p></blockquote>  </div>    <div class="refsect1 seealso" id="refsect1-reserved.variables.request-seealso">   <h3 class="title">参见</h3>   <ul class="simplelist">    <li class="member"><span class="function">{@link import_request_variables()} - 将 GET／POST／Cookie 变量导入到全局作用域中</span></li>    <li class="member"><a href="http://php.net/manual/zh/language.variables.external.php" class="link">处理外部变量</a></li>    <li class="member"><a href="http://php.net/manual/zh/book.filter.php" class="link">过滤器扩展</a></li>   </ul>  </div>    <div class="up"><a href="http://php.net/manual/zh/reserved.variables.php">预定义变量</a></div></div>
 */
$_REQUEST = array();

/**
 *<div id="reserved.variables.server" class="refentry">  <div class="refnamediv">   <h1 class="refname">$_SERVER</h1>   <h1 class="refname">$HTTP_SERVER_VARS [已删除]</h1>   <p class="refpurpose"><span class="refname">$_SERVER</span> -- <span class="refname">$HTTP_SERVER_VARS [已删除]</span> &mdash; <span class="dc-title">服务器和执行环境信息</span></p>   </div>    <div class="refsect1 description" id="refsect1-reserved.variables.server-description">   <h3 class="title">说明</h3>   <p class="para">    <var class="varname"><var class="varname">$_SERVER</var></var> 是一个包含了诸如头信息(header)、路径(path)、以及脚本位置(script locations)等等信息的数组。这个数组中的项目由 Web 服务器创建。不能保证每个服务器都提供全部项目；服务器可能会忽略一些，或者提供一些没有在这里列举出来的项目。这也就意味着大量的此类变量都会在<a href="http://www.faqs.org/rfcs/rfc3875" class="link external">&raquo;&nbsp;CGI 1.1 规范</a>中说明，所以应该仔细研究一下。   </p>   <blockquote class="note"><p><strong class="note">Note</strong>:    <span class="simpara">     PHP 5.4.0 之前，<var class="varname"><var class="varname">$HTTP_SERVER_VARS</var></var> 包含着相同的信息，但它不是一个<a href="http://php.net/manual/zh/language.variables.superglobals.php" class="link">超全局变量</a>。    (注意 <var class="varname"><var class="varname">$HTTP_SERVER_VARS</var></var> 与 <var class="varname"><var class="varname">$_SERVER</var></var> 是不同的变量，PHP处理它们的方式不同)   </span>   </p></blockquote>   </div>    <div class="refsect1 indices" id="refsect1-reserved.variables.server-indices">   <h3 class="title">目录</h3>    <p class="simpara">    在 <var class="varname"><var class="varname">$_SERVER</var></var> 中，你也许能够，也许不能够找到下面的这些元素。注意，如果以<a href="http://php.net/manual/zh/features.commandline.php" class="link">命令行</a>方式运行 PHP，下面列出的元素几乎没有有效的(或是没有任何实际意义的)。    </p>    <p class="para">    <dl>            <dt> &#039;<var class="varname"><var class="varname">PHP_SELF</var></var>&#039;</dt>       <dd>        <span class="simpara">        当前执行脚本的文件名，与 document root 有关。例如，在地址为 <var class="filename">http://example.com/foo/bar.php</var> 的脚本中使用 <var class="varname"><var class="varname">$_SERVER['PHP_SELF']</var></var> 将得到 <var class="filename">/foo/bar.php</var>。<a href="http://php.net/manual/zh/language.constants.predefined.php" class="link">__FILE__</a> 常量包含当前(例如包含)文件的完整路径和文件名。       </span>       <span class="simpara">        从 PHP 4.3.0 版本开始，如果 PHP 以命令行模式运行，这个变量将包含脚本名。之前的版本该变量不可用。       </span>      </dd>                  <dt> &#039;<a href="http://php.net/manual/zh/reserved.variables.argv.php" class="link">argv</a>&#039;</dt>       <dd>        <span class="simpara">         传递给该脚本的参数的数组。当脚本以命令行方式运行时，argv 变量传递给程序 C 语言样式的命令行参数。当通过 GET 方式调用时，该变量包含query string。       </span>      </dd>                  <dt> &#039;<a href="http://php.net/manual/zh/reserved.variables.argc.php" class="link">argc</a>&#039;</dt>       <dd>        <span class="simpara">        包含命令行模式下传递给该脚本的参数的数目(如果运行在命令行模式下)。       </span>      </dd>                  <dt> &#039;<var class="varname"><var class="varname">GATEWAY_INTERFACE</var></var>&#039;</dt>       <dd>        <span class="simpara">        服务器使用的 CGI 规范的版本；例如，“<em>CGI/1.1</em>”。       </span>      </dd>                  <dt> &#039;<var class="varname"><var class="varname">SERVER_ADDR</var></var>&#039;</dt>       <dd>        <span class="simpara">        当前运行脚本所在的服务器的 IP 地址。       </span>      </dd>                  <dt> &#039;<var class="varname"><var class="varname">SERVER_NAME</var></var>&#039;</dt>       <dd>        <span class="simpara">        当前运行脚本所在的服务器的主机名。如果脚本运行于虚拟主机中，该名称是由那个虚拟主机所设置的值决定。       </span>       <blockquote class="note"><p><strong class="note">Note</strong>:         <span class="simpara">         在 Apache 2 里，必须设置 <em>UseCanonicalName = On</em>         和 <em>ServerName</em>。         否则该值会由客户端提供，就有可能被伪造。         上下文有安全性要求的环境里，不应该依赖此值。        </span>       </p></blockquote>      </dd>                  <dt> &#039;<var class="varname"><var class="varname">SERVER_SOFTWARE</var></var>&#039;</dt>       <dd>        <span class="simpara">        服务器标识字符串，在响应请求时的头信息中给出。       </span>      </dd>                  <dt> &#039;<var class="varname"><var class="varname">SERVER_PROTOCOL</var></var>&#039;</dt>       <dd>        <span class="simpara">        请求页面时通信协议的名称和版本。例如，“HTTP/1.0”。       </span>      </dd>                      <dt> &#039;<var class="varname"><var class="varname">REQUEST_METHOD</var></var>&#039;</dt>       <dd>        <span class="simpara">        访问页面使用的请求方法；例如，“<em>GET</em>”, “<em>HEAD</em>”，“<em>POST</em>”，“<em>PUT</em>”。       </span>       <blockquote class="note"><p><strong class="note">Note</strong>:         <p class="para">         如果请求方法为 <em>HEAD</em>，PHP 脚本将在发送 Header 头信息之后终止(这意味着在产生任何输出后，不再有输出缓冲)。        </p>       </p></blockquote>      </dd>                  <dt> &#039;<var class="varname"><var class="varname">REQUEST_TIME</var></var>&#039;</dt>       <dd>        <span class="simpara">        请求开始时的时间戳。从 PHP 5.1.0 起可用。       </span>      </dd>                      <dt> &#039;<var class="varname"><var class="varname">REQUEST_TIME_FLOAT</var></var>&#039;</dt>       <dd>        <span class="simpara">        请求开始时的时间戳，微秒级别的精准度。        自 PHP 5.4.0 开始生效。       </span>      </dd>                       <dt> &#039;<var class="varname"><var class="varname">QUERY_STRING</var></var>&#039;</dt>       <dd>        <span class="simpara">        query string（查询字符串），如果有的话，通过它进行页面访问。       </span>      </dd>                  <dt> &#039;<var class="varname"><var class="varname">DOCUMENT_ROOT</var></var>&#039;</dt>       <dd>        <span class="simpara">        当前运行脚本所在的文档根目录。在服务器配置文件中定义。       </span>      </dd>                  <dt> &#039;<var class="varname"><var class="varname">HTTP_ACCEPT</var></var>&#039;</dt>       <dd>        <span class="simpara">        当前请求头中 <em>Accept:</em> 项的内容，如果存在的话。       </span>      </dd>                  <dt> &#039;<var class="varname"><var class="varname">HTTP_ACCEPT_CHARSET</var></var>&#039;</dt>       <dd>        <span class="simpara">        当前请求头中 <em>Accept-Charset:</em> 项的内容，如果存在的话。例如：“<em>iso-8859-1,*,utf-8</em>”。       </span>      </dd>                  <dt> &#039;<var class="varname"><var class="varname">HTTP_ACCEPT_ENCODING</var></var>&#039;</dt>       <dd>        <span class="simpara">        当前请求头中 <em>Accept-Encoding:</em> 项的内容，如果存在的话。例如：“<em>gzip</em>”。       </span>      </dd>                      <dt> &#039;<var class="varname"><var class="varname">HTTP_ACCEPT_LANGUAGE</var></var>&#039;</dt>       <dd>        <span class="simpara">        当前请求头中 <em>Accept-Language:</em> 项的内容，如果存在的话。例如：“<em>en</em>”。       </span>      </dd>                      <dt> &#039;<var class="varname"><var class="varname">HTTP_CONNECTION</var></var>&#039;</dt>       <dd>        <span class="simpara">        当前请求头中 <em>Connection:</em> 项的内容，如果存在的话。例如：“<em>Keep-Alive</em>”。       </span>      </dd>                  <dt> &#039;<var class="varname"><var class="varname">HTTP_HOST</var></var>&#039;</dt>       <dd>        <span class="simpara">        当前请求头中 <em>Host:</em> 项的内容，如果存在的话。       </span>      </dd>                  <dt> &#039;<var class="varname"><var class="varname">HTTP_REFERER</var></var>&#039;</dt>       <dd>        <span class="simpara">        引导用户代理到当前页的前一页的地址（如果存在）。由 user agent 设置决定。并不是所有的用户代理都会设置该项，有的还提供了修改 <var class="varname"><var class="varname">HTTP_REFERER</var></var> 的功能。简言之，该值并不可信。       </span>      </dd>                  <dt> &#039;<var class="varname"><var class="varname">HTTP_USER_AGENT</var></var>&#039;</dt>       <dd>        <span class="simpara">        当前请求头中 <em>User-Agent:</em> 项的内容，如果存在的话。该字符串表明了访问该页面的用户代理的信息。一个典型的例子是：<span class="computeroutput">Mozilla/4.5 [en] (X11; U;        Linux 2.2.9 i586)</span>。除此之外，你可以通过 <span class="function">{@link get_browser()}</span> 来使用该值，从而定制页面输出以便适应用户代理的性能。       </span>      </dd>                  <dt> &#039;<var class="varname"><var class="varname">HTTPS</var></var>&#039;</dt>       <dd>        <span class="simpara">       如果脚本是通过 HTTPS 协议被访问，则被设为一个非空的值。        </span>       <blockquote class="note"><p><strong class="note">Note</strong>:         <span class="simpara">         注意当使用 IIS 上的 ISAPI 方式时，如果不是通过 HTTPS 协议被访问，这个值将为 <em>off</em>。        </span>       </p></blockquote>      </dd>                  <dt> &#039;<var class="varname"><var class="varname">REMOTE_ADDR</var></var>&#039;</dt>       <dd>        <span class="simpara">        浏览当前页面的用户的 IP 地址。       </span>      </dd>                  <dt> &#039;<var class="varname"><var class="varname">REMOTE_HOST</var></var>&#039;</dt>       <dd>        <span class="simpara">        浏览当前页面的用户的主机名。DNS 反向解析不依赖于用户的 <var class="varname"><var class="varname">REMOTE_ADDR</var></var>。       </span>       <blockquote class="note"><p><strong class="note">Note</strong>:         <span class="simpara">         你的服务器必须被配置以便产生这个变量。例如在 Apache 中，你需要在 <var class="filename">httpd.conf</var> 中设置 <em>HostnameLookups On</em> 来产生它。参见 <span class="function">{@link gethostbyaddr()}</span>。        </span>       </p></blockquote>      </dd>                  <dt> &#039;<var class="varname"><var class="varname">REMOTE_PORT</var></var>&#039;</dt>       <dd>        <span class="simpara">        用户机器上连接到 Web 服务器所使用的端口号。       </span>      </dd>                 <dt> &#039;<var class="varname"><var class="varname">REMOTE_USER</var></var>&#039;</dt>       <dd>        <span class="simpara">         经验证的用户       </span>      </dd>                  <dt> &#039;<var class="varname"><var class="varname">REDIRECT_REMOTE_USER</var></var>&#039;</dt>       <dd>        <span class="simpara">         验证的用户，如果请求已在内部重定向。       </span>      </dd>                 <dt> &#039;<var class="varname"><var class="varname">SCRIPT_FILENAME</var></var>&#039;</dt>       <dd>        <p class="para">        当前执行脚本的绝对路径。        <blockquote class="note"><p><strong class="note">Note</strong>:          <p class="para">          如果在命令行界面（Command Line Interface, CLI）使用相对路径执行脚本，例如 <var class="filename">file.php</var> 或 <var class="filename">../file.php</var>，那么 <var class="varname"><var class="varname">$_SERVER['SCRIPT_FILENAME']</var></var> 将包含用户指定的相对路径。         </p>        </p></blockquote>       </p>      </dd>                  <dt> &#039;<var class="varname"><var class="varname">SERVER_ADMIN</var></var>&#039;</dt>       <dd>        <span class="simpara">        该值指明了 Apache 服务器配置文件中的 SERVER_ADMIN 参数。如果脚本运行在一个虚拟主机上，则该值是那个虚拟主机的值。        </span>      </dd>                      <dt> &#039;<var class="varname"><var class="varname">SERVER_PORT</var></var>&#039;</dt>       <dd>        <span class="simpara">         Web 服务器使用的端口。默认值为 “<em>80</em>”。如果使用 SSL 安全连接，则这个值为用户设置的 HTTP 端口。       </span>       <blockquote class="note"><p><strong class="note">Note</strong>:         <span class="simpara">         在 Apache 2 里，为了获取真实物理端口，必须设置 <em>UseCanonicalName = On</em> 以及 <em>UseCanonicalPhysicalPort = On</em>。         否则此值可能被伪造，不一定会返回真实端口值。         上下文有安全性要求的环境里，不应该依赖此值。        </span>       </p></blockquote>      </dd>                  <dt> &#039;<var class="varname"><var class="varname">SERVER_SIGNATURE</var></var>&#039;</dt>       <dd>        <span class="simpara">        包含了服务器版本和虚拟主机名的字符串。       </span>      </dd>                  <dt> &#039;<var class="varname"><var class="varname">PATH_TRANSLATED</var></var>&#039;</dt>       <dd>        <span class="simpara">        当前脚本所在文件系统（非文档根目录）的基本路径。这是在服务器进行虚拟到真实路径的映像后的结果。       </span>       <blockquote class="note"><p><strong class="note">Note</strong>:         <span class="simpara">        自 PHP 4.3.2 起，<span class="envar">PATH_TRANSLATED</span> 在 Apache 2 <acronym title="Server Application Programming Interface">SAPI</acronym> 模式下不再和 Apache 1 一样隐含赋值，而是若 Apache 不生成此值，PHP 便自己生成并将其值放入 <span class="envar">SCRIPT_FILENAME</span> 服务器常量中。这个修改遵守了 <acronym title="Common Gateway Interface">CGI</acronym> 规范，<span class="envar">PATH_TRANSLATED</span> 仅在 <span class="envar">PATH_INFO</span> 被定义的条件下才存在。        </span>        <span class="simpara">         Apache 2 用户可以在 <var class="filename">httpd.conf</var> 中设置 <em>AcceptPathInfo = On</em> 来定义 <span class="envar">PATH_INFO</span>。        </span>       </p></blockquote>      </dd>                  <dt> &#039;<var class="varname"><var class="varname">SCRIPT_NAME</var></var>&#039;</dt>       <dd>        <span class="simpara">        包含当前脚本的路径。这在页面需要指向自己时非常有用。<a href="http://php.net/manual/zh/language.constants.predefined.php" class="link">__FILE__</a> 常量包含当前脚本(例如包含文件)的完整路径和文件名。       </span>      </dd>                  <dt> &#039;<var class="varname"><var class="varname">REQUEST_URI</var></var>&#039;</dt>       <dd>        <span class="simpara">        URI 用来指定要访问的页面。例如 “<em>/index.html</em>”。       </span>      </dd>                  <dt> &#039;<var class="varname"><var class="varname">PHP_AUTH_DIGEST</var></var>&#039;</dt>       <dd>        <span class="simpara">        当作为 Apache 模块运行时，进行 HTTP Digest 认证的过程中，此变量被设置成客户端发送的“Authorization” HTTP 头内容（以便作进一步的认证操作）。        </span>      </dd>                  <dt> &#039;<var class="varname"><var class="varname">PHP_AUTH_USER</var></var>&#039;</dt>       <dd>        <span class="simpara">        当 PHP 运行在 Apache 或 IIS（PHP 5 是 ISAPI）模块方式下，并且正在使用 HTTP 认证功能，这个变量便是用户输入的用户名。       </span>      </dd>                  <dt> &#039;<var class="varname"><var class="varname">PHP_AUTH_PW</var></var>&#039;</dt>       <dd>        <span class="simpara">        当 PHP 运行在 Apache 或 IIS（PHP 5 是 ISAPI）模块方式下，并且正在使用 HTTP 认证功能，这个变量便是用户输入的密码。        </span>      </dd>                  <dt> &#039;<var class="varname"><var class="varname">AUTH_TYPE</var></var>&#039;</dt>       <dd>        <span class="simpara">        当 PHP 运行在 Apache 模块方式下，并且正在使用 HTTP 认证功能，这个变量便是认证的类型。       </span>      </dd>                  <dt> &#039;<var class="varname"><var class="varname">PATH_INFO</var></var>&#039;</dt>       <dd>        <span class="simpara">        包含由客户端提供的、跟在真实脚本名称之后并且在查询语句（query string）之前的路径信息，如果存在的话。例如，如果当前脚本是通过 URL <var class="filename">http://www.example.com/php/path_info.php/some/stuff?foo=bar</var> 被访问，那么 <var class="varname"><var class="varname">$_SERVER['PATH_INFO']</var></var> 将包含 <em>/some/stuff</em>。       </span>      </dd>                  <dt> &#039;<var class="varname"><var class="varname">ORIG_PATH_INFO</var></var>&#039;</dt>       <dd>        <span class="simpara">        在被 PHP 处理之前，“<var class="varname"><var class="varname">PATH_INFO</var></var>” 的原始版本。       </span>      </dd>           </dl>    </p>  </div>     <div class="refsect1 changelog" id="refsect1-reserved.variables.server-changelog">   <h3 class="title">更新日志</h3>   <p class="para">    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>5.4.0</td>        <td>         因为移除了 long array register 功能，<var class="varname"><var class="varname">$HTTP_SERVER_VARS</var></var> 不再有效。        </td>       </tr>        <tr>        <td>5.3.0</td>        <td>         废弃了使 <var class="varname"><var class="varname">$HTTP_SERVER_VARS</var></var> 生效的 <a href="http://php.net/manual/zh/ini.core.php#ini.register-long-arrays" class="link">register_long_arrays</a> 指令。        </td>       </tr>        <tr>        <td>4.1.0</td>        <td>         引入 <var class="varname"><var class="varname">$_SERVER</var></var>，弃用 <var class="varname"><var class="varname">$HTTP_SERVER_VARS</var></var>。        </td>       </tr>       </tbody>         </table>    </p>  </div>     <div class="refsect1 examples" id="refsect1-reserved.variables.server-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-295">     <p><strong>Example #1 <var class="varname"><var class="varname">$_SERVER</var></var> 范例</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #9876AA">$_SERVER</span><span style="color: #007700">[</span><span style="color: #DD0000">'SERVER_NAME'</span><span style="color: #007700">];<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>      <div class="example-contents"><p>以上例程的输出类似于：</p></div>     <div class="example-contents screen"> <div class="cdata"><pre> www.example.com </pre></div>     </div>    </div>   </p>  </div>     <div class="refsect1 notes" id="refsect1-reserved.variables.server-notes">   <h3 class="title">注释</h3>   <blockquote class="note"><p><strong class="note">Note</strong>: <p class="para">“Superglobal”也称为自动化的全局变量。这就表示其在脚本的所有作用域中都是可用的。不需要在函数或方法中用 <strong class="command">global $variable;</strong> 来访问它。</p></p></blockquote>  </div>    <div class="refsect1 seealso" id="refsect1-reserved.variables.server-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><a href="http://php.net/manual/zh/book.filter.php" class="link">过滤器扩展</a></li>    </ul>   </p>  </div>   <div class="up"><a href="http://php.net/manual/zh/reserved.variables.php">预定义变量</a></div></div>
 */
$_SERVER = array();
/**
 * @deprecated 4.1.0
 */
$HTTP_SERVER_VARS = array();

$_SERVER['PHP_SELF'] = '';
$_SERVER['argv'] = '';
$_SERVER['argc'] = '';
$_SERVER['GATEWAY_INTERFACE'] = 'CGI/1.1';
$_SERVER['SERVER_ADDR'] = '127.0.0.1';
$_SERVER['SERVER_NAME'] = 'localhost';
$_SERVER['SERVER_SOFTWARE'] = '';
$_SERVER['SERVER_PROTOCOL'] = 'HTTP/1.0';
$_SERVER['REQUEST_METHOD'] = 'GET';
$_SERVER['REQUEST_TIME'] = '';
$_SERVER['QUERY_STRING'] = '';
$_SERVER['DOCUMENT_ROOT'] = '';
$_SERVER['HTTP_ACCEPT'] = '';
$_SERVER['HTTP_ACCEPT_CHARSET'] = 'iso-8859-1,*,utf-8';
$_SERVER['HTTP_ACCEPT_ENCODING'] = 'gzip';
$_SERVER['HTTP_ACCEPT_LANGUAGE'] = 'en';
$_SERVER['HTTP_CONNECTION'] = 'Keep-Alive';
$_SERVER['HTTP_HOST'] = '';
$_SERVER['HTTP_REFERER'] = '';
$_SERVER['HTTP_USER_AGENT'] = 'Mozilla/4.5 [en] (X11; U; Linux 2.2.9 i586).';
$_SERVER['HTTPS'] = '';
$_SERVER['REMOTE_ADDR'] = '';
$_SERVER['REMOTE_HOST'] = '';
$_SERVER['REMOTE_PORT'] = '';
$_SERVER['SCRIPT_FILENAME'] = '';
$_SERVER['SERVER_ADMIN'] = '';
$_SERVER['SERVER_PORT'] = '80';
$_SERVER['SERVER_SIGNATURE'] = '';
$_SERVER['PATH_TRANSLATED'] = '';
$_SERVER['SCRIPT_NAME'] = '';
$_SERVER['REQUEST_URI'] = '/index.html';
$_SERVER['PHP_AUTH_DIGEST'] = '';
$_SERVER['PHP_AUTH_USER'] = '';
$_SERVER['PHP_AUTH_PW'] = '';
$_SERVER['AUTH_TYPE'] = '';
$_SERVER['PATH_INFO'] = '';
$_SERVER['ORIG_PATH_INFO'] = '';

/**
 *  <div id="reserved.variables.session" class="refentry">  <div class="refnamediv">   <h1 class="refname">$_SESSION</h1>   <h1 class="refname">$HTTP_SESSION_VARS [已弃用]</h1>   <p class="refpurpose"><span class="refname">$_SESSION</span> -- <span class="refname">$HTTP_SESSION_VARS [已弃用]</span> &mdash; <span class="dc-title">Session 变量</span></p>   </div>    <div class="refsect1 description" id="refsect1-reserved.variables.session-description">   <h3 class="title">说明</h3>   <p class="para">    当前脚本可用 SESSION 变量的数组。更多关于如何使用的信息，参见 <a href="http://php.net/manual/zh/ref.session.php" class="link">Session 函数</a> 文档。   </p>    <p class="simpara">    <var class="varname"><var class="varname">$HTTP_SESSION_VARS</var></var> 包含相同的信息，但它不是一个<a href="http://php.net/manual/zh/language.variables.superglobals.php" class="link">超全局变量</a>。    (注意 <var class="varname"><var class="varname">$HTTP_SESSION_VARS</var></var> 和 <var class="varname"><var class="varname">$_SESSION</var></var> 是不同的变量，PHP 处理它们的方式不同)   </p>  </div>     <div class="refsect1 changelog" id="refsect1-reserved.variables.session-changelog">   <h3 class="title">更新日志</h3>   <p class="para">    <table class="doctable informaltable">           <thead>       <tr>        <th>版本</th>        <th>说明</th>       </tr>       </thead>       <tbody class="tbody">       <tr>        <td>4.1.0</td>        <td>         引入 <var class="varname"><var class="varname">$_SESSION</var></var>，弃用 <var class="varname"><var class="varname">$HTTP_SESSION_VARS</var></var>。        </td>       </tr>       </tbody>         </table>    </p>  </div>     <div class="refsect1 notes" id="refsect1-reserved.variables.session-notes">   <h3 class="title">注释</h3>   <blockquote class="note"><p><strong class="note">Note</strong>: <p class="para">“Superglobal”也称为自动化的全局变量。这就表示其在脚本的所有作用域中都是可用的。不需要在函数或方法中用 <strong class="command">global $variable;</strong> 来访问它。</p></p></blockquote>  </div>     <div class="refsect1 seealso" id="refsect1-reserved.variables.session-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link session_start()} - 启动新会话或者重用现有会话</span></li>    </ul>   </p>  </div>   <div class="up"><a href="http://php.net/manual/zh/reserved.variables.php">预定义变量</a></div></div>
 */
$_SESSION = array();
/**
 * @deprecated 4.1.0
 */
$HTTP_SESSION_VARS = array();

/**
 * <div id="reserved.variables.argc" class="refentry">  <div class="refnamediv">   <h1 class="refname">$argc</h1>   <p class="refpurpose"><span class="refname">$argc</span> &mdash; <span class="dc-title">传递给脚本的参数数目</span></p>   </div>    <div class="refsect1 description" id="refsect1-reserved.variables.argc-description">   <h3 class="title">说明</h3>   <p class="para">    包含当运行于<a href="http://php.net/manual/zh/features.commandline.php" class="link">命令行</a>下时传递给当前脚本的参数的数目。   </p>   <blockquote class="note"><p><strong class="note">Note</strong>:     <span class="simpara">     脚本的文件名总是作为参数传递给当前脚本，因此 <var class="varname"><var class="varname">$argc</var></var> 的最小值为 <em>1</em>。    </span>   </p></blockquote>   <blockquote class="note"><p><strong class="note">Note</strong>:     <span class="simpara">     这个变量仅在 <a href="http://php.net/manual/zh/ini.core.php#ini.register-argc-argv" class="link">register_argc_argv</a> 打开时可用。    </span>   </p></blockquote>  </div>     <div class="refsect1 examples" id="refsect1-reserved.variables.argc-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-302">     <p><strong>Example #1 <var class="varname"><var class="varname">$argc</var></var> 范例</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$argc</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>      <div class="example-contents"><p>      当使用这个命令执行: php script.php arg1 arg2 arg3     </p></div>     <div class="example-contents"><p>以上例程的输出类似于：</p></div>     <div class="example-contents screen"> <div class="cdata"><pre> int(4) </pre></div>     </div>    </div>   </p>  </div>      <div class="refsect1 notes" id="refsect1-reserved.variables.argc-notes">   <h3 class="title">注释</h3>   <blockquote class="note"><p><strong class="note">Note</strong>:     <p class="para">     也可以在 <var class="varname"><var class="varname"><a href="http://php.net/manual/zh/reserved.variables.server.php" class="classname">$_SERVER['argc']</a></var></var> 中获取。    </p>   </p></blockquote>  </div>   <div class="refsect1 seealso" id="refsect1-reserved.variables.argc-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link getopt()} - 从命令行参数列表中获取选项</span></li>     <li class="member"><a href="http://php.net/manual/zh/reserved.variables.argv.php" class="link"><var class="varname"><var class="varname"><a href="http://php.net/manual/zh/reserved.variables.argv.php" class="classname">$argv</a></var></var></a></li>    </ul>   </p>  </div>  <div class="up"><a href="http://php.net/manual/zh/reserved.variables.php">预定义变量</a></div></div>
 */
$argc = 0;

/**
 *  <div id="reserved.variables.argv" class="refentry">  <div class="refnamediv">   <h1 class="refname">$argv</h1>   <p class="refpurpose"><span class="refname">$argv</span> &mdash; <span class="dc-title">传递给脚本的参数数组</span></p>   </div>    <div class="refsect1 description" id="refsect1-reserved.variables.argv-description">   <h3 class="title">说明</h3>   <p class="para">    包含当运行于<a href="http://php.net/manual/zh/features.commandline.php" class="link">命令行</a>下时传递给当前脚本的参数的数组。   </p>   <blockquote class="note"><p><strong class="note">Note</strong>:     <span class="simpara">     第一个参数总是当前脚本的文件名，因此 <var class="varname"><var class="varname">$argv[0]</var></var> 就是脚本文件名。    </span>   </p></blockquote>   <blockquote class="note"><p><strong class="note">Note</strong>:     <span class="simpara">     这个变量仅在 <a href="http://php.net/manual/zh/ini.core.php#ini.register-argc-argv" class="link">register_argc_argv</a> 打开时可用。    </span>   </p></blockquote>  </div>     <div class="refsect1 examples" id="refsect1-reserved.variables.argv-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-303">     <p><strong>Example #1 <var class="varname"><var class="varname">$argv</var></var> 范例</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$argv</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>      <div class="example-contents"><p>      当使用这个命令执行：php script.php arg1 arg2 arg3     </p></div>     <div class="example-contents"><p>以上例程的输出类似于：</p></div>     <div class="example-contents screen"> <div class="cdata"><pre> array(4) {   [0]=&gt;   string(10) &quot;script.php&quot;   [1]=&gt;   string(4) &quot;arg1&quot;   [2]=&gt;   string(4) &quot;arg2&quot;   [3]=&gt;   string(4) &quot;arg3&quot; } </pre></div>     </div>    </div>   </p>  </div>     <div class="refsect1 seealso" id="refsect1-reserved.variables.argv-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link getopt()} - 从命令行参数列表中获取选项</span></li>    </ul>   </p>  </div>   <div class="up"><a href="http://php.net/manual/zh/reserved.variables.php">预定义变量</a></div></div>
 */
$argv = array();

/**
 * <div id="reserved.variables.httprawpostdata" class="refentry">  <div class="refnamediv">   <h1 class="refname">$HTTP_RAW_POST_DATA</h1>   <p class="refpurpose"><span class="refname">$HTTP_RAW_POST_DATA</span> &mdash; <span class="dc-title">原生POST数据</span></p>   </div>    <div class="refsect1 description" id="refsect1-reserved.variables.httprawpostdata-description">   <h3 class="title">说明</h3>   <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This feature was <em class="emphasis">DEPRECATED</em> in PHP 5.6.0, and <em class="emphasis">REMOVED</em> as of PHP 7.0.0.</p></div>   <p class="para">    <var class="varname"><var class="varname">$HTTP_RAW_POST_DATA</var></var> 包含 POST 提交的原始数据。参见 <a href="http://php.net/manual/zh/ini.core.php#ini.always-populate-raw-post-data" class="link">always_populate_raw_post_data</a>   </p>   <p class="para">    一般而言，使用    <a href="http://php.net/manual/zh/wrappers.php.php#wrappers.php.input" class="link"><em>php://input</em></a>    代替 <var class="varname"><var class="varname">$HTTP_RAW_POST_DATA</var></var>。   </p>  </div>  <div class="up"><a href="http://php.net/manual/zh/reserved.variables.php">预定义变量</a></div></div>
 */
$HTTP_RAW_POST_DATA = '';

/**
 * <div id="reserved.variables.httpresponseheader" class="refentry">  <div class="refnamediv">   <h1 class="refname">$http_response_header</h1>   <p class="refpurpose"><span class="refname">$http_response_header</span> &mdash; <span class="dc-title">HTTP 响应头</span></p>   </div>    <div class="refsect1 description" id="refsect1-reserved.variables.httpresponseheader-description">   <h3 class="title">说明</h3>   <p class="para">    <var class="varname"><var class="varname">$http_response_header</var></var> <span class="type"><span class="type 数组">数组</span></span>与 <span class="function">{@link get_headers()}</span> 函数类似。当使用<a href="http://php.net/manual/zh/wrappers.http.php" class="link">HTTP 包装器</a>时，<var class="varname"><var class="varname">$http_response_header</var></var> 将会被 HTTP 响应头信息填充。<var class="varname"><var class="varname">$http_response_header</var></var> 将被创建于<a href="http://php.net/manual/zh/language.variables.scope.php" class="link">局部作用域</a>中。   </p>  </div>     <div class="refsect1 examples" id="refsect1-reserved.variables.httpresponseheader-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-301">     <p><strong>Example #1 <var class="varname"><var class="varname">$http_response_header</var></var> 范例</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function&nbsp;</span><span style="color: #9876AA">get_contents</span><span style="color: #007700">()&nbsp;{<br />&nbsp;&nbsp;</span><span style="color: #9876AA">file_get_contents</span><span style="color: #007700">(</span><span style="color: #DD0000">"http://example.com"</span><span style="color: #007700">);<br />&nbsp;&nbsp;</span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$http_response_header</span><span style="color: #007700">);<br />}<br /></span><span style="color: #9876AA">get_contents</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$http_response_header</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>      <div class="example-contents"><p>以上例程的输出类似于：</p></div>     <div class="example-contents screen"> <div class="cdata"><pre> array(9) {   [0]=&gt;   string(15) &quot;HTTP/1.1 200 OK&quot;   [1]=&gt;   string(35) &quot;Date: Sat, 12 Apr 2008 17:30:38 GMT&quot;   [2]=&gt;   string(29) &quot;Server: Apache/2.2.3 (CentOS)&quot;   [3]=&gt;   string(44) &quot;Last-Modified: Tue, 15 Nov 2005 13:24:10 GMT&quot;   [4]=&gt;   string(27) &quot;ETag: &quot;280100-1b6-80bfd280&quot;&quot;   [5]=&gt;   string(20) &quot;Accept-Ranges: bytes&quot;   [6]=&gt;   string(19) &quot;Content-Length: 438&quot;   [7]=&gt;   string(17) &quot;Connection: close&quot;   [8]=&gt;   string(38) &quot;Content-Type: text/html; charset=UTF-8&quot; } NULL </pre></div>     </div>    </div>   </p>  </div>    <div class="up"><a href="http://php.net/manual/zh/reserved.variables.php">预定义变量</a></div></div>
 */
$http_response_header = array();

/**
 * <div id="reserved.variables.phperrormsg" class="refentry">  <div class="refnamediv">   <h1 class="refname">$php_errormsg</h1>   <p class="refpurpose"><span class="refname">$php_errormsg</span> &mdash; <span class="dc-title">前一个错误信息</span></p>   </div>   <div id="reserved.variables.phperrormsg-refsynopsisdiv">   <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This feature has been <em class="emphasis">DEPRECATED</em> as of PHP 7.2.0. Relying on this feature is highly discouraged.</p></div>  </div>    <div class="refsect1 description" id="refsect1-reserved.variables.phperrormsg-description">   <h3 class="title">说明</h3>   <p class="para">    <var class="varname"><var class="varname">$php_errormsg</var></var> 变量包含由 PHP 生成的最新错误信息。这个变量只在错误发生的作用域内可用，并且要求 <a href="http://php.net/manual/zh/errorfunc.configuration.php#ini.track-errors" class="link">track_errors</a> 配置项是开启的（默认是关闭的）。   </p>   <div class="warning"><strong class="warning">Warning</strong>    <p class="simpara">     如果用户定义了错误处理句柄（<span class="function">{@link set_error_handler()}</span>）并且返回 <strong><code>FALSE</code></strong> 的时候，<var class="varname"><var class="varname">$php_errormsg</var></var> 就会被设置。    </p>   </div>  </div>     <div class="refsect1 examples" id="refsect1-reserved.variables.phperrormsg-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-300">     <p><strong>Example #1 <var class="varname"><var class="varname">$php_errormsg</var></var> 范例</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">@</span><span style="color: #9876AA">strpos</span><span style="color: #007700">();<br />echo&nbsp;</span><span style="color: #9876AA">$php_errormsg</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>      <div class="example-contents"><p>以上例程的输出类似于：</p></div>     <div class="example-contents screen"> <div class="cdata"><pre> Wrong parameter count for strpos() </pre></div>     </div>    </div>   </p>  </div>    <div class="up"><a href="http://php.net/manual/zh/reserved.variables.php">预定义变量</a></div></div>
 */
$php_errormsg = '';
