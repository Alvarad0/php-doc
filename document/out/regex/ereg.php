<?php

// Start of ereg v.

/**
*<div id="function.ereg" class="refentry">  <div class="refnamediv">   <h1 class="refname">ereg</h1>   <p class="verinfo">(PHP 4, PHP 5)</p><p class="refpurpose"><span class="refname">ereg</span> &mdash; <span class="dc-title">正则表达式匹配</span></p>   </div>  <div class="refsect1 unknown-unknown-seealsq" id="refsect1-function.ereg-unknown-unknown-seealsq">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">int</span> <span class="methodname"><strong>ereg</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$pattern</code></span>    , <span class="methodparam"><span class="type">string</span> <code class="parameter">$string</code></span>    [, <span class="methodparam"><span class="type">array</span> <code class="parameter reference">&$regs</code></span>   ] )</div>    <blockquote class="note"><p><strong class="note">Note</strong>:     <p class="para">     使用 Perl 兼容正则表达式语法的 <span class="function">{@link preg_match()}</span>     函数通常是比 <span class="function"><strong>ereg()</strong></span> 更快的替代方案。    </p>   </p></blockquote>   <p class="simpara">    以区分大小写的方式在 <code class="parameter">string</code>    中寻找与给定的正则表达式 <code class="parameter">pattern</code> 所匹配的子串。   </p>   <p class="simpara">    如果找到与 <code class="parameter">pattern</code>    中圆括号内的子模式相匹配的子串并且函数调用给出了第三个参数    <code class="parameter">regs</code>，则匹配项将被存入    <code class="parameter">regs</code> 数组中。$regs[1]    包含第一个左圆括号开始的子串，$regs[2]    包含第二个子串，以此类推。$regs[0] 包含整个匹配的字符串。   </p>   <blockquote class="note"><p><strong class="note">Note</strong>:     <span class="simpara">     直到 PHP 4.1.0 为止，<var class="varname"><var class="varname">$regs</var></var>     将被填充为正好十个单元，即使实际匹配的子串少于十个。这并不影响     <span class="function"><strong>ereg()</strong></span> 匹配更多子串的能力。如果没有找到匹配，则     <em>$regs</em> 不会被 <span class="function"><strong>ereg()</strong></span> 更改。    </span>   </p></blockquote>   <p class="simpara">    如果在 <code class="parameter">string</code>    中找到 <code class="parameter">pattern</code> 模式的匹配则返回    所匹配字符串的长度，如果没有找到匹配或出错则返回 <strong><code>FALSE</code></strong>。如果没有传递入可选参数    <code class="parameter">regs</code> 或者所匹配的字符串长度为 0，则本函数返回 1。   </p>   <p class="para">    以下代码片断接受 ISO 格式的日期（YYYY-MM-DD）然后以    DD.MM.YYYY 格式显示：   </p>   <p class="para">    <div class="example" id="example-5879">     <p><strong>Example #1 <span class="function"><strong>ereg()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">if&nbsp;(</span><span style="color: #9876AA">ereg&nbsp;</span><span style="color: #007700">(</span><span style="color: #DD0000">"([0-9]{4})-([0-9]{1,2})-([0-9]{1,2})"</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$date</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$regs</span><span style="color: #007700">))&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"</span><span style="color: #9876AA">$regs</span><span style="color: #007700">[</span><span style="color: #9876AA">3</span><span style="color: #007700">]</span><span style="color: #DD0000">.</span><span style="color: #9876AA">$regs</span><span style="color: #007700">[</span><span style="color: #9876AA">2</span><span style="color: #007700">]</span><span style="color: #DD0000">.</span><span style="color: #9876AA">$regs</span><span style="color: #007700">[</span><span style="color: #9876AA">1</span><span style="color: #007700">]</span><span style="color: #DD0000">"</span><span style="color: #007700">;<br />}&nbsp;else&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"Invalid&nbsp;date&nbsp;format:&nbsp;</span><span style="color: #9876AA">$date</span><span style="color: #DD0000">"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>     </div>   </p>   <p class="para">    参见 <span class="function">{@link eregi()}</span>，<span class="function">{@link ereg_replace()}</span>，<span class="function">{@link eregi_replace()}</span>，<span class="function">{@link preg_match()}</span>，<span class="function">{@link strpos()}</span>    和 <span class="function">{@link strstr()}</span>。   </p>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.regex.php">POSIX 正则表达式函数</a></div></div>
 * @return int the length of the matched string if a match for*/
function ereg ($pattern, $string, array &$regs = null) {}

/**
*<div id="function.ereg-replace" class="refentry">  <div class="refnamediv">   <h1 class="refname">ereg_replace</h1>   <p class="verinfo">(PHP 4, PHP 5)</p><p class="refpurpose"><span class="refname">ereg_replace</span> &mdash; <span class="dc-title">正则表达式替换</span></p>   </div>  <div class="refsect1 unknown-seealsp" id="refsect1-function.ereg-replace-unknown-seealsp">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">string</span> <span class="methodname"><strong>ereg_replace</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$pattern</code></span>    , <span class="methodparam"><span class="type">string</span> <code class="parameter">$replacement</code></span>    , <span class="methodparam"><span class="type">string</span> <code class="parameter">$string</code></span>    )</div>    <p class="simpara">    本函数在 <code class="parameter">string</code> 中扫描与    <code class="parameter">pattern</code> 匹配的部分，并将其替换为    <code class="parameter">replacement</code>。   </p>   <p class="simpara">    返回替换后的字符串。（如果没有可供替换的匹配项则会返回原字符串。）   </p>   <p class="simpara">    如果 <code class="parameter">pattern</code>    包含有括号内的子串，则 <code class="parameter">replacement</code>    可以包含形如    <em>\\<span class="replaceable">digit</span></em>    的子串，这些子串将被替换为数字表示的的第几个括号内的子串；<em>\\0</em>    则包含了字符串的整个内容。最多可以用九个子串。括号可以嵌套，此情形下以左圆括号来计算顺序。   </p>   <p class="simpara">    如果未在 <code class="parameter">string</code>    中找到匹配项，则    <code class="parameter">string</code> 将原样返回。   </p>   <p class="para">    例如，下面的代码片断输出    &quot;This was a test&quot; 三次：   </p>   <p class="para">    <div class="example" id="example-5876">     <p><strong>Example #1 <span class="function"><strong>ereg_replace()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$string&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">"This&nbsp;is&nbsp;a&nbsp;test"</span><span style="color: #007700">;<br />echo&nbsp;</span><span style="color: #9876AA">str_replace</span><span style="color: #007700">(</span><span style="color: #DD0000">"&nbsp;is"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"&nbsp;was"</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$string</span><span style="color: #007700">);<br />echo&nbsp;</span><span style="color: #9876AA">ereg_replace</span><span style="color: #007700">(</span><span style="color: #DD0000">"(&nbsp;)is"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"\\1was"</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$string</span><span style="color: #007700">);<br />echo&nbsp;</span><span style="color: #9876AA">ereg_replace</span><span style="color: #007700">(</span><span style="color: #DD0000">"((&nbsp;)is)"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"\\2was"</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$string</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>     </div>   </p>   <p class="para">    要注意的一点是如果在 <code class="parameter">replacement</code>    参数中使用了整数值，则可能得不到所期望的结果。这是因为    <span class="function"><strong>ereg_replace()</strong></span> 将把数字作为字符的序列值来解释并应用之。例如：   </p>   <p class="para">    <div class="example" id="example-5877">     <p><strong>Example #2 <span class="function"><strong>ereg_replace()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">//&nbsp;不能产生出期望的结果&nbsp;<br /></span><span style="color: #9876AA">$num&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">4</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$string&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">"This&nbsp;string&nbsp;has&nbsp;four&nbsp;words."</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$string&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">ereg_replace</span><span style="color: #007700">(</span><span style="color: #DD0000">'four'</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$num</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$string</span><span style="color: #007700">);<br />echo&nbsp;</span><span style="color: #9876AA">$string</span><span style="color: #007700">;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;Output:&nbsp;'This&nbsp;string&nbsp;has&nbsp;&nbsp;&nbsp;words.'&nbsp;<br /><br />//&nbsp;本例工作正常&nbsp;<br /></span><span style="color: #9876AA">$num&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'4'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$string&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">"This&nbsp;string&nbsp;has&nbsp;four&nbsp;words."</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$string&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">ereg_replace</span><span style="color: #007700">(</span><span style="color: #DD0000">'four'</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$num</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$string</span><span style="color: #007700">);<br />echo&nbsp;</span><span style="color: #9876AA">$string</span><span style="color: #007700">;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;Output:&nbsp;'This&nbsp;string&nbsp;has&nbsp;4&nbsp;words.'&nbsp;<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>     </div>   </p>   <p class="para">    <div class="example" id="example-5878">     <p><strong>Example #3 将 URL 替换为超连接</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$text&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">ereg_replace</span><span style="color: #007700">(</span><span style="color: #DD0000">"[[:alpha:]]+://[^&lt;&gt;[:space:]]+[[:alnum:]/]"</span><span style="color: #007700">,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #DD0000">"&lt;a&nbsp;href=\"\\0\"&gt;\\0&lt;/a&gt;"</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$text</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>     </div>   </p>   <div class="tip"><strong class="tip">Tip</strong>    <p class="para">     <span class="function">{@link preg_replace()}</span> 函数使用了     Perl 兼容正则表达式语法，通常是比     <span class="function"><strong>ereg_replace()</strong></span> 更快的替代方案。    </p>   </div>   <p class="para">    参见 <span class="function">{@link ereg()}</span>，<span class="function">{@link eregi()}</span>，<span class="function">{@link eregi_replace()}</span>，<span class="function">{@link str_replace()}</span>    和 <span class="function">{@link preg_match()}</span>。   </p>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.regex.php">POSIX 正则表达式函数</a></div></div>
 * @return string The modified string is returned. If no matches are found in*/
function ereg_replace ($pattern, $replacement, $string) {}

/**
*<div id="function.eregi" class="refentry">  <div class="refnamediv">   <h1 class="refname">eregi</h1>   <p class="verinfo">(PHP 4, PHP 5)</p><p class="refpurpose"><span class="refname">eregi</span> &mdash; <span class="dc-title">不区分大小写的正则表达式匹配</span></p>   </div>  <div class="refsect1 unknown-unknown-unknown-unknown-seealss" id="refsect1-function.eregi-unknown-unknown-unknown-unknown-seealss">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">int</span> <span class="methodname"><strong>eregi</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$pattern</code></span>    , <span class="methodparam"><span class="type">string</span> <code class="parameter">$string</code></span>    [, <span class="methodparam"><span class="type">array</span> <code class="parameter reference">&$regs</code></span>   ] )</div>    <p class="para rdfs-comment">    本函数和 <span class="function">{@link ereg()}</span>    完全相同，只除了在匹配字母字符时忽略大小写的区别。   </p>   <p class="para">    <div class="example" id="example-5881">     <p><strong>Example #1 <span class="function"><strong>eregi()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$string&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'XYZ'</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;if&nbsp;(</span><span style="color: #9876AA">eregi</span><span style="color: #007700">(</span><span style="color: #DD0000">'z'</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$string</span><span style="color: #007700">))&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"'</span><span style="color: #9876AA">$string</span><span style="color: #DD0000">'&nbsp;contains&nbsp;a&nbsp;'z'&nbsp;or&nbsp;'Z'!"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>     </div>   </p>   <p class="para">    参见 <span class="function">{@link ereg()}</span>，<span class="function">{@link ereg_replace()}</span>，<span class="function">{@link eregi_replace()}</span>，<span class="function">{@link stripos()}</span>    和 <span class="function">{@link stristr()}</span>。   </p>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.regex.php">POSIX 正则表达式函数</a></div></div>
 * @return int the length of the matched string if a match for*/
function eregi ($pattern, $string, array &$regs = null) {}

/**
*<div id="function.eregi-replace" class="refentry">  <div class="refnamediv">   <h1 class="refname">eregi_replace</h1>   <p class="verinfo">(PHP 4, PHP 5)</p><p class="refpurpose"><span class="refname">eregi_replace</span> &mdash; <span class="dc-title">不区分大小写的正则表达式替换</span></p>   </div>  <div class="refsect1 unknown-unknown-unknown-seealsr" id="refsect1-function.eregi-replace-unknown-unknown-unknown-seealsr">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">string</span> <span class="methodname"><strong>eregi_replace</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$pattern</code></span>    , <span class="methodparam"><span class="type">string</span> <code class="parameter">$replacement</code></span>    , <span class="methodparam"><span class="type">string</span> <code class="parameter">$string</code></span>    )</div>    <p class="para rdfs-comment">    本函数和 <span class="function">{@link ereg_replace()}</span>    完全相同，只除了在匹配字母字符时忽略大小写的区别。   </p>   <p class="para">    <div class="example" id="example-5880">     <p><strong>Example #1 高亮搜索结果</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$pattern&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'(&gt;[^&lt;]*)('</span><span style="color: #007700">.&nbsp;</span><span style="color: #9876AA">quotemeta</span><span style="color: #007700">(</span><span style="color: #9876AA">$_GET</span><span style="color: #007700">[</span><span style="color: #DD0000">'search'</span><span style="color: #007700">])&nbsp;.</span><span style="color: #DD0000">')'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$replacement&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'\\1&lt;span&nbsp;class="search"&gt;\\2&lt;/span&gt;'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$body&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">eregi_replace</span><span style="color: #007700">(</span><span style="color: #9876AA">$pattern</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$replacement</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$body</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>     </div>   </p>   <p class="para">    参见 <span class="function">{@link ereg()}</span>，<span class="function">{@link eregi()}</span>    和 <span class="function">{@link ereg_replace()}</span>。   </p>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.regex.php">POSIX 正则表达式函数</a></div></div>
 * @return string The modified string is returned. If no matches are found in*/
function eregi_replace ($pattern, $replacement, $string) {}

/**
*<div id="function.split" class="refentry">  <div class="refnamediv">   <h1 class="refname">split</h1>   <p class="verinfo">(PHP 4, PHP 5)</p><p class="refpurpose"><span class="refname">split</span> &mdash; <span class="dc-title">用正则表达式将字符串分割到数组中</span></p>   </div>  <div class="refsect1 unknown-unknown-unknown-unknown-unknown-seealst" id="refsect1-function.split-unknown-unknown-unknown-unknown-unknown-seealst">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">array</span> <span class="methodname"><strong>split</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$pattern</code></span>    , <span class="methodparam"><span class="type">string</span> <code class="parameter">$string</code></span>    [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$limit</code></span>   ] )</div>    <div class="tip"><strong class="tip">Tip</strong>    <p class="para">     <span class="function">{@link preg_split()}</span> 函数使用了     Perl 兼容正则表达式语法，通常是比     <span class="function"><strong>split()</strong></span> 更快的替代方案。如果不需要正则表达式的威力，则使用     <span class="function">{@link explode()}</span> 更快，这样就不会招致正则表达式引擎的浪费。    </p>   </div>   <p class="para">    本函数返回一个字符串数组，每个单元为    <code class="parameter">string</code> 经区分大小写的正则表达式    <code class="parameter">pattern</code> 作为边界分割出的子串。如果设定了    <code class="parameter">limit</code>，则返回的数组最多包含    <code class="parameter">limit</code> 个单元，而其中最后一个单元包含了    <code class="parameter">string</code> 中剩余的所有部分。如果出错，则    <span class="function"><strong>split()</strong></span> 返回 <strong><code>FALSE</code></strong>。   </p>   <p class="para">    将 <var class="filename">/etc/passwd</var> 中的前四个字段分割出来：   </p>   <p class="para">    <div class="example" id="example-5882">     <p><strong>Example #1 <span class="function"><strong>split()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">list(</span><span style="color: #9876AA">$user</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$pass</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$uid</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$gid</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$extra</span><span style="color: #007700">)&nbsp;=<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #9876AA">split&nbsp;</span><span style="color: #007700">(</span><span style="color: #DD0000">":"</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$passwd_line</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">5</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>     </div>   </p>   <p class="simpara">    如果字符串中有 <span class="replaceable">n</span> 个与    <code class="parameter">pattern</code> 匹配的项目，则返回的数组将包含    <em><span class="replaceable">n</span>+1</em> 个单元。例如，如果没有找到    <code class="parameter">pattern</code>，则会返回一个只有一个单元的数组。当然，如果    <code class="parameter">string</code> 为空也是这样。   </p>   <p class="para">    解析可能用斜线，点，或横线分割的日期：   </p>   <p class="para">    <div class="example" id="example-5883">     <p><strong>Example #2 <span class="function"><strong>split()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">//&nbsp;分隔符可以是斜线，点，或横线<br /></span><span style="color: #9876AA">$date&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">"04/30/1973"</span><span style="color: #007700">;<br />list(</span><span style="color: #9876AA">$month</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$day</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$year</span><span style="color: #007700">)&nbsp;=&nbsp;</span><span style="color: #9876AA">split&nbsp;</span><span style="color: #007700">(</span><span style="color: #DD0000">'[/.-]'</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$date</span><span style="color: #007700">);<br />echo&nbsp;</span><span style="color: #DD0000">"Month:&nbsp;</span><span style="color: #9876AA">$month</span><span style="color: #DD0000">;&nbsp;Day:&nbsp;</span><span style="color: #9876AA">$day</span><span style="color: #DD0000">;&nbsp;Year:&nbsp;</span><span style="color: #9876AA">$year</span><span style="color: #DD0000">&lt;br&nbsp;/&gt;\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>     </div>   </p>   <p class="para">    想仿效 Perl 中类似的 <strong class="command">@chars =    split(&#039;&#039;, $str)</strong> 行为，请参考    <span class="function">{@link preg_split()}</span> 或 <span class="function">{@link str_split()}</span> 函数中的例子。   </p>   <p class="para">    注意 <code class="parameter">pattern</code>    是一个正则表达式。如果想要用的分割字符是正则表达式中的特殊字符，要先将其转义。如果觉得    <span class="function"><strong>split()</strong></span>（或其它任何 regex 函数）行为古怪的话，请阅读包含在    PHP 发行包中 <var class="filename">regex/</var> 子目录下的    <var class="filename">regex.7</var> 文件。该文件是手册页面格式，可以用类似    <strong class="command">man /usr/local/src/regex/regex.7</strong> 的命令来阅读。   </p>   <p class="para">    参见 <span class="function">{@link preg_split()}</span>，<span class="function">{@link spliti()}</span>，<span class="function">{@link str_split()}</span>，<span class="function">{@link explode()}</span>，<span class="function">{@link implode()}</span>，<span class="function">{@link chunk_split()}</span>    和 <span class="function">{@link wordwrap()}</span>。   </p>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.regex.php">POSIX 正则表达式函数</a></div></div>
 * @return array an array of strings, each of which is a substring of*/
function split ($pattern, $string, $limit = -1) {}

/**
*<div id="function.spliti" class="refentry">  <div class="refnamediv">   <h1 class="refname">spliti</h1>   <p class="verinfo">(PHP 4 &gt;= 4.0.1, PHP 5)</p><p class="refpurpose"><span class="refname">spliti</span> &mdash; <span class="dc-title">用正则表达式不区分大小写将字符串分割到数组中</span></p>   </div>  <div class="refsect1 description" id="refsect1-function.spliti-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">array</span> <span class="methodname"><strong>spliti</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$pattern</code></span>    , <span class="methodparam"><span class="type">string</span> <code class="parameter">$string</code></span>    [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$limit</code><span class="initializer"> = -1</span></span>   ] )</div>      <p class="para rdfs-comment">      用正则表达式将一个 <code class="parameter">string</code> 分割成数组。     </p>   <p class="para">    本函数和 <span class="function">{@link split()}</span> 相同，只除了在匹配字母字符时忽略大小写的区别。   </p>   <div class="warning"><strong class="warning">Warning</strong><p class="simpara">自 PHP 5.3.0 起，已经<em class="emphasis">废弃</em>此函数。强烈建议不要应用此函数 。</p></div>  </div>    <div class="refsect1 parameters" id="refsect1-function.spliti-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">pattern</code></dt>       <dd>        <p class="para">        大小写不敏感的正则表达式。       </p>       <p class="para">        If you want to split on any of the characters which are considered        special by regular expressions, you&#039;ll need to escape them first. If        you think <span class="function"><strong>spliti()</strong></span> (or any other regex function, for        that matter) is doing something weird, please read the file        <var class="filename">regex.7</var>, included in the         <var class="filename">regex/</var> subdirectory of the PHP distribution. It&#039;s        in manpage format, so you&#039;ll want to do something along the lines of        <strong class="command">man /usr/local/src/regex/regex.7</strong> in order to read it.       </p>      </dd>                 <dt> <code class="parameter">string</code></dt>       <dd>        <p class="para">        输入的字符。       </p>      </dd>                 <dt> <code class="parameter">limit</code></dt>       <dd>        <p class="para">        如果设置了 <code class="parameter">limit</code>，返回的数组最多会包含 <code class="parameter">limit</code> 个元素，最后一个元素包含了剩下的全部  <code class="parameter">string</code>。       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.spliti-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    Returns an array of strings, each of which is a substring of    <code class="parameter">string</code> formed by splitting it on boundaries formed    by the case insensitive regular expression <code class="parameter">pattern</code>.   </p>   <p class="para">    If there are <span class="replaceable">n</span> occurrences of    <code class="parameter">pattern</code>, the returned array will contain    <em><span class="replaceable">n</span>+1</em> items. For example, if    there is no occurrence of <code class="parameter">pattern</code>, an array with    only one element will be returned. Of course, this is also true if    <code class="parameter">string</code> is empty. If an error occurs,    <span class="function"><strong>spliti()</strong></span> returns <strong><code>FALSE</code></strong>.   </p>  </div>    <div class="refsect1 examples" id="refsect1-function.spliti-examples">   <h3 class="title">范例</h3>   <p class="para">    本例用 &#039;a&#039; 做分隔符来分割一个字符串：    <div class="example" id="example-5884">     <p><strong>Example #1 <span class="function"><strong>spliti()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br />$string&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">"aBBBaCCCADDDaEEEaGGGA"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$chunks&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #9876AA">spliti&nbsp;</span><span style="color: #007700">(</span><span style="color: #DD0000">"a"</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">$string</span><span style="color: #007700">,&nbsp;</span><span style="color: #9876AA">5</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$chunks</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen"> <div class="cdata"><pre> Array (   [0] =&gt;   [1] =&gt; BBB   [2] =&gt; CCC   [3] =&gt; DDD   [4] =&gt; EEEaGGGA ) </pre></div>     </div>    </div>   </p>  </div>    <div class="refsect1 notes" id="refsect1-function.spliti-notes">   <h3 class="title">注释</h3>   <blockquote class="note"><p><strong class="note">Note</strong>: <p class="para">在 PHP 5.3.0 中，已放弃使用 regex 扩展而建议使用 <a href="http://php.net/manual/zh/book.pcre.php" class="link">PCRE 扩展</a>。调用此函数将会发出 <strong><code>E_DEPRECATED</code></strong> 通知。参见“<a href="http://php.net/manual/zh/reference.pcre.pattern.posix.php" class="link">差异列表</a>”可帮助你转为使用 PCRE。</p></p></blockquote>  </div>    <div class="refsect1 seealso" id="refsect1-function.spliti-seealso">   <h3 class="title">参见</h3>   <p class="para">    <ul class="simplelist">     <li class="member"><span class="function">{@link preg_split()} - 通过一个正则表达式分隔字符串</span></li>     <li class="member"><span class="function">{@link split()} - 用正则表达式将字符串分割到数组中</span></li>     <li class="member"><span class="function">{@link explode()} - 使用一个字符串分割另一个字符串</span></li>     <li class="member"><span class="function">{@link implode()} - 将一个一维数组的值转化为字符串</span></li>    </ul>   </p>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.regex.php">POSIX 正则表达式函数</a></div></div>
 * @return array an array of strings, each of which is a substring of*/
function spliti ($pattern, $string, $limit = -1) {}

/**
*<div id="function.sql-regcase" class="refentry">  <div class="refnamediv">   <h1 class="refname">sql_regcase</h1>   <p class="verinfo">(PHP 4, PHP 5)</p><p class="refpurpose"><span class="refname">sql_regcase</span> &mdash; <span class="dc-title">产生用于不区分大小的匹配的正则表达式</span></p>   </div>  <div class="refsect1 description" id="refsect1-function.sql-regcase-description">   <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="type">string</span> <span class="methodname"><strong>sql_regcase</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$string</code></span>    )</div>    <p class="para rdfs-comment">    产生用于不区分大小的匹配的正则表达式      </p>   <div class="warning"><strong class="warning">Warning</strong><p class="simpara">自 PHP 5.3.0 起，已经<em class="emphasis">废弃</em>此函数。强烈建议不要应用此函数 。</p></div>  </div>    <div class="refsect1 parameters" id="refsect1-function.sql-regcase-parameters">   <h3 class="title">参数</h3>   <p class="para">    <dl>            <dt> <code class="parameter">string</code></dt>       <dd>        <p class="para">        输入的字符。       </p>      </dd>          </dl>    </p>  </div>    <div class="refsect1 returnvalues" id="refsect1-function.sql-regcase-returnvalues">   <h3 class="title">返回值</h3>   <p class="para">    返回与 <code class="parameter">string</code>    相匹配的正则表达式，不论大小写字母。返回的表达式是将    <code class="parameter">string</code>    中的每个字母字符转换为方括号表达式，该方括号表达式包含了该字母的大小写形式。其它字符保留不变。   </p>  </div>    <div class="refsect1 examples" id="refsect1-function.sql-regcase-examples">   <h3 class="title">范例</h3>   <p class="para">    <div class="example" id="example-5885">     <p><strong>Example #1 <span class="function"><strong>sql_regcase()</strong></span> 例子</strong></p>     <div class="example-contents"> <div class="phpcode"><code><span style="color: #000000"> <span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #9876AA">sql_regcase</span><span style="color: #007700">(</span><span style="color: #DD0000">"Foo&nbsp;-&nbsp;bar."</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span> </span> </code></div>     </div>      <div class="example-contents"><p>以上例程会输出：</p></div>     <div class="example-contents screen"> <div class="cdata"><pre> [Ff][Oo][Oo] - [Bb][Aa][Rr]. </pre></div>     </div>    </div>   </p>   <p class="para">    可以用于在仅支持区分大小写正则表达式的产品中完成不区分大小写的模式匹配。   </p>  </div>    <div class="refsect1 notes" id="refsect1-function.sql-regcase-notes">   <h3 class="title">注释</h3>   <blockquote class="note"><p><strong class="note">Note</strong>: <p class="para">在 PHP 5.3.0 中，已放弃使用 regex 扩展而建议使用 <a href="http://php.net/manual/zh/book.pcre.php" class="link">PCRE 扩展</a>。调用此函数将会发出 <strong><code>E_DEPRECATED</code></strong> 通知。参见“<a href="http://php.net/manual/zh/reference.pcre.pattern.posix.php" class="link">差异列表</a>”可帮助你转为使用 PCRE。</p></p></blockquote>  </div>  <div class="up"><a href="http://php.net/manual/zh/ref.regex.php">POSIX 正则表达式函数</a></div></div>
 * @return string a valid regular expression which will match*/
function sql_regcase ($string) {}

// End of ereg v.
?>
